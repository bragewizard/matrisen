pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_labs = @import("std").zig.c_builtins.__builtin_labs;
pub const __builtin_llabs = @import("std").zig.c_builtins.__builtin_llabs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const __u_char = u8;
pub const __u_short = c_ushort;
pub const __u_int = c_uint;
pub const __u_long = c_ulong;
pub const __int8_t = i8;
pub const __uint8_t = u8;
pub const __int16_t = c_short;
pub const __uint16_t = c_ushort;
pub const __int32_t = c_int;
pub const __uint32_t = c_uint;
pub const __int64_t = c_long;
pub const __uint64_t = c_ulong;
pub const __int_least8_t = __int8_t;
pub const __uint_least8_t = __uint8_t;
pub const __int_least16_t = __int16_t;
pub const __uint_least16_t = __uint16_t;
pub const __int_least32_t = __int32_t;
pub const __uint_least32_t = __uint32_t;
pub const __int_least64_t = __int64_t;
pub const __uint_least64_t = __uint64_t;
pub const __quad_t = c_long;
pub const __u_quad_t = c_ulong;
pub const __intmax_t = c_long;
pub const __uintmax_t = c_ulong;
pub const __dev_t = c_ulong;
pub const __uid_t = c_uint;
pub const __gid_t = c_uint;
pub const __ino_t = c_ulong;
pub const __ino64_t = c_ulong;
pub const __mode_t = c_uint;
pub const __nlink_t = c_ulong;
pub const __off_t = c_long;
pub const __off64_t = c_long;
pub const __pid_t = c_int;
pub const __fsid_t = extern struct {
    __val: [2]c_int = @import("std").mem.zeroes([2]c_int),
};
pub const __clock_t = c_long;
pub const __rlim_t = c_ulong;
pub const __rlim64_t = c_ulong;
pub const __id_t = c_uint;
pub const __time_t = c_long;
pub const __useconds_t = c_uint;
pub const __suseconds_t = c_long;
pub const __suseconds64_t = c_long;
pub const __daddr_t = c_int;
pub const __key_t = c_int;
pub const __clockid_t = c_int;
pub const __timer_t = ?*anyopaque;
pub const __blksize_t = c_long;
pub const __blkcnt_t = c_long;
pub const __blkcnt64_t = c_long;
pub const __fsblkcnt_t = c_ulong;
pub const __fsblkcnt64_t = c_ulong;
pub const __fsfilcnt_t = c_ulong;
pub const __fsfilcnt64_t = c_ulong;
pub const __fsword_t = c_long;
pub const __ssize_t = c_long;
pub const __syscall_slong_t = c_long;
pub const __syscall_ulong_t = c_ulong;
pub const __loff_t = __off64_t;
pub const __caddr_t = [*c]u8;
pub const __intptr_t = c_long;
pub const __socklen_t = c_uint;
pub const __sig_atomic_t = c_int;
pub const int_least8_t = __int_least8_t;
pub const int_least16_t = __int_least16_t;
pub const int_least32_t = __int_least32_t;
pub const int_least64_t = __int_least64_t;
pub const uint_least8_t = __uint_least8_t;
pub const uint_least16_t = __uint_least16_t;
pub const uint_least32_t = __uint_least32_t;
pub const uint_least64_t = __uint_least64_t;
pub const int_fast8_t = i8;
pub const int_fast16_t = c_long;
pub const int_fast32_t = c_long;
pub const int_fast64_t = c_long;
pub const uint_fast8_t = u8;
pub const uint_fast16_t = c_ulong;
pub const uint_fast32_t = c_ulong;
pub const uint_fast64_t = c_ulong;
pub const intmax_t = __intmax_t;
pub const uintmax_t = __uintmax_t;
pub const __gwchar_t = c_int;
pub const imaxdiv_t = extern struct {
    quot: c_long = @import("std").mem.zeroes(c_long),
    rem: c_long = @import("std").mem.zeroes(c_long),
};
pub extern fn imaxabs(__n: intmax_t) intmax_t;
pub extern fn imaxdiv(__numer: intmax_t, __denom: intmax_t) imaxdiv_t;
pub extern fn strtoimax(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int) intmax_t;
pub extern fn strtoumax(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int) uintmax_t;
pub extern fn wcstoimax(noalias __nptr: [*c]const __gwchar_t, noalias __endptr: [*c][*c]__gwchar_t, __base: c_int) intmax_t;
pub extern fn wcstoumax(noalias __nptr: [*c]const __gwchar_t, noalias __endptr: [*c][*c]__gwchar_t, __base: c_int) uintmax_t;
pub const struct___va_list_tag_1 = extern struct {
    gp_offset: c_uint = @import("std").mem.zeroes(c_uint),
    fp_offset: c_uint = @import("std").mem.zeroes(c_uint),
    overflow_arg_area: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    reg_save_area: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const __builtin_va_list = [1]struct___va_list_tag_1;
pub const __gnuc_va_list = __builtin_va_list;
pub const va_list = __builtin_va_list;
pub extern fn memcpy(__dest: ?*anyopaque, __src: ?*const anyopaque, __n: c_ulong) ?*anyopaque;
pub extern fn memmove(__dest: ?*anyopaque, __src: ?*const anyopaque, __n: c_ulong) ?*anyopaque;
pub extern fn memccpy(__dest: ?*anyopaque, __src: ?*const anyopaque, __c: c_int, __n: c_ulong) ?*anyopaque;
pub extern fn memset(__s: ?*anyopaque, __c: c_int, __n: c_ulong) ?*anyopaque;
pub extern fn memcmp(__s1: ?*const anyopaque, __s2: ?*const anyopaque, __n: c_ulong) c_int;
pub extern fn __memcmpeq(__s1: ?*const anyopaque, __s2: ?*const anyopaque, __n: usize) c_int;
pub extern fn memchr(__s: ?*const anyopaque, __c: c_int, __n: c_ulong) ?*anyopaque;
pub extern fn strcpy(__dest: [*c]u8, __src: [*c]const u8) [*c]u8;
pub extern fn strncpy(__dest: [*c]u8, __src: [*c]const u8, __n: c_ulong) [*c]u8;
pub extern fn strcat(__dest: [*c]u8, __src: [*c]const u8) [*c]u8;
pub extern fn strncat(__dest: [*c]u8, __src: [*c]const u8, __n: c_ulong) [*c]u8;
pub extern fn strcmp(__s1: [*c]const u8, __s2: [*c]const u8) c_int;
pub extern fn strncmp(__s1: [*c]const u8, __s2: [*c]const u8, __n: c_ulong) c_int;
pub extern fn strcoll(__s1: [*c]const u8, __s2: [*c]const u8) c_int;
pub extern fn strxfrm(__dest: [*c]u8, __src: [*c]const u8, __n: c_ulong) c_ulong;
pub const struct___locale_data_2 = opaque {};
pub const struct___locale_struct = extern struct {
    __locales: [13]?*struct___locale_data_2 = @import("std").mem.zeroes([13]?*struct___locale_data_2),
    __ctype_b: [*c]const c_ushort = @import("std").mem.zeroes([*c]const c_ushort),
    __ctype_tolower: [*c]const c_int = @import("std").mem.zeroes([*c]const c_int),
    __ctype_toupper: [*c]const c_int = @import("std").mem.zeroes([*c]const c_int),
    __names: [13][*c]const u8 = @import("std").mem.zeroes([13][*c]const u8),
};
pub const __locale_t = [*c]struct___locale_struct;
pub const locale_t = __locale_t;
pub extern fn strcoll_l(__s1: [*c]const u8, __s2: [*c]const u8, __l: locale_t) c_int;
pub extern fn strxfrm_l(__dest: [*c]u8, __src: [*c]const u8, __n: usize, __l: locale_t) usize;
pub extern fn strdup(__s: [*c]const u8) [*c]u8;
pub extern fn strndup(__string: [*c]const u8, __n: c_ulong) [*c]u8;
pub extern fn strchr(__s: [*c]const u8, __c: c_int) [*c]u8;
pub extern fn strrchr(__s: [*c]const u8, __c: c_int) [*c]u8;
pub extern fn strchrnul(__s: [*c]const u8, __c: c_int) [*c]u8;
pub extern fn strcspn(__s: [*c]const u8, __reject: [*c]const u8) c_ulong;
pub extern fn strspn(__s: [*c]const u8, __accept: [*c]const u8) c_ulong;
pub extern fn strpbrk(__s: [*c]const u8, __accept: [*c]const u8) [*c]u8;
pub extern fn strstr(__haystack: [*c]const u8, __needle: [*c]const u8) [*c]u8;
pub extern fn strtok(__s: [*c]u8, __delim: [*c]const u8) [*c]u8;
pub extern fn __strtok_r(noalias __s: [*c]u8, noalias __delim: [*c]const u8, noalias __save_ptr: [*c][*c]u8) [*c]u8;
pub extern fn strtok_r(noalias __s: [*c]u8, noalias __delim: [*c]const u8, noalias __save_ptr: [*c][*c]u8) [*c]u8;
pub extern fn strcasestr(__haystack: [*c]const u8, __needle: [*c]const u8) [*c]u8;
pub extern fn memmem(__haystack: ?*const anyopaque, __haystacklen: usize, __needle: ?*const anyopaque, __needlelen: usize) ?*anyopaque;
pub extern fn __mempcpy(noalias __dest: ?*anyopaque, noalias __src: ?*const anyopaque, __n: usize) ?*anyopaque;
pub extern fn mempcpy(__dest: ?*anyopaque, __src: ?*const anyopaque, __n: c_ulong) ?*anyopaque;
pub extern fn strlen(__s: [*c]const u8) c_ulong;
pub extern fn strnlen(__string: [*c]const u8, __maxlen: usize) usize;
pub extern fn strerror(__errnum: c_int) [*c]u8;
pub extern fn strerror_r(__errnum: c_int, __buf: [*c]u8, __buflen: usize) c_int;
pub extern fn strerror_l(__errnum: c_int, __l: locale_t) [*c]u8;
pub extern fn bcmp(__s1: ?*const anyopaque, __s2: ?*const anyopaque, __n: c_ulong) c_int;
pub extern fn bcopy(__src: ?*const anyopaque, __dest: ?*anyopaque, __n: c_ulong) void;
pub extern fn bzero(__s: ?*anyopaque, __n: c_ulong) void;
pub extern fn index(__s: [*c]const u8, __c: c_int) [*c]u8;
pub extern fn rindex(__s: [*c]const u8, __c: c_int) [*c]u8;
pub extern fn ffs(__i: c_int) c_int;
pub extern fn ffsl(__l: c_long) c_int;
pub extern fn ffsll(__ll: c_longlong) c_int;
pub extern fn strcasecmp(__s1: [*c]const u8, __s2: [*c]const u8) c_int;
pub extern fn strncasecmp(__s1: [*c]const u8, __s2: [*c]const u8, __n: c_ulong) c_int;
pub extern fn strcasecmp_l(__s1: [*c]const u8, __s2: [*c]const u8, __loc: locale_t) c_int;
pub extern fn strncasecmp_l(__s1: [*c]const u8, __s2: [*c]const u8, __n: usize, __loc: locale_t) c_int;
pub extern fn explicit_bzero(__s: ?*anyopaque, __n: usize) void;
pub extern fn strsep(noalias __stringp: [*c][*c]u8, noalias __delim: [*c]const u8) [*c]u8;
pub extern fn strsignal(__sig: c_int) [*c]u8;
pub extern fn __stpcpy(noalias __dest: [*c]u8, noalias __src: [*c]const u8) [*c]u8;
pub extern fn stpcpy(__dest: [*c]u8, __src: [*c]const u8) [*c]u8;
pub extern fn __stpncpy(noalias __dest: [*c]u8, noalias __src: [*c]const u8, __n: usize) [*c]u8;
pub extern fn stpncpy(__dest: [*c]u8, __src: [*c]const u8, __n: c_ulong) [*c]u8;
pub extern fn strlcpy(__dest: [*c]u8, __src: [*c]const u8, __n: c_ulong) c_ulong;
pub extern fn strlcat(__dest: [*c]u8, __src: [*c]const u8, __n: c_ulong) c_ulong;
pub const ptrdiff_t = c_long;
pub const wchar_t = c_int;
pub const max_align_t = extern struct {
    __clang_max_align_nonce1: c_longlong align(8) = @import("std").mem.zeroes(c_longlong),
    __clang_max_align_nonce2: c_longdouble align(16) = @import("std").mem.zeroes(c_longdouble),
};
pub const _Float32 = f32;
pub const _Float64 = f64;
pub const _Float32x = f64;
pub const _Float64x = c_longdouble;
pub const wint_t = c_uint;
const union_unnamed_3 = extern union {
    __wch: c_uint,
    __wchb: [4]u8,
};
pub const __mbstate_t = extern struct {
    __count: c_int = @import("std").mem.zeroes(c_int),
    __value: union_unnamed_3 = @import("std").mem.zeroes(union_unnamed_3),
};
pub const mbstate_t = __mbstate_t;
pub const struct__IO_marker = opaque {};
pub const _IO_lock_t = anyopaque;
pub const struct__IO_codecvt = opaque {};
pub const struct__IO_wide_data = opaque {};
pub const struct__IO_FILE = extern struct {
    _flags: c_int = @import("std").mem.zeroes(c_int),
    _IO_read_ptr: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _IO_read_end: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _IO_read_base: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _IO_write_base: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _IO_write_ptr: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _IO_write_end: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _IO_buf_base: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _IO_buf_end: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _IO_save_base: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _IO_backup_base: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _IO_save_end: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _markers: ?*struct__IO_marker = @import("std").mem.zeroes(?*struct__IO_marker),
    _chain: [*c]struct__IO_FILE = @import("std").mem.zeroes([*c]struct__IO_FILE),
    _fileno: c_int = @import("std").mem.zeroes(c_int),
    _flags2: c_int = @import("std").mem.zeroes(c_int),
    _old_offset: __off_t = @import("std").mem.zeroes(__off_t),
    _cur_column: c_ushort = @import("std").mem.zeroes(c_ushort),
    _vtable_offset: i8 = @import("std").mem.zeroes(i8),
    _shortbuf: [1]u8 = @import("std").mem.zeroes([1]u8),
    _lock: ?*_IO_lock_t = @import("std").mem.zeroes(?*_IO_lock_t),
    _offset: __off64_t = @import("std").mem.zeroes(__off64_t),
    _codecvt: ?*struct__IO_codecvt = @import("std").mem.zeroes(?*struct__IO_codecvt),
    _wide_data: ?*struct__IO_wide_data = @import("std").mem.zeroes(?*struct__IO_wide_data),
    _freeres_list: [*c]struct__IO_FILE = @import("std").mem.zeroes([*c]struct__IO_FILE),
    _freeres_buf: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    __pad5: usize = @import("std").mem.zeroes(usize),
    _mode: c_int = @import("std").mem.zeroes(c_int),
    _unused2: [20]u8 = @import("std").mem.zeroes([20]u8),
};
pub const __FILE = struct__IO_FILE;
pub const FILE = struct__IO_FILE;
pub const struct_tm = opaque {};
pub extern fn wcscpy(noalias __dest: [*c]wchar_t, noalias __src: [*c]const wchar_t) [*c]wchar_t;
pub extern fn wcsncpy(noalias __dest: [*c]wchar_t, noalias __src: [*c]const wchar_t, __n: usize) [*c]wchar_t;
pub extern fn wcslcpy(noalias __dest: [*c]wchar_t, noalias __src: [*c]const wchar_t, __n: usize) usize;
pub extern fn wcslcat(noalias __dest: [*c]wchar_t, noalias __src: [*c]const wchar_t, __n: usize) usize;
pub extern fn wcscat(noalias __dest: [*c]wchar_t, noalias __src: [*c]const wchar_t) [*c]wchar_t;
pub extern fn wcsncat(noalias __dest: [*c]wchar_t, noalias __src: [*c]const wchar_t, __n: usize) [*c]wchar_t;
pub extern fn wcscmp(__s1: [*c]const c_int, __s2: [*c]const c_int) c_int;
pub extern fn wcsncmp(__s1: [*c]const c_int, __s2: [*c]const c_int, __n: c_ulong) c_int;
pub extern fn wcscasecmp(__s1: [*c]const wchar_t, __s2: [*c]const wchar_t) c_int;
pub extern fn wcsncasecmp(__s1: [*c]const wchar_t, __s2: [*c]const wchar_t, __n: usize) c_int;
pub extern fn wcscasecmp_l(__s1: [*c]const wchar_t, __s2: [*c]const wchar_t, __loc: locale_t) c_int;
pub extern fn wcsncasecmp_l(__s1: [*c]const wchar_t, __s2: [*c]const wchar_t, __n: usize, __loc: locale_t) c_int;
pub extern fn wcscoll(__s1: [*c]const wchar_t, __s2: [*c]const wchar_t) c_int;
pub extern fn wcsxfrm(noalias __s1: [*c]wchar_t, noalias __s2: [*c]const wchar_t, __n: usize) usize;
pub extern fn wcscoll_l(__s1: [*c]const wchar_t, __s2: [*c]const wchar_t, __loc: locale_t) c_int;
pub extern fn wcsxfrm_l(__s1: [*c]wchar_t, __s2: [*c]const wchar_t, __n: usize, __loc: locale_t) usize;
pub extern fn wcsdup(__s: [*c]const wchar_t) [*c]wchar_t;
pub extern fn wcschr(__wcs: [*c]const c_int, __wc: c_int) [*c]c_int;
pub extern fn wcsrchr(__wcs: [*c]const wchar_t, __wc: wchar_t) [*c]wchar_t;
pub extern fn wcscspn(__wcs: [*c]const wchar_t, __reject: [*c]const wchar_t) usize;
pub extern fn wcsspn(__wcs: [*c]const wchar_t, __accept: [*c]const wchar_t) usize;
pub extern fn wcspbrk(__wcs: [*c]const wchar_t, __accept: [*c]const wchar_t) [*c]wchar_t;
pub extern fn wcsstr(__haystack: [*c]const wchar_t, __needle: [*c]const wchar_t) [*c]wchar_t;
pub extern fn wcstok(noalias __s: [*c]wchar_t, noalias __delim: [*c]const wchar_t, noalias __ptr: [*c][*c]wchar_t) [*c]wchar_t;
pub extern fn wcslen(__s: [*c]const c_int) c_ulong;
pub extern fn wcsnlen(__s: [*c]const wchar_t, __maxlen: usize) usize;
pub extern fn wmemchr(__s: [*c]const c_int, __c: c_int, __n: c_ulong) [*c]c_int;
pub extern fn wmemcmp(__s1: [*c]const c_int, __s2: [*c]const c_int, __n: c_ulong) c_int;
pub extern fn wmemcpy(__s1: [*c]c_int, __s2: [*c]const c_int, __n: c_ulong) [*c]c_int;
pub extern fn wmemmove(__s1: [*c]c_int, __s2: [*c]const c_int, __n: c_ulong) [*c]c_int;
pub extern fn wmemset(__s: [*c]wchar_t, __c: wchar_t, __n: usize) [*c]wchar_t;
pub extern fn btowc(__c: c_int) wint_t;
pub extern fn wctob(__c: wint_t) c_int;
pub extern fn mbsinit(__ps: [*c]const mbstate_t) c_int;
pub extern fn mbrtowc(noalias __pwc: [*c]wchar_t, noalias __s: [*c]const u8, __n: usize, noalias __p: [*c]mbstate_t) usize;
pub extern fn wcrtomb(noalias __s: [*c]u8, __wc: wchar_t, noalias __ps: [*c]mbstate_t) usize;
pub extern fn __mbrlen(noalias __s: [*c]const u8, __n: usize, noalias __ps: [*c]mbstate_t) usize;
pub extern fn mbrlen(noalias __s: [*c]const u8, __n: usize, noalias __ps: [*c]mbstate_t) usize;
pub extern fn mbsrtowcs(noalias __dst: [*c]wchar_t, noalias __src: [*c][*c]const u8, __len: usize, noalias __ps: [*c]mbstate_t) usize;
pub extern fn wcsrtombs(noalias __dst: [*c]u8, noalias __src: [*c][*c]const wchar_t, __len: usize, noalias __ps: [*c]mbstate_t) usize;
pub extern fn mbsnrtowcs(noalias __dst: [*c]wchar_t, noalias __src: [*c][*c]const u8, __nmc: usize, __len: usize, noalias __ps: [*c]mbstate_t) usize;
pub extern fn wcsnrtombs(noalias __dst: [*c]u8, noalias __src: [*c][*c]const wchar_t, __nwc: usize, __len: usize, noalias __ps: [*c]mbstate_t) usize;
pub extern fn wcstod(noalias __nptr: [*c]const wchar_t, noalias __endptr: [*c][*c]wchar_t) f64;
pub extern fn wcstof(noalias __nptr: [*c]const wchar_t, noalias __endptr: [*c][*c]wchar_t) f32;
pub extern fn wcstold(noalias __nptr: [*c]const wchar_t, noalias __endptr: [*c][*c]wchar_t) c_longdouble;
pub extern fn wcstol(noalias __nptr: [*c]const wchar_t, noalias __endptr: [*c][*c]wchar_t, __base: c_int) c_long;
pub extern fn wcstoul(noalias __nptr: [*c]const wchar_t, noalias __endptr: [*c][*c]wchar_t, __base: c_int) c_ulong;
pub extern fn wcstoll(noalias __nptr: [*c]const wchar_t, noalias __endptr: [*c][*c]wchar_t, __base: c_int) c_longlong;
pub extern fn wcstoull(noalias __nptr: [*c]const wchar_t, noalias __endptr: [*c][*c]wchar_t, __base: c_int) c_ulonglong;
pub extern fn wcpcpy(noalias __dest: [*c]wchar_t, noalias __src: [*c]const wchar_t) [*c]wchar_t;
pub extern fn wcpncpy(noalias __dest: [*c]wchar_t, noalias __src: [*c]const wchar_t, __n: usize) [*c]wchar_t;
pub extern fn open_wmemstream(__bufloc: [*c][*c]wchar_t, __sizeloc: [*c]usize) [*c]__FILE;
pub extern fn fwide(__fp: [*c]__FILE, __mode: c_int) c_int;
pub extern fn fwprintf(noalias __stream: [*c]__FILE, noalias __format: [*c]const wchar_t, ...) c_int;
pub extern fn wprintf(noalias __format: [*c]const wchar_t, ...) c_int;
pub extern fn swprintf(noalias __s: [*c]wchar_t, __n: usize, noalias __format: [*c]const wchar_t, ...) c_int;
pub extern fn vfwprintf(noalias __s: [*c]__FILE, noalias __format: [*c]const wchar_t, __arg: [*c]struct___va_list_tag_1) c_int;
pub extern fn vwprintf(noalias __format: [*c]const wchar_t, __arg: [*c]struct___va_list_tag_1) c_int;
pub extern fn vswprintf(noalias __s: [*c]wchar_t, __n: usize, noalias __format: [*c]const wchar_t, __arg: [*c]struct___va_list_tag_1) c_int;
pub extern fn fwscanf(noalias __stream: [*c]__FILE, noalias __format: [*c]const wchar_t, ...) c_int;
pub extern fn wscanf(noalias __format: [*c]const wchar_t, ...) c_int;
pub extern fn swscanf(noalias __s: [*c]const wchar_t, noalias __format: [*c]const wchar_t, ...) c_int;
pub extern fn vfwscanf(noalias __s: [*c]__FILE, noalias __format: [*c]const wchar_t, __arg: [*c]struct___va_list_tag_1) c_int;
pub extern fn vwscanf(noalias __format: [*c]const wchar_t, __arg: [*c]struct___va_list_tag_1) c_int;
pub extern fn vswscanf(noalias __s: [*c]const wchar_t, noalias __format: [*c]const wchar_t, __arg: [*c]struct___va_list_tag_1) c_int;
pub extern fn fgetwc(__stream: [*c]__FILE) wint_t;
pub extern fn getwc(__stream: [*c]__FILE) wint_t;
pub extern fn getwchar() wint_t;
pub extern fn fputwc(__wc: wchar_t, __stream: [*c]__FILE) wint_t;
pub extern fn putwc(__wc: wchar_t, __stream: [*c]__FILE) wint_t;
pub extern fn putwchar(__wc: wchar_t) wint_t;
pub extern fn fgetws(noalias __ws: [*c]wchar_t, __n: c_int, noalias __stream: [*c]__FILE) [*c]wchar_t;
pub extern fn fputws(noalias __ws: [*c]const wchar_t, noalias __stream: [*c]__FILE) c_int;
pub extern fn ungetwc(__wc: wint_t, __stream: [*c]__FILE) wint_t;
pub extern fn wcsftime(noalias __s: [*c]wchar_t, __maxsize: usize, noalias __format: [*c]const wchar_t, noalias __tp: ?*const struct_tm) usize;
pub const SDL_bool = c_int;
pub const Sint8 = i8;
pub const Uint8 = u8;
pub const Sint16 = i16;
pub const Uint16 = u16;
pub const Sint32 = i32;
pub const Uint32 = u32;
pub const Sint64 = i64;
pub const Uint64 = u64;
pub const SDL_Time = Sint64;
// /usr/include/SDL3/SDL_stdinc.h:428:42: warning: ignoring StaticAssert declaration

// /usr/include/SDL3/SDL_stdinc.h:428:42: warning: ignoring StaticAssert declaration

// /usr/include/SDL3/SDL_stdinc.h:428:42: warning: ignoring StaticAssert declaration

// /usr/include/SDL3/SDL_stdinc.h:428:42: warning: ignoring StaticAssert declaration

// /usr/include/SDL3/SDL_stdinc.h:428:42: warning: ignoring StaticAssert declaration

// /usr/include/SDL3/SDL_stdinc.h:428:42: warning: ignoring StaticAssert declaration

// /usr/include/SDL3/SDL_stdinc.h:428:42: warning: ignoring StaticAssert declaration

// /usr/include/SDL3/SDL_stdinc.h:428:42: warning: ignoring StaticAssert declaration
pub const DUMMY_ENUM_VALUE: c_int = 0;
pub const enum_SDL_DUMMY_ENUM = c_uint;
pub const SDL_DUMMY_ENUM = enum_SDL_DUMMY_ENUM;
// /usr/include/SDL3/SDL_stdinc.h:428:42: warning: ignoring StaticAssert declaration
pub extern fn SDL_malloc(size: usize) ?*anyopaque;
pub extern fn SDL_calloc(nmemb: usize, size: usize) ?*anyopaque;
pub extern fn SDL_realloc(mem: ?*anyopaque, size: usize) ?*anyopaque;
pub extern fn SDL_free(mem: ?*anyopaque) void;
pub const SDL_malloc_func = ?*const fn (usize) callconv(.C) ?*anyopaque;
pub const SDL_calloc_func = ?*const fn (usize, usize) callconv(.C) ?*anyopaque;
pub const SDL_realloc_func = ?*const fn (?*anyopaque, usize) callconv(.C) ?*anyopaque;
pub const SDL_free_func = ?*const fn (?*anyopaque) callconv(.C) void;
pub extern fn SDL_GetOriginalMemoryFunctions(malloc_func: [*c]SDL_malloc_func, calloc_func: [*c]SDL_calloc_func, realloc_func: [*c]SDL_realloc_func, free_func: [*c]SDL_free_func) void;
pub extern fn SDL_GetMemoryFunctions(malloc_func: [*c]SDL_malloc_func, calloc_func: [*c]SDL_calloc_func, realloc_func: [*c]SDL_realloc_func, free_func: [*c]SDL_free_func) void;
pub extern fn SDL_SetMemoryFunctions(malloc_func: SDL_malloc_func, calloc_func: SDL_calloc_func, realloc_func: SDL_realloc_func, free_func: SDL_free_func) c_int;
pub extern fn SDL_aligned_alloc(alignment: usize, size: usize) ?*anyopaque;
pub extern fn SDL_aligned_free(mem: ?*anyopaque) void;
pub extern fn SDL_GetNumAllocations() c_int;
pub extern fn SDL_getenv(name: [*c]const u8) [*c]u8;
pub extern fn SDL_setenv(name: [*c]const u8, value: [*c]const u8, overwrite: c_int) c_int;
pub extern fn SDL_qsort(base: ?*anyopaque, nmemb: usize, size: usize, compare: ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.C) c_int) void;
pub extern fn SDL_bsearch(key: ?*const anyopaque, base: ?*const anyopaque, nmemb: usize, size: usize, compare: ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.C) c_int) ?*anyopaque;
pub extern fn SDL_qsort_r(base: ?*anyopaque, nmemb: usize, size: usize, compare: ?*const fn (?*anyopaque, ?*const anyopaque, ?*const anyopaque) callconv(.C) c_int, userdata: ?*anyopaque) void;
pub extern fn SDL_bsearch_r(key: ?*const anyopaque, base: ?*const anyopaque, nmemb: usize, size: usize, compare: ?*const fn (?*anyopaque, ?*const anyopaque, ?*const anyopaque) callconv(.C) c_int, userdata: ?*anyopaque) ?*anyopaque;
pub extern fn SDL_abs(x: c_int) c_int;
pub extern fn SDL_isalpha(x: c_int) c_int;
pub extern fn SDL_isalnum(x: c_int) c_int;
pub extern fn SDL_isblank(x: c_int) c_int;
pub extern fn SDL_iscntrl(x: c_int) c_int;
pub extern fn SDL_isdigit(x: c_int) c_int;
pub extern fn SDL_isxdigit(x: c_int) c_int;
pub extern fn SDL_ispunct(x: c_int) c_int;
pub extern fn SDL_isspace(x: c_int) c_int;
pub extern fn SDL_isupper(x: c_int) c_int;
pub extern fn SDL_islower(x: c_int) c_int;
pub extern fn SDL_isprint(x: c_int) c_int;
pub extern fn SDL_isgraph(x: c_int) c_int;
pub extern fn SDL_toupper(x: c_int) c_int;
pub extern fn SDL_tolower(x: c_int) c_int;
pub extern fn SDL_crc16(crc: Uint16, data: ?*const anyopaque, len: usize) Uint16;
pub extern fn SDL_crc32(crc: Uint32, data: ?*const anyopaque, len: usize) Uint32;
pub extern fn SDL_memcpy(dst: ?*anyopaque, src: ?*const anyopaque, len: usize) ?*anyopaque;
pub extern fn SDL_memmove(dst: ?*anyopaque, src: ?*const anyopaque, len: usize) ?*anyopaque;
pub extern fn SDL_memset(dst: ?*anyopaque, c: c_int, len: usize) ?*anyopaque;
pub extern fn SDL_memset4(dst: ?*anyopaque, val: Uint32, dwords: usize) ?*anyopaque;
pub extern fn SDL_memcmp(s1: ?*const anyopaque, s2: ?*const anyopaque, len: usize) c_int;
pub extern fn SDL_wcslen(wstr: [*c]const wchar_t) usize;
pub extern fn SDL_wcsnlen(wstr: [*c]const wchar_t, maxlen: usize) usize;
pub extern fn SDL_wcslcpy(dst: [*c]wchar_t, src: [*c]const wchar_t, maxlen: usize) usize;
pub extern fn SDL_wcslcat(dst: [*c]wchar_t, src: [*c]const wchar_t, maxlen: usize) usize;
pub extern fn SDL_wcsdup(wstr: [*c]const wchar_t) [*c]wchar_t;
pub extern fn SDL_wcsstr(haystack: [*c]const wchar_t, needle: [*c]const wchar_t) [*c]wchar_t;
pub extern fn SDL_wcsnstr(haystack: [*c]const wchar_t, needle: [*c]const wchar_t, maxlen: usize) [*c]wchar_t;
pub extern fn SDL_wcscmp(str1: [*c]const wchar_t, str2: [*c]const wchar_t) c_int;
pub extern fn SDL_wcsncmp(str1: [*c]const wchar_t, str2: [*c]const wchar_t, maxlen: usize) c_int;
pub extern fn SDL_wcscasecmp(str1: [*c]const wchar_t, str2: [*c]const wchar_t) c_int;
pub extern fn SDL_wcsncasecmp(str1: [*c]const wchar_t, str2: [*c]const wchar_t, maxlen: usize) c_int;
pub extern fn SDL_wcstol(str: [*c]const wchar_t, endp: [*c][*c]wchar_t, base: c_int) c_long;
pub extern fn SDL_strlen(str: [*c]const u8) usize;
pub extern fn SDL_strnlen(str: [*c]const u8, maxlen: usize) usize;
pub extern fn SDL_strlcpy(dst: [*c]u8, src: [*c]const u8, maxlen: usize) usize;
pub extern fn SDL_utf8strlcpy(dst: [*c]u8, src: [*c]const u8, dst_bytes: usize) usize;
pub extern fn SDL_strlcat(dst: [*c]u8, src: [*c]const u8, maxlen: usize) usize;
pub extern fn SDL_strdup(str: [*c]const u8) [*c]u8;
pub extern fn SDL_strndup(str: [*c]const u8, maxlen: usize) [*c]u8;
pub extern fn SDL_strrev(str: [*c]u8) [*c]u8;
pub extern fn SDL_strupr(str: [*c]u8) [*c]u8;
pub extern fn SDL_strlwr(str: [*c]u8) [*c]u8;
pub extern fn SDL_strchr(str: [*c]const u8, c: c_int) [*c]u8;
pub extern fn SDL_strrchr(str: [*c]const u8, c: c_int) [*c]u8;
pub extern fn SDL_strstr(haystack: [*c]const u8, needle: [*c]const u8) [*c]u8;
pub extern fn SDL_strnstr(haystack: [*c]const u8, needle: [*c]const u8, maxlen: usize) [*c]u8;
pub extern fn SDL_strcasestr(haystack: [*c]const u8, needle: [*c]const u8) [*c]u8;
pub extern fn SDL_strtok_r(s1: [*c]u8, s2: [*c]const u8, saveptr: [*c][*c]u8) [*c]u8;
pub extern fn SDL_utf8strlen(str: [*c]const u8) usize;
pub extern fn SDL_utf8strnlen(str: [*c]const u8, bytes: usize) usize;
pub extern fn SDL_itoa(value: c_int, str: [*c]u8, radix: c_int) [*c]u8;
pub extern fn SDL_uitoa(value: c_uint, str: [*c]u8, radix: c_int) [*c]u8;
pub extern fn SDL_ltoa(value: c_long, str: [*c]u8, radix: c_int) [*c]u8;
pub extern fn SDL_ultoa(value: c_ulong, str: [*c]u8, radix: c_int) [*c]u8;
pub extern fn SDL_lltoa(value: Sint64, str: [*c]u8, radix: c_int) [*c]u8;
pub extern fn SDL_ulltoa(value: Uint64, str: [*c]u8, radix: c_int) [*c]u8;
pub extern fn SDL_atoi(str: [*c]const u8) c_int;
pub extern fn SDL_atof(str: [*c]const u8) f64;
pub extern fn SDL_strtol(str: [*c]const u8, endp: [*c][*c]u8, base: c_int) c_long;
pub extern fn SDL_strtoul(str: [*c]const u8, endp: [*c][*c]u8, base: c_int) c_ulong;
pub extern fn SDL_strtoll(str: [*c]const u8, endp: [*c][*c]u8, base: c_int) Sint64;
pub extern fn SDL_strtoull(str: [*c]const u8, endp: [*c][*c]u8, base: c_int) Uint64;
pub extern fn SDL_strtod(str: [*c]const u8, endp: [*c][*c]u8) f64;
pub extern fn SDL_strcmp(str1: [*c]const u8, str2: [*c]const u8) c_int;
pub extern fn SDL_strncmp(str1: [*c]const u8, str2: [*c]const u8, maxlen: usize) c_int;
pub extern fn SDL_strcasecmp(str1: [*c]const u8, str2: [*c]const u8) c_int;
pub extern fn SDL_strncasecmp(str1: [*c]const u8, str2: [*c]const u8, maxlen: usize) c_int;
pub extern fn SDL_sscanf(text: [*c]const u8, fmt: [*c]const u8, ...) c_int;
pub extern fn SDL_vsscanf(text: [*c]const u8, fmt: [*c]const u8, ap: [*c]struct___va_list_tag_1) c_int;
pub extern fn SDL_snprintf(text: [*c]u8, maxlen: usize, fmt: [*c]const u8, ...) c_int;
pub extern fn SDL_swprintf(text: [*c]wchar_t, maxlen: usize, fmt: [*c]const wchar_t, ...) c_int;
pub extern fn SDL_vsnprintf(text: [*c]u8, maxlen: usize, fmt: [*c]const u8, ap: [*c]struct___va_list_tag_1) c_int;
pub extern fn SDL_vswprintf(text: [*c]wchar_t, maxlen: usize, fmt: [*c]const wchar_t, ap: [*c]struct___va_list_tag_1) c_int;
pub extern fn SDL_asprintf(strp: [*c][*c]u8, fmt: [*c]const u8, ...) c_int;
pub extern fn SDL_vasprintf(strp: [*c][*c]u8, fmt: [*c]const u8, ap: [*c]struct___va_list_tag_1) c_int;
pub extern fn SDL_acos(x: f64) f64;
pub extern fn SDL_acosf(x: f32) f32;
pub extern fn SDL_asin(x: f64) f64;
pub extern fn SDL_asinf(x: f32) f32;
pub extern fn SDL_atan(x: f64) f64;
pub extern fn SDL_atanf(x: f32) f32;
pub extern fn SDL_atan2(y: f64, x: f64) f64;
pub extern fn SDL_atan2f(y: f32, x: f32) f32;
pub extern fn SDL_ceil(x: f64) f64;
pub extern fn SDL_ceilf(x: f32) f32;
pub extern fn SDL_copysign(x: f64, y: f64) f64;
pub extern fn SDL_copysignf(x: f32, y: f32) f32;
pub extern fn SDL_cos(x: f64) f64;
pub extern fn SDL_cosf(x: f32) f32;
pub extern fn SDL_exp(x: f64) f64;
pub extern fn SDL_expf(x: f32) f32;
pub extern fn SDL_fabs(x: f64) f64;
pub extern fn SDL_fabsf(x: f32) f32;
pub extern fn SDL_floor(x: f64) f64;
pub extern fn SDL_floorf(x: f32) f32;
pub extern fn SDL_trunc(x: f64) f64;
pub extern fn SDL_truncf(x: f32) f32;
pub extern fn SDL_fmod(x: f64, y: f64) f64;
pub extern fn SDL_fmodf(x: f32, y: f32) f32;
pub extern fn SDL_log(x: f64) f64;
pub extern fn SDL_logf(x: f32) f32;
pub extern fn SDL_log10(x: f64) f64;
pub extern fn SDL_log10f(x: f32) f32;
pub extern fn SDL_modf(x: f64, y: [*c]f64) f64;
pub extern fn SDL_modff(x: f32, y: [*c]f32) f32;
pub extern fn SDL_pow(x: f64, y: f64) f64;
pub extern fn SDL_powf(x: f32, y: f32) f32;
pub extern fn SDL_round(x: f64) f64;
pub extern fn SDL_roundf(x: f32) f32;
pub extern fn SDL_lround(x: f64) c_long;
pub extern fn SDL_lroundf(x: f32) c_long;
pub extern fn SDL_scalbn(x: f64, n: c_int) f64;
pub extern fn SDL_scalbnf(x: f32, n: c_int) f32;
pub extern fn SDL_sin(x: f64) f64;
pub extern fn SDL_sinf(x: f32) f32;
pub extern fn SDL_sqrt(x: f64) f64;
pub extern fn SDL_sqrtf(x: f32) f32;
pub extern fn SDL_tan(x: f64) f64;
pub extern fn SDL_tanf(x: f32) f32;
pub const struct_SDL_iconv_data_t = opaque {};
pub const SDL_iconv_t = ?*struct_SDL_iconv_data_t;
pub extern fn SDL_iconv_open(tocode: [*c]const u8, fromcode: [*c]const u8) SDL_iconv_t;
pub extern fn SDL_iconv_close(cd: SDL_iconv_t) c_int;
pub extern fn SDL_iconv(cd: SDL_iconv_t, inbuf: [*c][*c]const u8, inbytesleft: [*c]usize, outbuf: [*c][*c]u8, outbytesleft: [*c]usize) usize;
pub extern fn SDL_iconv_string(tocode: [*c]const u8, fromcode: [*c]const u8, inbuf: [*c]const u8, inbytesleft: usize) [*c]u8;
pub inline fn SDL_size_mul_overflow(arg_a: usize, arg_b: usize, arg_ret: [*c]usize) c_int {
    var a = arg_a;
    _ = &a;
    var b = arg_b;
    _ = &b;
    var ret = arg_ret;
    _ = &ret;
    if ((a != @as(usize, @bitCast(@as(c_long, @as(c_int, 0))))) and (b > (@as(c_ulong, 18446744073709551615) / a))) {
        return -@as(c_int, 1);
    }
    ret.* = a *% b;
    return 0;
}
pub inline fn SDL_size_mul_overflow_builtin(arg_a: usize, arg_b: usize, arg_ret: [*c]usize) c_int {
    var a = arg_a;
    _ = &a;
    var b = arg_b;
    _ = &b;
    var ret = arg_ret;
    _ = &ret;
    return if (@as(c_int, @intFromBool(__builtin_mul_overflow(a, b, ret))) == @as(c_int, 0)) @as(c_int, 0) else -@as(c_int, 1);
}
pub inline fn SDL_size_add_overflow(arg_a: usize, arg_b: usize, arg_ret: [*c]usize) c_int {
    var a = arg_a;
    _ = &a;
    var b = arg_b;
    _ = &b;
    var ret = arg_ret;
    _ = &ret;
    if (b > (@as(c_ulong, 18446744073709551615) -% a)) {
        return -@as(c_int, 1);
    }
    ret.* = a +% b;
    return 0;
}
// /usr/include/SDL3/SDL_stdinc.h:2627:12: warning: TODO implement function '__builtin_add_overflow' in std.zig.c_builtins

// /usr/include/SDL3/SDL_stdinc.h:2623:22: warning: unable to translate function, demoted to extern
pub extern fn SDL_size_add_overflow_builtin(arg_a: usize, arg_b: usize, arg_ret: [*c]usize) c_int;
pub const SDL_FunctionPointer = ?*const fn () callconv(.C) void;
pub const SDL_ASSERTION_RETRY: c_int = 0;
pub const SDL_ASSERTION_BREAK: c_int = 1;
pub const SDL_ASSERTION_ABORT: c_int = 2;
pub const SDL_ASSERTION_IGNORE: c_int = 3;
pub const SDL_ASSERTION_ALWAYS_IGNORE: c_int = 4;
pub const enum_SDL_AssertState = c_uint;
pub const SDL_AssertState = enum_SDL_AssertState;
pub const struct_SDL_AssertData = extern struct {
    always_ignore: SDL_bool = @import("std").mem.zeroes(SDL_bool),
    trigger_count: c_uint = @import("std").mem.zeroes(c_uint),
    condition: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    filename: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    linenum: c_int = @import("std").mem.zeroes(c_int),
    function: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    next: [*c]const struct_SDL_AssertData = @import("std").mem.zeroes([*c]const struct_SDL_AssertData),
};
pub const SDL_AssertData = struct_SDL_AssertData;
pub extern fn SDL_ReportAssertion(data: [*c]SDL_AssertData, func: [*c]const u8, file: [*c]const u8, line: c_int) SDL_AssertState;
pub const SDL_AssertionHandler = ?*const fn ([*c]const SDL_AssertData, ?*anyopaque) callconv(.C) SDL_AssertState;
pub extern fn SDL_SetAssertionHandler(handler: SDL_AssertionHandler, userdata: ?*anyopaque) void;
pub extern fn SDL_GetDefaultAssertionHandler() SDL_AssertionHandler;
pub extern fn SDL_GetAssertionHandler(puserdata: [*c]?*anyopaque) SDL_AssertionHandler;
pub extern fn SDL_GetAssertionReport() [*c]const SDL_AssertData;
pub extern fn SDL_ResetAssertionReport() void;
pub const SDL_SpinLock = c_int;
pub extern fn SDL_TryLockSpinlock(lock: [*c]SDL_SpinLock) SDL_bool;
pub extern fn SDL_LockSpinlock(lock: [*c]SDL_SpinLock) void;
pub extern fn SDL_UnlockSpinlock(lock: [*c]SDL_SpinLock) void;
pub extern fn SDL_MemoryBarrierReleaseFunction() void;
pub extern fn SDL_MemoryBarrierAcquireFunction() void;
pub const struct_SDL_AtomicInt = extern struct {
    value: c_int = @import("std").mem.zeroes(c_int),
};
pub const SDL_AtomicInt = struct_SDL_AtomicInt;
pub extern fn SDL_AtomicCompareAndSwap(a: [*c]SDL_AtomicInt, oldval: c_int, newval: c_int) SDL_bool;
pub extern fn SDL_AtomicSet(a: [*c]SDL_AtomicInt, v: c_int) c_int;
pub extern fn SDL_AtomicGet(a: [*c]SDL_AtomicInt) c_int;
pub extern fn SDL_AtomicAdd(a: [*c]SDL_AtomicInt, v: c_int) c_int;
pub extern fn SDL_AtomicCompareAndSwapPointer(a: [*c]?*anyopaque, oldval: ?*anyopaque, newval: ?*anyopaque) SDL_bool;
pub extern fn SDL_AtomicSetPtr(a: [*c]?*anyopaque, v: ?*anyopaque) ?*anyopaque;
pub extern fn SDL_AtomicGetPtr(a: [*c]?*anyopaque) ?*anyopaque;
pub fn __bswap_16(arg___bsx: __uint16_t) callconv(.C) __uint16_t {
    var __bsx = arg___bsx;
    _ = &__bsx;
    return @as(__uint16_t, @bitCast(@as(c_short, @truncate(((@as(c_int, @bitCast(@as(c_uint, __bsx))) >> @intCast(8)) & @as(c_int, 255)) | ((@as(c_int, @bitCast(@as(c_uint, __bsx))) & @as(c_int, 255)) << @intCast(8))))));
}
pub fn __bswap_32(arg___bsx: __uint32_t) callconv(.C) __uint32_t {
    var __bsx = arg___bsx;
    _ = &__bsx;
    return ((((__bsx & @as(c_uint, 4278190080)) >> @intCast(24)) | ((__bsx & @as(c_uint, 16711680)) >> @intCast(8))) | ((__bsx & @as(c_uint, 65280)) << @intCast(8))) | ((__bsx & @as(c_uint, 255)) << @intCast(24));
}
pub fn __bswap_64(arg___bsx: __uint64_t) callconv(.C) __uint64_t {
    var __bsx = arg___bsx;
    _ = &__bsx;
    return @as(__uint64_t, @bitCast(@as(c_ulong, @truncate(((((((((@as(c_ulonglong, @bitCast(@as(c_ulonglong, __bsx))) & @as(c_ulonglong, 18374686479671623680)) >> @intCast(56)) | ((@as(c_ulonglong, @bitCast(@as(c_ulonglong, __bsx))) & @as(c_ulonglong, 71776119061217280)) >> @intCast(40))) | ((@as(c_ulonglong, @bitCast(@as(c_ulonglong, __bsx))) & @as(c_ulonglong, 280375465082880)) >> @intCast(24))) | ((@as(c_ulonglong, @bitCast(@as(c_ulonglong, __bsx))) & @as(c_ulonglong, 1095216660480)) >> @intCast(8))) | ((@as(c_ulonglong, @bitCast(@as(c_ulonglong, __bsx))) & @as(c_ulonglong, 4278190080)) << @intCast(8))) | ((@as(c_ulonglong, @bitCast(@as(c_ulonglong, __bsx))) & @as(c_ulonglong, 16711680)) << @intCast(24))) | ((@as(c_ulonglong, @bitCast(@as(c_ulonglong, __bsx))) & @as(c_ulonglong, 65280)) << @intCast(40))) | ((@as(c_ulonglong, @bitCast(@as(c_ulonglong, __bsx))) & @as(c_ulonglong, 255)) << @intCast(56))))));
}
pub fn __uint16_identity(arg___x: __uint16_t) callconv(.C) __uint16_t {
    var __x = arg___x;
    _ = &__x;
    return __x;
}
pub fn __uint32_identity(arg___x: __uint32_t) callconv(.C) __uint32_t {
    var __x = arg___x;
    _ = &__x;
    return __x;
}
pub fn __uint64_identity(arg___x: __uint64_t) callconv(.C) __uint64_t {
    var __x = arg___x;
    _ = &__x;
    return __x;
}
pub inline fn SDL_SwapFloat(arg_x: f32) f32 {
    var x = arg_x;
    _ = &x;
    const union_unnamed_4 = extern union {
        f: f32,
        ui32: Uint32,
    };
    _ = &union_unnamed_4;
    var swapper: union_unnamed_4 = undefined;
    _ = &swapper;
    swapper.f = x;
    swapper.ui32 = __builtin_bswap32(swapper.ui32);
    return swapper.f;
}
pub extern fn SDL_SetError(fmt: [*c]const u8, ...) c_int;
pub extern fn SDL_OutOfMemory() c_int;
pub extern fn SDL_GetError() [*c]const u8;
pub extern fn SDL_ClearError() c_int;
pub const struct_SDL_Mutex = opaque {};
pub const SDL_Mutex = struct_SDL_Mutex;
pub extern fn SDL_CreateMutex() ?*SDL_Mutex;
pub extern fn SDL_LockMutex(mutex: ?*SDL_Mutex) void;
pub extern fn SDL_TryLockMutex(mutex: ?*SDL_Mutex) c_int;
pub extern fn SDL_UnlockMutex(mutex: ?*SDL_Mutex) void;
pub extern fn SDL_DestroyMutex(mutex: ?*SDL_Mutex) void;
pub const struct_SDL_RWLock = opaque {};
pub const SDL_RWLock = struct_SDL_RWLock;
pub extern fn SDL_CreateRWLock() ?*SDL_RWLock;
pub extern fn SDL_LockRWLockForReading(rwlock: ?*SDL_RWLock) void;
pub extern fn SDL_LockRWLockForWriting(rwlock: ?*SDL_RWLock) void;
pub extern fn SDL_TryLockRWLockForReading(rwlock: ?*SDL_RWLock) c_int;
pub extern fn SDL_TryLockRWLockForWriting(rwlock: ?*SDL_RWLock) c_int;
pub extern fn SDL_UnlockRWLock(rwlock: ?*SDL_RWLock) void;
pub extern fn SDL_DestroyRWLock(rwlock: ?*SDL_RWLock) void;
pub const struct_SDL_Semaphore = opaque {};
pub const SDL_Semaphore = struct_SDL_Semaphore;
pub extern fn SDL_CreateSemaphore(initial_value: Uint32) ?*SDL_Semaphore;
pub extern fn SDL_DestroySemaphore(sem: ?*SDL_Semaphore) void;
pub extern fn SDL_WaitSemaphore(sem: ?*SDL_Semaphore) c_int;
pub extern fn SDL_TryWaitSemaphore(sem: ?*SDL_Semaphore) c_int;
pub extern fn SDL_WaitSemaphoreTimeout(sem: ?*SDL_Semaphore, timeoutMS: Sint32) c_int;
pub extern fn SDL_PostSemaphore(sem: ?*SDL_Semaphore) c_int;
pub extern fn SDL_GetSemaphoreValue(sem: ?*SDL_Semaphore) Uint32;
pub const struct_SDL_Condition = opaque {};
pub const SDL_Condition = struct_SDL_Condition;
pub extern fn SDL_CreateCondition() ?*SDL_Condition;
pub extern fn SDL_DestroyCondition(cond: ?*SDL_Condition) void;
pub extern fn SDL_SignalCondition(cond: ?*SDL_Condition) c_int;
pub extern fn SDL_BroadcastCondition(cond: ?*SDL_Condition) c_int;
pub extern fn SDL_WaitCondition(cond: ?*SDL_Condition, mutex: ?*SDL_Mutex) c_int;
pub extern fn SDL_WaitConditionTimeout(cond: ?*SDL_Condition, mutex: ?*SDL_Mutex, timeoutMS: Sint32) c_int;
pub const SDL_PropertiesID = Uint32;
pub const SDL_PROPERTY_TYPE_INVALID: c_int = 0;
pub const SDL_PROPERTY_TYPE_POINTER: c_int = 1;
pub const SDL_PROPERTY_TYPE_STRING: c_int = 2;
pub const SDL_PROPERTY_TYPE_NUMBER: c_int = 3;
pub const SDL_PROPERTY_TYPE_FLOAT: c_int = 4;
pub const SDL_PROPERTY_TYPE_BOOLEAN: c_int = 5;
pub const enum_SDL_PropertyType = c_uint;
pub const SDL_PropertyType = enum_SDL_PropertyType;
pub extern fn SDL_GetGlobalProperties() SDL_PropertiesID;
pub extern fn SDL_CreateProperties() SDL_PropertiesID;
pub extern fn SDL_CopyProperties(src: SDL_PropertiesID, dst: SDL_PropertiesID) c_int;
pub extern fn SDL_LockProperties(props: SDL_PropertiesID) c_int;
pub extern fn SDL_UnlockProperties(props: SDL_PropertiesID) void;
pub const SDL_CleanupPropertyCallback = ?*const fn (?*anyopaque, ?*anyopaque) callconv(.C) void;
pub extern fn SDL_SetPropertyWithCleanup(props: SDL_PropertiesID, name: [*c]const u8, value: ?*anyopaque, cleanup: SDL_CleanupPropertyCallback, userdata: ?*anyopaque) c_int;
pub extern fn SDL_SetProperty(props: SDL_PropertiesID, name: [*c]const u8, value: ?*anyopaque) c_int;
pub extern fn SDL_SetStringProperty(props: SDL_PropertiesID, name: [*c]const u8, value: [*c]const u8) c_int;
pub extern fn SDL_SetNumberProperty(props: SDL_PropertiesID, name: [*c]const u8, value: Sint64) c_int;
pub extern fn SDL_SetFloatProperty(props: SDL_PropertiesID, name: [*c]const u8, value: f32) c_int;
pub extern fn SDL_SetBooleanProperty(props: SDL_PropertiesID, name: [*c]const u8, value: SDL_bool) c_int;
pub extern fn SDL_HasProperty(props: SDL_PropertiesID, name: [*c]const u8) SDL_bool;
pub extern fn SDL_GetPropertyType(props: SDL_PropertiesID, name: [*c]const u8) SDL_PropertyType;
pub extern fn SDL_GetProperty(props: SDL_PropertiesID, name: [*c]const u8, default_value: ?*anyopaque) ?*anyopaque;
pub extern fn SDL_GetStringProperty(props: SDL_PropertiesID, name: [*c]const u8, default_value: [*c]const u8) [*c]const u8;
pub extern fn SDL_GetNumberProperty(props: SDL_PropertiesID, name: [*c]const u8, default_value: Sint64) Sint64;
pub extern fn SDL_GetFloatProperty(props: SDL_PropertiesID, name: [*c]const u8, default_value: f32) f32;
pub extern fn SDL_GetBooleanProperty(props: SDL_PropertiesID, name: [*c]const u8, default_value: SDL_bool) SDL_bool;
pub extern fn SDL_ClearProperty(props: SDL_PropertiesID, name: [*c]const u8) c_int;
pub const SDL_EnumeratePropertiesCallback = ?*const fn (?*anyopaque, SDL_PropertiesID, [*c]const u8) callconv(.C) void;
pub extern fn SDL_EnumerateProperties(props: SDL_PropertiesID, callback: SDL_EnumeratePropertiesCallback, userdata: ?*anyopaque) c_int;
pub extern fn SDL_DestroyProperties(props: SDL_PropertiesID) void;
pub const SDL_IO_STATUS_READY: c_int = 0;
pub const SDL_IO_STATUS_ERROR: c_int = 1;
pub const SDL_IO_STATUS_EOF: c_int = 2;
pub const SDL_IO_STATUS_NOT_READY: c_int = 3;
pub const SDL_IO_STATUS_READONLY: c_int = 4;
pub const SDL_IO_STATUS_WRITEONLY: c_int = 5;
pub const enum_SDL_IOStatus = c_uint;
pub const SDL_IOStatus = enum_SDL_IOStatus;
pub const struct_SDL_IOStreamInterface = extern struct {
    size: ?*const fn (?*anyopaque) callconv(.C) Sint64 = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.C) Sint64),
    seek: ?*const fn (?*anyopaque, Sint64, c_int) callconv(.C) Sint64 = @import("std").mem.zeroes(?*const fn (?*anyopaque, Sint64, c_int) callconv(.C) Sint64),
    read: ?*const fn (?*anyopaque, ?*anyopaque, usize, [*c]SDL_IOStatus) callconv(.C) usize = @import("std").mem.zeroes(?*const fn (?*anyopaque, ?*anyopaque, usize, [*c]SDL_IOStatus) callconv(.C) usize),
    write: ?*const fn (?*anyopaque, ?*const anyopaque, usize, [*c]SDL_IOStatus) callconv(.C) usize = @import("std").mem.zeroes(?*const fn (?*anyopaque, ?*const anyopaque, usize, [*c]SDL_IOStatus) callconv(.C) usize),
    close: ?*const fn (?*anyopaque) callconv(.C) c_int = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.C) c_int),
};
pub const SDL_IOStreamInterface = struct_SDL_IOStreamInterface;
pub const struct_SDL_IOStream = opaque {};
pub const SDL_IOStream = struct_SDL_IOStream;
pub extern fn SDL_IOFromFile(file: [*c]const u8, mode: [*c]const u8) ?*SDL_IOStream;
pub extern fn SDL_IOFromMem(mem: ?*anyopaque, size: usize) ?*SDL_IOStream;
pub extern fn SDL_IOFromConstMem(mem: ?*const anyopaque, size: usize) ?*SDL_IOStream;
pub extern fn SDL_IOFromDynamicMem() ?*SDL_IOStream;
pub extern fn SDL_OpenIO(iface: [*c]const SDL_IOStreamInterface, userdata: ?*anyopaque) ?*SDL_IOStream;
pub extern fn SDL_CloseIO(context: ?*SDL_IOStream) c_int;
pub extern fn SDL_GetIOProperties(context: ?*SDL_IOStream) SDL_PropertiesID;
pub extern fn SDL_GetIOStatus(context: ?*SDL_IOStream) SDL_IOStatus;
pub extern fn SDL_GetIOSize(context: ?*SDL_IOStream) Sint64;
pub extern fn SDL_SeekIO(context: ?*SDL_IOStream, offset: Sint64, whence: c_int) Sint64;
pub extern fn SDL_TellIO(context: ?*SDL_IOStream) Sint64;
pub extern fn SDL_ReadIO(context: ?*SDL_IOStream, ptr: ?*anyopaque, size: usize) usize;
pub extern fn SDL_WriteIO(context: ?*SDL_IOStream, ptr: ?*const anyopaque, size: usize) usize;
pub extern fn SDL_IOprintf(context: ?*SDL_IOStream, fmt: [*c]const u8, ...) usize;
pub extern fn SDL_IOvprintf(context: ?*SDL_IOStream, fmt: [*c]const u8, ap: [*c]struct___va_list_tag_1) usize;
pub extern fn SDL_LoadFile_IO(src: ?*SDL_IOStream, datasize: [*c]usize, closeio: SDL_bool) ?*anyopaque;
pub extern fn SDL_LoadFile(file: [*c]const u8, datasize: [*c]usize) ?*anyopaque;
pub extern fn SDL_ReadU8(src: ?*SDL_IOStream, value: [*c]Uint8) SDL_bool;
pub extern fn SDL_ReadU16LE(src: ?*SDL_IOStream, value: [*c]Uint16) SDL_bool;
pub extern fn SDL_ReadS16LE(src: ?*SDL_IOStream, value: [*c]Sint16) SDL_bool;
pub extern fn SDL_ReadU16BE(src: ?*SDL_IOStream, value: [*c]Uint16) SDL_bool;
pub extern fn SDL_ReadS16BE(src: ?*SDL_IOStream, value: [*c]Sint16) SDL_bool;
pub extern fn SDL_ReadU32LE(src: ?*SDL_IOStream, value: [*c]Uint32) SDL_bool;
pub extern fn SDL_ReadS32LE(src: ?*SDL_IOStream, value: [*c]Sint32) SDL_bool;
pub extern fn SDL_ReadU32BE(src: ?*SDL_IOStream, value: [*c]Uint32) SDL_bool;
pub extern fn SDL_ReadS32BE(src: ?*SDL_IOStream, value: [*c]Sint32) SDL_bool;
pub extern fn SDL_ReadU64LE(src: ?*SDL_IOStream, value: [*c]Uint64) SDL_bool;
pub extern fn SDL_ReadS64LE(src: ?*SDL_IOStream, value: [*c]Sint64) SDL_bool;
pub extern fn SDL_ReadU64BE(src: ?*SDL_IOStream, value: [*c]Uint64) SDL_bool;
pub extern fn SDL_ReadS64BE(src: ?*SDL_IOStream, value: [*c]Sint64) SDL_bool;
pub extern fn SDL_WriteU8(dst: ?*SDL_IOStream, value: Uint8) SDL_bool;
pub extern fn SDL_WriteU16LE(dst: ?*SDL_IOStream, value: Uint16) SDL_bool;
pub extern fn SDL_WriteS16LE(dst: ?*SDL_IOStream, value: Sint16) SDL_bool;
pub extern fn SDL_WriteU16BE(dst: ?*SDL_IOStream, value: Uint16) SDL_bool;
pub extern fn SDL_WriteS16BE(dst: ?*SDL_IOStream, value: Sint16) SDL_bool;
pub extern fn SDL_WriteU32LE(dst: ?*SDL_IOStream, value: Uint32) SDL_bool;
pub extern fn SDL_WriteS32LE(dst: ?*SDL_IOStream, value: Sint32) SDL_bool;
pub extern fn SDL_WriteU32BE(dst: ?*SDL_IOStream, value: Uint32) SDL_bool;
pub extern fn SDL_WriteS32BE(dst: ?*SDL_IOStream, value: Sint32) SDL_bool;
pub extern fn SDL_WriteU64LE(dst: ?*SDL_IOStream, value: Uint64) SDL_bool;
pub extern fn SDL_WriteS64LE(dst: ?*SDL_IOStream, value: Sint64) SDL_bool;
pub extern fn SDL_WriteU64BE(dst: ?*SDL_IOStream, value: Uint64) SDL_bool;
pub extern fn SDL_WriteS64BE(dst: ?*SDL_IOStream, value: Sint64) SDL_bool;
pub const struct_SDL_Thread = opaque {};
pub const SDL_Thread = struct_SDL_Thread;
pub const SDL_ThreadID = Uint64;
pub const SDL_TLSID = Uint32;
pub const SDL_THREAD_PRIORITY_LOW: c_int = 0;
pub const SDL_THREAD_PRIORITY_NORMAL: c_int = 1;
pub const SDL_THREAD_PRIORITY_HIGH: c_int = 2;
pub const SDL_THREAD_PRIORITY_TIME_CRITICAL: c_int = 3;
pub const enum_SDL_ThreadPriority = c_uint;
pub const SDL_ThreadPriority = enum_SDL_ThreadPriority;
pub const SDL_ThreadFunction = ?*const fn (?*anyopaque) callconv(.C) c_int;
pub extern fn SDL_CreateThreadRuntime(@"fn": SDL_ThreadFunction, name: [*c]const u8, data: ?*anyopaque, pfnBeginThread: SDL_FunctionPointer, pfnEndThread: SDL_FunctionPointer) ?*SDL_Thread;
pub extern fn SDL_CreateThreadWithPropertiesRuntime(props: SDL_PropertiesID, pfnBeginThread: SDL_FunctionPointer, pfnEndThread: SDL_FunctionPointer) ?*SDL_Thread;
pub extern fn SDL_GetThreadName(thread: ?*SDL_Thread) [*c]const u8;
pub extern fn SDL_GetCurrentThreadID() SDL_ThreadID;
pub extern fn SDL_GetThreadID(thread: ?*SDL_Thread) SDL_ThreadID;
pub extern fn SDL_SetThreadPriority(priority: SDL_ThreadPriority) c_int;
pub extern fn SDL_WaitThread(thread: ?*SDL_Thread, status: [*c]c_int) void;
pub extern fn SDL_DetachThread(thread: ?*SDL_Thread) void;
pub extern fn SDL_CreateTLS() SDL_TLSID;
pub extern fn SDL_GetTLS(id: SDL_TLSID) ?*anyopaque;
pub extern fn SDL_SetTLS(id: SDL_TLSID, value: ?*const anyopaque, destructor: ?*const fn (?*anyopaque) callconv(.C) void) c_int;
pub extern fn SDL_CleanupTLS() void;
pub const SDL_AudioFormat = Uint16;
pub const SDL_AudioDeviceID = Uint32;
pub const struct_SDL_AudioSpec = extern struct {
    format: SDL_AudioFormat = @import("std").mem.zeroes(SDL_AudioFormat),
    channels: c_int = @import("std").mem.zeroes(c_int),
    freq: c_int = @import("std").mem.zeroes(c_int),
};
pub const SDL_AudioSpec = struct_SDL_AudioSpec;
pub const struct_SDL_AudioStream = opaque {};
pub const SDL_AudioStream = struct_SDL_AudioStream;
pub extern fn SDL_GetNumAudioDrivers() c_int;
pub extern fn SDL_GetAudioDriver(index: c_int) [*c]const u8;
pub extern fn SDL_GetCurrentAudioDriver() [*c]const u8;
pub extern fn SDL_GetAudioOutputDevices(count: [*c]c_int) [*c]SDL_AudioDeviceID;
pub extern fn SDL_GetAudioCaptureDevices(count: [*c]c_int) [*c]SDL_AudioDeviceID;
pub extern fn SDL_GetAudioDeviceName(devid: SDL_AudioDeviceID) [*c]const u8;
pub extern fn SDL_GetAudioDeviceFormat(devid: SDL_AudioDeviceID, spec: [*c]SDL_AudioSpec, sample_frames: [*c]c_int) c_int;
pub extern fn SDL_OpenAudioDevice(devid: SDL_AudioDeviceID, spec: [*c]const SDL_AudioSpec) SDL_AudioDeviceID;
pub extern fn SDL_PauseAudioDevice(dev: SDL_AudioDeviceID) c_int;
pub extern fn SDL_ResumeAudioDevice(dev: SDL_AudioDeviceID) c_int;
pub extern fn SDL_AudioDevicePaused(dev: SDL_AudioDeviceID) SDL_bool;
pub extern fn SDL_CloseAudioDevice(devid: SDL_AudioDeviceID) void;
pub extern fn SDL_BindAudioStreams(devid: SDL_AudioDeviceID, streams: [*c]?*SDL_AudioStream, num_streams: c_int) c_int;
pub extern fn SDL_BindAudioStream(devid: SDL_AudioDeviceID, stream: ?*SDL_AudioStream) c_int;
pub extern fn SDL_UnbindAudioStreams(streams: [*c]?*SDL_AudioStream, num_streams: c_int) void;
pub extern fn SDL_UnbindAudioStream(stream: ?*SDL_AudioStream) void;
pub extern fn SDL_GetAudioStreamDevice(stream: ?*SDL_AudioStream) SDL_AudioDeviceID;
pub extern fn SDL_CreateAudioStream(src_spec: [*c]const SDL_AudioSpec, dst_spec: [*c]const SDL_AudioSpec) ?*SDL_AudioStream;
pub extern fn SDL_GetAudioStreamProperties(stream: ?*SDL_AudioStream) SDL_PropertiesID;
pub extern fn SDL_GetAudioStreamFormat(stream: ?*SDL_AudioStream, src_spec: [*c]SDL_AudioSpec, dst_spec: [*c]SDL_AudioSpec) c_int;
pub extern fn SDL_SetAudioStreamFormat(stream: ?*SDL_AudioStream, src_spec: [*c]const SDL_AudioSpec, dst_spec: [*c]const SDL_AudioSpec) c_int;
pub extern fn SDL_GetAudioStreamFrequencyRatio(stream: ?*SDL_AudioStream) f32;
pub extern fn SDL_SetAudioStreamFrequencyRatio(stream: ?*SDL_AudioStream, ratio: f32) c_int;
pub extern fn SDL_PutAudioStreamData(stream: ?*SDL_AudioStream, buf: ?*const anyopaque, len: c_int) c_int;
pub extern fn SDL_GetAudioStreamData(stream: ?*SDL_AudioStream, buf: ?*anyopaque, len: c_int) c_int;
pub extern fn SDL_GetAudioStreamAvailable(stream: ?*SDL_AudioStream) c_int;
pub extern fn SDL_GetAudioStreamQueued(stream: ?*SDL_AudioStream) c_int;
pub extern fn SDL_FlushAudioStream(stream: ?*SDL_AudioStream) c_int;
pub extern fn SDL_ClearAudioStream(stream: ?*SDL_AudioStream) c_int;
pub extern fn SDL_PauseAudioStreamDevice(stream: ?*SDL_AudioStream) c_int;
pub extern fn SDL_ResumeAudioStreamDevice(stream: ?*SDL_AudioStream) c_int;
pub extern fn SDL_LockAudioStream(stream: ?*SDL_AudioStream) c_int;
pub extern fn SDL_UnlockAudioStream(stream: ?*SDL_AudioStream) c_int;
pub const SDL_AudioStreamCallback = ?*const fn (?*anyopaque, ?*SDL_AudioStream, c_int, c_int) callconv(.C) void;
pub extern fn SDL_SetAudioStreamGetCallback(stream: ?*SDL_AudioStream, callback: SDL_AudioStreamCallback, userdata: ?*anyopaque) c_int;
pub extern fn SDL_SetAudioStreamPutCallback(stream: ?*SDL_AudioStream, callback: SDL_AudioStreamCallback, userdata: ?*anyopaque) c_int;
pub extern fn SDL_DestroyAudioStream(stream: ?*SDL_AudioStream) void;
pub extern fn SDL_OpenAudioDeviceStream(devid: SDL_AudioDeviceID, spec: [*c]const SDL_AudioSpec, callback: SDL_AudioStreamCallback, userdata: ?*anyopaque) ?*SDL_AudioStream;
pub const SDL_AudioPostmixCallback = ?*const fn (?*anyopaque, [*c]const SDL_AudioSpec, [*c]f32, c_int) callconv(.C) void;
pub extern fn SDL_SetAudioPostmixCallback(devid: SDL_AudioDeviceID, callback: SDL_AudioPostmixCallback, userdata: ?*anyopaque) c_int;
pub extern fn SDL_LoadWAV_IO(src: ?*SDL_IOStream, closeio: SDL_bool, spec: [*c]SDL_AudioSpec, audio_buf: [*c][*c]Uint8, audio_len: [*c]Uint32) c_int;
pub extern fn SDL_LoadWAV(path: [*c]const u8, spec: [*c]SDL_AudioSpec, audio_buf: [*c][*c]Uint8, audio_len: [*c]Uint32) c_int;
pub extern fn SDL_MixAudio(dst: [*c]Uint8, src: [*c]const Uint8, format: SDL_AudioFormat, len: Uint32, volume: f32) c_int;
pub extern fn SDL_ConvertAudioSamples(src_spec: [*c]const SDL_AudioSpec, src_data: [*c]const Uint8, src_len: c_int, dst_spec: [*c]const SDL_AudioSpec, dst_data: [*c][*c]Uint8, dst_len: [*c]c_int) c_int;
pub extern fn SDL_GetSilenceValueForFormat(format: SDL_AudioFormat) c_int;
pub inline fn SDL_MostSignificantBitIndex32(arg_x: Uint32) c_int {
    var x = arg_x;
    _ = &x;
    if (x == @as(Uint32, @bitCast(@as(c_int, 0)))) {
        return -@as(c_int, 1);
    }
    return @as(c_int, 31) - __builtin_clz(x);
}
pub inline fn SDL_HasExactlyOneBitSet32(arg_x: Uint32) SDL_bool {
    var x = arg_x;
    _ = &x;
    if ((x != 0) and !((x & (x -% @as(Uint32, @bitCast(@as(c_int, 1))))) != 0)) {
        return 1;
    }
    return 0;
}
pub const SDL_BlendMode = Uint32;
pub const SDL_BLENDOPERATION_ADD: c_int = 1;
pub const SDL_BLENDOPERATION_SUBTRACT: c_int = 2;
pub const SDL_BLENDOPERATION_REV_SUBTRACT: c_int = 3;
pub const SDL_BLENDOPERATION_MINIMUM: c_int = 4;
pub const SDL_BLENDOPERATION_MAXIMUM: c_int = 5;
pub const enum_SDL_BlendOperation = c_uint;
pub const SDL_BlendOperation = enum_SDL_BlendOperation;
pub const SDL_BLENDFACTOR_ZERO: c_int = 1;
pub const SDL_BLENDFACTOR_ONE: c_int = 2;
pub const SDL_BLENDFACTOR_SRC_COLOR: c_int = 3;
pub const SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR: c_int = 4;
pub const SDL_BLENDFACTOR_SRC_ALPHA: c_int = 5;
pub const SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA: c_int = 6;
pub const SDL_BLENDFACTOR_DST_COLOR: c_int = 7;
pub const SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR: c_int = 8;
pub const SDL_BLENDFACTOR_DST_ALPHA: c_int = 9;
pub const SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA: c_int = 10;
pub const enum_SDL_BlendFactor = c_uint;
pub const SDL_BlendFactor = enum_SDL_BlendFactor;
pub extern fn SDL_ComposeCustomBlendMode(srcColorFactor: SDL_BlendFactor, dstColorFactor: SDL_BlendFactor, colorOperation: SDL_BlendOperation, srcAlphaFactor: SDL_BlendFactor, dstAlphaFactor: SDL_BlendFactor, alphaOperation: SDL_BlendOperation) SDL_BlendMode;
pub const SDL_PIXELTYPE_UNKNOWN: c_int = 0;
pub const SDL_PIXELTYPE_INDEX1: c_int = 1;
pub const SDL_PIXELTYPE_INDEX4: c_int = 2;
pub const SDL_PIXELTYPE_INDEX8: c_int = 3;
pub const SDL_PIXELTYPE_PACKED8: c_int = 4;
pub const SDL_PIXELTYPE_PACKED16: c_int = 5;
pub const SDL_PIXELTYPE_PACKED32: c_int = 6;
pub const SDL_PIXELTYPE_ARRAYU8: c_int = 7;
pub const SDL_PIXELTYPE_ARRAYU16: c_int = 8;
pub const SDL_PIXELTYPE_ARRAYU32: c_int = 9;
pub const SDL_PIXELTYPE_ARRAYF16: c_int = 10;
pub const SDL_PIXELTYPE_ARRAYF32: c_int = 11;
pub const SDL_PIXELTYPE_INDEX2: c_int = 12;
pub const enum_SDL_PixelType = c_uint;
pub const SDL_PixelType = enum_SDL_PixelType;
pub const SDL_BITMAPORDER_NONE: c_int = 0;
pub const SDL_BITMAPORDER_4321: c_int = 1;
pub const SDL_BITMAPORDER_1234: c_int = 2;
pub const enum_SDL_BitmapOrder = c_uint;
pub const SDL_BitmapOrder = enum_SDL_BitmapOrder;
pub const SDL_PACKEDORDER_NONE: c_int = 0;
pub const SDL_PACKEDORDER_XRGB: c_int = 1;
pub const SDL_PACKEDORDER_RGBX: c_int = 2;
pub const SDL_PACKEDORDER_ARGB: c_int = 3;
pub const SDL_PACKEDORDER_RGBA: c_int = 4;
pub const SDL_PACKEDORDER_XBGR: c_int = 5;
pub const SDL_PACKEDORDER_BGRX: c_int = 6;
pub const SDL_PACKEDORDER_ABGR: c_int = 7;
pub const SDL_PACKEDORDER_BGRA: c_int = 8;
pub const enum_SDL_PackedOrder = c_uint;
pub const SDL_PackedOrder = enum_SDL_PackedOrder;
pub const SDL_ARRAYORDER_NONE: c_int = 0;
pub const SDL_ARRAYORDER_RGB: c_int = 1;
pub const SDL_ARRAYORDER_RGBA: c_int = 2;
pub const SDL_ARRAYORDER_ARGB: c_int = 3;
pub const SDL_ARRAYORDER_BGR: c_int = 4;
pub const SDL_ARRAYORDER_BGRA: c_int = 5;
pub const SDL_ARRAYORDER_ABGR: c_int = 6;
pub const enum_SDL_ArrayOrder = c_uint;
pub const SDL_ArrayOrder = enum_SDL_ArrayOrder;
pub const SDL_PACKEDLAYOUT_NONE: c_int = 0;
pub const SDL_PACKEDLAYOUT_332: c_int = 1;
pub const SDL_PACKEDLAYOUT_4444: c_int = 2;
pub const SDL_PACKEDLAYOUT_1555: c_int = 3;
pub const SDL_PACKEDLAYOUT_5551: c_int = 4;
pub const SDL_PACKEDLAYOUT_565: c_int = 5;
pub const SDL_PACKEDLAYOUT_8888: c_int = 6;
pub const SDL_PACKEDLAYOUT_2101010: c_int = 7;
pub const SDL_PACKEDLAYOUT_1010102: c_int = 8;
pub const enum_SDL_PackedLayout = c_uint;
pub const SDL_PackedLayout = enum_SDL_PackedLayout;
pub const SDL_PIXELFORMAT_UNKNOWN: c_int = 0;
pub const SDL_PIXELFORMAT_INDEX1LSB: c_int = 286261504;
pub const SDL_PIXELFORMAT_INDEX1MSB: c_int = 287310080;
pub const SDL_PIXELFORMAT_INDEX2LSB: c_int = 470811136;
pub const SDL_PIXELFORMAT_INDEX2MSB: c_int = 471859712;
pub const SDL_PIXELFORMAT_INDEX4LSB: c_int = 303039488;
pub const SDL_PIXELFORMAT_INDEX4MSB: c_int = 304088064;
pub const SDL_PIXELFORMAT_INDEX8: c_int = 318769153;
pub const SDL_PIXELFORMAT_RGB332: c_int = 336660481;
pub const SDL_PIXELFORMAT_XRGB4444: c_int = 353504258;
pub const SDL_PIXELFORMAT_XBGR4444: c_int = 357698562;
pub const SDL_PIXELFORMAT_XRGB1555: c_int = 353570562;
pub const SDL_PIXELFORMAT_XBGR1555: c_int = 357764866;
pub const SDL_PIXELFORMAT_ARGB4444: c_int = 355602434;
pub const SDL_PIXELFORMAT_RGBA4444: c_int = 356651010;
pub const SDL_PIXELFORMAT_ABGR4444: c_int = 359796738;
pub const SDL_PIXELFORMAT_BGRA4444: c_int = 360845314;
pub const SDL_PIXELFORMAT_ARGB1555: c_int = 355667970;
pub const SDL_PIXELFORMAT_RGBA5551: c_int = 356782082;
pub const SDL_PIXELFORMAT_ABGR1555: c_int = 359862274;
pub const SDL_PIXELFORMAT_BGRA5551: c_int = 360976386;
pub const SDL_PIXELFORMAT_RGB565: c_int = 353701890;
pub const SDL_PIXELFORMAT_BGR565: c_int = 357896194;
pub const SDL_PIXELFORMAT_RGB24: c_int = 386930691;
pub const SDL_PIXELFORMAT_BGR24: c_int = 390076419;
pub const SDL_PIXELFORMAT_XRGB8888: c_int = 370546692;
pub const SDL_PIXELFORMAT_RGBX8888: c_int = 371595268;
pub const SDL_PIXELFORMAT_XBGR8888: c_int = 374740996;
pub const SDL_PIXELFORMAT_BGRX8888: c_int = 375789572;
pub const SDL_PIXELFORMAT_ARGB8888: c_int = 372645892;
pub const SDL_PIXELFORMAT_RGBA8888: c_int = 373694468;
pub const SDL_PIXELFORMAT_ABGR8888: c_int = 376840196;
pub const SDL_PIXELFORMAT_BGRA8888: c_int = 377888772;
pub const SDL_PIXELFORMAT_XRGB2101010: c_int = 370614276;
pub const SDL_PIXELFORMAT_XBGR2101010: c_int = 374808580;
pub const SDL_PIXELFORMAT_ARGB2101010: c_int = 372711428;
pub const SDL_PIXELFORMAT_ABGR2101010: c_int = 376905732;
pub const SDL_PIXELFORMAT_RGB48: c_int = 403714054;
pub const SDL_PIXELFORMAT_BGR48: c_int = 406859782;
pub const SDL_PIXELFORMAT_RGBA64: c_int = 404766728;
pub const SDL_PIXELFORMAT_ARGB64: c_int = 405815304;
pub const SDL_PIXELFORMAT_BGRA64: c_int = 407912456;
pub const SDL_PIXELFORMAT_ABGR64: c_int = 408961032;
pub const SDL_PIXELFORMAT_RGB48_FLOAT: c_int = 437268486;
pub const SDL_PIXELFORMAT_BGR48_FLOAT: c_int = 440414214;
pub const SDL_PIXELFORMAT_RGBA64_FLOAT: c_int = 438321160;
pub const SDL_PIXELFORMAT_ARGB64_FLOAT: c_int = 439369736;
pub const SDL_PIXELFORMAT_BGRA64_FLOAT: c_int = 441466888;
pub const SDL_PIXELFORMAT_ABGR64_FLOAT: c_int = 442515464;
pub const SDL_PIXELFORMAT_RGB96_FLOAT: c_int = 454057996;
pub const SDL_PIXELFORMAT_BGR96_FLOAT: c_int = 457203724;
pub const SDL_PIXELFORMAT_RGBA128_FLOAT: c_int = 455114768;
pub const SDL_PIXELFORMAT_ARGB128_FLOAT: c_int = 456163344;
pub const SDL_PIXELFORMAT_BGRA128_FLOAT: c_int = 458260496;
pub const SDL_PIXELFORMAT_ABGR128_FLOAT: c_int = 459309072;
pub const SDL_PIXELFORMAT_RGBA32: c_int = 376840196;
pub const SDL_PIXELFORMAT_ARGB32: c_int = 377888772;
pub const SDL_PIXELFORMAT_BGRA32: c_int = 372645892;
pub const SDL_PIXELFORMAT_ABGR32: c_int = 373694468;
pub const SDL_PIXELFORMAT_RGBX32: c_int = 374740996;
pub const SDL_PIXELFORMAT_XRGB32: c_int = 375789572;
pub const SDL_PIXELFORMAT_BGRX32: c_int = 370546692;
pub const SDL_PIXELFORMAT_XBGR32: c_int = 371595268;
pub const SDL_PIXELFORMAT_YV12: c_int = 842094169;
pub const SDL_PIXELFORMAT_IYUV: c_int = 1448433993;
pub const SDL_PIXELFORMAT_YUY2: c_int = 844715353;
pub const SDL_PIXELFORMAT_UYVY: c_int = 1498831189;
pub const SDL_PIXELFORMAT_YVYU: c_int = 1431918169;
pub const SDL_PIXELFORMAT_NV12: c_int = 842094158;
pub const SDL_PIXELFORMAT_NV21: c_int = 825382478;
pub const SDL_PIXELFORMAT_P010: c_int = 808530000;
pub const SDL_PIXELFORMAT_EXTERNAL_OES: c_int = 542328143;
pub const enum_SDL_PixelFormatEnum = c_uint;
pub const SDL_PixelFormatEnum = enum_SDL_PixelFormatEnum;
pub const SDL_COLOR_TYPE_UNKNOWN: c_int = 0;
pub const SDL_COLOR_TYPE_RGB: c_int = 1;
pub const SDL_COLOR_TYPE_YCBCR: c_int = 2;
pub const enum_SDL_ColorType = c_uint;
pub const SDL_ColorType = enum_SDL_ColorType;
pub const SDL_COLOR_RANGE_UNKNOWN: c_int = 0;
pub const SDL_COLOR_RANGE_LIMITED: c_int = 1;
pub const SDL_COLOR_RANGE_FULL: c_int = 2;
pub const enum_SDL_ColorRange = c_uint;
pub const SDL_ColorRange = enum_SDL_ColorRange;
pub const SDL_COLOR_PRIMARIES_UNKNOWN: c_int = 0;
pub const SDL_COLOR_PRIMARIES_BT709: c_int = 1;
pub const SDL_COLOR_PRIMARIES_UNSPECIFIED: c_int = 2;
pub const SDL_COLOR_PRIMARIES_BT470M: c_int = 4;
pub const SDL_COLOR_PRIMARIES_BT470BG: c_int = 5;
pub const SDL_COLOR_PRIMARIES_BT601: c_int = 6;
pub const SDL_COLOR_PRIMARIES_SMPTE240: c_int = 7;
pub const SDL_COLOR_PRIMARIES_GENERIC_FILM: c_int = 8;
pub const SDL_COLOR_PRIMARIES_BT2020: c_int = 9;
pub const SDL_COLOR_PRIMARIES_XYZ: c_int = 10;
pub const SDL_COLOR_PRIMARIES_SMPTE431: c_int = 11;
pub const SDL_COLOR_PRIMARIES_SMPTE432: c_int = 12;
pub const SDL_COLOR_PRIMARIES_EBU3213: c_int = 22;
pub const SDL_COLOR_PRIMARIES_CUSTOM: c_int = 31;
pub const enum_SDL_ColorPrimaries = c_uint;
pub const SDL_ColorPrimaries = enum_SDL_ColorPrimaries;
pub const SDL_TRANSFER_CHARACTERISTICS_UNKNOWN: c_int = 0;
pub const SDL_TRANSFER_CHARACTERISTICS_BT709: c_int = 1;
pub const SDL_TRANSFER_CHARACTERISTICS_UNSPECIFIED: c_int = 2;
pub const SDL_TRANSFER_CHARACTERISTICS_GAMMA22: c_int = 4;
pub const SDL_TRANSFER_CHARACTERISTICS_GAMMA28: c_int = 5;
pub const SDL_TRANSFER_CHARACTERISTICS_BT601: c_int = 6;
pub const SDL_TRANSFER_CHARACTERISTICS_SMPTE240: c_int = 7;
pub const SDL_TRANSFER_CHARACTERISTICS_LINEAR: c_int = 8;
pub const SDL_TRANSFER_CHARACTERISTICS_LOG100: c_int = 9;
pub const SDL_TRANSFER_CHARACTERISTICS_LOG100_SQRT10: c_int = 10;
pub const SDL_TRANSFER_CHARACTERISTICS_IEC61966: c_int = 11;
pub const SDL_TRANSFER_CHARACTERISTICS_BT1361: c_int = 12;
pub const SDL_TRANSFER_CHARACTERISTICS_SRGB: c_int = 13;
pub const SDL_TRANSFER_CHARACTERISTICS_BT2020_10BIT: c_int = 14;
pub const SDL_TRANSFER_CHARACTERISTICS_BT2020_12BIT: c_int = 15;
pub const SDL_TRANSFER_CHARACTERISTICS_PQ: c_int = 16;
pub const SDL_TRANSFER_CHARACTERISTICS_SMPTE428: c_int = 17;
pub const SDL_TRANSFER_CHARACTERISTICS_HLG: c_int = 18;
pub const SDL_TRANSFER_CHARACTERISTICS_CUSTOM: c_int = 31;
pub const enum_SDL_TransferCharacteristics = c_uint;
pub const SDL_TransferCharacteristics = enum_SDL_TransferCharacteristics;
pub const SDL_MATRIX_COEFFICIENTS_IDENTITY: c_int = 0;
pub const SDL_MATRIX_COEFFICIENTS_BT709: c_int = 1;
pub const SDL_MATRIX_COEFFICIENTS_UNSPECIFIED: c_int = 2;
pub const SDL_MATRIX_COEFFICIENTS_FCC: c_int = 4;
pub const SDL_MATRIX_COEFFICIENTS_BT470BG: c_int = 5;
pub const SDL_MATRIX_COEFFICIENTS_BT601: c_int = 6;
pub const SDL_MATRIX_COEFFICIENTS_SMPTE240: c_int = 7;
pub const SDL_MATRIX_COEFFICIENTS_YCGCO: c_int = 8;
pub const SDL_MATRIX_COEFFICIENTS_BT2020_NCL: c_int = 9;
pub const SDL_MATRIX_COEFFICIENTS_BT2020_CL: c_int = 10;
pub const SDL_MATRIX_COEFFICIENTS_SMPTE2085: c_int = 11;
pub const SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_NCL: c_int = 12;
pub const SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_CL: c_int = 13;
pub const SDL_MATRIX_COEFFICIENTS_ICTCP: c_int = 14;
pub const SDL_MATRIX_COEFFICIENTS_CUSTOM: c_int = 31;
pub const enum_SDL_MatrixCoefficients = c_uint;
pub const SDL_MatrixCoefficients = enum_SDL_MatrixCoefficients;
pub const SDL_CHROMA_LOCATION_NONE: c_int = 0;
pub const SDL_CHROMA_LOCATION_LEFT: c_int = 1;
pub const SDL_CHROMA_LOCATION_CENTER: c_int = 2;
pub const SDL_CHROMA_LOCATION_TOPLEFT: c_int = 3;
pub const enum_SDL_ChromaLocation = c_uint;
pub const SDL_ChromaLocation = enum_SDL_ChromaLocation;
pub const SDL_COLORSPACE_UNKNOWN: c_int = 0;
pub const SDL_COLORSPACE_SRGB: c_int = 301991328;
pub const SDL_COLORSPACE_SRGB_LINEAR: c_int = 301991168;
pub const SDL_COLORSPACE_HDR10: c_int = 301999616;
pub const SDL_COLORSPACE_JPEG: c_int = 570426566;
pub const SDL_COLORSPACE_BT601_LIMITED: c_int = 554703046;
pub const SDL_COLORSPACE_BT601_FULL: c_int = 571480262;
pub const SDL_COLORSPACE_BT709_LIMITED: c_int = 554697761;
pub const SDL_COLORSPACE_BT709_FULL: c_int = 571474977;
pub const SDL_COLORSPACE_BT2020_LIMITED: c_int = 554706441;
pub const SDL_COLORSPACE_BT2020_FULL: c_int = 571483657;
pub const SDL_COLORSPACE_RGB_DEFAULT: c_int = 301991328;
pub const SDL_COLORSPACE_YUV_DEFAULT: c_int = 570426566;
pub const enum_SDL_Colorspace = c_uint;
pub const SDL_Colorspace = enum_SDL_Colorspace;
pub const struct_SDL_Color = extern struct {
    r: Uint8 = @import("std").mem.zeroes(Uint8),
    g: Uint8 = @import("std").mem.zeroes(Uint8),
    b: Uint8 = @import("std").mem.zeroes(Uint8),
    a: Uint8 = @import("std").mem.zeroes(Uint8),
};
pub const SDL_Color = struct_SDL_Color;
pub const struct_SDL_FColor = extern struct {
    r: f32 = @import("std").mem.zeroes(f32),
    g: f32 = @import("std").mem.zeroes(f32),
    b: f32 = @import("std").mem.zeroes(f32),
    a: f32 = @import("std").mem.zeroes(f32),
};
pub const SDL_FColor = struct_SDL_FColor;
pub const struct_SDL_Palette = extern struct {
    ncolors: c_int = @import("std").mem.zeroes(c_int),
    colors: [*c]SDL_Color = @import("std").mem.zeroes([*c]SDL_Color),
    version: Uint32 = @import("std").mem.zeroes(Uint32),
    refcount: c_int = @import("std").mem.zeroes(c_int),
};
pub const SDL_Palette = struct_SDL_Palette;
pub const struct_SDL_PixelFormat = extern struct {
    format: SDL_PixelFormatEnum = @import("std").mem.zeroes(SDL_PixelFormatEnum),
    palette: [*c]SDL_Palette = @import("std").mem.zeroes([*c]SDL_Palette),
    bits_per_pixel: Uint8 = @import("std").mem.zeroes(Uint8),
    bytes_per_pixel: Uint8 = @import("std").mem.zeroes(Uint8),
    padding: [2]Uint8 = @import("std").mem.zeroes([2]Uint8),
    Rmask: Uint32 = @import("std").mem.zeroes(Uint32),
    Gmask: Uint32 = @import("std").mem.zeroes(Uint32),
    Bmask: Uint32 = @import("std").mem.zeroes(Uint32),
    Amask: Uint32 = @import("std").mem.zeroes(Uint32),
    Rloss: Uint8 = @import("std").mem.zeroes(Uint8),
    Gloss: Uint8 = @import("std").mem.zeroes(Uint8),
    Bloss: Uint8 = @import("std").mem.zeroes(Uint8),
    Aloss: Uint8 = @import("std").mem.zeroes(Uint8),
    Rshift: Uint8 = @import("std").mem.zeroes(Uint8),
    Gshift: Uint8 = @import("std").mem.zeroes(Uint8),
    Bshift: Uint8 = @import("std").mem.zeroes(Uint8),
    Ashift: Uint8 = @import("std").mem.zeroes(Uint8),
    refcount: c_int = @import("std").mem.zeroes(c_int),
    next: [*c]struct_SDL_PixelFormat = @import("std").mem.zeroes([*c]struct_SDL_PixelFormat),
};
pub const SDL_PixelFormat = struct_SDL_PixelFormat;
pub extern fn SDL_GetPixelFormatName(format: SDL_PixelFormatEnum) [*c]const u8;
pub extern fn SDL_GetMasksForPixelFormatEnum(format: SDL_PixelFormatEnum, bpp: [*c]c_int, Rmask: [*c]Uint32, Gmask: [*c]Uint32, Bmask: [*c]Uint32, Amask: [*c]Uint32) SDL_bool;
pub extern fn SDL_GetPixelFormatEnumForMasks(bpp: c_int, Rmask: Uint32, Gmask: Uint32, Bmask: Uint32, Amask: Uint32) SDL_PixelFormatEnum;
pub extern fn SDL_CreatePixelFormat(pixel_format: SDL_PixelFormatEnum) [*c]SDL_PixelFormat;
pub extern fn SDL_DestroyPixelFormat(format: [*c]SDL_PixelFormat) void;
pub extern fn SDL_CreatePalette(ncolors: c_int) [*c]SDL_Palette;
pub extern fn SDL_SetPixelFormatPalette(format: [*c]SDL_PixelFormat, palette: [*c]SDL_Palette) c_int;
pub extern fn SDL_SetPaletteColors(palette: [*c]SDL_Palette, colors: [*c]const SDL_Color, firstcolor: c_int, ncolors: c_int) c_int;
pub extern fn SDL_DestroyPalette(palette: [*c]SDL_Palette) void;
pub extern fn SDL_MapRGB(format: [*c]const SDL_PixelFormat, r: Uint8, g: Uint8, b: Uint8) Uint32;
pub extern fn SDL_MapRGBA(format: [*c]const SDL_PixelFormat, r: Uint8, g: Uint8, b: Uint8, a: Uint8) Uint32;
pub extern fn SDL_GetRGB(pixel: Uint32, format: [*c]const SDL_PixelFormat, r: [*c]Uint8, g: [*c]Uint8, b: [*c]Uint8) void;
pub extern fn SDL_GetRGBA(pixel: Uint32, format: [*c]const SDL_PixelFormat, r: [*c]Uint8, g: [*c]Uint8, b: [*c]Uint8, a: [*c]Uint8) void;
pub const struct_SDL_Point = extern struct {
    x: c_int = @import("std").mem.zeroes(c_int),
    y: c_int = @import("std").mem.zeroes(c_int),
};
pub const SDL_Point = struct_SDL_Point;
pub const struct_SDL_FPoint = extern struct {
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
};
pub const SDL_FPoint = struct_SDL_FPoint;
pub const struct_SDL_Rect = extern struct {
    x: c_int = @import("std").mem.zeroes(c_int),
    y: c_int = @import("std").mem.zeroes(c_int),
    w: c_int = @import("std").mem.zeroes(c_int),
    h: c_int = @import("std").mem.zeroes(c_int),
};
pub const SDL_Rect = struct_SDL_Rect;
pub const struct_SDL_FRect = extern struct {
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    w: f32 = @import("std").mem.zeroes(f32),
    h: f32 = @import("std").mem.zeroes(f32),
};
pub const SDL_FRect = struct_SDL_FRect;
pub inline fn SDL_PointInRect(arg_p: [*c]const SDL_Point, arg_r: [*c]const SDL_Rect) SDL_bool {
    var p = arg_p;
    _ = &p;
    var r = arg_r;
    _ = &r;
    return if ((((((p != null) and (r != null)) and (p.*.x >= r.*.x)) and (p.*.x < (r.*.x + r.*.w))) and (p.*.y >= r.*.y)) and (p.*.y < (r.*.y + r.*.h))) @as(c_int, 1) else @as(c_int, 0);
}
pub inline fn SDL_RectEmpty(arg_r: [*c]const SDL_Rect) SDL_bool {
    var r = arg_r;
    _ = &r;
    return if ((!(r != null) or (r.*.w <= @as(c_int, 0))) or (r.*.h <= @as(c_int, 0))) @as(c_int, 1) else @as(c_int, 0);
}
pub inline fn SDL_RectsEqual(arg_a: [*c]const SDL_Rect, arg_b: [*c]const SDL_Rect) SDL_bool {
    var a = arg_a;
    _ = &a;
    var b = arg_b;
    _ = &b;
    return if ((((((a != null) and (b != null)) and (a.*.x == b.*.x)) and (a.*.y == b.*.y)) and (a.*.w == b.*.w)) and (a.*.h == b.*.h)) @as(c_int, 1) else @as(c_int, 0);
}
pub extern fn SDL_HasRectIntersection(A: [*c]const SDL_Rect, B: [*c]const SDL_Rect) SDL_bool;
pub extern fn SDL_GetRectIntersection(A: [*c]const SDL_Rect, B: [*c]const SDL_Rect, result: [*c]SDL_Rect) SDL_bool;
pub extern fn SDL_GetRectUnion(A: [*c]const SDL_Rect, B: [*c]const SDL_Rect, result: [*c]SDL_Rect) c_int;
pub extern fn SDL_GetRectEnclosingPoints(points: [*c]const SDL_Point, count: c_int, clip: [*c]const SDL_Rect, result: [*c]SDL_Rect) SDL_bool;
pub extern fn SDL_GetRectAndLineIntersection(rect: [*c]const SDL_Rect, X1: [*c]c_int, Y1: [*c]c_int, X2: [*c]c_int, Y2: [*c]c_int) SDL_bool;
pub inline fn SDL_PointInRectFloat(arg_p: [*c]const SDL_FPoint, arg_r: [*c]const SDL_FRect) SDL_bool {
    var p = arg_p;
    _ = &p;
    var r = arg_r;
    _ = &r;
    return if ((((((p != null) and (r != null)) and (p.*.x >= r.*.x)) and (p.*.x < (r.*.x + r.*.w))) and (p.*.y >= r.*.y)) and (p.*.y < (r.*.y + r.*.h))) @as(c_int, 1) else @as(c_int, 0);
}
pub inline fn SDL_RectEmptyFloat(arg_r: [*c]const SDL_FRect) SDL_bool {
    var r = arg_r;
    _ = &r;
    return if ((!(r != null) or (r.*.w <= 0.0)) or (r.*.h <= 0.0)) @as(c_int, 1) else @as(c_int, 0);
}
pub inline fn SDL_RectsEqualEpsilon(arg_a: [*c]const SDL_FRect, arg_b: [*c]const SDL_FRect, epsilon: f32) SDL_bool {
    var a = arg_a;
    _ = &a;
    var b = arg_b;
    _ = &b;
    _ = &epsilon;
    return if (((a != null) and (b != null)) and ((a == b) or ((((SDL_fabsf(a.*.x - b.*.x) <= epsilon) and (SDL_fabsf(a.*.y - b.*.y) <= epsilon)) and (SDL_fabsf(a.*.w - b.*.w) <= epsilon)) and (SDL_fabsf(a.*.h - b.*.h) <= epsilon)))) @as(c_int, 1) else @as(c_int, 0);
}
pub inline fn SDL_RectsEqualFloat(arg_a: [*c]const SDL_FRect, arg_b: [*c]const SDL_FRect) SDL_bool {
    var a = arg_a;
    _ = &a;
    var b = arg_b;
    _ = &b;
    return SDL_RectsEqualEpsilon(a, b, 0.00000011920928955078125);
}
pub extern fn SDL_HasRectIntersectionFloat(A: [*c]const SDL_FRect, B: [*c]const SDL_FRect) SDL_bool;
pub extern fn SDL_GetRectIntersectionFloat(A: [*c]const SDL_FRect, B: [*c]const SDL_FRect, result: [*c]SDL_FRect) SDL_bool;
pub extern fn SDL_GetRectUnionFloat(A: [*c]const SDL_FRect, B: [*c]const SDL_FRect, result: [*c]SDL_FRect) c_int;
pub extern fn SDL_GetRectEnclosingPointsFloat(points: [*c]const SDL_FPoint, count: c_int, clip: [*c]const SDL_FRect, result: [*c]SDL_FRect) SDL_bool;
pub extern fn SDL_GetRectAndLineIntersectionFloat(rect: [*c]const SDL_FRect, X1: [*c]f32, Y1: [*c]f32, X2: [*c]f32, Y2: [*c]f32) SDL_bool;
pub const SDL_SurfaceFlags = Uint32;
pub const struct_SDL_BlitMap = opaque {};
pub const SDL_BlitMap = struct_SDL_BlitMap;
pub const SDL_SCALEMODE_NEAREST: c_int = 0;
pub const SDL_SCALEMODE_LINEAR: c_int = 1;
pub const SDL_SCALEMODE_BEST: c_int = 2;
pub const enum_SDL_ScaleMode = c_uint;
pub const SDL_ScaleMode = enum_SDL_ScaleMode;
pub const SDL_FLIP_NONE: c_int = 0;
pub const SDL_FLIP_HORIZONTAL: c_int = 1;
pub const SDL_FLIP_VERTICAL: c_int = 2;
pub const enum_SDL_FlipMode = c_uint;
pub const SDL_FlipMode = enum_SDL_FlipMode;
pub const struct_SDL_Surface = extern struct {
    flags: SDL_SurfaceFlags = @import("std").mem.zeroes(SDL_SurfaceFlags),
    format: [*c]SDL_PixelFormat = @import("std").mem.zeroes([*c]SDL_PixelFormat),
    w: c_int = @import("std").mem.zeroes(c_int),
    h: c_int = @import("std").mem.zeroes(c_int),
    pitch: c_int = @import("std").mem.zeroes(c_int),
    pixels: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    reserved: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    locked: c_int = @import("std").mem.zeroes(c_int),
    list_blitmap: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    clip_rect: SDL_Rect = @import("std").mem.zeroes(SDL_Rect),
    map: ?*SDL_BlitMap = @import("std").mem.zeroes(?*SDL_BlitMap),
    refcount: c_int = @import("std").mem.zeroes(c_int),
};
pub const SDL_Surface = struct_SDL_Surface;
pub extern fn SDL_CreateSurface(width: c_int, height: c_int, format: SDL_PixelFormatEnum) [*c]SDL_Surface;
pub extern fn SDL_CreateSurfaceFrom(pixels: ?*anyopaque, width: c_int, height: c_int, pitch: c_int, format: SDL_PixelFormatEnum) [*c]SDL_Surface;
pub extern fn SDL_DestroySurface(surface: [*c]SDL_Surface) void;
pub extern fn SDL_GetSurfaceProperties(surface: [*c]SDL_Surface) SDL_PropertiesID;
pub extern fn SDL_SetSurfaceColorspace(surface: [*c]SDL_Surface, colorspace: SDL_Colorspace) c_int;
pub extern fn SDL_GetSurfaceColorspace(surface: [*c]SDL_Surface, colorspace: [*c]SDL_Colorspace) c_int;
pub extern fn SDL_SetSurfacePalette(surface: [*c]SDL_Surface, palette: [*c]SDL_Palette) c_int;
pub extern fn SDL_LockSurface(surface: [*c]SDL_Surface) c_int;
pub extern fn SDL_UnlockSurface(surface: [*c]SDL_Surface) void;
pub extern fn SDL_LoadBMP_IO(src: ?*SDL_IOStream, closeio: SDL_bool) [*c]SDL_Surface;
pub extern fn SDL_LoadBMP(file: [*c]const u8) [*c]SDL_Surface;
pub extern fn SDL_SaveBMP_IO(surface: [*c]SDL_Surface, dst: ?*SDL_IOStream, closeio: SDL_bool) c_int;
pub extern fn SDL_SaveBMP(surface: [*c]SDL_Surface, file: [*c]const u8) c_int;
pub extern fn SDL_SetSurfaceRLE(surface: [*c]SDL_Surface, flag: c_int) c_int;
pub extern fn SDL_SurfaceHasRLE(surface: [*c]SDL_Surface) SDL_bool;
pub extern fn SDL_SetSurfaceColorKey(surface: [*c]SDL_Surface, flag: c_int, key: Uint32) c_int;
pub extern fn SDL_SurfaceHasColorKey(surface: [*c]SDL_Surface) SDL_bool;
pub extern fn SDL_GetSurfaceColorKey(surface: [*c]SDL_Surface, key: [*c]Uint32) c_int;
pub extern fn SDL_SetSurfaceColorMod(surface: [*c]SDL_Surface, r: Uint8, g: Uint8, b: Uint8) c_int;
pub extern fn SDL_GetSurfaceColorMod(surface: [*c]SDL_Surface, r: [*c]Uint8, g: [*c]Uint8, b: [*c]Uint8) c_int;
pub extern fn SDL_SetSurfaceAlphaMod(surface: [*c]SDL_Surface, alpha: Uint8) c_int;
pub extern fn SDL_GetSurfaceAlphaMod(surface: [*c]SDL_Surface, alpha: [*c]Uint8) c_int;
pub extern fn SDL_SetSurfaceBlendMode(surface: [*c]SDL_Surface, blendMode: SDL_BlendMode) c_int;
pub extern fn SDL_GetSurfaceBlendMode(surface: [*c]SDL_Surface, blendMode: [*c]SDL_BlendMode) c_int;
pub extern fn SDL_SetSurfaceClipRect(surface: [*c]SDL_Surface, rect: [*c]const SDL_Rect) SDL_bool;
pub extern fn SDL_GetSurfaceClipRect(surface: [*c]SDL_Surface, rect: [*c]SDL_Rect) c_int;
pub extern fn SDL_FlipSurface(surface: [*c]SDL_Surface, flip: SDL_FlipMode) c_int;
pub extern fn SDL_DuplicateSurface(surface: [*c]SDL_Surface) [*c]SDL_Surface;
pub extern fn SDL_ConvertSurface(surface: [*c]SDL_Surface, format: [*c]const SDL_PixelFormat) [*c]SDL_Surface;
pub extern fn SDL_ConvertSurfaceFormat(surface: [*c]SDL_Surface, pixel_format: SDL_PixelFormatEnum) [*c]SDL_Surface;
pub extern fn SDL_ConvertSurfaceFormatAndColorspace(surface: [*c]SDL_Surface, pixel_format: SDL_PixelFormatEnum, colorspace: SDL_Colorspace, props: SDL_PropertiesID) [*c]SDL_Surface;
pub extern fn SDL_ConvertPixels(width: c_int, height: c_int, src_format: SDL_PixelFormatEnum, src: ?*const anyopaque, src_pitch: c_int, dst_format: SDL_PixelFormatEnum, dst: ?*anyopaque, dst_pitch: c_int) c_int;
pub extern fn SDL_ConvertPixelsAndColorspace(width: c_int, height: c_int, src_format: SDL_PixelFormatEnum, src_colorspace: SDL_Colorspace, src_properties: SDL_PropertiesID, src: ?*const anyopaque, src_pitch: c_int, dst_format: SDL_PixelFormatEnum, dst_colorspace: SDL_Colorspace, dst_properties: SDL_PropertiesID, dst: ?*anyopaque, dst_pitch: c_int) c_int;
pub extern fn SDL_PremultiplyAlpha(width: c_int, height: c_int, src_format: SDL_PixelFormatEnum, src: ?*const anyopaque, src_pitch: c_int, dst_format: SDL_PixelFormatEnum, dst: ?*anyopaque, dst_pitch: c_int) c_int;
pub extern fn SDL_FillSurfaceRect(dst: [*c]SDL_Surface, rect: [*c]const SDL_Rect, color: Uint32) c_int;
pub extern fn SDL_FillSurfaceRects(dst: [*c]SDL_Surface, rects: [*c]const SDL_Rect, count: c_int, color: Uint32) c_int;
pub extern fn SDL_BlitSurface(src: [*c]SDL_Surface, srcrect: [*c]const SDL_Rect, dst: [*c]SDL_Surface, dstrect: [*c]SDL_Rect) c_int;
pub extern fn SDL_BlitSurfaceUnchecked(src: [*c]SDL_Surface, srcrect: [*c]const SDL_Rect, dst: [*c]SDL_Surface, dstrect: [*c]const SDL_Rect) c_int;
pub extern fn SDL_SoftStretch(src: [*c]SDL_Surface, srcrect: [*c]const SDL_Rect, dst: [*c]SDL_Surface, dstrect: [*c]const SDL_Rect, scaleMode: SDL_ScaleMode) c_int;
pub extern fn SDL_BlitSurfaceScaled(src: [*c]SDL_Surface, srcrect: [*c]const SDL_Rect, dst: [*c]SDL_Surface, dstrect: [*c]SDL_Rect, scaleMode: SDL_ScaleMode) c_int;
pub extern fn SDL_BlitSurfaceUncheckedScaled(src: [*c]SDL_Surface, srcrect: [*c]const SDL_Rect, dst: [*c]SDL_Surface, dstrect: [*c]const SDL_Rect, scaleMode: SDL_ScaleMode) c_int;
pub extern fn SDL_ReadSurfacePixel(surface: [*c]SDL_Surface, x: c_int, y: c_int, r: [*c]Uint8, g: [*c]Uint8, b: [*c]Uint8, a: [*c]Uint8) c_int;
pub const SDL_DisplayID = Uint32;
pub const SDL_WindowID = Uint32;
pub const SDL_SYSTEM_THEME_UNKNOWN: c_int = 0;
pub const SDL_SYSTEM_THEME_LIGHT: c_int = 1;
pub const SDL_SYSTEM_THEME_DARK: c_int = 2;
pub const enum_SDL_SystemTheme = c_uint;
pub const SDL_SystemTheme = enum_SDL_SystemTheme;
pub const struct_SDL_DisplayMode = extern struct {
    displayID: SDL_DisplayID = @import("std").mem.zeroes(SDL_DisplayID),
    format: SDL_PixelFormatEnum = @import("std").mem.zeroes(SDL_PixelFormatEnum),
    w: c_int = @import("std").mem.zeroes(c_int),
    h: c_int = @import("std").mem.zeroes(c_int),
    pixel_density: f32 = @import("std").mem.zeroes(f32),
    refresh_rate: f32 = @import("std").mem.zeroes(f32),
    driverdata: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const SDL_DisplayMode = struct_SDL_DisplayMode;
pub const SDL_ORIENTATION_UNKNOWN: c_int = 0;
pub const SDL_ORIENTATION_LANDSCAPE: c_int = 1;
pub const SDL_ORIENTATION_LANDSCAPE_FLIPPED: c_int = 2;
pub const SDL_ORIENTATION_PORTRAIT: c_int = 3;
pub const SDL_ORIENTATION_PORTRAIT_FLIPPED: c_int = 4;
pub const enum_SDL_DisplayOrientation = c_uint;
pub const SDL_DisplayOrientation = enum_SDL_DisplayOrientation;
pub const struct_SDL_Window = opaque {};
pub const SDL_Window = struct_SDL_Window;
pub const SDL_WindowFlags = Uint64;
pub const SDL_FLASH_CANCEL: c_int = 0;
pub const SDL_FLASH_BRIEFLY: c_int = 1;
pub const SDL_FLASH_UNTIL_FOCUSED: c_int = 2;
pub const enum_SDL_FlashOperation = c_uint;
pub const SDL_FlashOperation = enum_SDL_FlashOperation;
pub const SDL_GLContext = ?*anyopaque;
pub const SDL_EGLDisplay = ?*anyopaque;
pub const SDL_EGLConfig = ?*anyopaque;
pub const SDL_EGLSurface = ?*anyopaque;
pub const SDL_EGLAttrib = isize;
pub const SDL_EGLint = c_int;
pub const SDL_EGLAttribArrayCallback = ?*const fn () callconv(.C) [*c]SDL_EGLAttrib;
pub const SDL_EGLIntArrayCallback = ?*const fn () callconv(.C) [*c]SDL_EGLint;
pub const SDL_GL_RED_SIZE: c_int = 0;
pub const SDL_GL_GREEN_SIZE: c_int = 1;
pub const SDL_GL_BLUE_SIZE: c_int = 2;
pub const SDL_GL_ALPHA_SIZE: c_int = 3;
pub const SDL_GL_BUFFER_SIZE: c_int = 4;
pub const SDL_GL_DOUBLEBUFFER: c_int = 5;
pub const SDL_GL_DEPTH_SIZE: c_int = 6;
pub const SDL_GL_STENCIL_SIZE: c_int = 7;
pub const SDL_GL_ACCUM_RED_SIZE: c_int = 8;
pub const SDL_GL_ACCUM_GREEN_SIZE: c_int = 9;
pub const SDL_GL_ACCUM_BLUE_SIZE: c_int = 10;
pub const SDL_GL_ACCUM_ALPHA_SIZE: c_int = 11;
pub const SDL_GL_STEREO: c_int = 12;
pub const SDL_GL_MULTISAMPLEBUFFERS: c_int = 13;
pub const SDL_GL_MULTISAMPLESAMPLES: c_int = 14;
pub const SDL_GL_ACCELERATED_VISUAL: c_int = 15;
pub const SDL_GL_RETAINED_BACKING: c_int = 16;
pub const SDL_GL_CONTEXT_MAJOR_VERSION: c_int = 17;
pub const SDL_GL_CONTEXT_MINOR_VERSION: c_int = 18;
pub const SDL_GL_CONTEXT_FLAGS: c_int = 19;
pub const SDL_GL_CONTEXT_PROFILE_MASK: c_int = 20;
pub const SDL_GL_SHARE_WITH_CURRENT_CONTEXT: c_int = 21;
pub const SDL_GL_FRAMEBUFFER_SRGB_CAPABLE: c_int = 22;
pub const SDL_GL_CONTEXT_RELEASE_BEHAVIOR: c_int = 23;
pub const SDL_GL_CONTEXT_RESET_NOTIFICATION: c_int = 24;
pub const SDL_GL_CONTEXT_NO_ERROR: c_int = 25;
pub const SDL_GL_FLOATBUFFERS: c_int = 26;
pub const SDL_GL_EGL_PLATFORM: c_int = 27;
pub const enum_SDL_GLattr = c_uint;
pub const SDL_GLattr = enum_SDL_GLattr;
pub const SDL_GL_CONTEXT_PROFILE_CORE: c_int = 1;
pub const SDL_GL_CONTEXT_PROFILE_COMPATIBILITY: c_int = 2;
pub const SDL_GL_CONTEXT_PROFILE_ES: c_int = 4;
pub const enum_SDL_GLprofile = c_uint;
pub const SDL_GLprofile = enum_SDL_GLprofile;
pub const SDL_GL_CONTEXT_DEBUG_FLAG: c_int = 1;
pub const SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG: c_int = 2;
pub const SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG: c_int = 4;
pub const SDL_GL_CONTEXT_RESET_ISOLATION_FLAG: c_int = 8;
pub const enum_SDL_GLcontextFlag = c_uint;
pub const SDL_GLcontextFlag = enum_SDL_GLcontextFlag;
pub const SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE: c_int = 0;
pub const SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH: c_int = 1;
pub const enum_SDL_GLcontextReleaseFlag = c_uint;
pub const SDL_GLcontextReleaseFlag = enum_SDL_GLcontextReleaseFlag;
pub const SDL_GL_CONTEXT_RESET_NO_NOTIFICATION: c_int = 0;
pub const SDL_GL_CONTEXT_RESET_LOSE_CONTEXT: c_int = 1;
pub const enum_SDL_GLContextResetNotification = c_uint;
pub const SDL_GLContextResetNotification = enum_SDL_GLContextResetNotification;
pub extern fn SDL_GetNumVideoDrivers() c_int;
pub extern fn SDL_GetVideoDriver(index: c_int) [*c]const u8;
pub extern fn SDL_GetCurrentVideoDriver() [*c]const u8;
pub extern fn SDL_GetSystemTheme() SDL_SystemTheme;
pub extern fn SDL_GetDisplays(count: [*c]c_int) [*c]SDL_DisplayID;
pub extern fn SDL_GetPrimaryDisplay() SDL_DisplayID;
pub extern fn SDL_GetDisplayProperties(displayID: SDL_DisplayID) SDL_PropertiesID;
pub extern fn SDL_GetDisplayName(displayID: SDL_DisplayID) [*c]const u8;
pub extern fn SDL_GetDisplayBounds(displayID: SDL_DisplayID, rect: [*c]SDL_Rect) c_int;
pub extern fn SDL_GetDisplayUsableBounds(displayID: SDL_DisplayID, rect: [*c]SDL_Rect) c_int;
pub extern fn SDL_GetNaturalDisplayOrientation(displayID: SDL_DisplayID) SDL_DisplayOrientation;
pub extern fn SDL_GetCurrentDisplayOrientation(displayID: SDL_DisplayID) SDL_DisplayOrientation;
pub extern fn SDL_GetDisplayContentScale(displayID: SDL_DisplayID) f32;
pub extern fn SDL_GetFullscreenDisplayModes(displayID: SDL_DisplayID, count: [*c]c_int) [*c][*c]const SDL_DisplayMode;
pub extern fn SDL_GetClosestFullscreenDisplayMode(displayID: SDL_DisplayID, w: c_int, h: c_int, refresh_rate: f32, include_high_density_modes: SDL_bool) [*c]const SDL_DisplayMode;
pub extern fn SDL_GetDesktopDisplayMode(displayID: SDL_DisplayID) [*c]const SDL_DisplayMode;
pub extern fn SDL_GetCurrentDisplayMode(displayID: SDL_DisplayID) [*c]const SDL_DisplayMode;
pub extern fn SDL_GetDisplayForPoint(point: [*c]const SDL_Point) SDL_DisplayID;
pub extern fn SDL_GetDisplayForRect(rect: [*c]const SDL_Rect) SDL_DisplayID;
pub extern fn SDL_GetDisplayForWindow(window: ?*SDL_Window) SDL_DisplayID;
pub extern fn SDL_GetWindowPixelDensity(window: ?*SDL_Window) f32;
pub extern fn SDL_GetWindowDisplayScale(window: ?*SDL_Window) f32;
pub extern fn SDL_SetWindowFullscreenMode(window: ?*SDL_Window, mode: [*c]const SDL_DisplayMode) c_int;
pub extern fn SDL_GetWindowFullscreenMode(window: ?*SDL_Window) [*c]const SDL_DisplayMode;
pub extern fn SDL_GetWindowICCProfile(window: ?*SDL_Window, size: [*c]usize) ?*anyopaque;
pub extern fn SDL_GetWindowPixelFormat(window: ?*SDL_Window) Uint32;
pub extern fn SDL_CreateWindow(title: [*c]const u8, w: c_int, h: c_int, flags: SDL_WindowFlags) ?*SDL_Window;
pub extern fn SDL_CreatePopupWindow(parent: ?*SDL_Window, offset_x: c_int, offset_y: c_int, w: c_int, h: c_int, flags: SDL_WindowFlags) ?*SDL_Window;
pub extern fn SDL_CreateWindowWithProperties(props: SDL_PropertiesID) ?*SDL_Window;
pub extern fn SDL_GetWindowID(window: ?*SDL_Window) SDL_WindowID;
pub extern fn SDL_GetWindowFromID(id: SDL_WindowID) ?*SDL_Window;
pub extern fn SDL_GetWindowParent(window: ?*SDL_Window) ?*SDL_Window;
pub extern fn SDL_GetWindowProperties(window: ?*SDL_Window) SDL_PropertiesID;
pub extern fn SDL_GetWindowFlags(window: ?*SDL_Window) SDL_WindowFlags;
pub extern fn SDL_SetWindowTitle(window: ?*SDL_Window, title: [*c]const u8) c_int;
pub extern fn SDL_GetWindowTitle(window: ?*SDL_Window) [*c]const u8;
pub extern fn SDL_SetWindowIcon(window: ?*SDL_Window, icon: [*c]SDL_Surface) c_int;
pub extern fn SDL_SetWindowPosition(window: ?*SDL_Window, x: c_int, y: c_int) c_int;
pub extern fn SDL_GetWindowPosition(window: ?*SDL_Window, x: [*c]c_int, y: [*c]c_int) c_int;
pub extern fn SDL_SetWindowSize(window: ?*SDL_Window, w: c_int, h: c_int) c_int;
pub extern fn SDL_GetWindowSize(window: ?*SDL_Window, w: [*c]c_int, h: [*c]c_int) c_int;
pub extern fn SDL_SetWindowAspectRatio(window: ?*SDL_Window, min_aspect: f32, max_aspect: f32) c_int;
pub extern fn SDL_GetWindowAspectRatio(window: ?*SDL_Window, min_aspect: [*c]f32, max_aspect: [*c]f32) c_int;
pub extern fn SDL_GetWindowBordersSize(window: ?*SDL_Window, top: [*c]c_int, left: [*c]c_int, bottom: [*c]c_int, right: [*c]c_int) c_int;
pub extern fn SDL_GetWindowSizeInPixels(window: ?*SDL_Window, w: [*c]c_int, h: [*c]c_int) c_int;
pub extern fn SDL_SetWindowMinimumSize(window: ?*SDL_Window, min_w: c_int, min_h: c_int) c_int;
pub extern fn SDL_GetWindowMinimumSize(window: ?*SDL_Window, w: [*c]c_int, h: [*c]c_int) c_int;
pub extern fn SDL_SetWindowMaximumSize(window: ?*SDL_Window, max_w: c_int, max_h: c_int) c_int;
pub extern fn SDL_GetWindowMaximumSize(window: ?*SDL_Window, w: [*c]c_int, h: [*c]c_int) c_int;
pub extern fn SDL_SetWindowBordered(window: ?*SDL_Window, bordered: SDL_bool) c_int;
pub extern fn SDL_SetWindowResizable(window: ?*SDL_Window, resizable: SDL_bool) c_int;
pub extern fn SDL_SetWindowAlwaysOnTop(window: ?*SDL_Window, on_top: SDL_bool) c_int;
pub extern fn SDL_ShowWindow(window: ?*SDL_Window) c_int;
pub extern fn SDL_HideWindow(window: ?*SDL_Window) c_int;
pub extern fn SDL_RaiseWindow(window: ?*SDL_Window) c_int;
pub extern fn SDL_MaximizeWindow(window: ?*SDL_Window) c_int;
pub extern fn SDL_MinimizeWindow(window: ?*SDL_Window) c_int;
pub extern fn SDL_RestoreWindow(window: ?*SDL_Window) c_int;
pub extern fn SDL_SetWindowFullscreen(window: ?*SDL_Window, fullscreen: SDL_bool) c_int;
pub extern fn SDL_SyncWindow(window: ?*SDL_Window) c_int;
pub extern fn SDL_WindowHasSurface(window: ?*SDL_Window) SDL_bool;
pub extern fn SDL_GetWindowSurface(window: ?*SDL_Window) [*c]SDL_Surface;
pub extern fn SDL_SetWindowSurfaceVSync(window: ?*SDL_Window, vsync: c_int) c_int;
pub extern fn SDL_GetWindowSurfaceVSync(window: ?*SDL_Window, vsync: [*c]c_int) c_int;
pub extern fn SDL_UpdateWindowSurface(window: ?*SDL_Window) c_int;
pub extern fn SDL_UpdateWindowSurfaceRects(window: ?*SDL_Window, rects: [*c]const SDL_Rect, numrects: c_int) c_int;
pub extern fn SDL_DestroyWindowSurface(window: ?*SDL_Window) c_int;
pub extern fn SDL_SetWindowKeyboardGrab(window: ?*SDL_Window, grabbed: SDL_bool) c_int;
pub extern fn SDL_SetWindowMouseGrab(window: ?*SDL_Window, grabbed: SDL_bool) c_int;
pub extern fn SDL_GetWindowKeyboardGrab(window: ?*SDL_Window) SDL_bool;
pub extern fn SDL_GetWindowMouseGrab(window: ?*SDL_Window) SDL_bool;
pub extern fn SDL_GetGrabbedWindow() ?*SDL_Window;
pub extern fn SDL_SetWindowMouseRect(window: ?*SDL_Window, rect: [*c]const SDL_Rect) c_int;
pub extern fn SDL_GetWindowMouseRect(window: ?*SDL_Window) [*c]const SDL_Rect;
pub extern fn SDL_SetWindowOpacity(window: ?*SDL_Window, opacity: f32) c_int;
pub extern fn SDL_GetWindowOpacity(window: ?*SDL_Window, out_opacity: [*c]f32) c_int;
pub extern fn SDL_SetWindowModalFor(modal_window: ?*SDL_Window, parent_window: ?*SDL_Window) c_int;
pub extern fn SDL_SetWindowInputFocus(window: ?*SDL_Window) c_int;
pub extern fn SDL_SetWindowFocusable(window: ?*SDL_Window, focusable: SDL_bool) c_int;
pub extern fn SDL_ShowWindowSystemMenu(window: ?*SDL_Window, x: c_int, y: c_int) c_int;
pub const SDL_HITTEST_NORMAL: c_int = 0;
pub const SDL_HITTEST_DRAGGABLE: c_int = 1;
pub const SDL_HITTEST_RESIZE_TOPLEFT: c_int = 2;
pub const SDL_HITTEST_RESIZE_TOP: c_int = 3;
pub const SDL_HITTEST_RESIZE_TOPRIGHT: c_int = 4;
pub const SDL_HITTEST_RESIZE_RIGHT: c_int = 5;
pub const SDL_HITTEST_RESIZE_BOTTOMRIGHT: c_int = 6;
pub const SDL_HITTEST_RESIZE_BOTTOM: c_int = 7;
pub const SDL_HITTEST_RESIZE_BOTTOMLEFT: c_int = 8;
pub const SDL_HITTEST_RESIZE_LEFT: c_int = 9;
pub const enum_SDL_HitTestResult = c_uint;
pub const SDL_HitTestResult = enum_SDL_HitTestResult;
pub const SDL_HitTest = ?*const fn (?*SDL_Window, [*c]const SDL_Point, ?*anyopaque) callconv(.C) SDL_HitTestResult;
pub extern fn SDL_SetWindowHitTest(window: ?*SDL_Window, callback: SDL_HitTest, callback_data: ?*anyopaque) c_int;
pub extern fn SDL_SetWindowShape(window: ?*SDL_Window, shape: [*c]SDL_Surface) c_int;
pub extern fn SDL_FlashWindow(window: ?*SDL_Window, operation: SDL_FlashOperation) c_int;
pub extern fn SDL_DestroyWindow(window: ?*SDL_Window) void;
pub extern fn SDL_ScreenSaverEnabled() SDL_bool;
pub extern fn SDL_EnableScreenSaver() c_int;
pub extern fn SDL_DisableScreenSaver() c_int;
pub extern fn SDL_GL_LoadLibrary(path: [*c]const u8) c_int;
pub extern fn SDL_GL_GetProcAddress(proc: [*c]const u8) SDL_FunctionPointer;
pub extern fn SDL_EGL_GetProcAddress(proc: [*c]const u8) SDL_FunctionPointer;
pub extern fn SDL_GL_UnloadLibrary() void;
pub extern fn SDL_GL_ExtensionSupported(extension: [*c]const u8) SDL_bool;
pub extern fn SDL_GL_ResetAttributes() void;
pub extern fn SDL_GL_SetAttribute(attr: SDL_GLattr, value: c_int) c_int;
pub extern fn SDL_GL_GetAttribute(attr: SDL_GLattr, value: [*c]c_int) c_int;
pub extern fn SDL_GL_CreateContext(window: ?*SDL_Window) SDL_GLContext;
pub extern fn SDL_GL_MakeCurrent(window: ?*SDL_Window, context: SDL_GLContext) c_int;
pub extern fn SDL_GL_GetCurrentWindow() ?*SDL_Window;
pub extern fn SDL_GL_GetCurrentContext() SDL_GLContext;
pub extern fn SDL_EGL_GetCurrentEGLDisplay() SDL_EGLDisplay;
pub extern fn SDL_EGL_GetCurrentEGLConfig() SDL_EGLConfig;
pub extern fn SDL_EGL_GetWindowEGLSurface(window: ?*SDL_Window) SDL_EGLSurface;
pub extern fn SDL_EGL_SetEGLAttributeCallbacks(platformAttribCallback: SDL_EGLAttribArrayCallback, surfaceAttribCallback: SDL_EGLIntArrayCallback, contextAttribCallback: SDL_EGLIntArrayCallback) void;
pub extern fn SDL_GL_SetSwapInterval(interval: c_int) c_int;
pub extern fn SDL_GL_GetSwapInterval(interval: [*c]c_int) c_int;
pub extern fn SDL_GL_SwapWindow(window: ?*SDL_Window) c_int;
pub extern fn SDL_GL_DeleteContext(context: SDL_GLContext) c_int;
pub const SDL_CameraDeviceID = Uint32;
pub const struct_SDL_Camera = opaque {};
pub const SDL_Camera = struct_SDL_Camera;
pub const struct_SDL_CameraSpec = extern struct {
    format: SDL_PixelFormatEnum = @import("std").mem.zeroes(SDL_PixelFormatEnum),
    width: c_int = @import("std").mem.zeroes(c_int),
    height: c_int = @import("std").mem.zeroes(c_int),
    interval_numerator: c_int = @import("std").mem.zeroes(c_int),
    interval_denominator: c_int = @import("std").mem.zeroes(c_int),
};
pub const SDL_CameraSpec = struct_SDL_CameraSpec;
pub const SDL_CAMERA_POSITION_UNKNOWN: c_int = 0;
pub const SDL_CAMERA_POSITION_FRONT_FACING: c_int = 1;
pub const SDL_CAMERA_POSITION_BACK_FACING: c_int = 2;
pub const enum_SDL_CameraPosition = c_uint;
pub const SDL_CameraPosition = enum_SDL_CameraPosition;
pub extern fn SDL_GetNumCameraDrivers() c_int;
pub extern fn SDL_GetCameraDriver(index: c_int) [*c]const u8;
pub extern fn SDL_GetCurrentCameraDriver() [*c]const u8;
pub extern fn SDL_GetCameraDevices(count: [*c]c_int) [*c]SDL_CameraDeviceID;
pub extern fn SDL_GetCameraDeviceSupportedFormats(devid: SDL_CameraDeviceID, count: [*c]c_int) [*c]SDL_CameraSpec;
pub extern fn SDL_GetCameraDeviceName(instance_id: SDL_CameraDeviceID) [*c]u8;
pub extern fn SDL_GetCameraDevicePosition(instance_id: SDL_CameraDeviceID) SDL_CameraPosition;
pub extern fn SDL_OpenCameraDevice(instance_id: SDL_CameraDeviceID, spec: [*c]const SDL_CameraSpec) ?*SDL_Camera;
pub extern fn SDL_GetCameraPermissionState(camera: ?*SDL_Camera) c_int;
pub extern fn SDL_GetCameraInstanceID(camera: ?*SDL_Camera) SDL_CameraDeviceID;
pub extern fn SDL_GetCameraProperties(camera: ?*SDL_Camera) SDL_PropertiesID;
pub extern fn SDL_GetCameraFormat(camera: ?*SDL_Camera, spec: [*c]SDL_CameraSpec) c_int;
pub extern fn SDL_AcquireCameraFrame(camera: ?*SDL_Camera, timestampNS: [*c]Uint64) [*c]SDL_Surface;
pub extern fn SDL_ReleaseCameraFrame(camera: ?*SDL_Camera, frame: [*c]SDL_Surface) c_int;
pub extern fn SDL_CloseCamera(camera: ?*SDL_Camera) void;
pub extern fn SDL_SetClipboardText(text: [*c]const u8) c_int;
pub extern fn SDL_GetClipboardText() [*c]u8;
pub extern fn SDL_HasClipboardText() SDL_bool;
pub extern fn SDL_SetPrimarySelectionText(text: [*c]const u8) c_int;
pub extern fn SDL_GetPrimarySelectionText() [*c]u8;
pub extern fn SDL_HasPrimarySelectionText() SDL_bool;
pub const SDL_ClipboardDataCallback = ?*const fn (?*anyopaque, [*c]const u8, [*c]usize) callconv(.C) ?*const anyopaque;
pub const SDL_ClipboardCleanupCallback = ?*const fn (?*anyopaque) callconv(.C) void;
pub extern fn SDL_SetClipboardData(callback: SDL_ClipboardDataCallback, cleanup: SDL_ClipboardCleanupCallback, userdata: ?*anyopaque, mime_types: [*c][*c]const u8, num_mime_types: usize) c_int;
pub extern fn SDL_ClearClipboardData() c_int;
pub extern fn SDL_GetClipboardData(mime_type: [*c]const u8, size: [*c]usize) ?*anyopaque;
pub extern fn SDL_HasClipboardData(mime_type: [*c]const u8) SDL_bool;
pub extern fn SDL_GetCPUCount() c_int;
pub extern fn SDL_GetCPUCacheLineSize() c_int;
pub extern fn SDL_HasAltiVec() SDL_bool;
pub extern fn SDL_HasMMX() SDL_bool;
pub extern fn SDL_HasSSE() SDL_bool;
pub extern fn SDL_HasSSE2() SDL_bool;
pub extern fn SDL_HasSSE3() SDL_bool;
pub extern fn SDL_HasSSE41() SDL_bool;
pub extern fn SDL_HasSSE42() SDL_bool;
pub extern fn SDL_HasAVX() SDL_bool;
pub extern fn SDL_HasAVX2() SDL_bool;
pub extern fn SDL_HasAVX512F() SDL_bool;
pub extern fn SDL_HasARMSIMD() SDL_bool;
pub extern fn SDL_HasNEON() SDL_bool;
pub extern fn SDL_HasLSX() SDL_bool;
pub extern fn SDL_HasLASX() SDL_bool;
pub extern fn SDL_GetSystemRAM() c_int;
pub extern fn SDL_GetSIMDAlignment() usize;
pub const struct_SDL_DialogFileFilter = extern struct {
    name: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    pattern: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const SDL_DialogFileFilter = struct_SDL_DialogFileFilter;
pub const SDL_DialogFileCallback = ?*const fn (?*anyopaque, [*c]const [*c]const u8, c_int) callconv(.C) void;
pub extern fn SDL_ShowOpenFileDialog(callback: SDL_DialogFileCallback, userdata: ?*anyopaque, window: ?*SDL_Window, filters: [*c]const SDL_DialogFileFilter, nfilters: c_int, default_location: [*c]const u8, allow_many: SDL_bool) void;
pub extern fn SDL_ShowSaveFileDialog(callback: SDL_DialogFileCallback, userdata: ?*anyopaque, window: ?*SDL_Window, filters: [*c]const SDL_DialogFileFilter, nfilters: c_int, default_location: [*c]const u8) void;
pub extern fn SDL_ShowOpenFolderDialog(callback: SDL_DialogFileCallback, userdata: ?*anyopaque, window: ?*SDL_Window, default_location: [*c]const u8, allow_many: SDL_bool) void;
pub const struct_SDL_GUID = extern struct {
    data: [16]Uint8 = @import("std").mem.zeroes([16]Uint8),
};
pub const SDL_GUID = struct_SDL_GUID;
pub extern fn SDL_GUIDToString(guid: SDL_GUID, pszGUID: [*c]u8, cbGUID: c_int) c_int;
pub extern fn SDL_GUIDFromString(pchGUID: [*c]const u8) SDL_GUID;
pub const SDL_POWERSTATE_ERROR: c_int = -1;
pub const SDL_POWERSTATE_UNKNOWN: c_int = 0;
pub const SDL_POWERSTATE_ON_BATTERY: c_int = 1;
pub const SDL_POWERSTATE_NO_BATTERY: c_int = 2;
pub const SDL_POWERSTATE_CHARGING: c_int = 3;
pub const SDL_POWERSTATE_CHARGED: c_int = 4;
pub const enum_SDL_PowerState = c_int;
pub const SDL_PowerState = enum_SDL_PowerState;
pub extern fn SDL_GetPowerInfo(seconds: [*c]c_int, percent: [*c]c_int) SDL_PowerState;
pub const struct_SDL_Sensor = opaque {};
pub const SDL_Sensor = struct_SDL_Sensor;
pub const SDL_SensorID = Uint32;
pub const SDL_SENSOR_INVALID: c_int = -1;
pub const SDL_SENSOR_UNKNOWN: c_int = 0;
pub const SDL_SENSOR_ACCEL: c_int = 1;
pub const SDL_SENSOR_GYRO: c_int = 2;
pub const SDL_SENSOR_ACCEL_L: c_int = 3;
pub const SDL_SENSOR_GYRO_L: c_int = 4;
pub const SDL_SENSOR_ACCEL_R: c_int = 5;
pub const SDL_SENSOR_GYRO_R: c_int = 6;
pub const enum_SDL_SensorType = c_int;
pub const SDL_SensorType = enum_SDL_SensorType;
pub extern fn SDL_GetSensors(count: [*c]c_int) [*c]SDL_SensorID;
pub extern fn SDL_GetSensorInstanceName(instance_id: SDL_SensorID) [*c]const u8;
pub extern fn SDL_GetSensorInstanceType(instance_id: SDL_SensorID) SDL_SensorType;
pub extern fn SDL_GetSensorInstanceNonPortableType(instance_id: SDL_SensorID) c_int;
pub extern fn SDL_OpenSensor(instance_id: SDL_SensorID) ?*SDL_Sensor;
pub extern fn SDL_GetSensorFromInstanceID(instance_id: SDL_SensorID) ?*SDL_Sensor;
pub extern fn SDL_GetSensorProperties(sensor: ?*SDL_Sensor) SDL_PropertiesID;
pub extern fn SDL_GetSensorName(sensor: ?*SDL_Sensor) [*c]const u8;
pub extern fn SDL_GetSensorType(sensor: ?*SDL_Sensor) SDL_SensorType;
pub extern fn SDL_GetSensorNonPortableType(sensor: ?*SDL_Sensor) c_int;
pub extern fn SDL_GetSensorInstanceID(sensor: ?*SDL_Sensor) SDL_SensorID;
pub extern fn SDL_GetSensorData(sensor: ?*SDL_Sensor, data: [*c]f32, num_values: c_int) c_int;
pub extern fn SDL_CloseSensor(sensor: ?*SDL_Sensor) void;
pub extern fn SDL_UpdateSensors() void;
pub const struct_SDL_Joystick = opaque {};
pub const SDL_Joystick = struct_SDL_Joystick;
pub const SDL_JoystickGUID = SDL_GUID;
pub const SDL_JoystickID = Uint32;
pub const SDL_JOYSTICK_TYPE_UNKNOWN: c_int = 0;
pub const SDL_JOYSTICK_TYPE_GAMEPAD: c_int = 1;
pub const SDL_JOYSTICK_TYPE_WHEEL: c_int = 2;
pub const SDL_JOYSTICK_TYPE_ARCADE_STICK: c_int = 3;
pub const SDL_JOYSTICK_TYPE_FLIGHT_STICK: c_int = 4;
pub const SDL_JOYSTICK_TYPE_DANCE_PAD: c_int = 5;
pub const SDL_JOYSTICK_TYPE_GUITAR: c_int = 6;
pub const SDL_JOYSTICK_TYPE_DRUM_KIT: c_int = 7;
pub const SDL_JOYSTICK_TYPE_ARCADE_PAD: c_int = 8;
pub const SDL_JOYSTICK_TYPE_THROTTLE: c_int = 9;
pub const enum_SDL_JoystickType = c_uint;
pub const SDL_JoystickType = enum_SDL_JoystickType;
pub const SDL_JOYSTICK_CONNECTION_INVALID: c_int = -1;
pub const SDL_JOYSTICK_CONNECTION_UNKNOWN: c_int = 0;
pub const SDL_JOYSTICK_CONNECTION_WIRED: c_int = 1;
pub const SDL_JOYSTICK_CONNECTION_WIRELESS: c_int = 2;
pub const enum_SDL_JoystickConnectionState = c_int;
pub const SDL_JoystickConnectionState = enum_SDL_JoystickConnectionState;
pub extern fn SDL_LockJoysticks() void;
pub extern fn SDL_UnlockJoysticks() void;
pub extern fn SDL_HasJoystick() SDL_bool;
pub extern fn SDL_GetJoysticks(count: [*c]c_int) [*c]SDL_JoystickID;
pub extern fn SDL_GetJoystickInstanceName(instance_id: SDL_JoystickID) [*c]const u8;
pub extern fn SDL_GetJoystickInstancePath(instance_id: SDL_JoystickID) [*c]const u8;
pub extern fn SDL_GetJoystickInstancePlayerIndex(instance_id: SDL_JoystickID) c_int;
pub extern fn SDL_GetJoystickInstanceGUID(instance_id: SDL_JoystickID) SDL_JoystickGUID;
pub extern fn SDL_GetJoystickInstanceVendor(instance_id: SDL_JoystickID) Uint16;
pub extern fn SDL_GetJoystickInstanceProduct(instance_id: SDL_JoystickID) Uint16;
pub extern fn SDL_GetJoystickInstanceProductVersion(instance_id: SDL_JoystickID) Uint16;
pub extern fn SDL_GetJoystickInstanceType(instance_id: SDL_JoystickID) SDL_JoystickType;
pub extern fn SDL_OpenJoystick(instance_id: SDL_JoystickID) ?*SDL_Joystick;
pub extern fn SDL_GetJoystickFromInstanceID(instance_id: SDL_JoystickID) ?*SDL_Joystick;
pub extern fn SDL_GetJoystickFromPlayerIndex(player_index: c_int) ?*SDL_Joystick;
pub const struct_SDL_VirtualJoystickTouchpadDesc = extern struct {
    nfingers: Uint16 = @import("std").mem.zeroes(Uint16),
    padding: [3]Uint16 = @import("std").mem.zeroes([3]Uint16),
};
pub const SDL_VirtualJoystickTouchpadDesc = struct_SDL_VirtualJoystickTouchpadDesc;
pub const struct_SDL_VirtualJoystickSensorDesc = extern struct {
    type: SDL_SensorType = @import("std").mem.zeroes(SDL_SensorType),
    rate: f32 = @import("std").mem.zeroes(f32),
};
pub const SDL_VirtualJoystickSensorDesc = struct_SDL_VirtualJoystickSensorDesc;
pub const struct_SDL_VirtualJoystickDesc = extern struct {
    type: Uint16 = @import("std").mem.zeroes(Uint16),
    padding: Uint16 = @import("std").mem.zeroes(Uint16),
    vendor_id: Uint16 = @import("std").mem.zeroes(Uint16),
    product_id: Uint16 = @import("std").mem.zeroes(Uint16),
    naxes: Uint16 = @import("std").mem.zeroes(Uint16),
    nbuttons: Uint16 = @import("std").mem.zeroes(Uint16),
    nballs: Uint16 = @import("std").mem.zeroes(Uint16),
    nhats: Uint16 = @import("std").mem.zeroes(Uint16),
    ntouchpads: Uint16 = @import("std").mem.zeroes(Uint16),
    nsensors: Uint16 = @import("std").mem.zeroes(Uint16),
    padding2: [2]Uint16 = @import("std").mem.zeroes([2]Uint16),
    button_mask: Uint32 = @import("std").mem.zeroes(Uint32),
    axis_mask: Uint32 = @import("std").mem.zeroes(Uint32),
    name: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    touchpads: [*c]const SDL_VirtualJoystickTouchpadDesc = @import("std").mem.zeroes([*c]const SDL_VirtualJoystickTouchpadDesc),
    sensors: [*c]const SDL_VirtualJoystickSensorDesc = @import("std").mem.zeroes([*c]const SDL_VirtualJoystickSensorDesc),
    userdata: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    Update: ?*const fn (?*anyopaque) callconv(.C) void = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.C) void),
    SetPlayerIndex: ?*const fn (?*anyopaque, c_int) callconv(.C) void = @import("std").mem.zeroes(?*const fn (?*anyopaque, c_int) callconv(.C) void),
    Rumble: ?*const fn (?*anyopaque, Uint16, Uint16) callconv(.C) c_int = @import("std").mem.zeroes(?*const fn (?*anyopaque, Uint16, Uint16) callconv(.C) c_int),
    RumbleTriggers: ?*const fn (?*anyopaque, Uint16, Uint16) callconv(.C) c_int = @import("std").mem.zeroes(?*const fn (?*anyopaque, Uint16, Uint16) callconv(.C) c_int),
    SetLED: ?*const fn (?*anyopaque, Uint8, Uint8, Uint8) callconv(.C) c_int = @import("std").mem.zeroes(?*const fn (?*anyopaque, Uint8, Uint8, Uint8) callconv(.C) c_int),
    SendEffect: ?*const fn (?*anyopaque, ?*const anyopaque, c_int) callconv(.C) c_int = @import("std").mem.zeroes(?*const fn (?*anyopaque, ?*const anyopaque, c_int) callconv(.C) c_int),
    SetSensorsEnabled: ?*const fn (?*anyopaque, SDL_bool) callconv(.C) c_int = @import("std").mem.zeroes(?*const fn (?*anyopaque, SDL_bool) callconv(.C) c_int),
};
pub const SDL_VirtualJoystickDesc = struct_SDL_VirtualJoystickDesc;
pub extern fn SDL_AttachVirtualJoystick(desc: [*c]const SDL_VirtualJoystickDesc) SDL_JoystickID;
pub extern fn SDL_DetachVirtualJoystick(instance_id: SDL_JoystickID) c_int;
pub extern fn SDL_IsJoystickVirtual(instance_id: SDL_JoystickID) SDL_bool;
pub extern fn SDL_SetJoystickVirtualAxis(joystick: ?*SDL_Joystick, axis: c_int, value: Sint16) c_int;
pub extern fn SDL_SetJoystickVirtualBall(joystick: ?*SDL_Joystick, ball: c_int, xrel: Sint16, yrel: Sint16) c_int;
pub extern fn SDL_SetJoystickVirtualButton(joystick: ?*SDL_Joystick, button: c_int, value: Uint8) c_int;
pub extern fn SDL_SetJoystickVirtualHat(joystick: ?*SDL_Joystick, hat: c_int, value: Uint8) c_int;
pub extern fn SDL_SetJoystickVirtualTouchpad(joystick: ?*SDL_Joystick, touchpad: c_int, finger: c_int, state: Uint8, x: f32, y: f32, pressure: f32) c_int;
pub extern fn SDL_SendJoystickVirtualSensorData(joystick: ?*SDL_Joystick, @"type": SDL_SensorType, sensor_timestamp: Uint64, data: [*c]const f32, num_values: c_int) c_int;
pub extern fn SDL_GetJoystickProperties(joystick: ?*SDL_Joystick) SDL_PropertiesID;
pub extern fn SDL_GetJoystickName(joystick: ?*SDL_Joystick) [*c]const u8;
pub extern fn SDL_GetJoystickPath(joystick: ?*SDL_Joystick) [*c]const u8;
pub extern fn SDL_GetJoystickPlayerIndex(joystick: ?*SDL_Joystick) c_int;
pub extern fn SDL_SetJoystickPlayerIndex(joystick: ?*SDL_Joystick, player_index: c_int) c_int;
pub extern fn SDL_GetJoystickGUID(joystick: ?*SDL_Joystick) SDL_JoystickGUID;
pub extern fn SDL_GetJoystickVendor(joystick: ?*SDL_Joystick) Uint16;
pub extern fn SDL_GetJoystickProduct(joystick: ?*SDL_Joystick) Uint16;
pub extern fn SDL_GetJoystickProductVersion(joystick: ?*SDL_Joystick) Uint16;
pub extern fn SDL_GetJoystickFirmwareVersion(joystick: ?*SDL_Joystick) Uint16;
pub extern fn SDL_GetJoystickSerial(joystick: ?*SDL_Joystick) [*c]const u8;
pub extern fn SDL_GetJoystickType(joystick: ?*SDL_Joystick) SDL_JoystickType;
pub extern fn SDL_GetJoystickGUIDString(guid: SDL_JoystickGUID, pszGUID: [*c]u8, cbGUID: c_int) c_int;
pub extern fn SDL_GetJoystickGUIDFromString(pchGUID: [*c]const u8) SDL_JoystickGUID;
pub extern fn SDL_GetJoystickGUIDInfo(guid: SDL_JoystickGUID, vendor: [*c]Uint16, product: [*c]Uint16, version: [*c]Uint16, crc16: [*c]Uint16) void;
pub extern fn SDL_JoystickConnected(joystick: ?*SDL_Joystick) SDL_bool;
pub extern fn SDL_GetJoystickInstanceID(joystick: ?*SDL_Joystick) SDL_JoystickID;
pub extern fn SDL_GetNumJoystickAxes(joystick: ?*SDL_Joystick) c_int;
pub extern fn SDL_GetNumJoystickBalls(joystick: ?*SDL_Joystick) c_int;
pub extern fn SDL_GetNumJoystickHats(joystick: ?*SDL_Joystick) c_int;
pub extern fn SDL_GetNumJoystickButtons(joystick: ?*SDL_Joystick) c_int;
pub extern fn SDL_SetJoystickEventsEnabled(enabled: SDL_bool) void;
pub extern fn SDL_JoystickEventsEnabled() SDL_bool;
pub extern fn SDL_UpdateJoysticks() void;
pub extern fn SDL_GetJoystickAxis(joystick: ?*SDL_Joystick, axis: c_int) Sint16;
pub extern fn SDL_GetJoystickAxisInitialState(joystick: ?*SDL_Joystick, axis: c_int, state: [*c]Sint16) SDL_bool;
pub extern fn SDL_GetJoystickBall(joystick: ?*SDL_Joystick, ball: c_int, dx: [*c]c_int, dy: [*c]c_int) c_int;
pub extern fn SDL_GetJoystickHat(joystick: ?*SDL_Joystick, hat: c_int) Uint8;
pub extern fn SDL_GetJoystickButton(joystick: ?*SDL_Joystick, button: c_int) Uint8;
pub extern fn SDL_RumbleJoystick(joystick: ?*SDL_Joystick, low_frequency_rumble: Uint16, high_frequency_rumble: Uint16, duration_ms: Uint32) c_int;
pub extern fn SDL_RumbleJoystickTriggers(joystick: ?*SDL_Joystick, left_rumble: Uint16, right_rumble: Uint16, duration_ms: Uint32) c_int;
pub extern fn SDL_SetJoystickLED(joystick: ?*SDL_Joystick, red: Uint8, green: Uint8, blue: Uint8) c_int;
pub extern fn SDL_SendJoystickEffect(joystick: ?*SDL_Joystick, data: ?*const anyopaque, size: c_int) c_int;
pub extern fn SDL_CloseJoystick(joystick: ?*SDL_Joystick) void;
pub extern fn SDL_GetJoystickConnectionState(joystick: ?*SDL_Joystick) SDL_JoystickConnectionState;
pub extern fn SDL_GetJoystickPowerInfo(joystick: ?*SDL_Joystick, percent: [*c]c_int) SDL_PowerState;
pub const struct_SDL_Gamepad = opaque {};
pub const SDL_Gamepad = struct_SDL_Gamepad;
pub const SDL_GAMEPAD_TYPE_UNKNOWN: c_int = 0;
pub const SDL_GAMEPAD_TYPE_STANDARD: c_int = 1;
pub const SDL_GAMEPAD_TYPE_XBOX360: c_int = 2;
pub const SDL_GAMEPAD_TYPE_XBOXONE: c_int = 3;
pub const SDL_GAMEPAD_TYPE_PS3: c_int = 4;
pub const SDL_GAMEPAD_TYPE_PS4: c_int = 5;
pub const SDL_GAMEPAD_TYPE_PS5: c_int = 6;
pub const SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO: c_int = 7;
pub const SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT: c_int = 8;
pub const SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT: c_int = 9;
pub const SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR: c_int = 10;
pub const SDL_GAMEPAD_TYPE_MAX: c_int = 11;
pub const enum_SDL_GamepadType = c_uint;
pub const SDL_GamepadType = enum_SDL_GamepadType;
pub const SDL_GAMEPAD_BUTTON_INVALID: c_int = -1;
pub const SDL_GAMEPAD_BUTTON_SOUTH: c_int = 0;
pub const SDL_GAMEPAD_BUTTON_EAST: c_int = 1;
pub const SDL_GAMEPAD_BUTTON_WEST: c_int = 2;
pub const SDL_GAMEPAD_BUTTON_NORTH: c_int = 3;
pub const SDL_GAMEPAD_BUTTON_BACK: c_int = 4;
pub const SDL_GAMEPAD_BUTTON_GUIDE: c_int = 5;
pub const SDL_GAMEPAD_BUTTON_START: c_int = 6;
pub const SDL_GAMEPAD_BUTTON_LEFT_STICK: c_int = 7;
pub const SDL_GAMEPAD_BUTTON_RIGHT_STICK: c_int = 8;
pub const SDL_GAMEPAD_BUTTON_LEFT_SHOULDER: c_int = 9;
pub const SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER: c_int = 10;
pub const SDL_GAMEPAD_BUTTON_DPAD_UP: c_int = 11;
pub const SDL_GAMEPAD_BUTTON_DPAD_DOWN: c_int = 12;
pub const SDL_GAMEPAD_BUTTON_DPAD_LEFT: c_int = 13;
pub const SDL_GAMEPAD_BUTTON_DPAD_RIGHT: c_int = 14;
pub const SDL_GAMEPAD_BUTTON_MISC1: c_int = 15;
pub const SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1: c_int = 16;
pub const SDL_GAMEPAD_BUTTON_LEFT_PADDLE1: c_int = 17;
pub const SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2: c_int = 18;
pub const SDL_GAMEPAD_BUTTON_LEFT_PADDLE2: c_int = 19;
pub const SDL_GAMEPAD_BUTTON_TOUCHPAD: c_int = 20;
pub const SDL_GAMEPAD_BUTTON_MISC2: c_int = 21;
pub const SDL_GAMEPAD_BUTTON_MISC3: c_int = 22;
pub const SDL_GAMEPAD_BUTTON_MISC4: c_int = 23;
pub const SDL_GAMEPAD_BUTTON_MISC5: c_int = 24;
pub const SDL_GAMEPAD_BUTTON_MISC6: c_int = 25;
pub const SDL_GAMEPAD_BUTTON_MAX: c_int = 26;
pub const enum_SDL_GamepadButton = c_int;
pub const SDL_GamepadButton = enum_SDL_GamepadButton;
pub const SDL_GAMEPAD_BUTTON_LABEL_UNKNOWN: c_int = 0;
pub const SDL_GAMEPAD_BUTTON_LABEL_A: c_int = 1;
pub const SDL_GAMEPAD_BUTTON_LABEL_B: c_int = 2;
pub const SDL_GAMEPAD_BUTTON_LABEL_X: c_int = 3;
pub const SDL_GAMEPAD_BUTTON_LABEL_Y: c_int = 4;
pub const SDL_GAMEPAD_BUTTON_LABEL_CROSS: c_int = 5;
pub const SDL_GAMEPAD_BUTTON_LABEL_CIRCLE: c_int = 6;
pub const SDL_GAMEPAD_BUTTON_LABEL_SQUARE: c_int = 7;
pub const SDL_GAMEPAD_BUTTON_LABEL_TRIANGLE: c_int = 8;
pub const enum_SDL_GamepadButtonLabel = c_uint;
pub const SDL_GamepadButtonLabel = enum_SDL_GamepadButtonLabel;
pub const SDL_GAMEPAD_AXIS_INVALID: c_int = -1;
pub const SDL_GAMEPAD_AXIS_LEFTX: c_int = 0;
pub const SDL_GAMEPAD_AXIS_LEFTY: c_int = 1;
pub const SDL_GAMEPAD_AXIS_RIGHTX: c_int = 2;
pub const SDL_GAMEPAD_AXIS_RIGHTY: c_int = 3;
pub const SDL_GAMEPAD_AXIS_LEFT_TRIGGER: c_int = 4;
pub const SDL_GAMEPAD_AXIS_RIGHT_TRIGGER: c_int = 5;
pub const SDL_GAMEPAD_AXIS_MAX: c_int = 6;
pub const enum_SDL_GamepadAxis = c_int;
pub const SDL_GamepadAxis = enum_SDL_GamepadAxis;
pub const SDL_GAMEPAD_BINDTYPE_NONE: c_int = 0;
pub const SDL_GAMEPAD_BINDTYPE_BUTTON: c_int = 1;
pub const SDL_GAMEPAD_BINDTYPE_AXIS: c_int = 2;
pub const SDL_GAMEPAD_BINDTYPE_HAT: c_int = 3;
pub const enum_SDL_GamepadBindingType = c_uint;
pub const SDL_GamepadBindingType = enum_SDL_GamepadBindingType;
const struct_unnamed_6 = extern struct {
    axis: c_int = @import("std").mem.zeroes(c_int),
    axis_min: c_int = @import("std").mem.zeroes(c_int),
    axis_max: c_int = @import("std").mem.zeroes(c_int),
};
const struct_unnamed_7 = extern struct {
    hat: c_int = @import("std").mem.zeroes(c_int),
    hat_mask: c_int = @import("std").mem.zeroes(c_int),
};
const union_unnamed_5 = extern union {
    button: c_int,
    axis: struct_unnamed_6,
    hat: struct_unnamed_7,
};
const struct_unnamed_9 = extern struct {
    axis: SDL_GamepadAxis = @import("std").mem.zeroes(SDL_GamepadAxis),
    axis_min: c_int = @import("std").mem.zeroes(c_int),
    axis_max: c_int = @import("std").mem.zeroes(c_int),
};
const union_unnamed_8 = extern union {
    button: SDL_GamepadButton,
    axis: struct_unnamed_9,
};
pub const struct_SDL_GamepadBinding = extern struct {
    input_type: SDL_GamepadBindingType = @import("std").mem.zeroes(SDL_GamepadBindingType),
    input: union_unnamed_5 = @import("std").mem.zeroes(union_unnamed_5),
    output_type: SDL_GamepadBindingType = @import("std").mem.zeroes(SDL_GamepadBindingType),
    output: union_unnamed_8 = @import("std").mem.zeroes(union_unnamed_8),
};
pub const SDL_GamepadBinding = struct_SDL_GamepadBinding;
pub extern fn SDL_AddGamepadMapping(mapping: [*c]const u8) c_int;
pub extern fn SDL_AddGamepadMappingsFromIO(src: ?*SDL_IOStream, closeio: SDL_bool) c_int;
pub extern fn SDL_AddGamepadMappingsFromFile(file: [*c]const u8) c_int;
pub extern fn SDL_ReloadGamepadMappings() c_int;
pub extern fn SDL_GetGamepadMappings(count: [*c]c_int) [*c][*c]u8;
pub extern fn SDL_GetGamepadMappingForGUID(guid: SDL_JoystickGUID) [*c]u8;
pub extern fn SDL_GetGamepadMapping(gamepad: ?*SDL_Gamepad) [*c]u8;
pub extern fn SDL_SetGamepadMapping(instance_id: SDL_JoystickID, mapping: [*c]const u8) c_int;
pub extern fn SDL_HasGamepad() SDL_bool;
pub extern fn SDL_GetGamepads(count: [*c]c_int) [*c]SDL_JoystickID;
pub extern fn SDL_IsGamepad(instance_id: SDL_JoystickID) SDL_bool;
pub extern fn SDL_GetGamepadInstanceName(instance_id: SDL_JoystickID) [*c]const u8;
pub extern fn SDL_GetGamepadInstancePath(instance_id: SDL_JoystickID) [*c]const u8;
pub extern fn SDL_GetGamepadInstancePlayerIndex(instance_id: SDL_JoystickID) c_int;
pub extern fn SDL_GetGamepadInstanceGUID(instance_id: SDL_JoystickID) SDL_JoystickGUID;
pub extern fn SDL_GetGamepadInstanceVendor(instance_id: SDL_JoystickID) Uint16;
pub extern fn SDL_GetGamepadInstanceProduct(instance_id: SDL_JoystickID) Uint16;
pub extern fn SDL_GetGamepadInstanceProductVersion(instance_id: SDL_JoystickID) Uint16;
pub extern fn SDL_GetGamepadInstanceType(instance_id: SDL_JoystickID) SDL_GamepadType;
pub extern fn SDL_GetRealGamepadInstanceType(instance_id: SDL_JoystickID) SDL_GamepadType;
pub extern fn SDL_GetGamepadInstanceMapping(instance_id: SDL_JoystickID) [*c]u8;
pub extern fn SDL_OpenGamepad(instance_id: SDL_JoystickID) ?*SDL_Gamepad;
pub extern fn SDL_GetGamepadFromInstanceID(instance_id: SDL_JoystickID) ?*SDL_Gamepad;
pub extern fn SDL_GetGamepadFromPlayerIndex(player_index: c_int) ?*SDL_Gamepad;
pub extern fn SDL_GetGamepadProperties(gamepad: ?*SDL_Gamepad) SDL_PropertiesID;
pub extern fn SDL_GetGamepadInstanceID(gamepad: ?*SDL_Gamepad) SDL_JoystickID;
pub extern fn SDL_GetGamepadName(gamepad: ?*SDL_Gamepad) [*c]const u8;
pub extern fn SDL_GetGamepadPath(gamepad: ?*SDL_Gamepad) [*c]const u8;
pub extern fn SDL_GetGamepadType(gamepad: ?*SDL_Gamepad) SDL_GamepadType;
pub extern fn SDL_GetRealGamepadType(gamepad: ?*SDL_Gamepad) SDL_GamepadType;
pub extern fn SDL_GetGamepadPlayerIndex(gamepad: ?*SDL_Gamepad) c_int;
pub extern fn SDL_SetGamepadPlayerIndex(gamepad: ?*SDL_Gamepad, player_index: c_int) c_int;
pub extern fn SDL_GetGamepadVendor(gamepad: ?*SDL_Gamepad) Uint16;
pub extern fn SDL_GetGamepadProduct(gamepad: ?*SDL_Gamepad) Uint16;
pub extern fn SDL_GetGamepadProductVersion(gamepad: ?*SDL_Gamepad) Uint16;
pub extern fn SDL_GetGamepadFirmwareVersion(gamepad: ?*SDL_Gamepad) Uint16;
pub extern fn SDL_GetGamepadSerial(gamepad: ?*SDL_Gamepad) [*c]const u8;
pub extern fn SDL_GetGamepadSteamHandle(gamepad: ?*SDL_Gamepad) Uint64;
pub extern fn SDL_GetGamepadConnectionState(gamepad: ?*SDL_Gamepad) SDL_JoystickConnectionState;
pub extern fn SDL_GetGamepadPowerInfo(gamepad: ?*SDL_Gamepad, percent: [*c]c_int) SDL_PowerState;
pub extern fn SDL_GamepadConnected(gamepad: ?*SDL_Gamepad) SDL_bool;
pub extern fn SDL_GetGamepadJoystick(gamepad: ?*SDL_Gamepad) ?*SDL_Joystick;
pub extern fn SDL_SetGamepadEventsEnabled(enabled: SDL_bool) void;
pub extern fn SDL_GamepadEventsEnabled() SDL_bool;
pub extern fn SDL_GetGamepadBindings(gamepad: ?*SDL_Gamepad, count: [*c]c_int) [*c][*c]SDL_GamepadBinding;
pub extern fn SDL_UpdateGamepads() void;
pub extern fn SDL_GetGamepadTypeFromString(str: [*c]const u8) SDL_GamepadType;
pub extern fn SDL_GetGamepadStringForType(@"type": SDL_GamepadType) [*c]const u8;
pub extern fn SDL_GetGamepadAxisFromString(str: [*c]const u8) SDL_GamepadAxis;
pub extern fn SDL_GetGamepadStringForAxis(axis: SDL_GamepadAxis) [*c]const u8;
pub extern fn SDL_GamepadHasAxis(gamepad: ?*SDL_Gamepad, axis: SDL_GamepadAxis) SDL_bool;
pub extern fn SDL_GetGamepadAxis(gamepad: ?*SDL_Gamepad, axis: SDL_GamepadAxis) Sint16;
pub extern fn SDL_GetGamepadButtonFromString(str: [*c]const u8) SDL_GamepadButton;
pub extern fn SDL_GetGamepadStringForButton(button: SDL_GamepadButton) [*c]const u8;
pub extern fn SDL_GamepadHasButton(gamepad: ?*SDL_Gamepad, button: SDL_GamepadButton) SDL_bool;
pub extern fn SDL_GetGamepadButton(gamepad: ?*SDL_Gamepad, button: SDL_GamepadButton) Uint8;
pub extern fn SDL_GetGamepadButtonLabelForType(@"type": SDL_GamepadType, button: SDL_GamepadButton) SDL_GamepadButtonLabel;
pub extern fn SDL_GetGamepadButtonLabel(gamepad: ?*SDL_Gamepad, button: SDL_GamepadButton) SDL_GamepadButtonLabel;
pub extern fn SDL_GetNumGamepadTouchpads(gamepad: ?*SDL_Gamepad) c_int;
pub extern fn SDL_GetNumGamepadTouchpadFingers(gamepad: ?*SDL_Gamepad, touchpad: c_int) c_int;
pub extern fn SDL_GetGamepadTouchpadFinger(gamepad: ?*SDL_Gamepad, touchpad: c_int, finger: c_int, state: [*c]Uint8, x: [*c]f32, y: [*c]f32, pressure: [*c]f32) c_int;
pub extern fn SDL_GamepadHasSensor(gamepad: ?*SDL_Gamepad, @"type": SDL_SensorType) SDL_bool;
pub extern fn SDL_SetGamepadSensorEnabled(gamepad: ?*SDL_Gamepad, @"type": SDL_SensorType, enabled: SDL_bool) c_int;
pub extern fn SDL_GamepadSensorEnabled(gamepad: ?*SDL_Gamepad, @"type": SDL_SensorType) SDL_bool;
pub extern fn SDL_GetGamepadSensorDataRate(gamepad: ?*SDL_Gamepad, @"type": SDL_SensorType) f32;
pub extern fn SDL_GetGamepadSensorData(gamepad: ?*SDL_Gamepad, @"type": SDL_SensorType, data: [*c]f32, num_values: c_int) c_int;
pub extern fn SDL_RumbleGamepad(gamepad: ?*SDL_Gamepad, low_frequency_rumble: Uint16, high_frequency_rumble: Uint16, duration_ms: Uint32) c_int;
pub extern fn SDL_RumbleGamepadTriggers(gamepad: ?*SDL_Gamepad, left_rumble: Uint16, right_rumble: Uint16, duration_ms: Uint32) c_int;
pub extern fn SDL_SetGamepadLED(gamepad: ?*SDL_Gamepad, red: Uint8, green: Uint8, blue: Uint8) c_int;
pub extern fn SDL_SendGamepadEffect(gamepad: ?*SDL_Gamepad, data: ?*const anyopaque, size: c_int) c_int;
pub extern fn SDL_CloseGamepad(gamepad: ?*SDL_Gamepad) void;
pub extern fn SDL_GetGamepadAppleSFSymbolsNameForButton(gamepad: ?*SDL_Gamepad, button: SDL_GamepadButton) [*c]const u8;
pub extern fn SDL_GetGamepadAppleSFSymbolsNameForAxis(gamepad: ?*SDL_Gamepad, axis: SDL_GamepadAxis) [*c]const u8;
pub const SDL_SCANCODE_UNKNOWN: c_int = 0;
pub const SDL_SCANCODE_A: c_int = 4;
pub const SDL_SCANCODE_B: c_int = 5;
pub const SDL_SCANCODE_C: c_int = 6;
pub const SDL_SCANCODE_D: c_int = 7;
pub const SDL_SCANCODE_E: c_int = 8;
pub const SDL_SCANCODE_F: c_int = 9;
pub const SDL_SCANCODE_G: c_int = 10;
pub const SDL_SCANCODE_H: c_int = 11;
pub const SDL_SCANCODE_I: c_int = 12;
pub const SDL_SCANCODE_J: c_int = 13;
pub const SDL_SCANCODE_K: c_int = 14;
pub const SDL_SCANCODE_L: c_int = 15;
pub const SDL_SCANCODE_M: c_int = 16;
pub const SDL_SCANCODE_N: c_int = 17;
pub const SDL_SCANCODE_O: c_int = 18;
pub const SDL_SCANCODE_P: c_int = 19;
pub const SDL_SCANCODE_Q: c_int = 20;
pub const SDL_SCANCODE_R: c_int = 21;
pub const SDL_SCANCODE_S: c_int = 22;
pub const SDL_SCANCODE_T: c_int = 23;
pub const SDL_SCANCODE_U: c_int = 24;
pub const SDL_SCANCODE_V: c_int = 25;
pub const SDL_SCANCODE_W: c_int = 26;
pub const SDL_SCANCODE_X: c_int = 27;
pub const SDL_SCANCODE_Y: c_int = 28;
pub const SDL_SCANCODE_Z: c_int = 29;
pub const SDL_SCANCODE_1: c_int = 30;
pub const SDL_SCANCODE_2: c_int = 31;
pub const SDL_SCANCODE_3: c_int = 32;
pub const SDL_SCANCODE_4: c_int = 33;
pub const SDL_SCANCODE_5: c_int = 34;
pub const SDL_SCANCODE_6: c_int = 35;
pub const SDL_SCANCODE_7: c_int = 36;
pub const SDL_SCANCODE_8: c_int = 37;
pub const SDL_SCANCODE_9: c_int = 38;
pub const SDL_SCANCODE_0: c_int = 39;
pub const SDL_SCANCODE_RETURN: c_int = 40;
pub const SDL_SCANCODE_ESCAPE: c_int = 41;
pub const SDL_SCANCODE_BACKSPACE: c_int = 42;
pub const SDL_SCANCODE_TAB: c_int = 43;
pub const SDL_SCANCODE_SPACE: c_int = 44;
pub const SDL_SCANCODE_MINUS: c_int = 45;
pub const SDL_SCANCODE_EQUALS: c_int = 46;
pub const SDL_SCANCODE_LEFTBRACKET: c_int = 47;
pub const SDL_SCANCODE_RIGHTBRACKET: c_int = 48;
pub const SDL_SCANCODE_BACKSLASH: c_int = 49;
pub const SDL_SCANCODE_NONUSHASH: c_int = 50;
pub const SDL_SCANCODE_SEMICOLON: c_int = 51;
pub const SDL_SCANCODE_APOSTROPHE: c_int = 52;
pub const SDL_SCANCODE_GRAVE: c_int = 53;
pub const SDL_SCANCODE_COMMA: c_int = 54;
pub const SDL_SCANCODE_PERIOD: c_int = 55;
pub const SDL_SCANCODE_SLASH: c_int = 56;
pub const SDL_SCANCODE_CAPSLOCK: c_int = 57;
pub const SDL_SCANCODE_F1: c_int = 58;
pub const SDL_SCANCODE_F2: c_int = 59;
pub const SDL_SCANCODE_F3: c_int = 60;
pub const SDL_SCANCODE_F4: c_int = 61;
pub const SDL_SCANCODE_F5: c_int = 62;
pub const SDL_SCANCODE_F6: c_int = 63;
pub const SDL_SCANCODE_F7: c_int = 64;
pub const SDL_SCANCODE_F8: c_int = 65;
pub const SDL_SCANCODE_F9: c_int = 66;
pub const SDL_SCANCODE_F10: c_int = 67;
pub const SDL_SCANCODE_F11: c_int = 68;
pub const SDL_SCANCODE_F12: c_int = 69;
pub const SDL_SCANCODE_PRINTSCREEN: c_int = 70;
pub const SDL_SCANCODE_SCROLLLOCK: c_int = 71;
pub const SDL_SCANCODE_PAUSE: c_int = 72;
pub const SDL_SCANCODE_INSERT: c_int = 73;
pub const SDL_SCANCODE_HOME: c_int = 74;
pub const SDL_SCANCODE_PAGEUP: c_int = 75;
pub const SDL_SCANCODE_DELETE: c_int = 76;
pub const SDL_SCANCODE_END: c_int = 77;
pub const SDL_SCANCODE_PAGEDOWN: c_int = 78;
pub const SDL_SCANCODE_RIGHT: c_int = 79;
pub const SDL_SCANCODE_LEFT: c_int = 80;
pub const SDL_SCANCODE_DOWN: c_int = 81;
pub const SDL_SCANCODE_UP: c_int = 82;
pub const SDL_SCANCODE_NUMLOCKCLEAR: c_int = 83;
pub const SDL_SCANCODE_KP_DIVIDE: c_int = 84;
pub const SDL_SCANCODE_KP_MULTIPLY: c_int = 85;
pub const SDL_SCANCODE_KP_MINUS: c_int = 86;
pub const SDL_SCANCODE_KP_PLUS: c_int = 87;
pub const SDL_SCANCODE_KP_ENTER: c_int = 88;
pub const SDL_SCANCODE_KP_1: c_int = 89;
pub const SDL_SCANCODE_KP_2: c_int = 90;
pub const SDL_SCANCODE_KP_3: c_int = 91;
pub const SDL_SCANCODE_KP_4: c_int = 92;
pub const SDL_SCANCODE_KP_5: c_int = 93;
pub const SDL_SCANCODE_KP_6: c_int = 94;
pub const SDL_SCANCODE_KP_7: c_int = 95;
pub const SDL_SCANCODE_KP_8: c_int = 96;
pub const SDL_SCANCODE_KP_9: c_int = 97;
pub const SDL_SCANCODE_KP_0: c_int = 98;
pub const SDL_SCANCODE_KP_PERIOD: c_int = 99;
pub const SDL_SCANCODE_NONUSBACKSLASH: c_int = 100;
pub const SDL_SCANCODE_APPLICATION: c_int = 101;
pub const SDL_SCANCODE_POWER: c_int = 102;
pub const SDL_SCANCODE_KP_EQUALS: c_int = 103;
pub const SDL_SCANCODE_F13: c_int = 104;
pub const SDL_SCANCODE_F14: c_int = 105;
pub const SDL_SCANCODE_F15: c_int = 106;
pub const SDL_SCANCODE_F16: c_int = 107;
pub const SDL_SCANCODE_F17: c_int = 108;
pub const SDL_SCANCODE_F18: c_int = 109;
pub const SDL_SCANCODE_F19: c_int = 110;
pub const SDL_SCANCODE_F20: c_int = 111;
pub const SDL_SCANCODE_F21: c_int = 112;
pub const SDL_SCANCODE_F22: c_int = 113;
pub const SDL_SCANCODE_F23: c_int = 114;
pub const SDL_SCANCODE_F24: c_int = 115;
pub const SDL_SCANCODE_EXECUTE: c_int = 116;
pub const SDL_SCANCODE_HELP: c_int = 117;
pub const SDL_SCANCODE_MENU: c_int = 118;
pub const SDL_SCANCODE_SELECT: c_int = 119;
pub const SDL_SCANCODE_STOP: c_int = 120;
pub const SDL_SCANCODE_AGAIN: c_int = 121;
pub const SDL_SCANCODE_UNDO: c_int = 122;
pub const SDL_SCANCODE_CUT: c_int = 123;
pub const SDL_SCANCODE_COPY: c_int = 124;
pub const SDL_SCANCODE_PASTE: c_int = 125;
pub const SDL_SCANCODE_FIND: c_int = 126;
pub const SDL_SCANCODE_MUTE: c_int = 127;
pub const SDL_SCANCODE_VOLUMEUP: c_int = 128;
pub const SDL_SCANCODE_VOLUMEDOWN: c_int = 129;
pub const SDL_SCANCODE_KP_COMMA: c_int = 133;
pub const SDL_SCANCODE_KP_EQUALSAS400: c_int = 134;
pub const SDL_SCANCODE_INTERNATIONAL1: c_int = 135;
pub const SDL_SCANCODE_INTERNATIONAL2: c_int = 136;
pub const SDL_SCANCODE_INTERNATIONAL3: c_int = 137;
pub const SDL_SCANCODE_INTERNATIONAL4: c_int = 138;
pub const SDL_SCANCODE_INTERNATIONAL5: c_int = 139;
pub const SDL_SCANCODE_INTERNATIONAL6: c_int = 140;
pub const SDL_SCANCODE_INTERNATIONAL7: c_int = 141;
pub const SDL_SCANCODE_INTERNATIONAL8: c_int = 142;
pub const SDL_SCANCODE_INTERNATIONAL9: c_int = 143;
pub const SDL_SCANCODE_LANG1: c_int = 144;
pub const SDL_SCANCODE_LANG2: c_int = 145;
pub const SDL_SCANCODE_LANG3: c_int = 146;
pub const SDL_SCANCODE_LANG4: c_int = 147;
pub const SDL_SCANCODE_LANG5: c_int = 148;
pub const SDL_SCANCODE_LANG6: c_int = 149;
pub const SDL_SCANCODE_LANG7: c_int = 150;
pub const SDL_SCANCODE_LANG8: c_int = 151;
pub const SDL_SCANCODE_LANG9: c_int = 152;
pub const SDL_SCANCODE_ALTERASE: c_int = 153;
pub const SDL_SCANCODE_SYSREQ: c_int = 154;
pub const SDL_SCANCODE_CANCEL: c_int = 155;
pub const SDL_SCANCODE_CLEAR: c_int = 156;
pub const SDL_SCANCODE_PRIOR: c_int = 157;
pub const SDL_SCANCODE_RETURN2: c_int = 158;
pub const SDL_SCANCODE_SEPARATOR: c_int = 159;
pub const SDL_SCANCODE_OUT: c_int = 160;
pub const SDL_SCANCODE_OPER: c_int = 161;
pub const SDL_SCANCODE_CLEARAGAIN: c_int = 162;
pub const SDL_SCANCODE_CRSEL: c_int = 163;
pub const SDL_SCANCODE_EXSEL: c_int = 164;
pub const SDL_SCANCODE_KP_00: c_int = 176;
pub const SDL_SCANCODE_KP_000: c_int = 177;
pub const SDL_SCANCODE_THOUSANDSSEPARATOR: c_int = 178;
pub const SDL_SCANCODE_DECIMALSEPARATOR: c_int = 179;
pub const SDL_SCANCODE_CURRENCYUNIT: c_int = 180;
pub const SDL_SCANCODE_CURRENCYSUBUNIT: c_int = 181;
pub const SDL_SCANCODE_KP_LEFTPAREN: c_int = 182;
pub const SDL_SCANCODE_KP_RIGHTPAREN: c_int = 183;
pub const SDL_SCANCODE_KP_LEFTBRACE: c_int = 184;
pub const SDL_SCANCODE_KP_RIGHTBRACE: c_int = 185;
pub const SDL_SCANCODE_KP_TAB: c_int = 186;
pub const SDL_SCANCODE_KP_BACKSPACE: c_int = 187;
pub const SDL_SCANCODE_KP_A: c_int = 188;
pub const SDL_SCANCODE_KP_B: c_int = 189;
pub const SDL_SCANCODE_KP_C: c_int = 190;
pub const SDL_SCANCODE_KP_D: c_int = 191;
pub const SDL_SCANCODE_KP_E: c_int = 192;
pub const SDL_SCANCODE_KP_F: c_int = 193;
pub const SDL_SCANCODE_KP_XOR: c_int = 194;
pub const SDL_SCANCODE_KP_POWER: c_int = 195;
pub const SDL_SCANCODE_KP_PERCENT: c_int = 196;
pub const SDL_SCANCODE_KP_LESS: c_int = 197;
pub const SDL_SCANCODE_KP_GREATER: c_int = 198;
pub const SDL_SCANCODE_KP_AMPERSAND: c_int = 199;
pub const SDL_SCANCODE_KP_DBLAMPERSAND: c_int = 200;
pub const SDL_SCANCODE_KP_VERTICALBAR: c_int = 201;
pub const SDL_SCANCODE_KP_DBLVERTICALBAR: c_int = 202;
pub const SDL_SCANCODE_KP_COLON: c_int = 203;
pub const SDL_SCANCODE_KP_HASH: c_int = 204;
pub const SDL_SCANCODE_KP_SPACE: c_int = 205;
pub const SDL_SCANCODE_KP_AT: c_int = 206;
pub const SDL_SCANCODE_KP_EXCLAM: c_int = 207;
pub const SDL_SCANCODE_KP_MEMSTORE: c_int = 208;
pub const SDL_SCANCODE_KP_MEMRECALL: c_int = 209;
pub const SDL_SCANCODE_KP_MEMCLEAR: c_int = 210;
pub const SDL_SCANCODE_KP_MEMADD: c_int = 211;
pub const SDL_SCANCODE_KP_MEMSUBTRACT: c_int = 212;
pub const SDL_SCANCODE_KP_MEMMULTIPLY: c_int = 213;
pub const SDL_SCANCODE_KP_MEMDIVIDE: c_int = 214;
pub const SDL_SCANCODE_KP_PLUSMINUS: c_int = 215;
pub const SDL_SCANCODE_KP_CLEAR: c_int = 216;
pub const SDL_SCANCODE_KP_CLEARENTRY: c_int = 217;
pub const SDL_SCANCODE_KP_BINARY: c_int = 218;
pub const SDL_SCANCODE_KP_OCTAL: c_int = 219;
pub const SDL_SCANCODE_KP_DECIMAL: c_int = 220;
pub const SDL_SCANCODE_KP_HEXADECIMAL: c_int = 221;
pub const SDL_SCANCODE_LCTRL: c_int = 224;
pub const SDL_SCANCODE_LSHIFT: c_int = 225;
pub const SDL_SCANCODE_LALT: c_int = 226;
pub const SDL_SCANCODE_LGUI: c_int = 227;
pub const SDL_SCANCODE_RCTRL: c_int = 228;
pub const SDL_SCANCODE_RSHIFT: c_int = 229;
pub const SDL_SCANCODE_RALT: c_int = 230;
pub const SDL_SCANCODE_RGUI: c_int = 231;
pub const SDL_SCANCODE_MODE: c_int = 257;
pub const SDL_SCANCODE_AUDIONEXT: c_int = 258;
pub const SDL_SCANCODE_AUDIOPREV: c_int = 259;
pub const SDL_SCANCODE_AUDIOSTOP: c_int = 260;
pub const SDL_SCANCODE_AUDIOPLAY: c_int = 261;
pub const SDL_SCANCODE_AUDIOMUTE: c_int = 262;
pub const SDL_SCANCODE_MEDIASELECT: c_int = 263;
pub const SDL_SCANCODE_WWW: c_int = 264;
pub const SDL_SCANCODE_MAIL: c_int = 265;
pub const SDL_SCANCODE_CALCULATOR: c_int = 266;
pub const SDL_SCANCODE_COMPUTER: c_int = 267;
pub const SDL_SCANCODE_AC_SEARCH: c_int = 268;
pub const SDL_SCANCODE_AC_HOME: c_int = 269;
pub const SDL_SCANCODE_AC_BACK: c_int = 270;
pub const SDL_SCANCODE_AC_FORWARD: c_int = 271;
pub const SDL_SCANCODE_AC_STOP: c_int = 272;
pub const SDL_SCANCODE_AC_REFRESH: c_int = 273;
pub const SDL_SCANCODE_AC_BOOKMARKS: c_int = 274;
pub const SDL_SCANCODE_BRIGHTNESSDOWN: c_int = 275;
pub const SDL_SCANCODE_BRIGHTNESSUP: c_int = 276;
pub const SDL_SCANCODE_DISPLAYSWITCH: c_int = 277;
pub const SDL_SCANCODE_KBDILLUMTOGGLE: c_int = 278;
pub const SDL_SCANCODE_KBDILLUMDOWN: c_int = 279;
pub const SDL_SCANCODE_KBDILLUMUP: c_int = 280;
pub const SDL_SCANCODE_EJECT: c_int = 281;
pub const SDL_SCANCODE_SLEEP: c_int = 282;
pub const SDL_SCANCODE_APP1: c_int = 283;
pub const SDL_SCANCODE_APP2: c_int = 284;
pub const SDL_SCANCODE_AUDIOREWIND: c_int = 285;
pub const SDL_SCANCODE_AUDIOFASTFORWARD: c_int = 286;
pub const SDL_SCANCODE_SOFTLEFT: c_int = 287;
pub const SDL_SCANCODE_SOFTRIGHT: c_int = 288;
pub const SDL_SCANCODE_CALL: c_int = 289;
pub const SDL_SCANCODE_ENDCALL: c_int = 290;
pub const SDL_NUM_SCANCODES: c_int = 512;
pub const enum_SDL_Scancode = c_uint;
pub const SDL_Scancode = enum_SDL_Scancode;
pub const SDL_Keycode = Uint32;
pub const SDL_Keymod = Uint16;
pub const SDL_KeyboardID = Uint32;
pub const struct_SDL_Keysym = extern struct {
    scancode: SDL_Scancode = @import("std").mem.zeroes(SDL_Scancode),
    sym: SDL_Keycode = @import("std").mem.zeroes(SDL_Keycode),
    mod: SDL_Keymod = @import("std").mem.zeroes(SDL_Keymod),
    unused: Uint16 = @import("std").mem.zeroes(Uint16),
};
pub const SDL_Keysym = struct_SDL_Keysym;
pub extern fn SDL_HasKeyboard() SDL_bool;
pub extern fn SDL_GetKeyboards(count: [*c]c_int) [*c]SDL_KeyboardID;
pub extern fn SDL_GetKeyboardInstanceName(instance_id: SDL_KeyboardID) [*c]const u8;
pub extern fn SDL_GetKeyboardFocus() ?*SDL_Window;
pub extern fn SDL_GetKeyboardState(numkeys: [*c]c_int) [*c]const Uint8;
pub extern fn SDL_ResetKeyboard() void;
pub extern fn SDL_GetModState() SDL_Keymod;
pub extern fn SDL_SetModState(modstate: SDL_Keymod) void;
pub extern fn SDL_GetDefaultKeyFromScancode(scancode: SDL_Scancode) SDL_Keycode;
pub extern fn SDL_GetKeyFromScancode(scancode: SDL_Scancode) SDL_Keycode;
pub extern fn SDL_GetScancodeFromKey(key: SDL_Keycode) SDL_Scancode;
pub extern fn SDL_GetScancodeName(scancode: SDL_Scancode) [*c]const u8;
pub extern fn SDL_GetScancodeFromName(name: [*c]const u8) SDL_Scancode;
pub extern fn SDL_GetKeyName(key: SDL_Keycode) [*c]const u8;
pub extern fn SDL_GetKeyFromName(name: [*c]const u8) SDL_Keycode;
pub extern fn SDL_StartTextInput() void;
pub extern fn SDL_TextInputActive() SDL_bool;
pub extern fn SDL_StopTextInput() void;
pub extern fn SDL_ClearComposition() void;
pub extern fn SDL_SetTextInputRect(rect: [*c]const SDL_Rect) c_int;
pub extern fn SDL_HasScreenKeyboardSupport() SDL_bool;
pub extern fn SDL_ScreenKeyboardShown(window: ?*SDL_Window) SDL_bool;
pub const SDL_MouseID = Uint32;
pub const struct_SDL_Cursor = opaque {};
pub const SDL_Cursor = struct_SDL_Cursor;
pub const SDL_SYSTEM_CURSOR_DEFAULT: c_int = 0;
pub const SDL_SYSTEM_CURSOR_TEXT: c_int = 1;
pub const SDL_SYSTEM_CURSOR_WAIT: c_int = 2;
pub const SDL_SYSTEM_CURSOR_CROSSHAIR: c_int = 3;
pub const SDL_SYSTEM_CURSOR_PROGRESS: c_int = 4;
pub const SDL_SYSTEM_CURSOR_NWSE_RESIZE: c_int = 5;
pub const SDL_SYSTEM_CURSOR_NESW_RESIZE: c_int = 6;
pub const SDL_SYSTEM_CURSOR_EW_RESIZE: c_int = 7;
pub const SDL_SYSTEM_CURSOR_NS_RESIZE: c_int = 8;
pub const SDL_SYSTEM_CURSOR_MOVE: c_int = 9;
pub const SDL_SYSTEM_CURSOR_NOT_ALLOWED: c_int = 10;
pub const SDL_SYSTEM_CURSOR_POINTER: c_int = 11;
pub const SDL_SYSTEM_CURSOR_NW_RESIZE: c_int = 12;
pub const SDL_SYSTEM_CURSOR_N_RESIZE: c_int = 13;
pub const SDL_SYSTEM_CURSOR_NE_RESIZE: c_int = 14;
pub const SDL_SYSTEM_CURSOR_E_RESIZE: c_int = 15;
pub const SDL_SYSTEM_CURSOR_SE_RESIZE: c_int = 16;
pub const SDL_SYSTEM_CURSOR_S_RESIZE: c_int = 17;
pub const SDL_SYSTEM_CURSOR_SW_RESIZE: c_int = 18;
pub const SDL_SYSTEM_CURSOR_W_RESIZE: c_int = 19;
pub const SDL_NUM_SYSTEM_CURSORS: c_int = 20;
pub const enum_SDL_SystemCursor = c_uint;
pub const SDL_SystemCursor = enum_SDL_SystemCursor;
pub const SDL_MOUSEWHEEL_NORMAL: c_int = 0;
pub const SDL_MOUSEWHEEL_FLIPPED: c_int = 1;
pub const enum_SDL_MouseWheelDirection = c_uint;
pub const SDL_MouseWheelDirection = enum_SDL_MouseWheelDirection;
pub const SDL_MouseButtonFlags = Uint32;
pub extern fn SDL_HasMouse() SDL_bool;
pub extern fn SDL_GetMice(count: [*c]c_int) [*c]SDL_MouseID;
pub extern fn SDL_GetMouseInstanceName(instance_id: SDL_MouseID) [*c]const u8;
pub extern fn SDL_GetMouseFocus() ?*SDL_Window;
pub extern fn SDL_GetMouseState(x: [*c]f32, y: [*c]f32) SDL_MouseButtonFlags;
pub extern fn SDL_GetGlobalMouseState(x: [*c]f32, y: [*c]f32) SDL_MouseButtonFlags;
pub extern fn SDL_GetRelativeMouseState(x: [*c]f32, y: [*c]f32) SDL_MouseButtonFlags;
pub extern fn SDL_WarpMouseInWindow(window: ?*SDL_Window, x: f32, y: f32) void;
pub extern fn SDL_WarpMouseGlobal(x: f32, y: f32) c_int;
pub extern fn SDL_SetRelativeMouseMode(enabled: SDL_bool) c_int;
pub extern fn SDL_CaptureMouse(enabled: SDL_bool) c_int;
pub extern fn SDL_GetRelativeMouseMode() SDL_bool;
pub extern fn SDL_CreateCursor(data: [*c]const Uint8, mask: [*c]const Uint8, w: c_int, h: c_int, hot_x: c_int, hot_y: c_int) ?*SDL_Cursor;
pub extern fn SDL_CreateColorCursor(surface: [*c]SDL_Surface, hot_x: c_int, hot_y: c_int) ?*SDL_Cursor;
pub extern fn SDL_CreateSystemCursor(id: SDL_SystemCursor) ?*SDL_Cursor;
pub extern fn SDL_SetCursor(cursor: ?*SDL_Cursor) c_int;
pub extern fn SDL_GetCursor() ?*SDL_Cursor;
pub extern fn SDL_GetDefaultCursor() ?*SDL_Cursor;
pub extern fn SDL_DestroyCursor(cursor: ?*SDL_Cursor) void;
pub extern fn SDL_ShowCursor() c_int;
pub extern fn SDL_HideCursor() c_int;
pub extern fn SDL_CursorVisible() SDL_bool;
pub const SDL_PenID = Uint32;
pub const SDL_PEN_AXIS_PRESSURE: c_int = 0;
pub const SDL_PEN_AXIS_XTILT: c_int = 1;
pub const SDL_PEN_AXIS_YTILT: c_int = 2;
pub const SDL_PEN_AXIS_DISTANCE: c_int = 3;
pub const SDL_PEN_AXIS_ROTATION: c_int = 4;
pub const SDL_PEN_AXIS_SLIDER: c_int = 5;
pub const SDL_PEN_NUM_AXES: c_int = 6;
pub const SDL_PEN_AXIS_LAST: c_int = 5;
pub const enum_SDL_PenAxis = c_uint;
pub const SDL_PenAxis = enum_SDL_PenAxis;
pub const SDL_PenCapabilityFlags = Uint32;
pub const SDL_PEN_TYPE_UNKNOWN: c_int = 0;
pub const SDL_PEN_TYPE_ERASER: c_int = 1;
pub const SDL_PEN_TYPE_PEN: c_int = 2;
pub const SDL_PEN_TYPE_PENCIL: c_int = 3;
pub const SDL_PEN_TYPE_BRUSH: c_int = 4;
pub const SDL_PEN_TYPE_AIRBRUSH: c_int = 5;
pub const SDL_PEN_TYPE_LAST: c_int = 5;
pub const enum_SDL_PenSubtype = c_uint;
pub const SDL_PenSubtype = enum_SDL_PenSubtype;
pub extern fn SDL_GetPens(count: [*c]c_int) [*c]SDL_PenID;
pub extern fn SDL_GetPenStatus(instance_id: SDL_PenID, x: [*c]f32, y: [*c]f32, axes: [*c]f32, num_axes: usize) Uint32;
pub extern fn SDL_GetPenFromGUID(guid: SDL_GUID) SDL_PenID;
pub extern fn SDL_GetPenGUID(instance_id: SDL_PenID) SDL_GUID;
pub extern fn SDL_PenConnected(instance_id: SDL_PenID) SDL_bool;
pub extern fn SDL_GetPenName(instance_id: SDL_PenID) [*c]const u8;
pub const struct_SDL_PenCapabilityInfo = extern struct {
    max_tilt: f32 = @import("std").mem.zeroes(f32),
    wacom_id: Uint32 = @import("std").mem.zeroes(Uint32),
    num_buttons: Sint8 = @import("std").mem.zeroes(Sint8),
};
pub const SDL_PenCapabilityInfo = struct_SDL_PenCapabilityInfo;
pub extern fn SDL_GetPenCapabilities(instance_id: SDL_PenID, capabilities: [*c]SDL_PenCapabilityInfo) SDL_PenCapabilityFlags;
pub extern fn SDL_GetPenType(instance_id: SDL_PenID) SDL_PenSubtype;
pub const SDL_TouchID = Uint64;
pub const SDL_FingerID = Uint64;
pub const SDL_TOUCH_DEVICE_INVALID: c_int = -1;
pub const SDL_TOUCH_DEVICE_DIRECT: c_int = 0;
pub const SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE: c_int = 1;
pub const SDL_TOUCH_DEVICE_INDIRECT_RELATIVE: c_int = 2;
pub const enum_SDL_TouchDeviceType = c_int;
pub const SDL_TouchDeviceType = enum_SDL_TouchDeviceType;
pub const struct_SDL_Finger = extern struct {
    id: SDL_FingerID = @import("std").mem.zeroes(SDL_FingerID),
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    pressure: f32 = @import("std").mem.zeroes(f32),
};
pub const SDL_Finger = struct_SDL_Finger;
pub extern fn SDL_GetTouchDevices(count: [*c]c_int) [*c]SDL_TouchID;
pub extern fn SDL_GetTouchDeviceName(touchID: SDL_TouchID) [*c]const u8;
pub extern fn SDL_GetTouchDeviceType(touchID: SDL_TouchID) SDL_TouchDeviceType;
pub extern fn SDL_GetTouchFingers(touchID: SDL_TouchID, count: [*c]c_int) [*c][*c]SDL_Finger;
pub const SDL_EVENT_FIRST: c_int = 0;
pub const SDL_EVENT_QUIT: c_int = 256;
pub const SDL_EVENT_TERMINATING: c_int = 257;
pub const SDL_EVENT_LOW_MEMORY: c_int = 258;
pub const SDL_EVENT_WILL_ENTER_BACKGROUND: c_int = 259;
pub const SDL_EVENT_DID_ENTER_BACKGROUND: c_int = 260;
pub const SDL_EVENT_WILL_ENTER_FOREGROUND: c_int = 261;
pub const SDL_EVENT_DID_ENTER_FOREGROUND: c_int = 262;
pub const SDL_EVENT_LOCALE_CHANGED: c_int = 263;
pub const SDL_EVENT_SYSTEM_THEME_CHANGED: c_int = 264;
pub const SDL_EVENT_DISPLAY_ORIENTATION: c_int = 337;
pub const SDL_EVENT_DISPLAY_ADDED: c_int = 338;
pub const SDL_EVENT_DISPLAY_REMOVED: c_int = 339;
pub const SDL_EVENT_DISPLAY_MOVED: c_int = 340;
pub const SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED: c_int = 341;
pub const SDL_EVENT_DISPLAY_HDR_STATE_CHANGED: c_int = 342;
pub const SDL_EVENT_DISPLAY_FIRST: c_int = 337;
pub const SDL_EVENT_DISPLAY_LAST: c_int = 342;
pub const SDL_EVENT_WINDOW_SHOWN: c_int = 514;
pub const SDL_EVENT_WINDOW_HIDDEN: c_int = 515;
pub const SDL_EVENT_WINDOW_EXPOSED: c_int = 516;
pub const SDL_EVENT_WINDOW_MOVED: c_int = 517;
pub const SDL_EVENT_WINDOW_RESIZED: c_int = 518;
pub const SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED: c_int = 519;
pub const SDL_EVENT_WINDOW_MINIMIZED: c_int = 520;
pub const SDL_EVENT_WINDOW_MAXIMIZED: c_int = 521;
pub const SDL_EVENT_WINDOW_RESTORED: c_int = 522;
pub const SDL_EVENT_WINDOW_MOUSE_ENTER: c_int = 523;
pub const SDL_EVENT_WINDOW_MOUSE_LEAVE: c_int = 524;
pub const SDL_EVENT_WINDOW_FOCUS_GAINED: c_int = 525;
pub const SDL_EVENT_WINDOW_FOCUS_LOST: c_int = 526;
pub const SDL_EVENT_WINDOW_CLOSE_REQUESTED: c_int = 527;
pub const SDL_EVENT_WINDOW_TAKE_FOCUS: c_int = 528;
pub const SDL_EVENT_WINDOW_HIT_TEST: c_int = 529;
pub const SDL_EVENT_WINDOW_ICCPROF_CHANGED: c_int = 530;
pub const SDL_EVENT_WINDOW_DISPLAY_CHANGED: c_int = 531;
pub const SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED: c_int = 532;
pub const SDL_EVENT_WINDOW_OCCLUDED: c_int = 533;
pub const SDL_EVENT_WINDOW_ENTER_FULLSCREEN: c_int = 534;
pub const SDL_EVENT_WINDOW_LEAVE_FULLSCREEN: c_int = 535;
pub const SDL_EVENT_WINDOW_DESTROYED: c_int = 536;
pub const SDL_EVENT_WINDOW_PEN_ENTER: c_int = 537;
pub const SDL_EVENT_WINDOW_PEN_LEAVE: c_int = 538;
pub const SDL_EVENT_WINDOW_FIRST: c_int = 514;
pub const SDL_EVENT_WINDOW_LAST: c_int = 538;
pub const SDL_EVENT_KEY_DOWN: c_int = 768;
pub const SDL_EVENT_KEY_UP: c_int = 769;
pub const SDL_EVENT_TEXT_EDITING: c_int = 770;
pub const SDL_EVENT_TEXT_INPUT: c_int = 771;
pub const SDL_EVENT_KEYMAP_CHANGED: c_int = 772;
pub const SDL_EVENT_KEYBOARD_ADDED: c_int = 773;
pub const SDL_EVENT_KEYBOARD_REMOVED: c_int = 774;
pub const SDL_EVENT_MOUSE_MOTION: c_int = 1024;
pub const SDL_EVENT_MOUSE_BUTTON_DOWN: c_int = 1025;
pub const SDL_EVENT_MOUSE_BUTTON_UP: c_int = 1026;
pub const SDL_EVENT_MOUSE_WHEEL: c_int = 1027;
pub const SDL_EVENT_MOUSE_ADDED: c_int = 1028;
pub const SDL_EVENT_MOUSE_REMOVED: c_int = 1029;
pub const SDL_EVENT_JOYSTICK_AXIS_MOTION: c_int = 1536;
pub const SDL_EVENT_JOYSTICK_BALL_MOTION: c_int = 1537;
pub const SDL_EVENT_JOYSTICK_HAT_MOTION: c_int = 1538;
pub const SDL_EVENT_JOYSTICK_BUTTON_DOWN: c_int = 1539;
pub const SDL_EVENT_JOYSTICK_BUTTON_UP: c_int = 1540;
pub const SDL_EVENT_JOYSTICK_ADDED: c_int = 1541;
pub const SDL_EVENT_JOYSTICK_REMOVED: c_int = 1542;
pub const SDL_EVENT_JOYSTICK_BATTERY_UPDATED: c_int = 1543;
pub const SDL_EVENT_JOYSTICK_UPDATE_COMPLETE: c_int = 1544;
pub const SDL_EVENT_GAMEPAD_AXIS_MOTION: c_int = 1616;
pub const SDL_EVENT_GAMEPAD_BUTTON_DOWN: c_int = 1617;
pub const SDL_EVENT_GAMEPAD_BUTTON_UP: c_int = 1618;
pub const SDL_EVENT_GAMEPAD_ADDED: c_int = 1619;
pub const SDL_EVENT_GAMEPAD_REMOVED: c_int = 1620;
pub const SDL_EVENT_GAMEPAD_REMAPPED: c_int = 1621;
pub const SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN: c_int = 1622;
pub const SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION: c_int = 1623;
pub const SDL_EVENT_GAMEPAD_TOUCHPAD_UP: c_int = 1624;
pub const SDL_EVENT_GAMEPAD_SENSOR_UPDATE: c_int = 1625;
pub const SDL_EVENT_GAMEPAD_UPDATE_COMPLETE: c_int = 1626;
pub const SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED: c_int = 1627;
pub const SDL_EVENT_FINGER_DOWN: c_int = 1792;
pub const SDL_EVENT_FINGER_UP: c_int = 1793;
pub const SDL_EVENT_FINGER_MOTION: c_int = 1794;
pub const SDL_EVENT_CLIPBOARD_UPDATE: c_int = 2304;
pub const SDL_EVENT_DROP_FILE: c_int = 4096;
pub const SDL_EVENT_DROP_TEXT: c_int = 4097;
pub const SDL_EVENT_DROP_BEGIN: c_int = 4098;
pub const SDL_EVENT_DROP_COMPLETE: c_int = 4099;
pub const SDL_EVENT_DROP_POSITION: c_int = 4100;
pub const SDL_EVENT_AUDIO_DEVICE_ADDED: c_int = 4352;
pub const SDL_EVENT_AUDIO_DEVICE_REMOVED: c_int = 4353;
pub const SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED: c_int = 4354;
pub const SDL_EVENT_SENSOR_UPDATE: c_int = 4608;
pub const SDL_EVENT_PEN_DOWN: c_int = 4864;
pub const SDL_EVENT_PEN_UP: c_int = 4865;
pub const SDL_EVENT_PEN_MOTION: c_int = 4866;
pub const SDL_EVENT_PEN_BUTTON_DOWN: c_int = 4867;
pub const SDL_EVENT_PEN_BUTTON_UP: c_int = 4868;
pub const SDL_EVENT_CAMERA_DEVICE_ADDED: c_int = 5120;
pub const SDL_EVENT_CAMERA_DEVICE_REMOVED: c_int = 5121;
pub const SDL_EVENT_CAMERA_DEVICE_APPROVED: c_int = 5122;
pub const SDL_EVENT_CAMERA_DEVICE_DENIED: c_int = 5123;
pub const SDL_EVENT_RENDER_TARGETS_RESET: c_int = 8192;
pub const SDL_EVENT_RENDER_DEVICE_RESET: c_int = 8193;
pub const SDL_EVENT_POLL_SENTINEL: c_int = 32512;
pub const SDL_EVENT_USER: c_int = 32768;
pub const SDL_EVENT_LAST: c_int = 65535;
pub const SDL_EVENT_ENUM_PADDING: c_int = 2147483647;
pub const enum_SDL_EventType = c_uint;
pub const SDL_EventType = enum_SDL_EventType;
pub const struct_SDL_CommonEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
};
pub const SDL_CommonEvent = struct_SDL_CommonEvent;
pub const struct_SDL_DisplayEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    displayID: SDL_DisplayID = @import("std").mem.zeroes(SDL_DisplayID),
    data1: Sint32 = @import("std").mem.zeroes(Sint32),
};
pub const SDL_DisplayEvent = struct_SDL_DisplayEvent;
pub const struct_SDL_WindowEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    windowID: SDL_WindowID = @import("std").mem.zeroes(SDL_WindowID),
    data1: Sint32 = @import("std").mem.zeroes(Sint32),
    data2: Sint32 = @import("std").mem.zeroes(Sint32),
};
pub const SDL_WindowEvent = struct_SDL_WindowEvent;
pub const struct_SDL_KeyboardDeviceEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    which: SDL_KeyboardID = @import("std").mem.zeroes(SDL_KeyboardID),
};
pub const SDL_KeyboardDeviceEvent = struct_SDL_KeyboardDeviceEvent;
pub const struct_SDL_KeyboardEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    windowID: SDL_WindowID = @import("std").mem.zeroes(SDL_WindowID),
    which: SDL_KeyboardID = @import("std").mem.zeroes(SDL_KeyboardID),
    state: Uint8 = @import("std").mem.zeroes(Uint8),
    repeat: Uint8 = @import("std").mem.zeroes(Uint8),
    padding2: Uint8 = @import("std").mem.zeroes(Uint8),
    padding3: Uint8 = @import("std").mem.zeroes(Uint8),
    keysym: SDL_Keysym = @import("std").mem.zeroes(SDL_Keysym),
};
pub const SDL_KeyboardEvent = struct_SDL_KeyboardEvent;
pub const struct_SDL_TextEditingEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    windowID: SDL_WindowID = @import("std").mem.zeroes(SDL_WindowID),
    text: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    start: Sint32 = @import("std").mem.zeroes(Sint32),
    length: Sint32 = @import("std").mem.zeroes(Sint32),
};
pub const SDL_TextEditingEvent = struct_SDL_TextEditingEvent;
pub const struct_SDL_TextInputEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    windowID: SDL_WindowID = @import("std").mem.zeroes(SDL_WindowID),
    text: [*c]u8 = @import("std").mem.zeroes([*c]u8),
};
pub const SDL_TextInputEvent = struct_SDL_TextInputEvent;
pub const struct_SDL_MouseDeviceEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    which: SDL_MouseID = @import("std").mem.zeroes(SDL_MouseID),
};
pub const SDL_MouseDeviceEvent = struct_SDL_MouseDeviceEvent;
pub const struct_SDL_MouseMotionEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    windowID: SDL_WindowID = @import("std").mem.zeroes(SDL_WindowID),
    which: SDL_MouseID = @import("std").mem.zeroes(SDL_MouseID),
    state: SDL_MouseButtonFlags = @import("std").mem.zeroes(SDL_MouseButtonFlags),
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    xrel: f32 = @import("std").mem.zeroes(f32),
    yrel: f32 = @import("std").mem.zeroes(f32),
};
pub const SDL_MouseMotionEvent = struct_SDL_MouseMotionEvent;
pub const struct_SDL_MouseButtonEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    windowID: SDL_WindowID = @import("std").mem.zeroes(SDL_WindowID),
    which: SDL_MouseID = @import("std").mem.zeroes(SDL_MouseID),
    button: Uint8 = @import("std").mem.zeroes(Uint8),
    state: Uint8 = @import("std").mem.zeroes(Uint8),
    clicks: Uint8 = @import("std").mem.zeroes(Uint8),
    padding: Uint8 = @import("std").mem.zeroes(Uint8),
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
};
pub const SDL_MouseButtonEvent = struct_SDL_MouseButtonEvent;
pub const struct_SDL_MouseWheelEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    windowID: SDL_WindowID = @import("std").mem.zeroes(SDL_WindowID),
    which: SDL_MouseID = @import("std").mem.zeroes(SDL_MouseID),
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    direction: SDL_MouseWheelDirection = @import("std").mem.zeroes(SDL_MouseWheelDirection),
    mouse_x: f32 = @import("std").mem.zeroes(f32),
    mouse_y: f32 = @import("std").mem.zeroes(f32),
};
pub const SDL_MouseWheelEvent = struct_SDL_MouseWheelEvent;
pub const struct_SDL_JoyAxisEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    which: SDL_JoystickID = @import("std").mem.zeroes(SDL_JoystickID),
    axis: Uint8 = @import("std").mem.zeroes(Uint8),
    padding1: Uint8 = @import("std").mem.zeroes(Uint8),
    padding2: Uint8 = @import("std").mem.zeroes(Uint8),
    padding3: Uint8 = @import("std").mem.zeroes(Uint8),
    value: Sint16 = @import("std").mem.zeroes(Sint16),
    padding4: Uint16 = @import("std").mem.zeroes(Uint16),
};
pub const SDL_JoyAxisEvent = struct_SDL_JoyAxisEvent;
pub const struct_SDL_JoyBallEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    which: SDL_JoystickID = @import("std").mem.zeroes(SDL_JoystickID),
    ball: Uint8 = @import("std").mem.zeroes(Uint8),
    padding1: Uint8 = @import("std").mem.zeroes(Uint8),
    padding2: Uint8 = @import("std").mem.zeroes(Uint8),
    padding3: Uint8 = @import("std").mem.zeroes(Uint8),
    xrel: Sint16 = @import("std").mem.zeroes(Sint16),
    yrel: Sint16 = @import("std").mem.zeroes(Sint16),
};
pub const SDL_JoyBallEvent = struct_SDL_JoyBallEvent;
pub const struct_SDL_JoyHatEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    which: SDL_JoystickID = @import("std").mem.zeroes(SDL_JoystickID),
    hat: Uint8 = @import("std").mem.zeroes(Uint8),
    value: Uint8 = @import("std").mem.zeroes(Uint8),
    padding1: Uint8 = @import("std").mem.zeroes(Uint8),
    padding2: Uint8 = @import("std").mem.zeroes(Uint8),
};
pub const SDL_JoyHatEvent = struct_SDL_JoyHatEvent;
pub const struct_SDL_JoyButtonEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    which: SDL_JoystickID = @import("std").mem.zeroes(SDL_JoystickID),
    button: Uint8 = @import("std").mem.zeroes(Uint8),
    state: Uint8 = @import("std").mem.zeroes(Uint8),
    padding1: Uint8 = @import("std").mem.zeroes(Uint8),
    padding2: Uint8 = @import("std").mem.zeroes(Uint8),
};
pub const SDL_JoyButtonEvent = struct_SDL_JoyButtonEvent;
pub const struct_SDL_JoyDeviceEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    which: SDL_JoystickID = @import("std").mem.zeroes(SDL_JoystickID),
};
pub const SDL_JoyDeviceEvent = struct_SDL_JoyDeviceEvent;
pub const struct_SDL_JoyBatteryEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    which: SDL_JoystickID = @import("std").mem.zeroes(SDL_JoystickID),
    state: SDL_PowerState = @import("std").mem.zeroes(SDL_PowerState),
    percent: c_int = @import("std").mem.zeroes(c_int),
};
pub const SDL_JoyBatteryEvent = struct_SDL_JoyBatteryEvent;
pub const struct_SDL_GamepadAxisEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    which: SDL_JoystickID = @import("std").mem.zeroes(SDL_JoystickID),
    axis: Uint8 = @import("std").mem.zeroes(Uint8),
    padding1: Uint8 = @import("std").mem.zeroes(Uint8),
    padding2: Uint8 = @import("std").mem.zeroes(Uint8),
    padding3: Uint8 = @import("std").mem.zeroes(Uint8),
    value: Sint16 = @import("std").mem.zeroes(Sint16),
    padding4: Uint16 = @import("std").mem.zeroes(Uint16),
};
pub const SDL_GamepadAxisEvent = struct_SDL_GamepadAxisEvent;
pub const struct_SDL_GamepadButtonEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    which: SDL_JoystickID = @import("std").mem.zeroes(SDL_JoystickID),
    button: Uint8 = @import("std").mem.zeroes(Uint8),
    state: Uint8 = @import("std").mem.zeroes(Uint8),
    padding1: Uint8 = @import("std").mem.zeroes(Uint8),
    padding2: Uint8 = @import("std").mem.zeroes(Uint8),
};
pub const SDL_GamepadButtonEvent = struct_SDL_GamepadButtonEvent;
pub const struct_SDL_GamepadDeviceEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    which: SDL_JoystickID = @import("std").mem.zeroes(SDL_JoystickID),
};
pub const SDL_GamepadDeviceEvent = struct_SDL_GamepadDeviceEvent;
pub const struct_SDL_GamepadTouchpadEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    which: SDL_JoystickID = @import("std").mem.zeroes(SDL_JoystickID),
    touchpad: Sint32 = @import("std").mem.zeroes(Sint32),
    finger: Sint32 = @import("std").mem.zeroes(Sint32),
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    pressure: f32 = @import("std").mem.zeroes(f32),
};
pub const SDL_GamepadTouchpadEvent = struct_SDL_GamepadTouchpadEvent;
pub const struct_SDL_GamepadSensorEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    which: SDL_JoystickID = @import("std").mem.zeroes(SDL_JoystickID),
    sensor: Sint32 = @import("std").mem.zeroes(Sint32),
    data: [3]f32 = @import("std").mem.zeroes([3]f32),
    sensor_timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
};
pub const SDL_GamepadSensorEvent = struct_SDL_GamepadSensorEvent;
pub const struct_SDL_AudioDeviceEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    which: SDL_AudioDeviceID = @import("std").mem.zeroes(SDL_AudioDeviceID),
    iscapture: Uint8 = @import("std").mem.zeroes(Uint8),
    padding1: Uint8 = @import("std").mem.zeroes(Uint8),
    padding2: Uint8 = @import("std").mem.zeroes(Uint8),
    padding3: Uint8 = @import("std").mem.zeroes(Uint8),
};
pub const SDL_AudioDeviceEvent = struct_SDL_AudioDeviceEvent;
pub const struct_SDL_CameraDeviceEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    which: SDL_CameraDeviceID = @import("std").mem.zeroes(SDL_CameraDeviceID),
};
pub const SDL_CameraDeviceEvent = struct_SDL_CameraDeviceEvent;
pub const struct_SDL_TouchFingerEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    touchID: SDL_TouchID = @import("std").mem.zeroes(SDL_TouchID),
    fingerID: SDL_FingerID = @import("std").mem.zeroes(SDL_FingerID),
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    dx: f32 = @import("std").mem.zeroes(f32),
    dy: f32 = @import("std").mem.zeroes(f32),
    pressure: f32 = @import("std").mem.zeroes(f32),
    windowID: SDL_WindowID = @import("std").mem.zeroes(SDL_WindowID),
};
pub const SDL_TouchFingerEvent = struct_SDL_TouchFingerEvent;
pub const struct_SDL_PenTipEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    windowID: SDL_WindowID = @import("std").mem.zeroes(SDL_WindowID),
    which: SDL_PenID = @import("std").mem.zeroes(SDL_PenID),
    tip: Uint8 = @import("std").mem.zeroes(Uint8),
    state: Uint8 = @import("std").mem.zeroes(Uint8),
    pen_state: Uint16 = @import("std").mem.zeroes(Uint16),
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    axes: [6]f32 = @import("std").mem.zeroes([6]f32),
};
pub const SDL_PenTipEvent = struct_SDL_PenTipEvent;
pub const struct_SDL_PenMotionEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    windowID: SDL_WindowID = @import("std").mem.zeroes(SDL_WindowID),
    which: SDL_PenID = @import("std").mem.zeroes(SDL_PenID),
    padding1: Uint8 = @import("std").mem.zeroes(Uint8),
    padding2: Uint8 = @import("std").mem.zeroes(Uint8),
    pen_state: Uint16 = @import("std").mem.zeroes(Uint16),
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    axes: [6]f32 = @import("std").mem.zeroes([6]f32),
};
pub const SDL_PenMotionEvent = struct_SDL_PenMotionEvent;
pub const struct_SDL_PenButtonEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    windowID: SDL_WindowID = @import("std").mem.zeroes(SDL_WindowID),
    which: SDL_PenID = @import("std").mem.zeroes(SDL_PenID),
    button: Uint8 = @import("std").mem.zeroes(Uint8),
    state: Uint8 = @import("std").mem.zeroes(Uint8),
    pen_state: Uint16 = @import("std").mem.zeroes(Uint16),
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    axes: [6]f32 = @import("std").mem.zeroes([6]f32),
};
pub const SDL_PenButtonEvent = struct_SDL_PenButtonEvent;
pub const struct_SDL_DropEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    windowID: SDL_WindowID = @import("std").mem.zeroes(SDL_WindowID),
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    source: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    data: [*c]u8 = @import("std").mem.zeroes([*c]u8),
};
pub const SDL_DropEvent = struct_SDL_DropEvent;
pub const struct_SDL_ClipboardEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
};
pub const SDL_ClipboardEvent = struct_SDL_ClipboardEvent;
pub const struct_SDL_SensorEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    which: SDL_SensorID = @import("std").mem.zeroes(SDL_SensorID),
    data: [6]f32 = @import("std").mem.zeroes([6]f32),
    sensor_timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
};
pub const SDL_SensorEvent = struct_SDL_SensorEvent;
pub const struct_SDL_QuitEvent = extern struct {
    type: SDL_EventType = @import("std").mem.zeroes(SDL_EventType),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
};
pub const SDL_QuitEvent = struct_SDL_QuitEvent;
pub const struct_SDL_UserEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    reserved: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint64 = @import("std").mem.zeroes(Uint64),
    windowID: SDL_WindowID = @import("std").mem.zeroes(SDL_WindowID),
    code: Sint32 = @import("std").mem.zeroes(Sint32),
    data1: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    data2: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const SDL_UserEvent = struct_SDL_UserEvent;
pub const union_SDL_Event = extern union {
    type: Uint32,
    common: SDL_CommonEvent,
    display: SDL_DisplayEvent,
    window: SDL_WindowEvent,
    kdevice: SDL_KeyboardDeviceEvent,
    key: SDL_KeyboardEvent,
    edit: SDL_TextEditingEvent,
    text: SDL_TextInputEvent,
    mdevice: SDL_MouseDeviceEvent,
    motion: SDL_MouseMotionEvent,
    button: SDL_MouseButtonEvent,
    wheel: SDL_MouseWheelEvent,
    jdevice: SDL_JoyDeviceEvent,
    jaxis: SDL_JoyAxisEvent,
    jball: SDL_JoyBallEvent,
    jhat: SDL_JoyHatEvent,
    jbutton: SDL_JoyButtonEvent,
    jbattery: SDL_JoyBatteryEvent,
    gdevice: SDL_GamepadDeviceEvent,
    gaxis: SDL_GamepadAxisEvent,
    gbutton: SDL_GamepadButtonEvent,
    gtouchpad: SDL_GamepadTouchpadEvent,
    gsensor: SDL_GamepadSensorEvent,
    adevice: SDL_AudioDeviceEvent,
    cdevice: SDL_CameraDeviceEvent,
    sensor: SDL_SensorEvent,
    quit: SDL_QuitEvent,
    user: SDL_UserEvent,
    tfinger: SDL_TouchFingerEvent,
    ptip: SDL_PenTipEvent,
    pmotion: SDL_PenMotionEvent,
    pbutton: SDL_PenButtonEvent,
    drop: SDL_DropEvent,
    clipboard: SDL_ClipboardEvent,
    padding: [128]Uint8,
};
pub const SDL_Event = union_SDL_Event;
// /usr/include/SDL3/SDL_stdinc.h:428:42: warning: ignoring StaticAssert declaration
pub extern fn SDL_PumpEvents() void;
pub const SDL_ADDEVENT: c_int = 0;
pub const SDL_PEEKEVENT: c_int = 1;
pub const SDL_GETEVENT: c_int = 2;
pub const enum_SDL_EventAction = c_uint;
pub const SDL_EventAction = enum_SDL_EventAction;
pub extern fn SDL_PeepEvents(events: [*c]SDL_Event, numevents: c_int, action: SDL_EventAction, minType: Uint32, maxType: Uint32) c_int;
pub extern fn SDL_HasEvent(@"type": Uint32) SDL_bool;
pub extern fn SDL_HasEvents(minType: Uint32, maxType: Uint32) SDL_bool;
pub extern fn SDL_FlushEvent(@"type": Uint32) void;
pub extern fn SDL_FlushEvents(minType: Uint32, maxType: Uint32) void;
pub extern fn SDL_PollEvent(event: [*c]SDL_Event) SDL_bool;
pub extern fn SDL_WaitEvent(event: [*c]SDL_Event) SDL_bool;
pub extern fn SDL_WaitEventTimeout(event: [*c]SDL_Event, timeoutMS: Sint32) SDL_bool;
pub extern fn SDL_PushEvent(event: [*c]SDL_Event) c_int;
pub const SDL_EventFilter = ?*const fn (?*anyopaque, [*c]SDL_Event) callconv(.C) c_int;
pub extern fn SDL_SetEventFilter(filter: SDL_EventFilter, userdata: ?*anyopaque) void;
pub extern fn SDL_GetEventFilter(filter: [*c]SDL_EventFilter, userdata: [*c]?*anyopaque) SDL_bool;
pub extern fn SDL_AddEventWatch(filter: SDL_EventFilter, userdata: ?*anyopaque) c_int;
pub extern fn SDL_DelEventWatch(filter: SDL_EventFilter, userdata: ?*anyopaque) void;
pub extern fn SDL_FilterEvents(filter: SDL_EventFilter, userdata: ?*anyopaque) void;
pub extern fn SDL_SetEventEnabled(@"type": Uint32, enabled: SDL_bool) void;
pub extern fn SDL_EventEnabled(@"type": Uint32) SDL_bool;
pub extern fn SDL_RegisterEvents(numevents: c_int) Uint32;
pub extern fn SDL_AllocateEventMemory(size: usize) ?*anyopaque;
pub extern fn SDL_GetBasePath() [*c]u8;
pub extern fn SDL_GetPrefPath(org: [*c]const u8, app: [*c]const u8) [*c]u8;
pub const SDL_FOLDER_HOME: c_int = 0;
pub const SDL_FOLDER_DESKTOP: c_int = 1;
pub const SDL_FOLDER_DOCUMENTS: c_int = 2;
pub const SDL_FOLDER_DOWNLOADS: c_int = 3;
pub const SDL_FOLDER_MUSIC: c_int = 4;
pub const SDL_FOLDER_PICTURES: c_int = 5;
pub const SDL_FOLDER_PUBLICSHARE: c_int = 6;
pub const SDL_FOLDER_SAVEDGAMES: c_int = 7;
pub const SDL_FOLDER_SCREENSHOTS: c_int = 8;
pub const SDL_FOLDER_TEMPLATES: c_int = 9;
pub const SDL_FOLDER_VIDEOS: c_int = 10;
pub const enum_SDL_Folder = c_uint;
pub const SDL_Folder = enum_SDL_Folder;
pub extern fn SDL_GetUserFolder(folder: SDL_Folder) [*c]u8;
pub const SDL_PATHTYPE_NONE: c_int = 0;
pub const SDL_PATHTYPE_FILE: c_int = 1;
pub const SDL_PATHTYPE_DIRECTORY: c_int = 2;
pub const SDL_PATHTYPE_OTHER: c_int = 3;
pub const enum_SDL_PathType = c_uint;
pub const SDL_PathType = enum_SDL_PathType;
pub const struct_SDL_PathInfo = extern struct {
    type: SDL_PathType = @import("std").mem.zeroes(SDL_PathType),
    size: Uint64 = @import("std").mem.zeroes(Uint64),
    create_time: SDL_Time = @import("std").mem.zeroes(SDL_Time),
    modify_time: SDL_Time = @import("std").mem.zeroes(SDL_Time),
    access_time: SDL_Time = @import("std").mem.zeroes(SDL_Time),
};
pub const SDL_PathInfo = struct_SDL_PathInfo;
pub const SDL_GlobFlags = Uint32;
pub extern fn SDL_CreateDirectory(path: [*c]const u8) c_int;
pub const SDL_EnumerateDirectoryCallback = ?*const fn (?*anyopaque, [*c]const u8, [*c]const u8) callconv(.C) c_int;
pub extern fn SDL_EnumerateDirectory(path: [*c]const u8, callback: SDL_EnumerateDirectoryCallback, userdata: ?*anyopaque) c_int;
pub extern fn SDL_RemovePath(path: [*c]const u8) c_int;
pub extern fn SDL_RenamePath(oldpath: [*c]const u8, newpath: [*c]const u8) c_int;
pub extern fn SDL_GetPathInfo(path: [*c]const u8, info: [*c]SDL_PathInfo) c_int;
pub extern fn SDL_GlobDirectory(path: [*c]const u8, pattern: [*c]const u8, flags: SDL_GlobFlags, count: [*c]c_int) [*c][*c]u8;
pub const struct_SDL_Haptic = opaque {};
pub const SDL_Haptic = struct_SDL_Haptic;
pub const struct_SDL_HapticDirection = extern struct {
    type: Uint8 = @import("std").mem.zeroes(Uint8),
    dir: [3]Sint32 = @import("std").mem.zeroes([3]Sint32),
};
pub const SDL_HapticDirection = struct_SDL_HapticDirection;
pub const struct_SDL_HapticConstant = extern struct {
    type: Uint16 = @import("std").mem.zeroes(Uint16),
    direction: SDL_HapticDirection = @import("std").mem.zeroes(SDL_HapticDirection),
    length: Uint32 = @import("std").mem.zeroes(Uint32),
    delay: Uint16 = @import("std").mem.zeroes(Uint16),
    button: Uint16 = @import("std").mem.zeroes(Uint16),
    interval: Uint16 = @import("std").mem.zeroes(Uint16),
    level: Sint16 = @import("std").mem.zeroes(Sint16),
    attack_length: Uint16 = @import("std").mem.zeroes(Uint16),
    attack_level: Uint16 = @import("std").mem.zeroes(Uint16),
    fade_length: Uint16 = @import("std").mem.zeroes(Uint16),
    fade_level: Uint16 = @import("std").mem.zeroes(Uint16),
};
pub const SDL_HapticConstant = struct_SDL_HapticConstant;
pub const struct_SDL_HapticPeriodic = extern struct {
    type: Uint16 = @import("std").mem.zeroes(Uint16),
    direction: SDL_HapticDirection = @import("std").mem.zeroes(SDL_HapticDirection),
    length: Uint32 = @import("std").mem.zeroes(Uint32),
    delay: Uint16 = @import("std").mem.zeroes(Uint16),
    button: Uint16 = @import("std").mem.zeroes(Uint16),
    interval: Uint16 = @import("std").mem.zeroes(Uint16),
    period: Uint16 = @import("std").mem.zeroes(Uint16),
    magnitude: Sint16 = @import("std").mem.zeroes(Sint16),
    offset: Sint16 = @import("std").mem.zeroes(Sint16),
    phase: Uint16 = @import("std").mem.zeroes(Uint16),
    attack_length: Uint16 = @import("std").mem.zeroes(Uint16),
    attack_level: Uint16 = @import("std").mem.zeroes(Uint16),
    fade_length: Uint16 = @import("std").mem.zeroes(Uint16),
    fade_level: Uint16 = @import("std").mem.zeroes(Uint16),
};
pub const SDL_HapticPeriodic = struct_SDL_HapticPeriodic;
pub const struct_SDL_HapticCondition = extern struct {
    type: Uint16 = @import("std").mem.zeroes(Uint16),
    direction: SDL_HapticDirection = @import("std").mem.zeroes(SDL_HapticDirection),
    length: Uint32 = @import("std").mem.zeroes(Uint32),
    delay: Uint16 = @import("std").mem.zeroes(Uint16),
    button: Uint16 = @import("std").mem.zeroes(Uint16),
    interval: Uint16 = @import("std").mem.zeroes(Uint16),
    right_sat: [3]Uint16 = @import("std").mem.zeroes([3]Uint16),
    left_sat: [3]Uint16 = @import("std").mem.zeroes([3]Uint16),
    right_coeff: [3]Sint16 = @import("std").mem.zeroes([3]Sint16),
    left_coeff: [3]Sint16 = @import("std").mem.zeroes([3]Sint16),
    deadband: [3]Uint16 = @import("std").mem.zeroes([3]Uint16),
    center: [3]Sint16 = @import("std").mem.zeroes([3]Sint16),
};
pub const SDL_HapticCondition = struct_SDL_HapticCondition;
pub const struct_SDL_HapticRamp = extern struct {
    type: Uint16 = @import("std").mem.zeroes(Uint16),
    direction: SDL_HapticDirection = @import("std").mem.zeroes(SDL_HapticDirection),
    length: Uint32 = @import("std").mem.zeroes(Uint32),
    delay: Uint16 = @import("std").mem.zeroes(Uint16),
    button: Uint16 = @import("std").mem.zeroes(Uint16),
    interval: Uint16 = @import("std").mem.zeroes(Uint16),
    start: Sint16 = @import("std").mem.zeroes(Sint16),
    end: Sint16 = @import("std").mem.zeroes(Sint16),
    attack_length: Uint16 = @import("std").mem.zeroes(Uint16),
    attack_level: Uint16 = @import("std").mem.zeroes(Uint16),
    fade_length: Uint16 = @import("std").mem.zeroes(Uint16),
    fade_level: Uint16 = @import("std").mem.zeroes(Uint16),
};
pub const SDL_HapticRamp = struct_SDL_HapticRamp;
pub const struct_SDL_HapticLeftRight = extern struct {
    type: Uint16 = @import("std").mem.zeroes(Uint16),
    length: Uint32 = @import("std").mem.zeroes(Uint32),
    large_magnitude: Uint16 = @import("std").mem.zeroes(Uint16),
    small_magnitude: Uint16 = @import("std").mem.zeroes(Uint16),
};
pub const SDL_HapticLeftRight = struct_SDL_HapticLeftRight;
pub const struct_SDL_HapticCustom = extern struct {
    type: Uint16 = @import("std").mem.zeroes(Uint16),
    direction: SDL_HapticDirection = @import("std").mem.zeroes(SDL_HapticDirection),
    length: Uint32 = @import("std").mem.zeroes(Uint32),
    delay: Uint16 = @import("std").mem.zeroes(Uint16),
    button: Uint16 = @import("std").mem.zeroes(Uint16),
    interval: Uint16 = @import("std").mem.zeroes(Uint16),
    channels: Uint8 = @import("std").mem.zeroes(Uint8),
    period: Uint16 = @import("std").mem.zeroes(Uint16),
    samples: Uint16 = @import("std").mem.zeroes(Uint16),
    data: [*c]Uint16 = @import("std").mem.zeroes([*c]Uint16),
    attack_length: Uint16 = @import("std").mem.zeroes(Uint16),
    attack_level: Uint16 = @import("std").mem.zeroes(Uint16),
    fade_length: Uint16 = @import("std").mem.zeroes(Uint16),
    fade_level: Uint16 = @import("std").mem.zeroes(Uint16),
};
pub const SDL_HapticCustom = struct_SDL_HapticCustom;
pub const union_SDL_HapticEffect = extern union {
    type: Uint16,
    constant: SDL_HapticConstant,
    periodic: SDL_HapticPeriodic,
    condition: SDL_HapticCondition,
    ramp: SDL_HapticRamp,
    leftright: SDL_HapticLeftRight,
    custom: SDL_HapticCustom,
};
pub const SDL_HapticEffect = union_SDL_HapticEffect;
pub const SDL_HapticID = Uint32;
pub extern fn SDL_GetHaptics(count: [*c]c_int) [*c]SDL_HapticID;
pub extern fn SDL_GetHapticInstanceName(instance_id: SDL_HapticID) [*c]const u8;
pub extern fn SDL_OpenHaptic(instance_id: SDL_HapticID) ?*SDL_Haptic;
pub extern fn SDL_GetHapticFromInstanceID(instance_id: SDL_HapticID) ?*SDL_Haptic;
pub extern fn SDL_GetHapticInstanceID(haptic: ?*SDL_Haptic) SDL_HapticID;
pub extern fn SDL_GetHapticName(haptic: ?*SDL_Haptic) [*c]const u8;
pub extern fn SDL_IsMouseHaptic() SDL_bool;
pub extern fn SDL_OpenHapticFromMouse() ?*SDL_Haptic;
pub extern fn SDL_IsJoystickHaptic(joystick: ?*SDL_Joystick) SDL_bool;
pub extern fn SDL_OpenHapticFromJoystick(joystick: ?*SDL_Joystick) ?*SDL_Haptic;
pub extern fn SDL_CloseHaptic(haptic: ?*SDL_Haptic) void;
pub extern fn SDL_GetMaxHapticEffects(haptic: ?*SDL_Haptic) c_int;
pub extern fn SDL_GetMaxHapticEffectsPlaying(haptic: ?*SDL_Haptic) c_int;
pub extern fn SDL_GetHapticFeatures(haptic: ?*SDL_Haptic) Uint32;
pub extern fn SDL_GetNumHapticAxes(haptic: ?*SDL_Haptic) c_int;
pub extern fn SDL_HapticEffectSupported(haptic: ?*SDL_Haptic, effect: [*c]const SDL_HapticEffect) SDL_bool;
pub extern fn SDL_CreateHapticEffect(haptic: ?*SDL_Haptic, effect: [*c]const SDL_HapticEffect) c_int;
pub extern fn SDL_UpdateHapticEffect(haptic: ?*SDL_Haptic, effect: c_int, data: [*c]const SDL_HapticEffect) c_int;
pub extern fn SDL_RunHapticEffect(haptic: ?*SDL_Haptic, effect: c_int, iterations: Uint32) c_int;
pub extern fn SDL_StopHapticEffect(haptic: ?*SDL_Haptic, effect: c_int) c_int;
pub extern fn SDL_DestroyHapticEffect(haptic: ?*SDL_Haptic, effect: c_int) void;
pub extern fn SDL_GetHapticEffectStatus(haptic: ?*SDL_Haptic, effect: c_int) c_int;
pub extern fn SDL_SetHapticGain(haptic: ?*SDL_Haptic, gain: c_int) c_int;
pub extern fn SDL_SetHapticAutocenter(haptic: ?*SDL_Haptic, autocenter: c_int) c_int;
pub extern fn SDL_PauseHaptic(haptic: ?*SDL_Haptic) c_int;
pub extern fn SDL_ResumeHaptic(haptic: ?*SDL_Haptic) c_int;
pub extern fn SDL_StopHapticEffects(haptic: ?*SDL_Haptic) c_int;
pub extern fn SDL_HapticRumbleSupported(haptic: ?*SDL_Haptic) SDL_bool;
pub extern fn SDL_InitHapticRumble(haptic: ?*SDL_Haptic) c_int;
pub extern fn SDL_PlayHapticRumble(haptic: ?*SDL_Haptic, strength: f32, length: Uint32) c_int;
pub extern fn SDL_StopHapticRumble(haptic: ?*SDL_Haptic) c_int;
pub const struct_SDL_hid_device = opaque {};
pub const SDL_hid_device = struct_SDL_hid_device;
pub const SDL_HID_API_BUS_UNKNOWN: c_int = 0;
pub const SDL_HID_API_BUS_USB: c_int = 1;
pub const SDL_HID_API_BUS_BLUETOOTH: c_int = 2;
pub const SDL_HID_API_BUS_I2C: c_int = 3;
pub const SDL_HID_API_BUS_SPI: c_int = 4;
pub const enum_SDL_hid_bus_type = c_uint;
pub const SDL_hid_bus_type = enum_SDL_hid_bus_type;
pub const struct_SDL_hid_device_info = extern struct {
    path: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    vendor_id: c_ushort = @import("std").mem.zeroes(c_ushort),
    product_id: c_ushort = @import("std").mem.zeroes(c_ushort),
    serial_number: [*c]wchar_t = @import("std").mem.zeroes([*c]wchar_t),
    release_number: c_ushort = @import("std").mem.zeroes(c_ushort),
    manufacturer_string: [*c]wchar_t = @import("std").mem.zeroes([*c]wchar_t),
    product_string: [*c]wchar_t = @import("std").mem.zeroes([*c]wchar_t),
    usage_page: c_ushort = @import("std").mem.zeroes(c_ushort),
    usage: c_ushort = @import("std").mem.zeroes(c_ushort),
    interface_number: c_int = @import("std").mem.zeroes(c_int),
    interface_class: c_int = @import("std").mem.zeroes(c_int),
    interface_subclass: c_int = @import("std").mem.zeroes(c_int),
    interface_protocol: c_int = @import("std").mem.zeroes(c_int),
    bus_type: SDL_hid_bus_type = @import("std").mem.zeroes(SDL_hid_bus_type),
    next: [*c]struct_SDL_hid_device_info = @import("std").mem.zeroes([*c]struct_SDL_hid_device_info),
};
pub const SDL_hid_device_info = struct_SDL_hid_device_info;
pub extern fn SDL_hid_init() c_int;
pub extern fn SDL_hid_exit() c_int;
pub extern fn SDL_hid_device_change_count() Uint32;
pub extern fn SDL_hid_enumerate(vendor_id: c_ushort, product_id: c_ushort) [*c]SDL_hid_device_info;
pub extern fn SDL_hid_free_enumeration(devs: [*c]SDL_hid_device_info) void;
pub extern fn SDL_hid_open(vendor_id: c_ushort, product_id: c_ushort, serial_number: [*c]const wchar_t) ?*SDL_hid_device;
pub extern fn SDL_hid_open_path(path: [*c]const u8) ?*SDL_hid_device;
pub extern fn SDL_hid_write(dev: ?*SDL_hid_device, data: [*c]const u8, length: usize) c_int;
pub extern fn SDL_hid_read_timeout(dev: ?*SDL_hid_device, data: [*c]u8, length: usize, milliseconds: c_int) c_int;
pub extern fn SDL_hid_read(dev: ?*SDL_hid_device, data: [*c]u8, length: usize) c_int;
pub extern fn SDL_hid_set_nonblocking(dev: ?*SDL_hid_device, nonblock: c_int) c_int;
pub extern fn SDL_hid_send_feature_report(dev: ?*SDL_hid_device, data: [*c]const u8, length: usize) c_int;
pub extern fn SDL_hid_get_feature_report(dev: ?*SDL_hid_device, data: [*c]u8, length: usize) c_int;
pub extern fn SDL_hid_get_input_report(dev: ?*SDL_hid_device, data: [*c]u8, length: usize) c_int;
pub extern fn SDL_hid_close(dev: ?*SDL_hid_device) c_int;
pub extern fn SDL_hid_get_manufacturer_string(dev: ?*SDL_hid_device, string: [*c]wchar_t, maxlen: usize) c_int;
pub extern fn SDL_hid_get_product_string(dev: ?*SDL_hid_device, string: [*c]wchar_t, maxlen: usize) c_int;
pub extern fn SDL_hid_get_serial_number_string(dev: ?*SDL_hid_device, string: [*c]wchar_t, maxlen: usize) c_int;
pub extern fn SDL_hid_get_indexed_string(dev: ?*SDL_hid_device, string_index: c_int, string: [*c]wchar_t, maxlen: usize) c_int;
pub extern fn SDL_hid_get_device_info(dev: ?*SDL_hid_device) [*c]SDL_hid_device_info;
pub extern fn SDL_hid_get_report_descriptor(dev: ?*SDL_hid_device, buf: [*c]u8, buf_size: usize) c_int;
pub extern fn SDL_hid_ble_scan(active: SDL_bool) void;
pub const SDL_HINT_DEFAULT: c_int = 0;
pub const SDL_HINT_NORMAL: c_int = 1;
pub const SDL_HINT_OVERRIDE: c_int = 2;
pub const enum_SDL_HintPriority = c_uint;
pub const SDL_HintPriority = enum_SDL_HintPriority;
pub extern fn SDL_SetHintWithPriority(name: [*c]const u8, value: [*c]const u8, priority: SDL_HintPriority) SDL_bool;
pub extern fn SDL_SetHint(name: [*c]const u8, value: [*c]const u8) SDL_bool;
pub extern fn SDL_ResetHint(name: [*c]const u8) SDL_bool;
pub extern fn SDL_ResetHints() void;
pub extern fn SDL_GetHint(name: [*c]const u8) [*c]const u8;
pub extern fn SDL_GetHintBoolean(name: [*c]const u8, default_value: SDL_bool) SDL_bool;
pub const SDL_HintCallback = ?*const fn (?*anyopaque, [*c]const u8, [*c]const u8, [*c]const u8) callconv(.C) void;
pub extern fn SDL_AddHintCallback(name: [*c]const u8, callback: SDL_HintCallback, userdata: ?*anyopaque) c_int;
pub extern fn SDL_DelHintCallback(name: [*c]const u8, callback: SDL_HintCallback, userdata: ?*anyopaque) void;
pub const SDL_InitFlags = Uint32;
pub extern fn SDL_Init(flags: SDL_InitFlags) c_int;
pub extern fn SDL_InitSubSystem(flags: SDL_InitFlags) c_int;
pub extern fn SDL_QuitSubSystem(flags: SDL_InitFlags) void;
pub extern fn SDL_WasInit(flags: SDL_InitFlags) SDL_InitFlags;
pub extern fn SDL_Quit() void;
pub extern fn SDL_LoadObject(sofile: [*c]const u8) ?*anyopaque;
pub extern fn SDL_LoadFunction(handle: ?*anyopaque, name: [*c]const u8) SDL_FunctionPointer;
pub extern fn SDL_UnloadObject(handle: ?*anyopaque) void;
pub const struct_SDL_Locale = extern struct {
    language: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    country: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const SDL_Locale = struct_SDL_Locale;
pub extern fn SDL_GetPreferredLocales() [*c]SDL_Locale;
pub const SDL_LOG_CATEGORY_APPLICATION: c_int = 0;
pub const SDL_LOG_CATEGORY_ERROR: c_int = 1;
pub const SDL_LOG_CATEGORY_ASSERT: c_int = 2;
pub const SDL_LOG_CATEGORY_SYSTEM: c_int = 3;
pub const SDL_LOG_CATEGORY_AUDIO: c_int = 4;
pub const SDL_LOG_CATEGORY_VIDEO: c_int = 5;
pub const SDL_LOG_CATEGORY_RENDER: c_int = 6;
pub const SDL_LOG_CATEGORY_INPUT: c_int = 7;
pub const SDL_LOG_CATEGORY_TEST: c_int = 8;
pub const SDL_LOG_CATEGORY_RESERVED1: c_int = 9;
pub const SDL_LOG_CATEGORY_RESERVED2: c_int = 10;
pub const SDL_LOG_CATEGORY_RESERVED3: c_int = 11;
pub const SDL_LOG_CATEGORY_RESERVED4: c_int = 12;
pub const SDL_LOG_CATEGORY_RESERVED5: c_int = 13;
pub const SDL_LOG_CATEGORY_RESERVED6: c_int = 14;
pub const SDL_LOG_CATEGORY_RESERVED7: c_int = 15;
pub const SDL_LOG_CATEGORY_RESERVED8: c_int = 16;
pub const SDL_LOG_CATEGORY_RESERVED9: c_int = 17;
pub const SDL_LOG_CATEGORY_RESERVED10: c_int = 18;
pub const SDL_LOG_CATEGORY_CUSTOM: c_int = 19;
pub const enum_SDL_LogCategory = c_uint;
pub const SDL_LogCategory = enum_SDL_LogCategory;
pub const SDL_LOG_PRIORITY_VERBOSE: c_int = 1;
pub const SDL_LOG_PRIORITY_DEBUG: c_int = 2;
pub const SDL_LOG_PRIORITY_INFO: c_int = 3;
pub const SDL_LOG_PRIORITY_WARN: c_int = 4;
pub const SDL_LOG_PRIORITY_ERROR: c_int = 5;
pub const SDL_LOG_PRIORITY_CRITICAL: c_int = 6;
pub const SDL_NUM_LOG_PRIORITIES: c_int = 7;
pub const enum_SDL_LogPriority = c_uint;
pub const SDL_LogPriority = enum_SDL_LogPriority;
pub extern fn SDL_SetLogPriorities(priority: SDL_LogPriority) void;
pub extern fn SDL_SetLogPriority(category: c_int, priority: SDL_LogPriority) void;
pub extern fn SDL_GetLogPriority(category: c_int) SDL_LogPriority;
pub extern fn SDL_ResetLogPriorities() void;
pub extern fn SDL_Log(fmt: [*c]const u8, ...) void;
pub extern fn SDL_LogVerbose(category: c_int, fmt: [*c]const u8, ...) void;
pub extern fn SDL_LogDebug(category: c_int, fmt: [*c]const u8, ...) void;
pub extern fn SDL_LogInfo(category: c_int, fmt: [*c]const u8, ...) void;
pub extern fn SDL_LogWarn(category: c_int, fmt: [*c]const u8, ...) void;
pub extern fn SDL_LogError(category: c_int, fmt: [*c]const u8, ...) void;
pub extern fn SDL_LogCritical(category: c_int, fmt: [*c]const u8, ...) void;
pub extern fn SDL_LogMessage(category: c_int, priority: SDL_LogPriority, fmt: [*c]const u8, ...) void;
pub extern fn SDL_LogMessageV(category: c_int, priority: SDL_LogPriority, fmt: [*c]const u8, ap: [*c]struct___va_list_tag_1) void;
pub const SDL_LogOutputFunction = ?*const fn (?*anyopaque, c_int, SDL_LogPriority, [*c]const u8) callconv(.C) void;
pub extern fn SDL_GetLogOutputFunction(callback: [*c]SDL_LogOutputFunction, userdata: [*c]?*anyopaque) void;
pub extern fn SDL_SetLogOutputFunction(callback: SDL_LogOutputFunction, userdata: ?*anyopaque) void;
pub const SDL_MessageBoxFlags = Uint32;
pub const SDL_MessageBoxButtonFlags = Uint32;
pub const struct_SDL_MessageBoxButtonData = extern struct {
    flags: SDL_MessageBoxButtonFlags = @import("std").mem.zeroes(SDL_MessageBoxButtonFlags),
    buttonID: c_int = @import("std").mem.zeroes(c_int),
    text: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const SDL_MessageBoxButtonData = struct_SDL_MessageBoxButtonData;
pub const struct_SDL_MessageBoxColor = extern struct {
    r: Uint8 = @import("std").mem.zeroes(Uint8),
    g: Uint8 = @import("std").mem.zeroes(Uint8),
    b: Uint8 = @import("std").mem.zeroes(Uint8),
};
pub const SDL_MessageBoxColor = struct_SDL_MessageBoxColor;
pub const SDL_MESSAGEBOX_COLOR_BACKGROUND: c_int = 0;
pub const SDL_MESSAGEBOX_COLOR_TEXT: c_int = 1;
pub const SDL_MESSAGEBOX_COLOR_BUTTON_BORDER: c_int = 2;
pub const SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND: c_int = 3;
pub const SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED: c_int = 4;
pub const SDL_MESSAGEBOX_COLOR_MAX: c_int = 5;
pub const enum_SDL_MessageBoxColorType = c_uint;
pub const SDL_MessageBoxColorType = enum_SDL_MessageBoxColorType;
pub const struct_SDL_MessageBoxColorScheme = extern struct {
    colors: [5]SDL_MessageBoxColor = @import("std").mem.zeroes([5]SDL_MessageBoxColor),
};
pub const SDL_MessageBoxColorScheme = struct_SDL_MessageBoxColorScheme;
pub const struct_SDL_MessageBoxData = extern struct {
    flags: SDL_MessageBoxFlags = @import("std").mem.zeroes(SDL_MessageBoxFlags),
    window: ?*SDL_Window = @import("std").mem.zeroes(?*SDL_Window),
    title: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    message: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    numbuttons: c_int = @import("std").mem.zeroes(c_int),
    buttons: [*c]const SDL_MessageBoxButtonData = @import("std").mem.zeroes([*c]const SDL_MessageBoxButtonData),
    colorScheme: [*c]const SDL_MessageBoxColorScheme = @import("std").mem.zeroes([*c]const SDL_MessageBoxColorScheme),
};
pub const SDL_MessageBoxData = struct_SDL_MessageBoxData;
pub extern fn SDL_ShowMessageBox(messageboxdata: [*c]const SDL_MessageBoxData, buttonid: [*c]c_int) c_int;
pub extern fn SDL_ShowSimpleMessageBox(flags: SDL_MessageBoxFlags, title: [*c]const u8, message: [*c]const u8, window: ?*SDL_Window) c_int;
pub const SDL_MetalView = ?*anyopaque;
pub extern fn SDL_Metal_CreateView(window: ?*SDL_Window) SDL_MetalView;
pub extern fn SDL_Metal_DestroyView(view: SDL_MetalView) void;
pub extern fn SDL_Metal_GetLayer(view: SDL_MetalView) ?*anyopaque;
pub extern fn SDL_OpenURL(url: [*c]const u8) c_int;
pub extern fn SDL_GetPlatform() [*c]const u8;
pub const struct_SDL_Vertex = extern struct {
    position: SDL_FPoint = @import("std").mem.zeroes(SDL_FPoint),
    color: SDL_FColor = @import("std").mem.zeroes(SDL_FColor),
    tex_coord: SDL_FPoint = @import("std").mem.zeroes(SDL_FPoint),
};
pub const SDL_Vertex = struct_SDL_Vertex;
pub const SDL_TEXTUREACCESS_STATIC: c_int = 0;
pub const SDL_TEXTUREACCESS_STREAMING: c_int = 1;
pub const SDL_TEXTUREACCESS_TARGET: c_int = 2;
pub const enum_SDL_TextureAccess = c_uint;
pub const SDL_TextureAccess = enum_SDL_TextureAccess;
pub const SDL_LOGICAL_PRESENTATION_DISABLED: c_int = 0;
pub const SDL_LOGICAL_PRESENTATION_STRETCH: c_int = 1;
pub const SDL_LOGICAL_PRESENTATION_LETTERBOX: c_int = 2;
pub const SDL_LOGICAL_PRESENTATION_OVERSCAN: c_int = 3;
pub const SDL_LOGICAL_PRESENTATION_INTEGER_SCALE: c_int = 4;
pub const enum_SDL_RendererLogicalPresentation = c_uint;
pub const SDL_RendererLogicalPresentation = enum_SDL_RendererLogicalPresentation;
pub const struct_SDL_Renderer = opaque {};
pub const SDL_Renderer = struct_SDL_Renderer;
pub const struct_SDL_Texture = opaque {};
pub const SDL_Texture = struct_SDL_Texture;
pub extern fn SDL_GetNumRenderDrivers() c_int;
pub extern fn SDL_GetRenderDriver(index: c_int) [*c]const u8;
pub extern fn SDL_CreateWindowAndRenderer(title: [*c]const u8, width: c_int, height: c_int, window_flags: SDL_WindowFlags, window: [*c]?*SDL_Window, renderer: [*c]?*SDL_Renderer) c_int;
pub extern fn SDL_CreateRenderer(window: ?*SDL_Window, name: [*c]const u8) ?*SDL_Renderer;
pub extern fn SDL_CreateRendererWithProperties(props: SDL_PropertiesID) ?*SDL_Renderer;
pub extern fn SDL_CreateSoftwareRenderer(surface: [*c]SDL_Surface) ?*SDL_Renderer;
pub extern fn SDL_GetRenderer(window: ?*SDL_Window) ?*SDL_Renderer;
pub extern fn SDL_GetRenderWindow(renderer: ?*SDL_Renderer) ?*SDL_Window;
pub extern fn SDL_GetRendererName(renderer: ?*SDL_Renderer) [*c]const u8;
pub extern fn SDL_GetRendererProperties(renderer: ?*SDL_Renderer) SDL_PropertiesID;
pub extern fn SDL_GetRenderOutputSize(renderer: ?*SDL_Renderer, w: [*c]c_int, h: [*c]c_int) c_int;
pub extern fn SDL_GetCurrentRenderOutputSize(renderer: ?*SDL_Renderer, w: [*c]c_int, h: [*c]c_int) c_int;
pub extern fn SDL_CreateTexture(renderer: ?*SDL_Renderer, format: SDL_PixelFormatEnum, access: c_int, w: c_int, h: c_int) ?*SDL_Texture;
pub extern fn SDL_CreateTextureFromSurface(renderer: ?*SDL_Renderer, surface: [*c]SDL_Surface) ?*SDL_Texture;
pub extern fn SDL_CreateTextureWithProperties(renderer: ?*SDL_Renderer, props: SDL_PropertiesID) ?*SDL_Texture;
pub extern fn SDL_GetTextureProperties(texture: ?*SDL_Texture) SDL_PropertiesID;
pub extern fn SDL_GetRendererFromTexture(texture: ?*SDL_Texture) ?*SDL_Renderer;
pub extern fn SDL_QueryTexture(texture: ?*SDL_Texture, format: [*c]SDL_PixelFormatEnum, access: [*c]c_int, w: [*c]c_int, h: [*c]c_int) c_int;
pub extern fn SDL_SetTextureColorMod(texture: ?*SDL_Texture, r: Uint8, g: Uint8, b: Uint8) c_int;
pub extern fn SDL_SetTextureColorModFloat(texture: ?*SDL_Texture, r: f32, g: f32, b: f32) c_int;
pub extern fn SDL_GetTextureColorMod(texture: ?*SDL_Texture, r: [*c]Uint8, g: [*c]Uint8, b: [*c]Uint8) c_int;
pub extern fn SDL_GetTextureColorModFloat(texture: ?*SDL_Texture, r: [*c]f32, g: [*c]f32, b: [*c]f32) c_int;
pub extern fn SDL_SetTextureAlphaMod(texture: ?*SDL_Texture, alpha: Uint8) c_int;
pub extern fn SDL_SetTextureAlphaModFloat(texture: ?*SDL_Texture, alpha: f32) c_int;
pub extern fn SDL_GetTextureAlphaMod(texture: ?*SDL_Texture, alpha: [*c]Uint8) c_int;
pub extern fn SDL_GetTextureAlphaModFloat(texture: ?*SDL_Texture, alpha: [*c]f32) c_int;
pub extern fn SDL_SetTextureBlendMode(texture: ?*SDL_Texture, blendMode: SDL_BlendMode) c_int;
pub extern fn SDL_GetTextureBlendMode(texture: ?*SDL_Texture, blendMode: [*c]SDL_BlendMode) c_int;
pub extern fn SDL_SetTextureScaleMode(texture: ?*SDL_Texture, scaleMode: SDL_ScaleMode) c_int;
pub extern fn SDL_GetTextureScaleMode(texture: ?*SDL_Texture, scaleMode: [*c]SDL_ScaleMode) c_int;
pub extern fn SDL_UpdateTexture(texture: ?*SDL_Texture, rect: [*c]const SDL_Rect, pixels: ?*const anyopaque, pitch: c_int) c_int;
pub extern fn SDL_UpdateYUVTexture(texture: ?*SDL_Texture, rect: [*c]const SDL_Rect, Yplane: [*c]const Uint8, Ypitch: c_int, Uplane: [*c]const Uint8, Upitch: c_int, Vplane: [*c]const Uint8, Vpitch: c_int) c_int;
pub extern fn SDL_UpdateNVTexture(texture: ?*SDL_Texture, rect: [*c]const SDL_Rect, Yplane: [*c]const Uint8, Ypitch: c_int, UVplane: [*c]const Uint8, UVpitch: c_int) c_int;
pub extern fn SDL_LockTexture(texture: ?*SDL_Texture, rect: [*c]const SDL_Rect, pixels: [*c]?*anyopaque, pitch: [*c]c_int) c_int;
pub extern fn SDL_LockTextureToSurface(texture: ?*SDL_Texture, rect: [*c]const SDL_Rect, surface: [*c][*c]SDL_Surface) c_int;
pub extern fn SDL_UnlockTexture(texture: ?*SDL_Texture) void;
pub extern fn SDL_SetRenderTarget(renderer: ?*SDL_Renderer, texture: ?*SDL_Texture) c_int;
pub extern fn SDL_GetRenderTarget(renderer: ?*SDL_Renderer) ?*SDL_Texture;
pub extern fn SDL_SetRenderLogicalPresentation(renderer: ?*SDL_Renderer, w: c_int, h: c_int, mode: SDL_RendererLogicalPresentation, scale_mode: SDL_ScaleMode) c_int;
pub extern fn SDL_GetRenderLogicalPresentation(renderer: ?*SDL_Renderer, w: [*c]c_int, h: [*c]c_int, mode: [*c]SDL_RendererLogicalPresentation, scale_mode: [*c]SDL_ScaleMode) c_int;
pub extern fn SDL_RenderCoordinatesFromWindow(renderer: ?*SDL_Renderer, window_x: f32, window_y: f32, x: [*c]f32, y: [*c]f32) c_int;
pub extern fn SDL_RenderCoordinatesToWindow(renderer: ?*SDL_Renderer, x: f32, y: f32, window_x: [*c]f32, window_y: [*c]f32) c_int;
pub extern fn SDL_ConvertEventToRenderCoordinates(renderer: ?*SDL_Renderer, event: [*c]SDL_Event) c_int;
pub extern fn SDL_SetRenderViewport(renderer: ?*SDL_Renderer, rect: [*c]const SDL_Rect) c_int;
pub extern fn SDL_GetRenderViewport(renderer: ?*SDL_Renderer, rect: [*c]SDL_Rect) c_int;
pub extern fn SDL_RenderViewportSet(renderer: ?*SDL_Renderer) SDL_bool;
pub extern fn SDL_SetRenderClipRect(renderer: ?*SDL_Renderer, rect: [*c]const SDL_Rect) c_int;
pub extern fn SDL_GetRenderClipRect(renderer: ?*SDL_Renderer, rect: [*c]SDL_Rect) c_int;
pub extern fn SDL_RenderClipEnabled(renderer: ?*SDL_Renderer) SDL_bool;
pub extern fn SDL_SetRenderScale(renderer: ?*SDL_Renderer, scaleX: f32, scaleY: f32) c_int;
pub extern fn SDL_GetRenderScale(renderer: ?*SDL_Renderer, scaleX: [*c]f32, scaleY: [*c]f32) c_int;
pub extern fn SDL_SetRenderDrawColor(renderer: ?*SDL_Renderer, r: Uint8, g: Uint8, b: Uint8, a: Uint8) c_int;
pub extern fn SDL_SetRenderDrawColorFloat(renderer: ?*SDL_Renderer, r: f32, g: f32, b: f32, a: f32) c_int;
pub extern fn SDL_GetRenderDrawColor(renderer: ?*SDL_Renderer, r: [*c]Uint8, g: [*c]Uint8, b: [*c]Uint8, a: [*c]Uint8) c_int;
pub extern fn SDL_GetRenderDrawColorFloat(renderer: ?*SDL_Renderer, r: [*c]f32, g: [*c]f32, b: [*c]f32, a: [*c]f32) c_int;
pub extern fn SDL_SetRenderColorScale(renderer: ?*SDL_Renderer, scale: f32) c_int;
pub extern fn SDL_GetRenderColorScale(renderer: ?*SDL_Renderer, scale: [*c]f32) c_int;
pub extern fn SDL_SetRenderDrawBlendMode(renderer: ?*SDL_Renderer, blendMode: SDL_BlendMode) c_int;
pub extern fn SDL_GetRenderDrawBlendMode(renderer: ?*SDL_Renderer, blendMode: [*c]SDL_BlendMode) c_int;
pub extern fn SDL_RenderClear(renderer: ?*SDL_Renderer) c_int;
pub extern fn SDL_RenderPoint(renderer: ?*SDL_Renderer, x: f32, y: f32) c_int;
pub extern fn SDL_RenderPoints(renderer: ?*SDL_Renderer, points: [*c]const SDL_FPoint, count: c_int) c_int;
pub extern fn SDL_RenderLine(renderer: ?*SDL_Renderer, x1: f32, y1: f32, x2: f32, y2: f32) c_int;
pub extern fn SDL_RenderLines(renderer: ?*SDL_Renderer, points: [*c]const SDL_FPoint, count: c_int) c_int;
pub extern fn SDL_RenderRect(renderer: ?*SDL_Renderer, rect: [*c]const SDL_FRect) c_int;
pub extern fn SDL_RenderRects(renderer: ?*SDL_Renderer, rects: [*c]const SDL_FRect, count: c_int) c_int;
pub extern fn SDL_RenderFillRect(renderer: ?*SDL_Renderer, rect: [*c]const SDL_FRect) c_int;
pub extern fn SDL_RenderFillRects(renderer: ?*SDL_Renderer, rects: [*c]const SDL_FRect, count: c_int) c_int;
pub extern fn SDL_RenderTexture(renderer: ?*SDL_Renderer, texture: ?*SDL_Texture, srcrect: [*c]const SDL_FRect, dstrect: [*c]const SDL_FRect) c_int;
pub extern fn SDL_RenderTextureRotated(renderer: ?*SDL_Renderer, texture: ?*SDL_Texture, srcrect: [*c]const SDL_FRect, dstrect: [*c]const SDL_FRect, angle: f64, center: [*c]const SDL_FPoint, flip: SDL_FlipMode) c_int;
pub extern fn SDL_RenderGeometry(renderer: ?*SDL_Renderer, texture: ?*SDL_Texture, vertices: [*c]const SDL_Vertex, num_vertices: c_int, indices: [*c]const c_int, num_indices: c_int) c_int;
pub extern fn SDL_RenderGeometryRaw(renderer: ?*SDL_Renderer, texture: ?*SDL_Texture, xy: [*c]const f32, xy_stride: c_int, color: [*c]const SDL_Color, color_stride: c_int, uv: [*c]const f32, uv_stride: c_int, num_vertices: c_int, indices: ?*const anyopaque, num_indices: c_int, size_indices: c_int) c_int;
pub extern fn SDL_RenderGeometryRawFloat(renderer: ?*SDL_Renderer, texture: ?*SDL_Texture, xy: [*c]const f32, xy_stride: c_int, color: [*c]const SDL_FColor, color_stride: c_int, uv: [*c]const f32, uv_stride: c_int, num_vertices: c_int, indices: ?*const anyopaque, num_indices: c_int, size_indices: c_int) c_int;
pub extern fn SDL_RenderReadPixels(renderer: ?*SDL_Renderer, rect: [*c]const SDL_Rect) [*c]SDL_Surface;
pub extern fn SDL_RenderPresent(renderer: ?*SDL_Renderer) c_int;
pub extern fn SDL_DestroyTexture(texture: ?*SDL_Texture) void;
pub extern fn SDL_DestroyRenderer(renderer: ?*SDL_Renderer) void;
pub extern fn SDL_FlushRenderer(renderer: ?*SDL_Renderer) c_int;
pub extern fn SDL_GetRenderMetalLayer(renderer: ?*SDL_Renderer) ?*anyopaque;
pub extern fn SDL_GetRenderMetalCommandEncoder(renderer: ?*SDL_Renderer) ?*anyopaque;
pub extern fn SDL_AddVulkanRenderSemaphores(renderer: ?*SDL_Renderer, wait_stage_mask: Uint32, wait_semaphore: Sint64, signal_semaphore: Sint64) c_int;
pub extern fn SDL_SetRenderVSync(renderer: ?*SDL_Renderer, vsync: c_int) c_int;
pub extern fn SDL_GetRenderVSync(renderer: ?*SDL_Renderer, vsync: [*c]c_int) c_int;
pub const struct_SDL_StorageInterface = extern struct {
    close: ?*const fn (?*anyopaque) callconv(.C) c_int = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.C) c_int),
    ready: ?*const fn (?*anyopaque) callconv(.C) SDL_bool = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.C) SDL_bool),
    enumerate: ?*const fn (?*anyopaque, [*c]const u8, SDL_EnumerateDirectoryCallback, ?*anyopaque) callconv(.C) c_int = @import("std").mem.zeroes(?*const fn (?*anyopaque, [*c]const u8, SDL_EnumerateDirectoryCallback, ?*anyopaque) callconv(.C) c_int),
    info: ?*const fn (?*anyopaque, [*c]const u8, [*c]SDL_PathInfo) callconv(.C) c_int = @import("std").mem.zeroes(?*const fn (?*anyopaque, [*c]const u8, [*c]SDL_PathInfo) callconv(.C) c_int),
    read_file: ?*const fn (?*anyopaque, [*c]const u8, ?*anyopaque, Uint64) callconv(.C) c_int = @import("std").mem.zeroes(?*const fn (?*anyopaque, [*c]const u8, ?*anyopaque, Uint64) callconv(.C) c_int),
    write_file: ?*const fn (?*anyopaque, [*c]const u8, ?*const anyopaque, Uint64) callconv(.C) c_int = @import("std").mem.zeroes(?*const fn (?*anyopaque, [*c]const u8, ?*const anyopaque, Uint64) callconv(.C) c_int),
    mkdir: ?*const fn (?*anyopaque, [*c]const u8) callconv(.C) c_int = @import("std").mem.zeroes(?*const fn (?*anyopaque, [*c]const u8) callconv(.C) c_int),
    remove: ?*const fn (?*anyopaque, [*c]const u8) callconv(.C) c_int = @import("std").mem.zeroes(?*const fn (?*anyopaque, [*c]const u8) callconv(.C) c_int),
    rename: ?*const fn (?*anyopaque, [*c]const u8, [*c]const u8) callconv(.C) c_int = @import("std").mem.zeroes(?*const fn (?*anyopaque, [*c]const u8, [*c]const u8) callconv(.C) c_int),
    space_remaining: ?*const fn (?*anyopaque) callconv(.C) Uint64 = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.C) Uint64),
};
pub const SDL_StorageInterface = struct_SDL_StorageInterface;
pub const struct_SDL_Storage = opaque {};
pub const SDL_Storage = struct_SDL_Storage;
pub extern fn SDL_OpenTitleStorage(override: [*c]const u8, props: SDL_PropertiesID) ?*SDL_Storage;
pub extern fn SDL_OpenUserStorage(org: [*c]const u8, app: [*c]const u8, props: SDL_PropertiesID) ?*SDL_Storage;
pub extern fn SDL_OpenFileStorage(path: [*c]const u8) ?*SDL_Storage;
pub extern fn SDL_OpenStorage(iface: [*c]const SDL_StorageInterface, userdata: ?*anyopaque) ?*SDL_Storage;
pub extern fn SDL_CloseStorage(storage: ?*SDL_Storage) c_int;
pub extern fn SDL_StorageReady(storage: ?*SDL_Storage) SDL_bool;
pub extern fn SDL_GetStorageFileSize(storage: ?*SDL_Storage, path: [*c]const u8, length: [*c]Uint64) c_int;
pub extern fn SDL_ReadStorageFile(storage: ?*SDL_Storage, path: [*c]const u8, destination: ?*anyopaque, length: Uint64) c_int;
pub extern fn SDL_WriteStorageFile(storage: ?*SDL_Storage, path: [*c]const u8, source: ?*const anyopaque, length: Uint64) c_int;
pub extern fn SDL_CreateStorageDirectory(storage: ?*SDL_Storage, path: [*c]const u8) c_int;
pub extern fn SDL_EnumerateStorageDirectory(storage: ?*SDL_Storage, path: [*c]const u8, callback: SDL_EnumerateDirectoryCallback, userdata: ?*anyopaque) c_int;
pub extern fn SDL_RemoveStoragePath(storage: ?*SDL_Storage, path: [*c]const u8) c_int;
pub extern fn SDL_RenameStoragePath(storage: ?*SDL_Storage, oldpath: [*c]const u8, newpath: [*c]const u8) c_int;
pub extern fn SDL_GetStoragePathInfo(storage: ?*SDL_Storage, path: [*c]const u8, info: [*c]SDL_PathInfo) c_int;
pub extern fn SDL_GetStorageSpaceRemaining(storage: ?*SDL_Storage) Uint64;
pub extern fn SDL_GlobStorageDirectory(storage: ?*SDL_Storage, path: [*c]const u8, pattern: [*c]const u8, flags: SDL_GlobFlags, count: [*c]c_int) [*c][*c]u8;
pub const union__XEvent = opaque {};
pub const XEvent = union__XEvent;
pub const SDL_X11EventHook = ?*const fn (?*anyopaque, ?*XEvent) callconv(.C) SDL_bool;
pub extern fn SDL_SetX11EventHook(callback: SDL_X11EventHook, userdata: ?*anyopaque) void;
pub extern fn SDL_LinuxSetThreadPriority(threadID: Sint64, priority: c_int) c_int;
pub extern fn SDL_LinuxSetThreadPriorityAndPolicy(threadID: Sint64, sdlPriority: c_int, schedPolicy: c_int) c_int;
pub extern fn SDL_IsTablet() SDL_bool;
pub extern fn SDL_OnApplicationWillTerminate() void;
pub extern fn SDL_OnApplicationDidReceiveMemoryWarning() void;
pub extern fn SDL_OnApplicationWillResignActive() void;
pub extern fn SDL_OnApplicationDidEnterBackground() void;
pub extern fn SDL_OnApplicationWillEnterForeground() void;
pub extern fn SDL_OnApplicationDidBecomeActive() void;
pub const struct_SDL_DateTime = extern struct {
    year: c_int = @import("std").mem.zeroes(c_int),
    month: c_int = @import("std").mem.zeroes(c_int),
    day: c_int = @import("std").mem.zeroes(c_int),
    hour: c_int = @import("std").mem.zeroes(c_int),
    minute: c_int = @import("std").mem.zeroes(c_int),
    second: c_int = @import("std").mem.zeroes(c_int),
    nanosecond: c_int = @import("std").mem.zeroes(c_int),
    day_of_week: c_int = @import("std").mem.zeroes(c_int),
    utc_offset: c_int = @import("std").mem.zeroes(c_int),
};
pub const SDL_DateTime = struct_SDL_DateTime;
pub const SDL_DATE_FORMAT_YYYYMMDD: c_int = 0;
pub const SDL_DATE_FORMAT_DDMMYYYY: c_int = 1;
pub const SDL_DATE_FORMAT_MMDDYYYY: c_int = 2;
pub const enum_SDL_DateFormat = c_uint;
pub const SDL_DateFormat = enum_SDL_DateFormat;
pub const SDL_TIME_FORMAT_24HR: c_int = 0;
pub const SDL_TIME_FORMAT_12HR: c_int = 1;
pub const enum_SDL_TimeFormat = c_uint;
pub const SDL_TimeFormat = enum_SDL_TimeFormat;
pub extern fn SDL_GetDateTimeLocalePreferences(dateFormat: [*c]SDL_DateFormat, timeFormat: [*c]SDL_TimeFormat) c_int;
pub extern fn SDL_GetCurrentTime(ticks: [*c]SDL_Time) c_int;
pub extern fn SDL_TimeToDateTime(ticks: SDL_Time, dt: [*c]SDL_DateTime, localTime: SDL_bool) c_int;
pub extern fn SDL_DateTimeToTime(dt: [*c]const SDL_DateTime, ticks: [*c]SDL_Time) c_int;
pub extern fn SDL_TimeToWindows(ticks: SDL_Time, dwLowDateTime: [*c]Uint32, dwHighDateTime: [*c]Uint32) void;
pub extern fn SDL_TimeFromWindows(dwLowDateTime: Uint32, dwHighDateTime: Uint32) SDL_Time;
pub extern fn SDL_GetDaysInMonth(year: c_int, month: c_int) c_int;
pub extern fn SDL_GetDayOfYear(year: c_int, month: c_int, day: c_int) c_int;
pub extern fn SDL_GetDayOfWeek(year: c_int, month: c_int, day: c_int) c_int;
pub extern fn SDL_GetTicks() Uint64;
pub extern fn SDL_GetTicksNS() Uint64;
pub extern fn SDL_GetPerformanceCounter() Uint64;
pub extern fn SDL_GetPerformanceFrequency() Uint64;
pub extern fn SDL_Delay(ms: Uint32) void;
pub extern fn SDL_DelayNS(ns: Uint64) void;
pub const SDL_TimerID = Uint32;
pub const SDL_TimerCallback = ?*const fn (?*anyopaque, SDL_TimerID, Uint32) callconv(.C) Uint32;
pub extern fn SDL_AddTimer(interval: Uint32, callback: SDL_TimerCallback, userdata: ?*anyopaque) SDL_TimerID;
pub const SDL_NSTimerCallback = ?*const fn (?*anyopaque, SDL_TimerID, Uint64) callconv(.C) Uint64;
pub extern fn SDL_AddTimerNS(interval: Uint64, callback: SDL_NSTimerCallback, userdata: ?*anyopaque) SDL_TimerID;
pub extern fn SDL_RemoveTimer(id: SDL_TimerID) c_int;
pub extern fn SDL_GetVersion() c_int;
pub extern fn SDL_GetRevision() [*c]const u8;
pub const struct_VkInstance_T = opaque {};
pub const VkInstance = ?*struct_VkInstance_T;
pub const struct_VkSurfaceKHR_T = opaque {};
pub const VkSurfaceKHR = ?*struct_VkSurfaceKHR_T;
pub const VK_SYSTEM_ALLOCATION_SCOPE_COMMAND: c_int = 0;
pub const VK_SYSTEM_ALLOCATION_SCOPE_OBJECT: c_int = 1;
pub const VK_SYSTEM_ALLOCATION_SCOPE_CACHE: c_int = 2;
pub const VK_SYSTEM_ALLOCATION_SCOPE_DEVICE: c_int = 3;
pub const VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE: c_int = 4;
pub const VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSystemAllocationScope = c_uint;
pub const VkSystemAllocationScope = enum_VkSystemAllocationScope;
pub const PFN_vkAllocationFunction = ?*const fn (?*anyopaque, usize, usize, VkSystemAllocationScope) callconv(.C) ?*anyopaque;
pub const PFN_vkReallocationFunction = ?*const fn (?*anyopaque, ?*anyopaque, usize, usize, VkSystemAllocationScope) callconv(.C) ?*anyopaque;
pub const PFN_vkFreeFunction = ?*const fn (?*anyopaque, ?*anyopaque) callconv(.C) void;
pub const VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE: c_int = 0;
pub const VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkInternalAllocationType = c_uint;
pub const VkInternalAllocationType = enum_VkInternalAllocationType;
pub const PFN_vkInternalAllocationNotification = ?*const fn (?*anyopaque, usize, VkInternalAllocationType, VkSystemAllocationScope) callconv(.C) void;
pub const PFN_vkInternalFreeNotification = ?*const fn (?*anyopaque, usize, VkInternalAllocationType, VkSystemAllocationScope) callconv(.C) void;
pub const struct_VkAllocationCallbacks = extern struct {
    pUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pfnAllocation: PFN_vkAllocationFunction = @import("std").mem.zeroes(PFN_vkAllocationFunction),
    pfnReallocation: PFN_vkReallocationFunction = @import("std").mem.zeroes(PFN_vkReallocationFunction),
    pfnFree: PFN_vkFreeFunction = @import("std").mem.zeroes(PFN_vkFreeFunction),
    pfnInternalAllocation: PFN_vkInternalAllocationNotification = @import("std").mem.zeroes(PFN_vkInternalAllocationNotification),
    pfnInternalFree: PFN_vkInternalFreeNotification = @import("std").mem.zeroes(PFN_vkInternalFreeNotification),
};
pub extern fn SDL_Vulkan_LoadLibrary(path: [*c]const u8) c_int;
pub extern fn SDL_Vulkan_GetVkGetInstanceProcAddr() SDL_FunctionPointer;
pub extern fn SDL_Vulkan_UnloadLibrary() void;
pub extern fn SDL_Vulkan_GetInstanceExtensions(count: [*c]Uint32) [*c]const [*c]const u8;
pub extern fn SDL_Vulkan_CreateSurface(window: ?*SDL_Window, instance: VkInstance, allocator: [*c]const struct_VkAllocationCallbacks, surface: [*c]VkSurfaceKHR) SDL_bool;
pub extern fn SDL_Vulkan_DestroySurface(instance: VkInstance, surface: VkSurfaceKHR, allocator: [*c]const struct_VkAllocationCallbacks) void;
pub const VkBool32 = u32;
pub const VkDeviceAddress = u64;
pub const VkDeviceSize = u64;
pub const VkFlags = u32;
pub const VkSampleMask = u32;
pub const struct_VkBuffer_T = opaque {};
pub const VkBuffer = ?*struct_VkBuffer_T;
pub const struct_VkImage_T = opaque {};
pub const VkImage = ?*struct_VkImage_T;
pub const struct_VkPhysicalDevice_T = opaque {};
pub const VkPhysicalDevice = ?*struct_VkPhysicalDevice_T;
pub const struct_VkDevice_T = opaque {};
pub const VkDevice = ?*struct_VkDevice_T;
pub const struct_VkQueue_T = opaque {};
pub const VkQueue = ?*struct_VkQueue_T;
pub const struct_VkSemaphore_T = opaque {};
pub const VkSemaphore = ?*struct_VkSemaphore_T;
pub const struct_VkCommandBuffer_T = opaque {};
pub const VkCommandBuffer = ?*struct_VkCommandBuffer_T;
pub const struct_VkFence_T = opaque {};
pub const VkFence = ?*struct_VkFence_T;
pub const struct_VkDeviceMemory_T = opaque {};
pub const VkDeviceMemory = ?*struct_VkDeviceMemory_T;
pub const struct_VkEvent_T = opaque {};
pub const VkEvent = ?*struct_VkEvent_T;
pub const struct_VkQueryPool_T = opaque {};
pub const VkQueryPool = ?*struct_VkQueryPool_T;
pub const struct_VkBufferView_T = opaque {};
pub const VkBufferView = ?*struct_VkBufferView_T;
pub const struct_VkImageView_T = opaque {};
pub const VkImageView = ?*struct_VkImageView_T;
pub const struct_VkShaderModule_T = opaque {};
pub const VkShaderModule = ?*struct_VkShaderModule_T;
pub const struct_VkPipelineCache_T = opaque {};
pub const VkPipelineCache = ?*struct_VkPipelineCache_T;
pub const struct_VkPipelineLayout_T = opaque {};
pub const VkPipelineLayout = ?*struct_VkPipelineLayout_T;
pub const struct_VkPipeline_T = opaque {};
pub const VkPipeline = ?*struct_VkPipeline_T;
pub const struct_VkRenderPass_T = opaque {};
pub const VkRenderPass = ?*struct_VkRenderPass_T;
pub const struct_VkDescriptorSetLayout_T = opaque {};
pub const VkDescriptorSetLayout = ?*struct_VkDescriptorSetLayout_T;
pub const struct_VkSampler_T = opaque {};
pub const VkSampler = ?*struct_VkSampler_T;
pub const struct_VkDescriptorSet_T = opaque {};
pub const VkDescriptorSet = ?*struct_VkDescriptorSet_T;
pub const struct_VkDescriptorPool_T = opaque {};
pub const VkDescriptorPool = ?*struct_VkDescriptorPool_T;
pub const struct_VkFramebuffer_T = opaque {};
pub const VkFramebuffer = ?*struct_VkFramebuffer_T;
pub const struct_VkCommandPool_T = opaque {};
pub const VkCommandPool = ?*struct_VkCommandPool_T;
pub const VK_SUCCESS: c_int = 0;
pub const VK_NOT_READY: c_int = 1;
pub const VK_TIMEOUT: c_int = 2;
pub const VK_EVENT_SET: c_int = 3;
pub const VK_EVENT_RESET: c_int = 4;
pub const VK_INCOMPLETE: c_int = 5;
pub const VK_ERROR_OUT_OF_HOST_MEMORY: c_int = -1;
pub const VK_ERROR_OUT_OF_DEVICE_MEMORY: c_int = -2;
pub const VK_ERROR_INITIALIZATION_FAILED: c_int = -3;
pub const VK_ERROR_DEVICE_LOST: c_int = -4;
pub const VK_ERROR_MEMORY_MAP_FAILED: c_int = -5;
pub const VK_ERROR_LAYER_NOT_PRESENT: c_int = -6;
pub const VK_ERROR_EXTENSION_NOT_PRESENT: c_int = -7;
pub const VK_ERROR_FEATURE_NOT_PRESENT: c_int = -8;
pub const VK_ERROR_INCOMPATIBLE_DRIVER: c_int = -9;
pub const VK_ERROR_TOO_MANY_OBJECTS: c_int = -10;
pub const VK_ERROR_FORMAT_NOT_SUPPORTED: c_int = -11;
pub const VK_ERROR_FRAGMENTED_POOL: c_int = -12;
pub const VK_ERROR_UNKNOWN: c_int = -13;
pub const VK_ERROR_OUT_OF_POOL_MEMORY: c_int = -1000069000;
pub const VK_ERROR_INVALID_EXTERNAL_HANDLE: c_int = -1000072003;
pub const VK_ERROR_FRAGMENTATION: c_int = -1000161000;
pub const VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS: c_int = -1000257000;
pub const VK_PIPELINE_COMPILE_REQUIRED: c_int = 1000297000;
pub const VK_ERROR_SURFACE_LOST_KHR: c_int = -1000000000;
pub const VK_ERROR_NATIVE_WINDOW_IN_USE_KHR: c_int = -1000000001;
pub const VK_SUBOPTIMAL_KHR: c_int = 1000001003;
pub const VK_ERROR_OUT_OF_DATE_KHR: c_int = -1000001004;
pub const VK_ERROR_INCOMPATIBLE_DISPLAY_KHR: c_int = -1000003001;
pub const VK_ERROR_VALIDATION_FAILED_EXT: c_int = -1000011001;
pub const VK_ERROR_INVALID_SHADER_NV: c_int = -1000012000;
pub const VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR: c_int = -1000023000;
pub const VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR: c_int = -1000023001;
pub const VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR: c_int = -1000023002;
pub const VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR: c_int = -1000023003;
pub const VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR: c_int = -1000023004;
pub const VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR: c_int = -1000023005;
pub const VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT: c_int = -1000158000;
pub const VK_ERROR_NOT_PERMITTED_KHR: c_int = -1000174001;
pub const VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT: c_int = -1000255000;
pub const VK_THREAD_IDLE_KHR: c_int = 1000268000;
pub const VK_THREAD_DONE_KHR: c_int = 1000268001;
pub const VK_OPERATION_DEFERRED_KHR: c_int = 1000268002;
pub const VK_OPERATION_NOT_DEFERRED_KHR: c_int = 1000268003;
pub const VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR: c_int = -1000299000;
pub const VK_ERROR_COMPRESSION_EXHAUSTED_EXT: c_int = -1000338000;
pub const VK_INCOMPATIBLE_SHADER_BINARY_EXT: c_int = 1000482000;
pub const VK_ERROR_OUT_OF_POOL_MEMORY_KHR: c_int = -1000069000;
pub const VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR: c_int = -1000072003;
pub const VK_ERROR_FRAGMENTATION_EXT: c_int = -1000161000;
pub const VK_ERROR_NOT_PERMITTED_EXT: c_int = -1000174001;
pub const VK_ERROR_INVALID_DEVICE_ADDRESS_EXT: c_int = -1000257000;
pub const VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR: c_int = -1000257000;
pub const VK_PIPELINE_COMPILE_REQUIRED_EXT: c_int = 1000297000;
pub const VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT: c_int = 1000297000;
pub const VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT: c_int = 1000482000;
pub const VK_RESULT_MAX_ENUM: c_int = 2147483647;
pub const enum_VkResult = c_int;
pub const VkResult = enum_VkResult;
pub const VK_STRUCTURE_TYPE_APPLICATION_INFO: c_int = 0;
pub const VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO: c_int = 1;
pub const VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO: c_int = 2;
pub const VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO: c_int = 3;
pub const VK_STRUCTURE_TYPE_SUBMIT_INFO: c_int = 4;
pub const VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO: c_int = 5;
pub const VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE: c_int = 6;
pub const VK_STRUCTURE_TYPE_BIND_SPARSE_INFO: c_int = 7;
pub const VK_STRUCTURE_TYPE_FENCE_CREATE_INFO: c_int = 8;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO: c_int = 9;
pub const VK_STRUCTURE_TYPE_EVENT_CREATE_INFO: c_int = 10;
pub const VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO: c_int = 11;
pub const VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO: c_int = 12;
pub const VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO: c_int = 13;
pub const VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO: c_int = 14;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO: c_int = 15;
pub const VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO: c_int = 16;
pub const VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO: c_int = 17;
pub const VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO: c_int = 18;
pub const VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO: c_int = 19;
pub const VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO: c_int = 20;
pub const VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO: c_int = 21;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO: c_int = 22;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO: c_int = 23;
pub const VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO: c_int = 24;
pub const VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO: c_int = 25;
pub const VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO: c_int = 26;
pub const VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO: c_int = 27;
pub const VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO: c_int = 28;
pub const VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO: c_int = 29;
pub const VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO: c_int = 30;
pub const VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO: c_int = 31;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO: c_int = 32;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO: c_int = 33;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO: c_int = 34;
pub const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET: c_int = 35;
pub const VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET: c_int = 36;
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO: c_int = 37;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO: c_int = 38;
pub const VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO: c_int = 39;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO: c_int = 40;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO: c_int = 41;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO: c_int = 42;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO: c_int = 43;
pub const VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER: c_int = 44;
pub const VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER: c_int = 45;
pub const VK_STRUCTURE_TYPE_MEMORY_BARRIER: c_int = 46;
pub const VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO: c_int = 47;
pub const VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO: c_int = 48;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES: c_int = 1000094000;
pub const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO: c_int = 1000157000;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO: c_int = 1000157001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES: c_int = 1000083000;
pub const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS: c_int = 1000127000;
pub const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO: c_int = 1000127001;
pub const VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO: c_int = 1000060000;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO: c_int = 1000060003;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO: c_int = 1000060004;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO: c_int = 1000060005;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO: c_int = 1000060006;
pub const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO: c_int = 1000060013;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO: c_int = 1000060014;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES: c_int = 1000070000;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO: c_int = 1000070001;
pub const VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2: c_int = 1000146000;
pub const VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2: c_int = 1000146001;
pub const VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2: c_int = 1000146002;
pub const VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2: c_int = 1000146003;
pub const VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2: c_int = 1000146004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2: c_int = 1000059000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2: c_int = 1000059001;
pub const VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2: c_int = 1000059002;
pub const VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2: c_int = 1000059003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2: c_int = 1000059004;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2: c_int = 1000059005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2: c_int = 1000059006;
pub const VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2: c_int = 1000059007;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2: c_int = 1000059008;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES: c_int = 1000117000;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO: c_int = 1000117001;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO: c_int = 1000117002;
pub const VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO: c_int = 1000117003;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO: c_int = 1000053000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES: c_int = 1000053001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES: c_int = 1000053002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES: c_int = 1000120000;
pub const VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO: c_int = 1000145000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES: c_int = 1000145001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES: c_int = 1000145002;
pub const VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2: c_int = 1000145003;
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO: c_int = 1000156000;
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO: c_int = 1000156001;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO: c_int = 1000156002;
pub const VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO: c_int = 1000156003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES: c_int = 1000156004;
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES: c_int = 1000156005;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO: c_int = 1000085000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO: c_int = 1000071000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES: c_int = 1000071001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO: c_int = 1000071002;
pub const VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES: c_int = 1000071003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES: c_int = 1000071004;
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO: c_int = 1000072000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO: c_int = 1000072001;
pub const VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO: c_int = 1000072002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO: c_int = 1000112000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES: c_int = 1000112001;
pub const VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO: c_int = 1000113000;
pub const VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO: c_int = 1000077000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO: c_int = 1000076000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES: c_int = 1000076001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES: c_int = 1000168000;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT: c_int = 1000168001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES: c_int = 1000063000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES: c_int = 49;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES: c_int = 50;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES: c_int = 51;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES: c_int = 52;
pub const VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO: c_int = 1000147000;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2: c_int = 1000109000;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2: c_int = 1000109001;
pub const VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2: c_int = 1000109002;
pub const VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2: c_int = 1000109003;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2: c_int = 1000109004;
pub const VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO: c_int = 1000109005;
pub const VK_STRUCTURE_TYPE_SUBPASS_END_INFO: c_int = 1000109006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES: c_int = 1000177000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES: c_int = 1000196000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES: c_int = 1000180000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES: c_int = 1000082000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES: c_int = 1000197000;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO: c_int = 1000161000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES: c_int = 1000161001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES: c_int = 1000161002;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO: c_int = 1000161003;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT: c_int = 1000161004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES: c_int = 1000199000;
pub const VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE: c_int = 1000199001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES: c_int = 1000221000;
pub const VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO: c_int = 1000246000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES: c_int = 1000130000;
pub const VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO: c_int = 1000130001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES: c_int = 1000211000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES: c_int = 1000108000;
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO: c_int = 1000108001;
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO: c_int = 1000108002;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO: c_int = 1000108003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES: c_int = 1000253000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES: c_int = 1000175000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES: c_int = 1000241000;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT: c_int = 1000241001;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT: c_int = 1000241002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES: c_int = 1000261000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES: c_int = 1000207000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES: c_int = 1000207001;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO: c_int = 1000207002;
pub const VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO: c_int = 1000207003;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO: c_int = 1000207004;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO: c_int = 1000207005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES: c_int = 1000257000;
pub const VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO: c_int = 1000244001;
pub const VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO: c_int = 1000257002;
pub const VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO: c_int = 1000257003;
pub const VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO: c_int = 1000257004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES: c_int = 53;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES: c_int = 54;
pub const VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO: c_int = 1000192000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES: c_int = 1000215000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES: c_int = 1000245000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES: c_int = 1000276000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES: c_int = 1000295000;
pub const VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO: c_int = 1000295001;
pub const VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO: c_int = 1000295002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES: c_int = 1000297000;
pub const VK_STRUCTURE_TYPE_MEMORY_BARRIER_2: c_int = 1000314000;
pub const VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2: c_int = 1000314001;
pub const VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2: c_int = 1000314002;
pub const VK_STRUCTURE_TYPE_DEPENDENCY_INFO: c_int = 1000314003;
pub const VK_STRUCTURE_TYPE_SUBMIT_INFO_2: c_int = 1000314004;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO: c_int = 1000314005;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO: c_int = 1000314006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES: c_int = 1000314007;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES: c_int = 1000325000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES: c_int = 1000335000;
pub const VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2: c_int = 1000337000;
pub const VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2: c_int = 1000337001;
pub const VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2: c_int = 1000337002;
pub const VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2: c_int = 1000337003;
pub const VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2: c_int = 1000337004;
pub const VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2: c_int = 1000337005;
pub const VK_STRUCTURE_TYPE_BUFFER_COPY_2: c_int = 1000337006;
pub const VK_STRUCTURE_TYPE_IMAGE_COPY_2: c_int = 1000337007;
pub const VK_STRUCTURE_TYPE_IMAGE_BLIT_2: c_int = 1000337008;
pub const VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2: c_int = 1000337009;
pub const VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2: c_int = 1000337010;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES: c_int = 1000225000;
pub const VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO: c_int = 1000225001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES: c_int = 1000225002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES: c_int = 1000138000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES: c_int = 1000138001;
pub const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK: c_int = 1000138002;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO: c_int = 1000138003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES: c_int = 1000066000;
pub const VK_STRUCTURE_TYPE_RENDERING_INFO: c_int = 1000044000;
pub const VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO: c_int = 1000044001;
pub const VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO: c_int = 1000044002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES: c_int = 1000044003;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO: c_int = 1000044004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES: c_int = 1000280000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES: c_int = 1000280001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES: c_int = 1000281001;
pub const VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3: c_int = 1000360000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES: c_int = 1000413000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES: c_int = 1000413001;
pub const VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS: c_int = 1000413002;
pub const VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS: c_int = 1000413003;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR: c_int = 1000001000;
pub const VK_STRUCTURE_TYPE_PRESENT_INFO_KHR: c_int = 1000001001;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR: c_int = 1000060007;
pub const VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR: c_int = 1000060008;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR: c_int = 1000060009;
pub const VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR: c_int = 1000060010;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR: c_int = 1000060011;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR: c_int = 1000060012;
pub const VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR: c_int = 1000002000;
pub const VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR: c_int = 1000002001;
pub const VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR: c_int = 1000003000;
pub const VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR: c_int = 1000004000;
pub const VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR: c_int = 1000005000;
pub const VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR: c_int = 1000006000;
pub const VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR: c_int = 1000008000;
pub const VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR: c_int = 1000009000;
pub const VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT: c_int = 1000011000;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD: c_int = 1000018000;
pub const VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT: c_int = 1000022000;
pub const VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT: c_int = 1000022001;
pub const VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT: c_int = 1000022002;
pub const VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR: c_int = 1000023000;
pub const VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR: c_int = 1000023001;
pub const VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR: c_int = 1000023002;
pub const VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR: c_int = 1000023003;
pub const VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR: c_int = 1000023004;
pub const VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR: c_int = 1000023005;
pub const VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR: c_int = 1000023006;
pub const VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR: c_int = 1000023007;
pub const VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR: c_int = 1000023008;
pub const VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR: c_int = 1000023009;
pub const VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR: c_int = 1000023010;
pub const VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR: c_int = 1000023011;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR: c_int = 1000023012;
pub const VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR: c_int = 1000023013;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR: c_int = 1000023014;
pub const VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR: c_int = 1000023015;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR: c_int = 1000023016;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR: c_int = 1000024000;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR: c_int = 1000024001;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR: c_int = 1000024002;
pub const VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV: c_int = 1000026000;
pub const VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV: c_int = 1000026001;
pub const VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV: c_int = 1000026002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT: c_int = 1000028000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT: c_int = 1000028001;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT: c_int = 1000028002;
pub const VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX: c_int = 1000029000;
pub const VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX: c_int = 1000029001;
pub const VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX: c_int = 1000029002;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX: c_int = 1000030000;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX: c_int = 1000030001;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_KHR: c_int = 1000038000;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR: c_int = 1000038001;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR: c_int = 1000038002;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_KHR: c_int = 1000038003;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_KHR: c_int = 1000038004;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_KHR: c_int = 1000038005;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_KHR: c_int = 1000038006;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_KHR: c_int = 1000038007;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_KHR: c_int = 1000038008;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_KHR: c_int = 1000038009;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_KHR: c_int = 1000038010;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_KHR: c_int = 1000038011;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_KHR: c_int = 1000038012;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_KHR: c_int = 1000038013;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_KHR: c_int = 1000039000;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR: c_int = 1000039001;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR: c_int = 1000039002;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_KHR: c_int = 1000039003;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_KHR: c_int = 1000039004;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_KHR: c_int = 1000039005;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_KHR: c_int = 1000039006;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_KHR: c_int = 1000039007;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_KHR: c_int = 1000039009;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_KHR: c_int = 1000039010;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_KHR: c_int = 1000039011;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_KHR: c_int = 1000039012;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_KHR: c_int = 1000039013;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_KHR: c_int = 1000039014;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR: c_int = 1000040000;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR: c_int = 1000040001;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR: c_int = 1000040003;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR: c_int = 1000040004;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR: c_int = 1000040005;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR: c_int = 1000040006;
pub const VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD: c_int = 1000041000;
pub const VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR: c_int = 1000044006;
pub const VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT: c_int = 1000044007;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD: c_int = 1000044008;
pub const VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX: c_int = 1000044009;
pub const VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP: c_int = 1000049000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV: c_int = 1000050000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV: c_int = 1000056000;
pub const VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV: c_int = 1000056001;
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV: c_int = 1000057000;
pub const VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV: c_int = 1000057001;
pub const VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV: c_int = 1000058000;
pub const VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT: c_int = 1000061000;
pub const VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN: c_int = 1000062000;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT: c_int = 1000067000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT: c_int = 1000067001;
pub const VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT: c_int = 1000068000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT: c_int = 1000068001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT: c_int = 1000068002;
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR: c_int = 1000073000;
pub const VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR: c_int = 1000073001;
pub const VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR: c_int = 1000073002;
pub const VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR: c_int = 1000073003;
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR: c_int = 1000074000;
pub const VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR: c_int = 1000074001;
pub const VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR: c_int = 1000074002;
pub const VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR: c_int = 1000075000;
pub const VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR: c_int = 1000078000;
pub const VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR: c_int = 1000078001;
pub const VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR: c_int = 1000078002;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR: c_int = 1000078003;
pub const VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR: c_int = 1000079000;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR: c_int = 1000079001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR: c_int = 1000080000;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT: c_int = 1000081000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT: c_int = 1000081001;
pub const VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT: c_int = 1000081002;
pub const VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR: c_int = 1000084000;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV: c_int = 1000087000;
pub const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT: c_int = 1000090000;
pub const VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT: c_int = 1000091000;
pub const VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT: c_int = 1000091001;
pub const VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT: c_int = 1000091002;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT: c_int = 1000091003;
pub const VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE: c_int = 1000092000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX: c_int = 1000097000;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV: c_int = 1000098000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT: c_int = 1000099000;
pub const VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT: c_int = 1000099001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT: c_int = 1000101000;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT: c_int = 1000101001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT: c_int = 1000102000;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT: c_int = 1000102001;
pub const VK_STRUCTURE_TYPE_HDR_METADATA_EXT: c_int = 1000105000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG: c_int = 1000110000;
pub const VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR: c_int = 1000111000;
pub const VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR: c_int = 1000114000;
pub const VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR: c_int = 1000114001;
pub const VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR: c_int = 1000114002;
pub const VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR: c_int = 1000115000;
pub const VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR: c_int = 1000115001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR: c_int = 1000116000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR: c_int = 1000116001;
pub const VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR: c_int = 1000116002;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR: c_int = 1000116003;
pub const VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR: c_int = 1000116004;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR: c_int = 1000116005;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR: c_int = 1000116006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR: c_int = 1000119000;
pub const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR: c_int = 1000119001;
pub const VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR: c_int = 1000119002;
pub const VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR: c_int = 1000121000;
pub const VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR: c_int = 1000121001;
pub const VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR: c_int = 1000121002;
pub const VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR: c_int = 1000121003;
pub const VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR: c_int = 1000121004;
pub const VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK: c_int = 1000122000;
pub const VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK: c_int = 1000123000;
pub const VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT: c_int = 1000128000;
pub const VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT: c_int = 1000128001;
pub const VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT: c_int = 1000128002;
pub const VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT: c_int = 1000128003;
pub const VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT: c_int = 1000128004;
pub const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID: c_int = 1000129000;
pub const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID: c_int = 1000129001;
pub const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID: c_int = 1000129002;
pub const VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID: c_int = 1000129003;
pub const VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID: c_int = 1000129004;
pub const VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID: c_int = 1000129005;
pub const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID: c_int = 1000129006;
pub const VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT: c_int = 1000143000;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT: c_int = 1000143001;
pub const VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT: c_int = 1000143002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT: c_int = 1000143003;
pub const VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT: c_int = 1000143004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT: c_int = 1000148000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT: c_int = 1000148001;
pub const VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT: c_int = 1000148002;
pub const VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV: c_int = 1000149000;
pub const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR: c_int = 1000150007;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR: c_int = 1000150000;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR: c_int = 1000150002;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR: c_int = 1000150003;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR: c_int = 1000150004;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR: c_int = 1000150005;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR: c_int = 1000150006;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR: c_int = 1000150009;
pub const VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR: c_int = 1000150010;
pub const VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR: c_int = 1000150011;
pub const VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR: c_int = 1000150012;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR: c_int = 1000150013;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR: c_int = 1000150014;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR: c_int = 1000150017;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR: c_int = 1000150020;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR: c_int = 1000347000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR: c_int = 1000347001;
pub const VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR: c_int = 1000150015;
pub const VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR: c_int = 1000150016;
pub const VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR: c_int = 1000150018;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR: c_int = 1000348013;
pub const VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV: c_int = 1000152000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV: c_int = 1000154000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV: c_int = 1000154001;
pub const VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT: c_int = 1000158000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT: c_int = 1000158002;
pub const VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT: c_int = 1000158003;
pub const VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT: c_int = 1000158004;
pub const VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT: c_int = 1000158005;
pub const VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT: c_int = 1000158006;
pub const VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT: c_int = 1000160000;
pub const VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT: c_int = 1000160001;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV: c_int = 1000164000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV: c_int = 1000164001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV: c_int = 1000164002;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV: c_int = 1000164005;
pub const VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV: c_int = 1000165000;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV: c_int = 1000165001;
pub const VK_STRUCTURE_TYPE_GEOMETRY_NV: c_int = 1000165003;
pub const VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV: c_int = 1000165004;
pub const VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV: c_int = 1000165005;
pub const VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV: c_int = 1000165006;
pub const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV: c_int = 1000165007;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV: c_int = 1000165008;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV: c_int = 1000165009;
pub const VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV: c_int = 1000165011;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV: c_int = 1000165012;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV: c_int = 1000166000;
pub const VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV: c_int = 1000166001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT: c_int = 1000170000;
pub const VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT: c_int = 1000170001;
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT: c_int = 1000178000;
pub const VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT: c_int = 1000178001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT: c_int = 1000178002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR: c_int = 1000181000;
pub const VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD: c_int = 1000183000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD: c_int = 1000185000;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR: c_int = 1000187000;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR: c_int = 1000187001;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR: c_int = 1000187002;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR: c_int = 1000187003;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR: c_int = 1000187004;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR: c_int = 1000187005;
pub const VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR: c_int = 1000174000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR: c_int = 1000388000;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR: c_int = 1000388001;
pub const VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD: c_int = 1000189000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT: c_int = 1000190000;
pub const VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP: c_int = 1000191000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV: c_int = 1000201000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV: c_int = 1000202000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV: c_int = 1000202001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV: c_int = 1000204000;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV: c_int = 1000205000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV: c_int = 1000205002;
pub const VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV: c_int = 1000206000;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV: c_int = 1000206001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL: c_int = 1000209000;
pub const VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL: c_int = 1000210000;
pub const VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL: c_int = 1000210001;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL: c_int = 1000210002;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL: c_int = 1000210003;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL: c_int = 1000210004;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL: c_int = 1000210005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT: c_int = 1000212000;
pub const VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD: c_int = 1000213000;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD: c_int = 1000213001;
pub const VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA: c_int = 1000214000;
pub const VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT: c_int = 1000217000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT: c_int = 1000218000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT: c_int = 1000218001;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT: c_int = 1000218002;
pub const VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR: c_int = 1000226000;
pub const VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR: c_int = 1000226001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR: c_int = 1000226002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR: c_int = 1000226003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR: c_int = 1000226004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD: c_int = 1000227000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD: c_int = 1000229000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES_KHR: c_int = 1000232000;
pub const VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO_KHR: c_int = 1000232001;
pub const VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO_KHR: c_int = 1000232002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT: c_int = 1000234000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_QUAD_CONTROL_FEATURES_KHR: c_int = 1000235000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT: c_int = 1000237000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT: c_int = 1000238000;
pub const VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT: c_int = 1000238001;
pub const VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR: c_int = 1000239000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV: c_int = 1000240000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT: c_int = 1000244000;
pub const VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT: c_int = 1000244002;
pub const VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT: c_int = 1000247000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR: c_int = 1000248000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV: c_int = 1000249000;
pub const VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV: c_int = 1000249001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV: c_int = 1000249002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV: c_int = 1000250000;
pub const VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV: c_int = 1000250001;
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV: c_int = 1000250002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT: c_int = 1000251000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT: c_int = 1000252000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT: c_int = 1000254000;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT: c_int = 1000254001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT: c_int = 1000254002;
pub const VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT: c_int = 1000255000;
pub const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT: c_int = 1000255002;
pub const VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT: c_int = 1000255001;
pub const VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT: c_int = 1000256000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT: c_int = 1000260000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT: c_int = 1000267000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR: c_int = 1000269000;
pub const VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR: c_int = 1000269001;
pub const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR: c_int = 1000269002;
pub const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR: c_int = 1000269003;
pub const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR: c_int = 1000269004;
pub const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR: c_int = 1000269005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT: c_int = 1000270000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT: c_int = 1000270001;
pub const VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT: c_int = 1000270002;
pub const VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT: c_int = 1000270003;
pub const VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT: c_int = 1000270004;
pub const VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT: c_int = 1000270005;
pub const VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT: c_int = 1000270006;
pub const VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT: c_int = 1000270007;
pub const VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT: c_int = 1000270008;
pub const VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT: c_int = 1000270009;
pub const VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR: c_int = 1000271000;
pub const VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR: c_int = 1000271001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_FEATURES_EXT: c_int = 1000272000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_PROPERTIES_EXT: c_int = 1000272001;
pub const VK_STRUCTURE_TYPE_MEMORY_MAP_PLACED_INFO_EXT: c_int = 1000272002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT: c_int = 1000273000;
pub const VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT: c_int = 1000274000;
pub const VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT: c_int = 1000274001;
pub const VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT: c_int = 1000274002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT: c_int = 1000275000;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT: c_int = 1000275001;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT: c_int = 1000275002;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT: c_int = 1000275003;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT: c_int = 1000275004;
pub const VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT: c_int = 1000275005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV: c_int = 1000277000;
pub const VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV: c_int = 1000277001;
pub const VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV: c_int = 1000277002;
pub const VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV: c_int = 1000277003;
pub const VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV: c_int = 1000277004;
pub const VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV: c_int = 1000277005;
pub const VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV: c_int = 1000277006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV: c_int = 1000277007;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV: c_int = 1000278000;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV: c_int = 1000278001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT: c_int = 1000281000;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM: c_int = 1000282000;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM: c_int = 1000282001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT: c_int = 1000283000;
pub const VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT: c_int = 1000283001;
pub const VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT: c_int = 1000283002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT: c_int = 1000284000;
pub const VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT: c_int = 1000284001;
pub const VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT: c_int = 1000284002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT: c_int = 1000286000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT: c_int = 1000286001;
pub const VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT: c_int = 1000287000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT: c_int = 1000287001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT: c_int = 1000287002;
pub const VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR: c_int = 1000290000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV: c_int = 1000292000;
pub const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV: c_int = 1000292001;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV: c_int = 1000292002;
pub const VK_STRUCTURE_TYPE_PRESENT_ID_KHR: c_int = 1000294000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR: c_int = 1000294001;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR: c_int = 1000299000;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR: c_int = 1000299001;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR: c_int = 1000299002;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR: c_int = 1000299003;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR: c_int = 1000299004;
pub const VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR: c_int = 1000299005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR: c_int = 1000299006;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR: c_int = 1000299007;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR: c_int = 1000299008;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR: c_int = 1000299009;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR: c_int = 1000299010;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV: c_int = 1000300000;
pub const VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV: c_int = 1000300001;
pub const VK_STRUCTURE_TYPE_CUDA_MODULE_CREATE_INFO_NV: c_int = 1000307000;
pub const VK_STRUCTURE_TYPE_CUDA_FUNCTION_CREATE_INFO_NV: c_int = 1000307001;
pub const VK_STRUCTURE_TYPE_CUDA_LAUNCH_INFO_NV: c_int = 1000307002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_FEATURES_NV: c_int = 1000307003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_PROPERTIES_NV: c_int = 1000307004;
pub const VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV: c_int = 1000310000;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT: c_int = 1000311000;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT: c_int = 1000311001;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT: c_int = 1000311002;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT: c_int = 1000311003;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT: c_int = 1000311004;
pub const VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT: c_int = 1000311005;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT: c_int = 1000311006;
pub const VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT: c_int = 1000311007;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT: c_int = 1000311008;
pub const VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT: c_int = 1000311009;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT: c_int = 1000311010;
pub const VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT: c_int = 1000311011;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV: c_int = 1000314008;
pub const VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV: c_int = 1000314009;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT: c_int = 1000316000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT: c_int = 1000316001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT: c_int = 1000316002;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT: c_int = 1000316003;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT: c_int = 1000316004;
pub const VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT: c_int = 1000316005;
pub const VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT: c_int = 1000316006;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT: c_int = 1000316007;
pub const VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT: c_int = 1000316008;
pub const VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT: c_int = 1000316010;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT: c_int = 1000316011;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT: c_int = 1000316012;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT: c_int = 1000316009;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT: c_int = 1000320000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT: c_int = 1000320001;
pub const VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT: c_int = 1000320002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD: c_int = 1000321000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR: c_int = 1000203000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR: c_int = 1000322000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR: c_int = 1000323000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV: c_int = 1000326000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV: c_int = 1000326001;
pub const VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV: c_int = 1000326002;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV: c_int = 1000327000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV: c_int = 1000327001;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV: c_int = 1000327002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT: c_int = 1000328000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT: c_int = 1000328001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT: c_int = 1000330000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT: c_int = 1000332000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT: c_int = 1000332001;
pub const VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM: c_int = 1000333000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR: c_int = 1000336000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT: c_int = 1000338000;
pub const VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT: c_int = 1000338001;
pub const VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT: c_int = 1000338004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT: c_int = 1000339000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT: c_int = 1000340000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT: c_int = 1000341000;
pub const VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT: c_int = 1000341001;
pub const VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT: c_int = 1000341002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT: c_int = 1000344000;
pub const VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT: c_int = 1000346000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT: c_int = 1000352000;
pub const VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT: c_int = 1000352001;
pub const VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT: c_int = 1000352002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT: c_int = 1000353000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT: c_int = 1000354000;
pub const VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT: c_int = 1000354001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT: c_int = 1000355000;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT: c_int = 1000355001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT: c_int = 1000356000;
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA: c_int = 1000364000;
pub const VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA: c_int = 1000364001;
pub const VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA: c_int = 1000364002;
pub const VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA: c_int = 1000365000;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA: c_int = 1000365001;
pub const VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA: c_int = 1000366000;
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA: c_int = 1000366001;
pub const VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA: c_int = 1000366002;
pub const VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA: c_int = 1000366003;
pub const VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA: c_int = 1000366004;
pub const VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA: c_int = 1000366005;
pub const VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA: c_int = 1000366006;
pub const VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA: c_int = 1000366007;
pub const VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA: c_int = 1000366008;
pub const VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA: c_int = 1000366009;
pub const VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI: c_int = 1000369000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI: c_int = 1000369001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI: c_int = 1000369002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI: c_int = 1000370000;
pub const VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV: c_int = 1000371000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV: c_int = 1000371001;
pub const VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT: c_int = 1000372000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT: c_int = 1000372001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT: c_int = 1000375000;
pub const VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT: c_int = 1000375001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT: c_int = 1000376000;
pub const VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT: c_int = 1000376001;
pub const VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT: c_int = 1000376002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT: c_int = 1000377000;
pub const VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX: c_int = 1000378000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT: c_int = 1000381000;
pub const VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT: c_int = 1000381001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT: c_int = 1000382000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR: c_int = 1000386000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT: c_int = 1000391000;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT: c_int = 1000391001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT: c_int = 1000392000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT: c_int = 1000392001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT: c_int = 1000393000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT: c_int = 1000395000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT: c_int = 1000395001;
pub const VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT: c_int = 1000396000;
pub const VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT: c_int = 1000396001;
pub const VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT: c_int = 1000396002;
pub const VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT: c_int = 1000396003;
pub const VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT: c_int = 1000396004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT: c_int = 1000396005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT: c_int = 1000396006;
pub const VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT: c_int = 1000396007;
pub const VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT: c_int = 1000396008;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT: c_int = 1000396009;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI: c_int = 1000404000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI: c_int = 1000404001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_VRS_FEATURES_HUAWEI: c_int = 1000404002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT: c_int = 1000411000;
pub const VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT: c_int = 1000411001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT: c_int = 1000412000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM: c_int = 1000415000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES_KHR: c_int = 1000416000;
pub const VK_STRUCTURE_TYPE_DEVICE_QUEUE_SHADER_CORE_CONTROL_CREATE_INFO_ARM: c_int = 1000417000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM: c_int = 1000417001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_PROPERTIES_ARM: c_int = 1000417002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT: c_int = 1000418000;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT: c_int = 1000418001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE: c_int = 1000420000;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE: c_int = 1000420001;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE: c_int = 1000420002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT: c_int = 1000421000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT: c_int = 1000422000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM: c_int = 1000424000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_PROPERTIES_ARM: c_int = 1000424001;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_BEGIN_INFO_ARM: c_int = 1000424002;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_INFO_ARM: c_int = 1000424003;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_SUBMIT_INFO_ARM: c_int = 1000424004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM: c_int = 1000425000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM: c_int = 1000425001;
pub const VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM: c_int = 1000425002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV: c_int = 1000426000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV: c_int = 1000426001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV: c_int = 1000427000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV: c_int = 1000427001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV: c_int = 1000428000;
pub const VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV: c_int = 1000428001;
pub const VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV: c_int = 1000428002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV: c_int = 1000430000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MAXIMAL_RECONVERGENCE_FEATURES_KHR: c_int = 1000434000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT: c_int = 1000437000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM: c_int = 1000440000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM: c_int = 1000440001;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM: c_int = 1000440002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT: c_int = 1000451000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_PROPERTIES_EXT: c_int = 1000451001;
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT: c_int = 1000453000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT: c_int = 1000455000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT: c_int = 1000455001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT: c_int = 1000458000;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT: c_int = 1000458001;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT: c_int = 1000458002;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT: c_int = 1000458003;
pub const VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG: c_int = 1000459000;
pub const VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG: c_int = 1000459001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT: c_int = 1000462000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT: c_int = 1000462001;
pub const VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT: c_int = 1000462002;
pub const VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT: c_int = 1000462003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT: c_int = 1000342000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV: c_int = 1000464000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV: c_int = 1000464001;
pub const VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV: c_int = 1000464002;
pub const VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV: c_int = 1000464003;
pub const VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV: c_int = 1000464004;
pub const VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV: c_int = 1000464005;
pub const VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV: c_int = 1000464010;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT: c_int = 1000465000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT: c_int = 1000466000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_FEATURES_ANDROID: c_int = 1000468000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_PROPERTIES_ANDROID: c_int = 1000468001;
pub const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_RESOLVE_PROPERTIES_ANDROID: c_int = 1000468002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR: c_int = 1000470000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR: c_int = 1000470001;
pub const VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR: c_int = 1000470003;
pub const VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR: c_int = 1000470004;
pub const VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR: c_int = 1000338002;
pub const VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR: c_int = 1000338003;
pub const VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR: c_int = 1000470005;
pub const VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR: c_int = 1000470006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR: c_int = 1000481000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT: c_int = 1000482000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT: c_int = 1000482001;
pub const VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT: c_int = 1000482002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM: c_int = 1000484000;
pub const VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM: c_int = 1000484001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC: c_int = 1000485000;
pub const VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC: c_int = 1000485001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM: c_int = 1000488000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV: c_int = 1000490000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV: c_int = 1000490001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV: c_int = 1000492000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_PROPERTIES_NV: c_int = 1000492001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT: c_int = 1000351000;
pub const VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT: c_int = 1000351002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_FEATURES_EXT: c_int = 1000495000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_PROPERTIES_EXT: c_int = 1000495001;
pub const VK_STRUCTURE_TYPE_LAYER_SETTINGS_CREATE_INFO_EXT: c_int = 1000496000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM: c_int = 1000497000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM: c_int = 1000497001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT: c_int = 1000498000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT: c_int = 1000499000;
pub const VK_STRUCTURE_TYPE_LATENCY_SLEEP_MODE_INFO_NV: c_int = 1000505000;
pub const VK_STRUCTURE_TYPE_LATENCY_SLEEP_INFO_NV: c_int = 1000505001;
pub const VK_STRUCTURE_TYPE_SET_LATENCY_MARKER_INFO_NV: c_int = 1000505002;
pub const VK_STRUCTURE_TYPE_GET_LATENCY_MARKER_INFO_NV: c_int = 1000505003;
pub const VK_STRUCTURE_TYPE_LATENCY_TIMINGS_FRAME_REPORT_NV: c_int = 1000505004;
pub const VK_STRUCTURE_TYPE_LATENCY_SUBMISSION_PRESENT_ID_NV: c_int = 1000505005;
pub const VK_STRUCTURE_TYPE_OUT_OF_BAND_QUEUE_TYPE_INFO_NV: c_int = 1000505006;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_LATENCY_CREATE_INFO_NV: c_int = 1000505007;
pub const VK_STRUCTURE_TYPE_LATENCY_SURFACE_CAPABILITIES_NV: c_int = 1000505008;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR: c_int = 1000506000;
pub const VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR: c_int = 1000506001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR: c_int = 1000506002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM: c_int = 1000510000;
pub const VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM: c_int = 1000510001;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_CAPABILITIES_KHR: c_int = 1000512000;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PICTURE_INFO_KHR: c_int = 1000512001;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PROFILE_INFO_KHR: c_int = 1000512003;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR: c_int = 1000512004;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_DPB_SLOT_INFO_KHR: c_int = 1000512005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR: c_int = 1000515000;
pub const VK_STRUCTURE_TYPE_VIDEO_INLINE_QUERY_INFO_KHR: c_int = 1000515001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV: c_int = 1000516000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM: c_int = 1000518000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM: c_int = 1000518001;
pub const VK_STRUCTURE_TYPE_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM: c_int = 1000518002;
pub const VK_STRUCTURE_TYPE_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM: c_int = 1000519000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM: c_int = 1000519001;
pub const VK_STRUCTURE_TYPE_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM: c_int = 1000519002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM: c_int = 1000520000;
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM: c_int = 1000520001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM: c_int = 1000521000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT: c_int = 1000524000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_KHR: c_int = 1000525000;
pub const VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_KHR: c_int = 1000190001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_KHR: c_int = 1000190002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES_KHR: c_int = 1000528000;
pub const VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX: c_int = 1000529000;
pub const VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX: c_int = 1000529001;
pub const VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX: c_int = 1000529002;
pub const VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX: c_int = 1000529003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX: c_int = 1000529004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT: c_int = 1000530000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_KHR: c_int = 1000265000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_KHR: c_int = 1000259000;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_KHR: c_int = 1000259001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_KHR: c_int = 1000259002;
pub const VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_KHR: c_int = 1000184000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES_KHR: c_int = 1000544000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES_KHR: c_int = 1000545000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES_KHR: c_int = 1000545001;
pub const VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS_KHR: c_int = 1000545002;
pub const VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO_KHR: c_int = 1000545003;
pub const VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO_KHR: c_int = 1000545004;
pub const VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO_KHR: c_int = 1000545005;
pub const VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO_KHR: c_int = 1000545006;
pub const VK_STRUCTURE_TYPE_SET_DESCRIPTOR_BUFFER_OFFSETS_INFO_EXT: c_int = 1000545007;
pub const VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_BUFFER_EMBEDDED_SAMPLERS_INFO_EXT: c_int = 1000545008;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV: c_int = 1000546000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAW_ACCESS_CHAINS_FEATURES_NV: c_int = 1000555000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT16_VECTOR_FEATURES_NV: c_int = 1000563000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_VALIDATION_FEATURES_NV: c_int = 1000568000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_FEATURES_MESA: c_int = 1000575000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_PROPERTIES_MESA: c_int = 1000575001;
pub const VK_STRUCTURE_TYPE_IMAGE_ALIGNMENT_CONTROL_CREATE_INFO_MESA: c_int = 1000575002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES: c_int = 1000120000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES: c_int = 1000063000;
pub const VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT: c_int = 1000011000;
pub const VK_STRUCTURE_TYPE_RENDERING_INFO_KHR: c_int = 1000044000;
pub const VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR: c_int = 1000044001;
pub const VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR: c_int = 1000044002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR: c_int = 1000044003;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR: c_int = 1000044004;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV: c_int = 1000044008;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR: c_int = 1000053000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR: c_int = 1000053001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR: c_int = 1000053002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR: c_int = 1000059000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR: c_int = 1000059001;
pub const VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR: c_int = 1000059002;
pub const VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR: c_int = 1000059003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR: c_int = 1000059004;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR: c_int = 1000059005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR: c_int = 1000059006;
pub const VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR: c_int = 1000059007;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR: c_int = 1000059008;
pub const VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR: c_int = 1000060000;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR: c_int = 1000060003;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR: c_int = 1000060004;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR: c_int = 1000060005;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR: c_int = 1000060006;
pub const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR: c_int = 1000060013;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR: c_int = 1000060014;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT: c_int = 1000066000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR: c_int = 1000070000;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR: c_int = 1000070001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR: c_int = 1000071000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR: c_int = 1000071001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR: c_int = 1000071002;
pub const VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR: c_int = 1000071003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR: c_int = 1000071004;
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR: c_int = 1000072000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR: c_int = 1000072001;
pub const VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR: c_int = 1000072002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR: c_int = 1000076000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR: c_int = 1000076001;
pub const VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR: c_int = 1000077000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR: c_int = 1000082000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR: c_int = 1000082000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR: c_int = 1000083000;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR: c_int = 1000085000;
pub const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT: c_int = 1000090000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR: c_int = 1000108000;
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR: c_int = 1000108001;
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR: c_int = 1000108002;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR: c_int = 1000108003;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR: c_int = 1000109000;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR: c_int = 1000109001;
pub const VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR: c_int = 1000109002;
pub const VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR: c_int = 1000109003;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR: c_int = 1000109004;
pub const VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR: c_int = 1000109005;
pub const VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR: c_int = 1000109006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR: c_int = 1000112000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR: c_int = 1000112001;
pub const VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR: c_int = 1000113000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR: c_int = 1000117000;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR: c_int = 1000117001;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR: c_int = 1000117002;
pub const VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR: c_int = 1000117003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR: c_int = 1000120000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR: c_int = 1000120000;
pub const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR: c_int = 1000127000;
pub const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR: c_int = 1000127001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT: c_int = 1000130000;
pub const VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT: c_int = 1000130001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT: c_int = 1000138000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT: c_int = 1000138001;
pub const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT: c_int = 1000138002;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT: c_int = 1000138003;
pub const VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR: c_int = 1000146000;
pub const VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR: c_int = 1000146001;
pub const VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR: c_int = 1000146002;
pub const VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR: c_int = 1000146003;
pub const VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR: c_int = 1000146004;
pub const VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR: c_int = 1000147000;
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR: c_int = 1000156000;
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR: c_int = 1000156001;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR: c_int = 1000156002;
pub const VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR: c_int = 1000156003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR: c_int = 1000156004;
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR: c_int = 1000156005;
pub const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR: c_int = 1000157000;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR: c_int = 1000157001;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT: c_int = 1000161000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT: c_int = 1000161001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT: c_int = 1000161002;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT: c_int = 1000161003;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT: c_int = 1000161004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR: c_int = 1000168000;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR: c_int = 1000168001;
pub const VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT: c_int = 1000174000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR: c_int = 1000175000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR: c_int = 1000177000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR: c_int = 1000180000;
pub const VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT: c_int = 1000184000;
pub const VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT: c_int = 1000190001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT: c_int = 1000190002;
pub const VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT: c_int = 1000192000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR: c_int = 1000196000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR: c_int = 1000197000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR: c_int = 1000199000;
pub const VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR: c_int = 1000199001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV: c_int = 1000203000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR: c_int = 1000207000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR: c_int = 1000207001;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR: c_int = 1000207002;
pub const VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR: c_int = 1000207003;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR: c_int = 1000207004;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR: c_int = 1000207005;
pub const VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL: c_int = 1000210000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR: c_int = 1000211000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR: c_int = 1000215000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT: c_int = 1000221000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT: c_int = 1000225000;
pub const VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT: c_int = 1000225001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT: c_int = 1000225002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR: c_int = 1000241000;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR: c_int = 1000241001;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR: c_int = 1000241002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT: c_int = 1000244000;
pub const VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT: c_int = 1000244001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT: c_int = 1000245000;
pub const VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT: c_int = 1000246000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR: c_int = 1000253000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR: c_int = 1000257000;
pub const VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR: c_int = 1000244001;
pub const VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR: c_int = 1000257002;
pub const VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR: c_int = 1000257003;
pub const VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR: c_int = 1000257004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT: c_int = 1000259000;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT: c_int = 1000259001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT: c_int = 1000259002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT: c_int = 1000261000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT: c_int = 1000265000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT: c_int = 1000276000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR: c_int = 1000280000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR: c_int = 1000280001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT: c_int = 1000281001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT: c_int = 1000295000;
pub const VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT: c_int = 1000295001;
pub const VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT: c_int = 1000295002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT: c_int = 1000297000;
pub const VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR: c_int = 1000314000;
pub const VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR: c_int = 1000314001;
pub const VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR: c_int = 1000314002;
pub const VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR: c_int = 1000314003;
pub const VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR: c_int = 1000314004;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR: c_int = 1000314005;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR: c_int = 1000314006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR: c_int = 1000314007;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR: c_int = 1000325000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT: c_int = 1000335000;
pub const VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR: c_int = 1000337000;
pub const VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR: c_int = 1000337001;
pub const VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR: c_int = 1000337002;
pub const VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR: c_int = 1000337003;
pub const VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR: c_int = 1000337004;
pub const VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR: c_int = 1000337005;
pub const VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR: c_int = 1000337006;
pub const VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR: c_int = 1000337007;
pub const VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR: c_int = 1000337008;
pub const VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR: c_int = 1000337009;
pub const VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR: c_int = 1000337010;
pub const VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT: c_int = 1000338002;
pub const VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT: c_int = 1000338003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM: c_int = 1000342000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE: c_int = 1000351000;
pub const VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE: c_int = 1000351002;
pub const VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR: c_int = 1000360000;
pub const VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT: c_int = 1000269001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT: c_int = 1000388000;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT: c_int = 1000388001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR: c_int = 1000413000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR: c_int = 1000413001;
pub const VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR: c_int = 1000413002;
pub const VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR: c_int = 1000413003;
pub const VK_STRUCTURE_TYPE_SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT: c_int = 1000225001;
pub const VK_STRUCTURE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkStructureType = c_uint;
pub const VkStructureType = enum_VkStructureType;
pub const VK_PIPELINE_CACHE_HEADER_VERSION_ONE: c_int = 1;
pub const VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineCacheHeaderVersion = c_uint;
pub const VkPipelineCacheHeaderVersion = enum_VkPipelineCacheHeaderVersion;
pub const VK_IMAGE_LAYOUT_UNDEFINED: c_int = 0;
pub const VK_IMAGE_LAYOUT_GENERAL: c_int = 1;
pub const VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL: c_int = 2;
pub const VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL: c_int = 3;
pub const VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL: c_int = 4;
pub const VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL: c_int = 5;
pub const VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL: c_int = 6;
pub const VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL: c_int = 7;
pub const VK_IMAGE_LAYOUT_PREINITIALIZED: c_int = 8;
pub const VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL: c_int = 1000117000;
pub const VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL: c_int = 1000117001;
pub const VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL: c_int = 1000241000;
pub const VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL: c_int = 1000241001;
pub const VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL: c_int = 1000241002;
pub const VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL: c_int = 1000241003;
pub const VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL: c_int = 1000314000;
pub const VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL: c_int = 1000314001;
pub const VK_IMAGE_LAYOUT_PRESENT_SRC_KHR: c_int = 1000001002;
pub const VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR: c_int = 1000024000;
pub const VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR: c_int = 1000024001;
pub const VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR: c_int = 1000024002;
pub const VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR: c_int = 1000111000;
pub const VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT: c_int = 1000218000;
pub const VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR: c_int = 1000164003;
pub const VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ_KHR: c_int = 1000232000;
pub const VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR: c_int = 1000299000;
pub const VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR: c_int = 1000299001;
pub const VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR: c_int = 1000299002;
pub const VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT: c_int = 1000339000;
pub const VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR: c_int = 1000117000;
pub const VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR: c_int = 1000117001;
pub const VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV: c_int = 1000164003;
pub const VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR: c_int = 1000241000;
pub const VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR: c_int = 1000241001;
pub const VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR: c_int = 1000241002;
pub const VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR: c_int = 1000241003;
pub const VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR: c_int = 1000314000;
pub const VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR: c_int = 1000314001;
pub const VK_IMAGE_LAYOUT_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageLayout = c_uint;
pub const VkImageLayout = enum_VkImageLayout;
pub const VK_OBJECT_TYPE_UNKNOWN: c_int = 0;
pub const VK_OBJECT_TYPE_INSTANCE: c_int = 1;
pub const VK_OBJECT_TYPE_PHYSICAL_DEVICE: c_int = 2;
pub const VK_OBJECT_TYPE_DEVICE: c_int = 3;
pub const VK_OBJECT_TYPE_QUEUE: c_int = 4;
pub const VK_OBJECT_TYPE_SEMAPHORE: c_int = 5;
pub const VK_OBJECT_TYPE_COMMAND_BUFFER: c_int = 6;
pub const VK_OBJECT_TYPE_FENCE: c_int = 7;
pub const VK_OBJECT_TYPE_DEVICE_MEMORY: c_int = 8;
pub const VK_OBJECT_TYPE_BUFFER: c_int = 9;
pub const VK_OBJECT_TYPE_IMAGE: c_int = 10;
pub const VK_OBJECT_TYPE_EVENT: c_int = 11;
pub const VK_OBJECT_TYPE_QUERY_POOL: c_int = 12;
pub const VK_OBJECT_TYPE_BUFFER_VIEW: c_int = 13;
pub const VK_OBJECT_TYPE_IMAGE_VIEW: c_int = 14;
pub const VK_OBJECT_TYPE_SHADER_MODULE: c_int = 15;
pub const VK_OBJECT_TYPE_PIPELINE_CACHE: c_int = 16;
pub const VK_OBJECT_TYPE_PIPELINE_LAYOUT: c_int = 17;
pub const VK_OBJECT_TYPE_RENDER_PASS: c_int = 18;
pub const VK_OBJECT_TYPE_PIPELINE: c_int = 19;
pub const VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT: c_int = 20;
pub const VK_OBJECT_TYPE_SAMPLER: c_int = 21;
pub const VK_OBJECT_TYPE_DESCRIPTOR_POOL: c_int = 22;
pub const VK_OBJECT_TYPE_DESCRIPTOR_SET: c_int = 23;
pub const VK_OBJECT_TYPE_FRAMEBUFFER: c_int = 24;
pub const VK_OBJECT_TYPE_COMMAND_POOL: c_int = 25;
pub const VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION: c_int = 1000156000;
pub const VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE: c_int = 1000085000;
pub const VK_OBJECT_TYPE_PRIVATE_DATA_SLOT: c_int = 1000295000;
pub const VK_OBJECT_TYPE_SURFACE_KHR: c_int = 1000000000;
pub const VK_OBJECT_TYPE_SWAPCHAIN_KHR: c_int = 1000001000;
pub const VK_OBJECT_TYPE_DISPLAY_KHR: c_int = 1000002000;
pub const VK_OBJECT_TYPE_DISPLAY_MODE_KHR: c_int = 1000002001;
pub const VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT: c_int = 1000011000;
pub const VK_OBJECT_TYPE_VIDEO_SESSION_KHR: c_int = 1000023000;
pub const VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR: c_int = 1000023001;
pub const VK_OBJECT_TYPE_CU_MODULE_NVX: c_int = 1000029000;
pub const VK_OBJECT_TYPE_CU_FUNCTION_NVX: c_int = 1000029001;
pub const VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT: c_int = 1000128000;
pub const VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR: c_int = 1000150000;
pub const VK_OBJECT_TYPE_VALIDATION_CACHE_EXT: c_int = 1000160000;
pub const VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV: c_int = 1000165000;
pub const VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL: c_int = 1000210000;
pub const VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR: c_int = 1000268000;
pub const VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV: c_int = 1000277000;
pub const VK_OBJECT_TYPE_CUDA_MODULE_NV: c_int = 1000307000;
pub const VK_OBJECT_TYPE_CUDA_FUNCTION_NV: c_int = 1000307001;
pub const VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA: c_int = 1000366000;
pub const VK_OBJECT_TYPE_MICROMAP_EXT: c_int = 1000396000;
pub const VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV: c_int = 1000464000;
pub const VK_OBJECT_TYPE_SHADER_EXT: c_int = 1000482000;
pub const VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR: c_int = 1000085000;
pub const VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR: c_int = 1000156000;
pub const VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT: c_int = 1000295000;
pub const VK_OBJECT_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkObjectType = c_uint;
pub const VkObjectType = enum_VkObjectType;
pub const VK_VENDOR_ID_VIV: c_int = 65537;
pub const VK_VENDOR_ID_VSI: c_int = 65538;
pub const VK_VENDOR_ID_KAZAN: c_int = 65539;
pub const VK_VENDOR_ID_CODEPLAY: c_int = 65540;
pub const VK_VENDOR_ID_MESA: c_int = 65541;
pub const VK_VENDOR_ID_POCL: c_int = 65542;
pub const VK_VENDOR_ID_MOBILEYE: c_int = 65543;
pub const VK_VENDOR_ID_MAX_ENUM: c_int = 2147483647;
pub const enum_VkVendorId = c_uint;
pub const VkVendorId = enum_VkVendorId;
pub const VK_FORMAT_UNDEFINED: c_int = 0;
pub const VK_FORMAT_R4G4_UNORM_PACK8: c_int = 1;
pub const VK_FORMAT_R4G4B4A4_UNORM_PACK16: c_int = 2;
pub const VK_FORMAT_B4G4R4A4_UNORM_PACK16: c_int = 3;
pub const VK_FORMAT_R5G6B5_UNORM_PACK16: c_int = 4;
pub const VK_FORMAT_B5G6R5_UNORM_PACK16: c_int = 5;
pub const VK_FORMAT_R5G5B5A1_UNORM_PACK16: c_int = 6;
pub const VK_FORMAT_B5G5R5A1_UNORM_PACK16: c_int = 7;
pub const VK_FORMAT_A1R5G5B5_UNORM_PACK16: c_int = 8;
pub const VK_FORMAT_R8_UNORM: c_int = 9;
pub const VK_FORMAT_R8_SNORM: c_int = 10;
pub const VK_FORMAT_R8_USCALED: c_int = 11;
pub const VK_FORMAT_R8_SSCALED: c_int = 12;
pub const VK_FORMAT_R8_UINT: c_int = 13;
pub const VK_FORMAT_R8_SINT: c_int = 14;
pub const VK_FORMAT_R8_SRGB: c_int = 15;
pub const VK_FORMAT_R8G8_UNORM: c_int = 16;
pub const VK_FORMAT_R8G8_SNORM: c_int = 17;
pub const VK_FORMAT_R8G8_USCALED: c_int = 18;
pub const VK_FORMAT_R8G8_SSCALED: c_int = 19;
pub const VK_FORMAT_R8G8_UINT: c_int = 20;
pub const VK_FORMAT_R8G8_SINT: c_int = 21;
pub const VK_FORMAT_R8G8_SRGB: c_int = 22;
pub const VK_FORMAT_R8G8B8_UNORM: c_int = 23;
pub const VK_FORMAT_R8G8B8_SNORM: c_int = 24;
pub const VK_FORMAT_R8G8B8_USCALED: c_int = 25;
pub const VK_FORMAT_R8G8B8_SSCALED: c_int = 26;
pub const VK_FORMAT_R8G8B8_UINT: c_int = 27;
pub const VK_FORMAT_R8G8B8_SINT: c_int = 28;
pub const VK_FORMAT_R8G8B8_SRGB: c_int = 29;
pub const VK_FORMAT_B8G8R8_UNORM: c_int = 30;
pub const VK_FORMAT_B8G8R8_SNORM: c_int = 31;
pub const VK_FORMAT_B8G8R8_USCALED: c_int = 32;
pub const VK_FORMAT_B8G8R8_SSCALED: c_int = 33;
pub const VK_FORMAT_B8G8R8_UINT: c_int = 34;
pub const VK_FORMAT_B8G8R8_SINT: c_int = 35;
pub const VK_FORMAT_B8G8R8_SRGB: c_int = 36;
pub const VK_FORMAT_R8G8B8A8_UNORM: c_int = 37;
pub const VK_FORMAT_R8G8B8A8_SNORM: c_int = 38;
pub const VK_FORMAT_R8G8B8A8_USCALED: c_int = 39;
pub const VK_FORMAT_R8G8B8A8_SSCALED: c_int = 40;
pub const VK_FORMAT_R8G8B8A8_UINT: c_int = 41;
pub const VK_FORMAT_R8G8B8A8_SINT: c_int = 42;
pub const VK_FORMAT_R8G8B8A8_SRGB: c_int = 43;
pub const VK_FORMAT_B8G8R8A8_UNORM: c_int = 44;
pub const VK_FORMAT_B8G8R8A8_SNORM: c_int = 45;
pub const VK_FORMAT_B8G8R8A8_USCALED: c_int = 46;
pub const VK_FORMAT_B8G8R8A8_SSCALED: c_int = 47;
pub const VK_FORMAT_B8G8R8A8_UINT: c_int = 48;
pub const VK_FORMAT_B8G8R8A8_SINT: c_int = 49;
pub const VK_FORMAT_B8G8R8A8_SRGB: c_int = 50;
pub const VK_FORMAT_A8B8G8R8_UNORM_PACK32: c_int = 51;
pub const VK_FORMAT_A8B8G8R8_SNORM_PACK32: c_int = 52;
pub const VK_FORMAT_A8B8G8R8_USCALED_PACK32: c_int = 53;
pub const VK_FORMAT_A8B8G8R8_SSCALED_PACK32: c_int = 54;
pub const VK_FORMAT_A8B8G8R8_UINT_PACK32: c_int = 55;
pub const VK_FORMAT_A8B8G8R8_SINT_PACK32: c_int = 56;
pub const VK_FORMAT_A8B8G8R8_SRGB_PACK32: c_int = 57;
pub const VK_FORMAT_A2R10G10B10_UNORM_PACK32: c_int = 58;
pub const VK_FORMAT_A2R10G10B10_SNORM_PACK32: c_int = 59;
pub const VK_FORMAT_A2R10G10B10_USCALED_PACK32: c_int = 60;
pub const VK_FORMAT_A2R10G10B10_SSCALED_PACK32: c_int = 61;
pub const VK_FORMAT_A2R10G10B10_UINT_PACK32: c_int = 62;
pub const VK_FORMAT_A2R10G10B10_SINT_PACK32: c_int = 63;
pub const VK_FORMAT_A2B10G10R10_UNORM_PACK32: c_int = 64;
pub const VK_FORMAT_A2B10G10R10_SNORM_PACK32: c_int = 65;
pub const VK_FORMAT_A2B10G10R10_USCALED_PACK32: c_int = 66;
pub const VK_FORMAT_A2B10G10R10_SSCALED_PACK32: c_int = 67;
pub const VK_FORMAT_A2B10G10R10_UINT_PACK32: c_int = 68;
pub const VK_FORMAT_A2B10G10R10_SINT_PACK32: c_int = 69;
pub const VK_FORMAT_R16_UNORM: c_int = 70;
pub const VK_FORMAT_R16_SNORM: c_int = 71;
pub const VK_FORMAT_R16_USCALED: c_int = 72;
pub const VK_FORMAT_R16_SSCALED: c_int = 73;
pub const VK_FORMAT_R16_UINT: c_int = 74;
pub const VK_FORMAT_R16_SINT: c_int = 75;
pub const VK_FORMAT_R16_SFLOAT: c_int = 76;
pub const VK_FORMAT_R16G16_UNORM: c_int = 77;
pub const VK_FORMAT_R16G16_SNORM: c_int = 78;
pub const VK_FORMAT_R16G16_USCALED: c_int = 79;
pub const VK_FORMAT_R16G16_SSCALED: c_int = 80;
pub const VK_FORMAT_R16G16_UINT: c_int = 81;
pub const VK_FORMAT_R16G16_SINT: c_int = 82;
pub const VK_FORMAT_R16G16_SFLOAT: c_int = 83;
pub const VK_FORMAT_R16G16B16_UNORM: c_int = 84;
pub const VK_FORMAT_R16G16B16_SNORM: c_int = 85;
pub const VK_FORMAT_R16G16B16_USCALED: c_int = 86;
pub const VK_FORMAT_R16G16B16_SSCALED: c_int = 87;
pub const VK_FORMAT_R16G16B16_UINT: c_int = 88;
pub const VK_FORMAT_R16G16B16_SINT: c_int = 89;
pub const VK_FORMAT_R16G16B16_SFLOAT: c_int = 90;
pub const VK_FORMAT_R16G16B16A16_UNORM: c_int = 91;
pub const VK_FORMAT_R16G16B16A16_SNORM: c_int = 92;
pub const VK_FORMAT_R16G16B16A16_USCALED: c_int = 93;
pub const VK_FORMAT_R16G16B16A16_SSCALED: c_int = 94;
pub const VK_FORMAT_R16G16B16A16_UINT: c_int = 95;
pub const VK_FORMAT_R16G16B16A16_SINT: c_int = 96;
pub const VK_FORMAT_R16G16B16A16_SFLOAT: c_int = 97;
pub const VK_FORMAT_R32_UINT: c_int = 98;
pub const VK_FORMAT_R32_SINT: c_int = 99;
pub const VK_FORMAT_R32_SFLOAT: c_int = 100;
pub const VK_FORMAT_R32G32_UINT: c_int = 101;
pub const VK_FORMAT_R32G32_SINT: c_int = 102;
pub const VK_FORMAT_R32G32_SFLOAT: c_int = 103;
pub const VK_FORMAT_R32G32B32_UINT: c_int = 104;
pub const VK_FORMAT_R32G32B32_SINT: c_int = 105;
pub const VK_FORMAT_R32G32B32_SFLOAT: c_int = 106;
pub const VK_FORMAT_R32G32B32A32_UINT: c_int = 107;
pub const VK_FORMAT_R32G32B32A32_SINT: c_int = 108;
pub const VK_FORMAT_R32G32B32A32_SFLOAT: c_int = 109;
pub const VK_FORMAT_R64_UINT: c_int = 110;
pub const VK_FORMAT_R64_SINT: c_int = 111;
pub const VK_FORMAT_R64_SFLOAT: c_int = 112;
pub const VK_FORMAT_R64G64_UINT: c_int = 113;
pub const VK_FORMAT_R64G64_SINT: c_int = 114;
pub const VK_FORMAT_R64G64_SFLOAT: c_int = 115;
pub const VK_FORMAT_R64G64B64_UINT: c_int = 116;
pub const VK_FORMAT_R64G64B64_SINT: c_int = 117;
pub const VK_FORMAT_R64G64B64_SFLOAT: c_int = 118;
pub const VK_FORMAT_R64G64B64A64_UINT: c_int = 119;
pub const VK_FORMAT_R64G64B64A64_SINT: c_int = 120;
pub const VK_FORMAT_R64G64B64A64_SFLOAT: c_int = 121;
pub const VK_FORMAT_B10G11R11_UFLOAT_PACK32: c_int = 122;
pub const VK_FORMAT_E5B9G9R9_UFLOAT_PACK32: c_int = 123;
pub const VK_FORMAT_D16_UNORM: c_int = 124;
pub const VK_FORMAT_X8_D24_UNORM_PACK32: c_int = 125;
pub const VK_FORMAT_D32_SFLOAT: c_int = 126;
pub const VK_FORMAT_S8_UINT: c_int = 127;
pub const VK_FORMAT_D16_UNORM_S8_UINT: c_int = 128;
pub const VK_FORMAT_D24_UNORM_S8_UINT: c_int = 129;
pub const VK_FORMAT_D32_SFLOAT_S8_UINT: c_int = 130;
pub const VK_FORMAT_BC1_RGB_UNORM_BLOCK: c_int = 131;
pub const VK_FORMAT_BC1_RGB_SRGB_BLOCK: c_int = 132;
pub const VK_FORMAT_BC1_RGBA_UNORM_BLOCK: c_int = 133;
pub const VK_FORMAT_BC1_RGBA_SRGB_BLOCK: c_int = 134;
pub const VK_FORMAT_BC2_UNORM_BLOCK: c_int = 135;
pub const VK_FORMAT_BC2_SRGB_BLOCK: c_int = 136;
pub const VK_FORMAT_BC3_UNORM_BLOCK: c_int = 137;
pub const VK_FORMAT_BC3_SRGB_BLOCK: c_int = 138;
pub const VK_FORMAT_BC4_UNORM_BLOCK: c_int = 139;
pub const VK_FORMAT_BC4_SNORM_BLOCK: c_int = 140;
pub const VK_FORMAT_BC5_UNORM_BLOCK: c_int = 141;
pub const VK_FORMAT_BC5_SNORM_BLOCK: c_int = 142;
pub const VK_FORMAT_BC6H_UFLOAT_BLOCK: c_int = 143;
pub const VK_FORMAT_BC6H_SFLOAT_BLOCK: c_int = 144;
pub const VK_FORMAT_BC7_UNORM_BLOCK: c_int = 145;
pub const VK_FORMAT_BC7_SRGB_BLOCK: c_int = 146;
pub const VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK: c_int = 147;
pub const VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK: c_int = 148;
pub const VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK: c_int = 149;
pub const VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK: c_int = 150;
pub const VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK: c_int = 151;
pub const VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK: c_int = 152;
pub const VK_FORMAT_EAC_R11_UNORM_BLOCK: c_int = 153;
pub const VK_FORMAT_EAC_R11_SNORM_BLOCK: c_int = 154;
pub const VK_FORMAT_EAC_R11G11_UNORM_BLOCK: c_int = 155;
pub const VK_FORMAT_EAC_R11G11_SNORM_BLOCK: c_int = 156;
pub const VK_FORMAT_ASTC_4x4_UNORM_BLOCK: c_int = 157;
pub const VK_FORMAT_ASTC_4x4_SRGB_BLOCK: c_int = 158;
pub const VK_FORMAT_ASTC_5x4_UNORM_BLOCK: c_int = 159;
pub const VK_FORMAT_ASTC_5x4_SRGB_BLOCK: c_int = 160;
pub const VK_FORMAT_ASTC_5x5_UNORM_BLOCK: c_int = 161;
pub const VK_FORMAT_ASTC_5x5_SRGB_BLOCK: c_int = 162;
pub const VK_FORMAT_ASTC_6x5_UNORM_BLOCK: c_int = 163;
pub const VK_FORMAT_ASTC_6x5_SRGB_BLOCK: c_int = 164;
pub const VK_FORMAT_ASTC_6x6_UNORM_BLOCK: c_int = 165;
pub const VK_FORMAT_ASTC_6x6_SRGB_BLOCK: c_int = 166;
pub const VK_FORMAT_ASTC_8x5_UNORM_BLOCK: c_int = 167;
pub const VK_FORMAT_ASTC_8x5_SRGB_BLOCK: c_int = 168;
pub const VK_FORMAT_ASTC_8x6_UNORM_BLOCK: c_int = 169;
pub const VK_FORMAT_ASTC_8x6_SRGB_BLOCK: c_int = 170;
pub const VK_FORMAT_ASTC_8x8_UNORM_BLOCK: c_int = 171;
pub const VK_FORMAT_ASTC_8x8_SRGB_BLOCK: c_int = 172;
pub const VK_FORMAT_ASTC_10x5_UNORM_BLOCK: c_int = 173;
pub const VK_FORMAT_ASTC_10x5_SRGB_BLOCK: c_int = 174;
pub const VK_FORMAT_ASTC_10x6_UNORM_BLOCK: c_int = 175;
pub const VK_FORMAT_ASTC_10x6_SRGB_BLOCK: c_int = 176;
pub const VK_FORMAT_ASTC_10x8_UNORM_BLOCK: c_int = 177;
pub const VK_FORMAT_ASTC_10x8_SRGB_BLOCK: c_int = 178;
pub const VK_FORMAT_ASTC_10x10_UNORM_BLOCK: c_int = 179;
pub const VK_FORMAT_ASTC_10x10_SRGB_BLOCK: c_int = 180;
pub const VK_FORMAT_ASTC_12x10_UNORM_BLOCK: c_int = 181;
pub const VK_FORMAT_ASTC_12x10_SRGB_BLOCK: c_int = 182;
pub const VK_FORMAT_ASTC_12x12_UNORM_BLOCK: c_int = 183;
pub const VK_FORMAT_ASTC_12x12_SRGB_BLOCK: c_int = 184;
pub const VK_FORMAT_G8B8G8R8_422_UNORM: c_int = 1000156000;
pub const VK_FORMAT_B8G8R8G8_422_UNORM: c_int = 1000156001;
pub const VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM: c_int = 1000156002;
pub const VK_FORMAT_G8_B8R8_2PLANE_420_UNORM: c_int = 1000156003;
pub const VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM: c_int = 1000156004;
pub const VK_FORMAT_G8_B8R8_2PLANE_422_UNORM: c_int = 1000156005;
pub const VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM: c_int = 1000156006;
pub const VK_FORMAT_R10X6_UNORM_PACK16: c_int = 1000156007;
pub const VK_FORMAT_R10X6G10X6_UNORM_2PACK16: c_int = 1000156008;
pub const VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16: c_int = 1000156009;
pub const VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16: c_int = 1000156010;
pub const VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16: c_int = 1000156011;
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16: c_int = 1000156012;
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16: c_int = 1000156013;
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16: c_int = 1000156014;
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16: c_int = 1000156015;
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16: c_int = 1000156016;
pub const VK_FORMAT_R12X4_UNORM_PACK16: c_int = 1000156017;
pub const VK_FORMAT_R12X4G12X4_UNORM_2PACK16: c_int = 1000156018;
pub const VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16: c_int = 1000156019;
pub const VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16: c_int = 1000156020;
pub const VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16: c_int = 1000156021;
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16: c_int = 1000156022;
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16: c_int = 1000156023;
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16: c_int = 1000156024;
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16: c_int = 1000156025;
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16: c_int = 1000156026;
pub const VK_FORMAT_G16B16G16R16_422_UNORM: c_int = 1000156027;
pub const VK_FORMAT_B16G16R16G16_422_UNORM: c_int = 1000156028;
pub const VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM: c_int = 1000156029;
pub const VK_FORMAT_G16_B16R16_2PLANE_420_UNORM: c_int = 1000156030;
pub const VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM: c_int = 1000156031;
pub const VK_FORMAT_G16_B16R16_2PLANE_422_UNORM: c_int = 1000156032;
pub const VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM: c_int = 1000156033;
pub const VK_FORMAT_G8_B8R8_2PLANE_444_UNORM: c_int = 1000330000;
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16: c_int = 1000330001;
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16: c_int = 1000330002;
pub const VK_FORMAT_G16_B16R16_2PLANE_444_UNORM: c_int = 1000330003;
pub const VK_FORMAT_A4R4G4B4_UNORM_PACK16: c_int = 1000340000;
pub const VK_FORMAT_A4B4G4R4_UNORM_PACK16: c_int = 1000340001;
pub const VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK: c_int = 1000066000;
pub const VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK: c_int = 1000066001;
pub const VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK: c_int = 1000066002;
pub const VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK: c_int = 1000066003;
pub const VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK: c_int = 1000066004;
pub const VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK: c_int = 1000066005;
pub const VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK: c_int = 1000066006;
pub const VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK: c_int = 1000066007;
pub const VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK: c_int = 1000066008;
pub const VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK: c_int = 1000066009;
pub const VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK: c_int = 1000066010;
pub const VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK: c_int = 1000066011;
pub const VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK: c_int = 1000066012;
pub const VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK: c_int = 1000066013;
pub const VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG: c_int = 1000054000;
pub const VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG: c_int = 1000054001;
pub const VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG: c_int = 1000054002;
pub const VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG: c_int = 1000054003;
pub const VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG: c_int = 1000054004;
pub const VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG: c_int = 1000054005;
pub const VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG: c_int = 1000054006;
pub const VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG: c_int = 1000054007;
pub const VK_FORMAT_R16G16_SFIXED5_NV: c_int = 1000464000;
pub const VK_FORMAT_A1B5G5R5_UNORM_PACK16_KHR: c_int = 1000470000;
pub const VK_FORMAT_A8_UNORM_KHR: c_int = 1000470001;
pub const VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT: c_int = 1000066000;
pub const VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT: c_int = 1000066001;
pub const VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT: c_int = 1000066002;
pub const VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT: c_int = 1000066003;
pub const VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT: c_int = 1000066004;
pub const VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT: c_int = 1000066005;
pub const VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT: c_int = 1000066006;
pub const VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT: c_int = 1000066007;
pub const VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT: c_int = 1000066008;
pub const VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT: c_int = 1000066009;
pub const VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT: c_int = 1000066010;
pub const VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT: c_int = 1000066011;
pub const VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT: c_int = 1000066012;
pub const VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT: c_int = 1000066013;
pub const VK_FORMAT_G8B8G8R8_422_UNORM_KHR: c_int = 1000156000;
pub const VK_FORMAT_B8G8R8G8_422_UNORM_KHR: c_int = 1000156001;
pub const VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR: c_int = 1000156002;
pub const VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR: c_int = 1000156003;
pub const VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR: c_int = 1000156004;
pub const VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR: c_int = 1000156005;
pub const VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR: c_int = 1000156006;
pub const VK_FORMAT_R10X6_UNORM_PACK16_KHR: c_int = 1000156007;
pub const VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR: c_int = 1000156008;
pub const VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR: c_int = 1000156009;
pub const VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR: c_int = 1000156010;
pub const VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR: c_int = 1000156011;
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR: c_int = 1000156012;
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR: c_int = 1000156013;
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR: c_int = 1000156014;
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR: c_int = 1000156015;
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR: c_int = 1000156016;
pub const VK_FORMAT_R12X4_UNORM_PACK16_KHR: c_int = 1000156017;
pub const VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR: c_int = 1000156018;
pub const VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR: c_int = 1000156019;
pub const VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR: c_int = 1000156020;
pub const VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR: c_int = 1000156021;
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR: c_int = 1000156022;
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR: c_int = 1000156023;
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR: c_int = 1000156024;
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR: c_int = 1000156025;
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR: c_int = 1000156026;
pub const VK_FORMAT_G16B16G16R16_422_UNORM_KHR: c_int = 1000156027;
pub const VK_FORMAT_B16G16R16G16_422_UNORM_KHR: c_int = 1000156028;
pub const VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR: c_int = 1000156029;
pub const VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR: c_int = 1000156030;
pub const VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR: c_int = 1000156031;
pub const VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR: c_int = 1000156032;
pub const VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR: c_int = 1000156033;
pub const VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT: c_int = 1000330000;
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT: c_int = 1000330001;
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT: c_int = 1000330002;
pub const VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT: c_int = 1000330003;
pub const VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT: c_int = 1000340000;
pub const VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT: c_int = 1000340001;
pub const VK_FORMAT_R16G16_S10_5_NV: c_int = 1000464000;
pub const VK_FORMAT_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFormat = c_uint;
pub const VkFormat = enum_VkFormat;
pub const VK_IMAGE_TILING_OPTIMAL: c_int = 0;
pub const VK_IMAGE_TILING_LINEAR: c_int = 1;
pub const VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT: c_int = 1000158000;
pub const VK_IMAGE_TILING_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageTiling = c_uint;
pub const VkImageTiling = enum_VkImageTiling;
pub const VK_IMAGE_TYPE_1D: c_int = 0;
pub const VK_IMAGE_TYPE_2D: c_int = 1;
pub const VK_IMAGE_TYPE_3D: c_int = 2;
pub const VK_IMAGE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageType = c_uint;
pub const VkImageType = enum_VkImageType;
pub const VK_PHYSICAL_DEVICE_TYPE_OTHER: c_int = 0;
pub const VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU: c_int = 1;
pub const VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU: c_int = 2;
pub const VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU: c_int = 3;
pub const VK_PHYSICAL_DEVICE_TYPE_CPU: c_int = 4;
pub const VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPhysicalDeviceType = c_uint;
pub const VkPhysicalDeviceType = enum_VkPhysicalDeviceType;
pub const VK_QUERY_TYPE_OCCLUSION: c_int = 0;
pub const VK_QUERY_TYPE_PIPELINE_STATISTICS: c_int = 1;
pub const VK_QUERY_TYPE_TIMESTAMP: c_int = 2;
pub const VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR: c_int = 1000023000;
pub const VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT: c_int = 1000028004;
pub const VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR: c_int = 1000116000;
pub const VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR: c_int = 1000150000;
pub const VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR: c_int = 1000150001;
pub const VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV: c_int = 1000165000;
pub const VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL: c_int = 1000210000;
pub const VK_QUERY_TYPE_VIDEO_ENCODE_FEEDBACK_KHR: c_int = 1000299000;
pub const VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT: c_int = 1000328000;
pub const VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT: c_int = 1000382000;
pub const VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR: c_int = 1000386000;
pub const VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR: c_int = 1000386001;
pub const VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT: c_int = 1000396000;
pub const VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT: c_int = 1000396001;
pub const VK_QUERY_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkQueryType = c_uint;
pub const VkQueryType = enum_VkQueryType;
pub const VK_SHARING_MODE_EXCLUSIVE: c_int = 0;
pub const VK_SHARING_MODE_CONCURRENT: c_int = 1;
pub const VK_SHARING_MODE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSharingMode = c_uint;
pub const VkSharingMode = enum_VkSharingMode;
pub const VK_COMPONENT_SWIZZLE_IDENTITY: c_int = 0;
pub const VK_COMPONENT_SWIZZLE_ZERO: c_int = 1;
pub const VK_COMPONENT_SWIZZLE_ONE: c_int = 2;
pub const VK_COMPONENT_SWIZZLE_R: c_int = 3;
pub const VK_COMPONENT_SWIZZLE_G: c_int = 4;
pub const VK_COMPONENT_SWIZZLE_B: c_int = 5;
pub const VK_COMPONENT_SWIZZLE_A: c_int = 6;
pub const VK_COMPONENT_SWIZZLE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkComponentSwizzle = c_uint;
pub const VkComponentSwizzle = enum_VkComponentSwizzle;
pub const VK_IMAGE_VIEW_TYPE_1D: c_int = 0;
pub const VK_IMAGE_VIEW_TYPE_2D: c_int = 1;
pub const VK_IMAGE_VIEW_TYPE_3D: c_int = 2;
pub const VK_IMAGE_VIEW_TYPE_CUBE: c_int = 3;
pub const VK_IMAGE_VIEW_TYPE_1D_ARRAY: c_int = 4;
pub const VK_IMAGE_VIEW_TYPE_2D_ARRAY: c_int = 5;
pub const VK_IMAGE_VIEW_TYPE_CUBE_ARRAY: c_int = 6;
pub const VK_IMAGE_VIEW_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageViewType = c_uint;
pub const VkImageViewType = enum_VkImageViewType;
pub const VK_BLEND_FACTOR_ZERO: c_int = 0;
pub const VK_BLEND_FACTOR_ONE: c_int = 1;
pub const VK_BLEND_FACTOR_SRC_COLOR: c_int = 2;
pub const VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR: c_int = 3;
pub const VK_BLEND_FACTOR_DST_COLOR: c_int = 4;
pub const VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR: c_int = 5;
pub const VK_BLEND_FACTOR_SRC_ALPHA: c_int = 6;
pub const VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA: c_int = 7;
pub const VK_BLEND_FACTOR_DST_ALPHA: c_int = 8;
pub const VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA: c_int = 9;
pub const VK_BLEND_FACTOR_CONSTANT_COLOR: c_int = 10;
pub const VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR: c_int = 11;
pub const VK_BLEND_FACTOR_CONSTANT_ALPHA: c_int = 12;
pub const VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA: c_int = 13;
pub const VK_BLEND_FACTOR_SRC_ALPHA_SATURATE: c_int = 14;
pub const VK_BLEND_FACTOR_SRC1_COLOR: c_int = 15;
pub const VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR: c_int = 16;
pub const VK_BLEND_FACTOR_SRC1_ALPHA: c_int = 17;
pub const VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA: c_int = 18;
pub const VK_BLEND_FACTOR_MAX_ENUM: c_int = 2147483647;
pub const enum_VkBlendFactor = c_uint;
pub const VkBlendFactor = enum_VkBlendFactor;
pub const VK_BLEND_OP_ADD: c_int = 0;
pub const VK_BLEND_OP_SUBTRACT: c_int = 1;
pub const VK_BLEND_OP_REVERSE_SUBTRACT: c_int = 2;
pub const VK_BLEND_OP_MIN: c_int = 3;
pub const VK_BLEND_OP_MAX: c_int = 4;
pub const VK_BLEND_OP_ZERO_EXT: c_int = 1000148000;
pub const VK_BLEND_OP_SRC_EXT: c_int = 1000148001;
pub const VK_BLEND_OP_DST_EXT: c_int = 1000148002;
pub const VK_BLEND_OP_SRC_OVER_EXT: c_int = 1000148003;
pub const VK_BLEND_OP_DST_OVER_EXT: c_int = 1000148004;
pub const VK_BLEND_OP_SRC_IN_EXT: c_int = 1000148005;
pub const VK_BLEND_OP_DST_IN_EXT: c_int = 1000148006;
pub const VK_BLEND_OP_SRC_OUT_EXT: c_int = 1000148007;
pub const VK_BLEND_OP_DST_OUT_EXT: c_int = 1000148008;
pub const VK_BLEND_OP_SRC_ATOP_EXT: c_int = 1000148009;
pub const VK_BLEND_OP_DST_ATOP_EXT: c_int = 1000148010;
pub const VK_BLEND_OP_XOR_EXT: c_int = 1000148011;
pub const VK_BLEND_OP_MULTIPLY_EXT: c_int = 1000148012;
pub const VK_BLEND_OP_SCREEN_EXT: c_int = 1000148013;
pub const VK_BLEND_OP_OVERLAY_EXT: c_int = 1000148014;
pub const VK_BLEND_OP_DARKEN_EXT: c_int = 1000148015;
pub const VK_BLEND_OP_LIGHTEN_EXT: c_int = 1000148016;
pub const VK_BLEND_OP_COLORDODGE_EXT: c_int = 1000148017;
pub const VK_BLEND_OP_COLORBURN_EXT: c_int = 1000148018;
pub const VK_BLEND_OP_HARDLIGHT_EXT: c_int = 1000148019;
pub const VK_BLEND_OP_SOFTLIGHT_EXT: c_int = 1000148020;
pub const VK_BLEND_OP_DIFFERENCE_EXT: c_int = 1000148021;
pub const VK_BLEND_OP_EXCLUSION_EXT: c_int = 1000148022;
pub const VK_BLEND_OP_INVERT_EXT: c_int = 1000148023;
pub const VK_BLEND_OP_INVERT_RGB_EXT: c_int = 1000148024;
pub const VK_BLEND_OP_LINEARDODGE_EXT: c_int = 1000148025;
pub const VK_BLEND_OP_LINEARBURN_EXT: c_int = 1000148026;
pub const VK_BLEND_OP_VIVIDLIGHT_EXT: c_int = 1000148027;
pub const VK_BLEND_OP_LINEARLIGHT_EXT: c_int = 1000148028;
pub const VK_BLEND_OP_PINLIGHT_EXT: c_int = 1000148029;
pub const VK_BLEND_OP_HARDMIX_EXT: c_int = 1000148030;
pub const VK_BLEND_OP_HSL_HUE_EXT: c_int = 1000148031;
pub const VK_BLEND_OP_HSL_SATURATION_EXT: c_int = 1000148032;
pub const VK_BLEND_OP_HSL_COLOR_EXT: c_int = 1000148033;
pub const VK_BLEND_OP_HSL_LUMINOSITY_EXT: c_int = 1000148034;
pub const VK_BLEND_OP_PLUS_EXT: c_int = 1000148035;
pub const VK_BLEND_OP_PLUS_CLAMPED_EXT: c_int = 1000148036;
pub const VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT: c_int = 1000148037;
pub const VK_BLEND_OP_PLUS_DARKER_EXT: c_int = 1000148038;
pub const VK_BLEND_OP_MINUS_EXT: c_int = 1000148039;
pub const VK_BLEND_OP_MINUS_CLAMPED_EXT: c_int = 1000148040;
pub const VK_BLEND_OP_CONTRAST_EXT: c_int = 1000148041;
pub const VK_BLEND_OP_INVERT_OVG_EXT: c_int = 1000148042;
pub const VK_BLEND_OP_RED_EXT: c_int = 1000148043;
pub const VK_BLEND_OP_GREEN_EXT: c_int = 1000148044;
pub const VK_BLEND_OP_BLUE_EXT: c_int = 1000148045;
pub const VK_BLEND_OP_MAX_ENUM: c_int = 2147483647;
pub const enum_VkBlendOp = c_uint;
pub const VkBlendOp = enum_VkBlendOp;
pub const VK_COMPARE_OP_NEVER: c_int = 0;
pub const VK_COMPARE_OP_LESS: c_int = 1;
pub const VK_COMPARE_OP_EQUAL: c_int = 2;
pub const VK_COMPARE_OP_LESS_OR_EQUAL: c_int = 3;
pub const VK_COMPARE_OP_GREATER: c_int = 4;
pub const VK_COMPARE_OP_NOT_EQUAL: c_int = 5;
pub const VK_COMPARE_OP_GREATER_OR_EQUAL: c_int = 6;
pub const VK_COMPARE_OP_ALWAYS: c_int = 7;
pub const VK_COMPARE_OP_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCompareOp = c_uint;
pub const VkCompareOp = enum_VkCompareOp;
pub const VK_DYNAMIC_STATE_VIEWPORT: c_int = 0;
pub const VK_DYNAMIC_STATE_SCISSOR: c_int = 1;
pub const VK_DYNAMIC_STATE_LINE_WIDTH: c_int = 2;
pub const VK_DYNAMIC_STATE_DEPTH_BIAS: c_int = 3;
pub const VK_DYNAMIC_STATE_BLEND_CONSTANTS: c_int = 4;
pub const VK_DYNAMIC_STATE_DEPTH_BOUNDS: c_int = 5;
pub const VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK: c_int = 6;
pub const VK_DYNAMIC_STATE_STENCIL_WRITE_MASK: c_int = 7;
pub const VK_DYNAMIC_STATE_STENCIL_REFERENCE: c_int = 8;
pub const VK_DYNAMIC_STATE_CULL_MODE: c_int = 1000267000;
pub const VK_DYNAMIC_STATE_FRONT_FACE: c_int = 1000267001;
pub const VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY: c_int = 1000267002;
pub const VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT: c_int = 1000267003;
pub const VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT: c_int = 1000267004;
pub const VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE: c_int = 1000267005;
pub const VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE: c_int = 1000267006;
pub const VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE: c_int = 1000267007;
pub const VK_DYNAMIC_STATE_DEPTH_COMPARE_OP: c_int = 1000267008;
pub const VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE: c_int = 1000267009;
pub const VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE: c_int = 1000267010;
pub const VK_DYNAMIC_STATE_STENCIL_OP: c_int = 1000267011;
pub const VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE: c_int = 1000377001;
pub const VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE: c_int = 1000377002;
pub const VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE: c_int = 1000377004;
pub const VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV: c_int = 1000087000;
pub const VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT: c_int = 1000099000;
pub const VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT: c_int = 1000099001;
pub const VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT: c_int = 1000099002;
pub const VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT: c_int = 1000143000;
pub const VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR: c_int = 1000347000;
pub const VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV: c_int = 1000164004;
pub const VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV: c_int = 1000164006;
pub const VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV: c_int = 1000205000;
pub const VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV: c_int = 1000205001;
pub const VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR: c_int = 1000226000;
pub const VK_DYNAMIC_STATE_VERTEX_INPUT_EXT: c_int = 1000352000;
pub const VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT: c_int = 1000377000;
pub const VK_DYNAMIC_STATE_LOGIC_OP_EXT: c_int = 1000377003;
pub const VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT: c_int = 1000381000;
pub const VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT: c_int = 1000455003;
pub const VK_DYNAMIC_STATE_POLYGON_MODE_EXT: c_int = 1000455004;
pub const VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT: c_int = 1000455005;
pub const VK_DYNAMIC_STATE_SAMPLE_MASK_EXT: c_int = 1000455006;
pub const VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT: c_int = 1000455007;
pub const VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT: c_int = 1000455008;
pub const VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT: c_int = 1000455009;
pub const VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT: c_int = 1000455010;
pub const VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT: c_int = 1000455011;
pub const VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT: c_int = 1000455012;
pub const VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT: c_int = 1000455002;
pub const VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT: c_int = 1000455013;
pub const VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT: c_int = 1000455014;
pub const VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT: c_int = 1000455015;
pub const VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT: c_int = 1000455016;
pub const VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT: c_int = 1000455017;
pub const VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT: c_int = 1000455018;
pub const VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT: c_int = 1000455019;
pub const VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT: c_int = 1000455020;
pub const VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT: c_int = 1000455021;
pub const VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT: c_int = 1000455022;
pub const VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV: c_int = 1000455023;
pub const VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV: c_int = 1000455024;
pub const VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV: c_int = 1000455025;
pub const VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV: c_int = 1000455026;
pub const VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV: c_int = 1000455027;
pub const VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV: c_int = 1000455028;
pub const VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV: c_int = 1000455029;
pub const VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV: c_int = 1000455030;
pub const VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV: c_int = 1000455031;
pub const VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV: c_int = 1000455032;
pub const VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT: c_int = 1000524000;
pub const VK_DYNAMIC_STATE_LINE_STIPPLE_KHR: c_int = 1000259000;
pub const VK_DYNAMIC_STATE_LINE_STIPPLE_EXT: c_int = 1000259000;
pub const VK_DYNAMIC_STATE_CULL_MODE_EXT: c_int = 1000267000;
pub const VK_DYNAMIC_STATE_FRONT_FACE_EXT: c_int = 1000267001;
pub const VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT: c_int = 1000267002;
pub const VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT: c_int = 1000267003;
pub const VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT: c_int = 1000267004;
pub const VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT: c_int = 1000267005;
pub const VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT: c_int = 1000267006;
pub const VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT: c_int = 1000267007;
pub const VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT: c_int = 1000267008;
pub const VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT: c_int = 1000267009;
pub const VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT: c_int = 1000267010;
pub const VK_DYNAMIC_STATE_STENCIL_OP_EXT: c_int = 1000267011;
pub const VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT: c_int = 1000377001;
pub const VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT: c_int = 1000377002;
pub const VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT: c_int = 1000377004;
pub const VK_DYNAMIC_STATE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDynamicState = c_uint;
pub const VkDynamicState = enum_VkDynamicState;
pub const VK_FRONT_FACE_COUNTER_CLOCKWISE: c_int = 0;
pub const VK_FRONT_FACE_CLOCKWISE: c_int = 1;
pub const VK_FRONT_FACE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFrontFace = c_uint;
pub const VkFrontFace = enum_VkFrontFace;
pub const VK_VERTEX_INPUT_RATE_VERTEX: c_int = 0;
pub const VK_VERTEX_INPUT_RATE_INSTANCE: c_int = 1;
pub const VK_VERTEX_INPUT_RATE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkVertexInputRate = c_uint;
pub const VkVertexInputRate = enum_VkVertexInputRate;
pub const VK_PRIMITIVE_TOPOLOGY_POINT_LIST: c_int = 0;
pub const VK_PRIMITIVE_TOPOLOGY_LINE_LIST: c_int = 1;
pub const VK_PRIMITIVE_TOPOLOGY_LINE_STRIP: c_int = 2;
pub const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST: c_int = 3;
pub const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP: c_int = 4;
pub const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN: c_int = 5;
pub const VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY: c_int = 6;
pub const VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY: c_int = 7;
pub const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY: c_int = 8;
pub const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY: c_int = 9;
pub const VK_PRIMITIVE_TOPOLOGY_PATCH_LIST: c_int = 10;
pub const VK_PRIMITIVE_TOPOLOGY_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPrimitiveTopology = c_uint;
pub const VkPrimitiveTopology = enum_VkPrimitiveTopology;
pub const VK_POLYGON_MODE_FILL: c_int = 0;
pub const VK_POLYGON_MODE_LINE: c_int = 1;
pub const VK_POLYGON_MODE_POINT: c_int = 2;
pub const VK_POLYGON_MODE_FILL_RECTANGLE_NV: c_int = 1000153000;
pub const VK_POLYGON_MODE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPolygonMode = c_uint;
pub const VkPolygonMode = enum_VkPolygonMode;
pub const VK_STENCIL_OP_KEEP: c_int = 0;
pub const VK_STENCIL_OP_ZERO: c_int = 1;
pub const VK_STENCIL_OP_REPLACE: c_int = 2;
pub const VK_STENCIL_OP_INCREMENT_AND_CLAMP: c_int = 3;
pub const VK_STENCIL_OP_DECREMENT_AND_CLAMP: c_int = 4;
pub const VK_STENCIL_OP_INVERT: c_int = 5;
pub const VK_STENCIL_OP_INCREMENT_AND_WRAP: c_int = 6;
pub const VK_STENCIL_OP_DECREMENT_AND_WRAP: c_int = 7;
pub const VK_STENCIL_OP_MAX_ENUM: c_int = 2147483647;
pub const enum_VkStencilOp = c_uint;
pub const VkStencilOp = enum_VkStencilOp;
pub const VK_LOGIC_OP_CLEAR: c_int = 0;
pub const VK_LOGIC_OP_AND: c_int = 1;
pub const VK_LOGIC_OP_AND_REVERSE: c_int = 2;
pub const VK_LOGIC_OP_COPY: c_int = 3;
pub const VK_LOGIC_OP_AND_INVERTED: c_int = 4;
pub const VK_LOGIC_OP_NO_OP: c_int = 5;
pub const VK_LOGIC_OP_XOR: c_int = 6;
pub const VK_LOGIC_OP_OR: c_int = 7;
pub const VK_LOGIC_OP_NOR: c_int = 8;
pub const VK_LOGIC_OP_EQUIVALENT: c_int = 9;
pub const VK_LOGIC_OP_INVERT: c_int = 10;
pub const VK_LOGIC_OP_OR_REVERSE: c_int = 11;
pub const VK_LOGIC_OP_COPY_INVERTED: c_int = 12;
pub const VK_LOGIC_OP_OR_INVERTED: c_int = 13;
pub const VK_LOGIC_OP_NAND: c_int = 14;
pub const VK_LOGIC_OP_SET: c_int = 15;
pub const VK_LOGIC_OP_MAX_ENUM: c_int = 2147483647;
pub const enum_VkLogicOp = c_uint;
pub const VkLogicOp = enum_VkLogicOp;
pub const VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK: c_int = 0;
pub const VK_BORDER_COLOR_INT_TRANSPARENT_BLACK: c_int = 1;
pub const VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK: c_int = 2;
pub const VK_BORDER_COLOR_INT_OPAQUE_BLACK: c_int = 3;
pub const VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE: c_int = 4;
pub const VK_BORDER_COLOR_INT_OPAQUE_WHITE: c_int = 5;
pub const VK_BORDER_COLOR_FLOAT_CUSTOM_EXT: c_int = 1000287003;
pub const VK_BORDER_COLOR_INT_CUSTOM_EXT: c_int = 1000287004;
pub const VK_BORDER_COLOR_MAX_ENUM: c_int = 2147483647;
pub const enum_VkBorderColor = c_uint;
pub const VkBorderColor = enum_VkBorderColor;
pub const VK_FILTER_NEAREST: c_int = 0;
pub const VK_FILTER_LINEAR: c_int = 1;
pub const VK_FILTER_CUBIC_EXT: c_int = 1000015000;
pub const VK_FILTER_CUBIC_IMG: c_int = 1000015000;
pub const VK_FILTER_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFilter = c_uint;
pub const VkFilter = enum_VkFilter;
pub const VK_SAMPLER_ADDRESS_MODE_REPEAT: c_int = 0;
pub const VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT: c_int = 1;
pub const VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE: c_int = 2;
pub const VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER: c_int = 3;
pub const VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE: c_int = 4;
pub const VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR: c_int = 4;
pub const VK_SAMPLER_ADDRESS_MODE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSamplerAddressMode = c_uint;
pub const VkSamplerAddressMode = enum_VkSamplerAddressMode;
pub const VK_SAMPLER_MIPMAP_MODE_NEAREST: c_int = 0;
pub const VK_SAMPLER_MIPMAP_MODE_LINEAR: c_int = 1;
pub const VK_SAMPLER_MIPMAP_MODE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSamplerMipmapMode = c_uint;
pub const VkSamplerMipmapMode = enum_VkSamplerMipmapMode;
pub const VK_DESCRIPTOR_TYPE_SAMPLER: c_int = 0;
pub const VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER: c_int = 1;
pub const VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE: c_int = 2;
pub const VK_DESCRIPTOR_TYPE_STORAGE_IMAGE: c_int = 3;
pub const VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER: c_int = 4;
pub const VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER: c_int = 5;
pub const VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER: c_int = 6;
pub const VK_DESCRIPTOR_TYPE_STORAGE_BUFFER: c_int = 7;
pub const VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC: c_int = 8;
pub const VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC: c_int = 9;
pub const VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT: c_int = 10;
pub const VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK: c_int = 1000138000;
pub const VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR: c_int = 1000150000;
pub const VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV: c_int = 1000165000;
pub const VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM: c_int = 1000440000;
pub const VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM: c_int = 1000440001;
pub const VK_DESCRIPTOR_TYPE_MUTABLE_EXT: c_int = 1000351000;
pub const VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT: c_int = 1000138000;
pub const VK_DESCRIPTOR_TYPE_MUTABLE_VALVE: c_int = 1000351000;
pub const VK_DESCRIPTOR_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDescriptorType = c_uint;
pub const VkDescriptorType = enum_VkDescriptorType;
pub const VK_ATTACHMENT_LOAD_OP_LOAD: c_int = 0;
pub const VK_ATTACHMENT_LOAD_OP_CLEAR: c_int = 1;
pub const VK_ATTACHMENT_LOAD_OP_DONT_CARE: c_int = 2;
pub const VK_ATTACHMENT_LOAD_OP_NONE_KHR: c_int = 1000400000;
pub const VK_ATTACHMENT_LOAD_OP_NONE_EXT: c_int = 1000400000;
pub const VK_ATTACHMENT_LOAD_OP_MAX_ENUM: c_int = 2147483647;
pub const enum_VkAttachmentLoadOp = c_uint;
pub const VkAttachmentLoadOp = enum_VkAttachmentLoadOp;
pub const VK_ATTACHMENT_STORE_OP_STORE: c_int = 0;
pub const VK_ATTACHMENT_STORE_OP_DONT_CARE: c_int = 1;
pub const VK_ATTACHMENT_STORE_OP_NONE: c_int = 1000301000;
pub const VK_ATTACHMENT_STORE_OP_NONE_KHR: c_int = 1000301000;
pub const VK_ATTACHMENT_STORE_OP_NONE_QCOM: c_int = 1000301000;
pub const VK_ATTACHMENT_STORE_OP_NONE_EXT: c_int = 1000301000;
pub const VK_ATTACHMENT_STORE_OP_MAX_ENUM: c_int = 2147483647;
pub const enum_VkAttachmentStoreOp = c_uint;
pub const VkAttachmentStoreOp = enum_VkAttachmentStoreOp;
pub const VK_PIPELINE_BIND_POINT_GRAPHICS: c_int = 0;
pub const VK_PIPELINE_BIND_POINT_COMPUTE: c_int = 1;
pub const VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR: c_int = 1000165000;
pub const VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI: c_int = 1000369003;
pub const VK_PIPELINE_BIND_POINT_RAY_TRACING_NV: c_int = 1000165000;
pub const VK_PIPELINE_BIND_POINT_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineBindPoint = c_uint;
pub const VkPipelineBindPoint = enum_VkPipelineBindPoint;
pub const VK_COMMAND_BUFFER_LEVEL_PRIMARY: c_int = 0;
pub const VK_COMMAND_BUFFER_LEVEL_SECONDARY: c_int = 1;
pub const VK_COMMAND_BUFFER_LEVEL_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCommandBufferLevel = c_uint;
pub const VkCommandBufferLevel = enum_VkCommandBufferLevel;
pub const VK_INDEX_TYPE_UINT16: c_int = 0;
pub const VK_INDEX_TYPE_UINT32: c_int = 1;
pub const VK_INDEX_TYPE_NONE_KHR: c_int = 1000165000;
pub const VK_INDEX_TYPE_UINT8_KHR: c_int = 1000265000;
pub const VK_INDEX_TYPE_NONE_NV: c_int = 1000165000;
pub const VK_INDEX_TYPE_UINT8_EXT: c_int = 1000265000;
pub const VK_INDEX_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkIndexType = c_uint;
pub const VkIndexType = enum_VkIndexType;
pub const VK_SUBPASS_CONTENTS_INLINE: c_int = 0;
pub const VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS: c_int = 1;
pub const VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_EXT: c_int = 1000451000;
pub const VK_SUBPASS_CONTENTS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSubpassContents = c_uint;
pub const VkSubpassContents = enum_VkSubpassContents;
pub const VK_ACCESS_INDIRECT_COMMAND_READ_BIT: c_int = 1;
pub const VK_ACCESS_INDEX_READ_BIT: c_int = 2;
pub const VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT: c_int = 4;
pub const VK_ACCESS_UNIFORM_READ_BIT: c_int = 8;
pub const VK_ACCESS_INPUT_ATTACHMENT_READ_BIT: c_int = 16;
pub const VK_ACCESS_SHADER_READ_BIT: c_int = 32;
pub const VK_ACCESS_SHADER_WRITE_BIT: c_int = 64;
pub const VK_ACCESS_COLOR_ATTACHMENT_READ_BIT: c_int = 128;
pub const VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT: c_int = 256;
pub const VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT: c_int = 512;
pub const VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT: c_int = 1024;
pub const VK_ACCESS_TRANSFER_READ_BIT: c_int = 2048;
pub const VK_ACCESS_TRANSFER_WRITE_BIT: c_int = 4096;
pub const VK_ACCESS_HOST_READ_BIT: c_int = 8192;
pub const VK_ACCESS_HOST_WRITE_BIT: c_int = 16384;
pub const VK_ACCESS_MEMORY_READ_BIT: c_int = 32768;
pub const VK_ACCESS_MEMORY_WRITE_BIT: c_int = 65536;
pub const VK_ACCESS_NONE: c_int = 0;
pub const VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT: c_int = 33554432;
pub const VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT: c_int = 67108864;
pub const VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT: c_int = 134217728;
pub const VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT: c_int = 1048576;
pub const VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT: c_int = 524288;
pub const VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR: c_int = 2097152;
pub const VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR: c_int = 4194304;
pub const VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT: c_int = 16777216;
pub const VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR: c_int = 8388608;
pub const VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV: c_int = 131072;
pub const VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV: c_int = 262144;
pub const VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV: c_int = 8388608;
pub const VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV: c_int = 2097152;
pub const VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV: c_int = 4194304;
pub const VK_ACCESS_NONE_KHR: c_int = 0;
pub const VK_ACCESS_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkAccessFlagBits = c_uint;
pub const VkAccessFlagBits = enum_VkAccessFlagBits;
pub const VkAccessFlags = VkFlags;
pub const VK_IMAGE_ASPECT_COLOR_BIT: c_int = 1;
pub const VK_IMAGE_ASPECT_DEPTH_BIT: c_int = 2;
pub const VK_IMAGE_ASPECT_STENCIL_BIT: c_int = 4;
pub const VK_IMAGE_ASPECT_METADATA_BIT: c_int = 8;
pub const VK_IMAGE_ASPECT_PLANE_0_BIT: c_int = 16;
pub const VK_IMAGE_ASPECT_PLANE_1_BIT: c_int = 32;
pub const VK_IMAGE_ASPECT_PLANE_2_BIT: c_int = 64;
pub const VK_IMAGE_ASPECT_NONE: c_int = 0;
pub const VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT: c_int = 128;
pub const VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT: c_int = 256;
pub const VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT: c_int = 512;
pub const VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT: c_int = 1024;
pub const VK_IMAGE_ASPECT_PLANE_0_BIT_KHR: c_int = 16;
pub const VK_IMAGE_ASPECT_PLANE_1_BIT_KHR: c_int = 32;
pub const VK_IMAGE_ASPECT_PLANE_2_BIT_KHR: c_int = 64;
pub const VK_IMAGE_ASPECT_NONE_KHR: c_int = 0;
pub const VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageAspectFlagBits = c_uint;
pub const VkImageAspectFlagBits = enum_VkImageAspectFlagBits;
pub const VkImageAspectFlags = VkFlags;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT: c_int = 1;
pub const VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT: c_int = 2;
pub const VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT: c_int = 4;
pub const VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT: c_int = 8;
pub const VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT: c_int = 16;
pub const VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT: c_int = 32;
pub const VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT: c_int = 64;
pub const VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT: c_int = 128;
pub const VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT: c_int = 256;
pub const VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT: c_int = 512;
pub const VK_FORMAT_FEATURE_BLIT_SRC_BIT: c_int = 1024;
pub const VK_FORMAT_FEATURE_BLIT_DST_BIT: c_int = 2048;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT: c_int = 4096;
pub const VK_FORMAT_FEATURE_TRANSFER_SRC_BIT: c_int = 16384;
pub const VK_FORMAT_FEATURE_TRANSFER_DST_BIT: c_int = 32768;
pub const VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT: c_int = 131072;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT: c_int = 262144;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT: c_int = 524288;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT: c_int = 1048576;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT: c_int = 2097152;
pub const VK_FORMAT_FEATURE_DISJOINT_BIT: c_int = 4194304;
pub const VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT: c_int = 8388608;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT: c_int = 65536;
pub const VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR: c_int = 33554432;
pub const VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR: c_int = 67108864;
pub const VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR: c_int = 536870912;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT: c_int = 8192;
pub const VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT: c_int = 16777216;
pub const VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: c_int = 1073741824;
pub const VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR: c_int = 134217728;
pub const VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR: c_int = 268435456;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG: c_int = 8192;
pub const VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR: c_int = 16384;
pub const VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR: c_int = 32768;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT: c_int = 65536;
pub const VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR: c_int = 131072;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR: c_int = 262144;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR: c_int = 524288;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR: c_int = 1048576;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR: c_int = 2097152;
pub const VK_FORMAT_FEATURE_DISJOINT_BIT_KHR: c_int = 4194304;
pub const VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR: c_int = 8388608;
pub const VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFormatFeatureFlagBits = c_uint;
pub const VkFormatFeatureFlagBits = enum_VkFormatFeatureFlagBits;
pub const VkFormatFeatureFlags = VkFlags;
pub const VK_IMAGE_CREATE_SPARSE_BINDING_BIT: c_int = 1;
pub const VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT: c_int = 2;
pub const VK_IMAGE_CREATE_SPARSE_ALIASED_BIT: c_int = 4;
pub const VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT: c_int = 8;
pub const VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT: c_int = 16;
pub const VK_IMAGE_CREATE_ALIAS_BIT: c_int = 1024;
pub const VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT: c_int = 64;
pub const VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT: c_int = 32;
pub const VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT: c_int = 128;
pub const VK_IMAGE_CREATE_EXTENDED_USAGE_BIT: c_int = 256;
pub const VK_IMAGE_CREATE_PROTECTED_BIT: c_int = 2048;
pub const VK_IMAGE_CREATE_DISJOINT_BIT: c_int = 512;
pub const VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV: c_int = 8192;
pub const VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT: c_int = 4096;
pub const VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT: c_int = 16384;
pub const VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT: c_int = 65536;
pub const VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT: c_int = 262144;
pub const VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT: c_int = 131072;
pub const VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM: c_int = 32768;
pub const VK_IMAGE_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR: c_int = 1048576;
pub const VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR: c_int = 64;
pub const VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR: c_int = 32;
pub const VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR: c_int = 128;
pub const VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR: c_int = 256;
pub const VK_IMAGE_CREATE_DISJOINT_BIT_KHR: c_int = 512;
pub const VK_IMAGE_CREATE_ALIAS_BIT_KHR: c_int = 1024;
pub const VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageCreateFlagBits = c_uint;
pub const VkImageCreateFlagBits = enum_VkImageCreateFlagBits;
pub const VkImageCreateFlags = VkFlags;
pub const VK_SAMPLE_COUNT_1_BIT: c_int = 1;
pub const VK_SAMPLE_COUNT_2_BIT: c_int = 2;
pub const VK_SAMPLE_COUNT_4_BIT: c_int = 4;
pub const VK_SAMPLE_COUNT_8_BIT: c_int = 8;
pub const VK_SAMPLE_COUNT_16_BIT: c_int = 16;
pub const VK_SAMPLE_COUNT_32_BIT: c_int = 32;
pub const VK_SAMPLE_COUNT_64_BIT: c_int = 64;
pub const VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSampleCountFlagBits = c_uint;
pub const VkSampleCountFlagBits = enum_VkSampleCountFlagBits;
pub const VkSampleCountFlags = VkFlags;
pub const VK_IMAGE_USAGE_TRANSFER_SRC_BIT: c_int = 1;
pub const VK_IMAGE_USAGE_TRANSFER_DST_BIT: c_int = 2;
pub const VK_IMAGE_USAGE_SAMPLED_BIT: c_int = 4;
pub const VK_IMAGE_USAGE_STORAGE_BIT: c_int = 8;
pub const VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT: c_int = 16;
pub const VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT: c_int = 32;
pub const VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT: c_int = 64;
pub const VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT: c_int = 128;
pub const VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR: c_int = 1024;
pub const VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR: c_int = 2048;
pub const VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR: c_int = 4096;
pub const VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT: c_int = 512;
pub const VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: c_int = 256;
pub const VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT: c_int = 4194304;
pub const VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR: c_int = 8192;
pub const VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR: c_int = 16384;
pub const VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR: c_int = 32768;
pub const VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT: c_int = 524288;
pub const VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI: c_int = 262144;
pub const VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM: c_int = 1048576;
pub const VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM: c_int = 2097152;
pub const VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV: c_int = 256;
pub const VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageUsageFlagBits = c_uint;
pub const VkImageUsageFlagBits = enum_VkImageUsageFlagBits;
pub const VkImageUsageFlags = VkFlags;
pub const VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR: c_int = 1;
pub const VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkInstanceCreateFlagBits = c_uint;
pub const VkInstanceCreateFlagBits = enum_VkInstanceCreateFlagBits;
pub const VkInstanceCreateFlags = VkFlags;
pub const VK_MEMORY_HEAP_DEVICE_LOCAL_BIT: c_int = 1;
pub const VK_MEMORY_HEAP_MULTI_INSTANCE_BIT: c_int = 2;
pub const VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR: c_int = 2;
pub const VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkMemoryHeapFlagBits = c_uint;
pub const VkMemoryHeapFlagBits = enum_VkMemoryHeapFlagBits;
pub const VkMemoryHeapFlags = VkFlags;
pub const VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT: c_int = 1;
pub const VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT: c_int = 2;
pub const VK_MEMORY_PROPERTY_HOST_COHERENT_BIT: c_int = 4;
pub const VK_MEMORY_PROPERTY_HOST_CACHED_BIT: c_int = 8;
pub const VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT: c_int = 16;
pub const VK_MEMORY_PROPERTY_PROTECTED_BIT: c_int = 32;
pub const VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD: c_int = 64;
pub const VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD: c_int = 128;
pub const VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV: c_int = 256;
pub const VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkMemoryPropertyFlagBits = c_uint;
pub const VkMemoryPropertyFlagBits = enum_VkMemoryPropertyFlagBits;
pub const VkMemoryPropertyFlags = VkFlags;
pub const VK_QUEUE_GRAPHICS_BIT: c_int = 1;
pub const VK_QUEUE_COMPUTE_BIT: c_int = 2;
pub const VK_QUEUE_TRANSFER_BIT: c_int = 4;
pub const VK_QUEUE_SPARSE_BINDING_BIT: c_int = 8;
pub const VK_QUEUE_PROTECTED_BIT: c_int = 16;
pub const VK_QUEUE_VIDEO_DECODE_BIT_KHR: c_int = 32;
pub const VK_QUEUE_VIDEO_ENCODE_BIT_KHR: c_int = 64;
pub const VK_QUEUE_OPTICAL_FLOW_BIT_NV: c_int = 256;
pub const VK_QUEUE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkQueueFlagBits = c_uint;
pub const VkQueueFlagBits = enum_VkQueueFlagBits;
pub const VkQueueFlags = VkFlags;
pub const VkDeviceCreateFlags = VkFlags;
pub const VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT: c_int = 1;
pub const VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDeviceQueueCreateFlagBits = c_uint;
pub const VkDeviceQueueCreateFlagBits = enum_VkDeviceQueueCreateFlagBits;
pub const VkDeviceQueueCreateFlags = VkFlags;
pub const VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT: c_int = 1;
pub const VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT: c_int = 2;
pub const VK_PIPELINE_STAGE_VERTEX_INPUT_BIT: c_int = 4;
pub const VK_PIPELINE_STAGE_VERTEX_SHADER_BIT: c_int = 8;
pub const VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT: c_int = 16;
pub const VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT: c_int = 32;
pub const VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT: c_int = 64;
pub const VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT: c_int = 128;
pub const VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT: c_int = 256;
pub const VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT: c_int = 512;
pub const VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT: c_int = 1024;
pub const VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT: c_int = 2048;
pub const VK_PIPELINE_STAGE_TRANSFER_BIT: c_int = 4096;
pub const VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT: c_int = 8192;
pub const VK_PIPELINE_STAGE_HOST_BIT: c_int = 16384;
pub const VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT: c_int = 32768;
pub const VK_PIPELINE_STAGE_ALL_COMMANDS_BIT: c_int = 65536;
pub const VK_PIPELINE_STAGE_NONE: c_int = 0;
pub const VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT: c_int = 16777216;
pub const VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT: c_int = 262144;
pub const VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR: c_int = 33554432;
pub const VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR: c_int = 2097152;
pub const VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT: c_int = 8388608;
pub const VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: c_int = 4194304;
pub const VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV: c_int = 131072;
pub const VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT: c_int = 524288;
pub const VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT: c_int = 1048576;
pub const VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV: c_int = 4194304;
pub const VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV: c_int = 2097152;
pub const VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV: c_int = 33554432;
pub const VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV: c_int = 524288;
pub const VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV: c_int = 1048576;
pub const VK_PIPELINE_STAGE_NONE_KHR: c_int = 0;
pub const VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineStageFlagBits = c_uint;
pub const VkPipelineStageFlagBits = enum_VkPipelineStageFlagBits;
pub const VkPipelineStageFlags = VkFlags;
pub const VK_MEMORY_MAP_PLACED_BIT_EXT: c_int = 1;
pub const VK_MEMORY_MAP_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkMemoryMapFlagBits = c_uint;
pub const VkMemoryMapFlagBits = enum_VkMemoryMapFlagBits;
pub const VkMemoryMapFlags = VkFlags;
pub const VK_SPARSE_MEMORY_BIND_METADATA_BIT: c_int = 1;
pub const VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSparseMemoryBindFlagBits = c_uint;
pub const VkSparseMemoryBindFlagBits = enum_VkSparseMemoryBindFlagBits;
pub const VkSparseMemoryBindFlags = VkFlags;
pub const VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT: c_int = 1;
pub const VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT: c_int = 2;
pub const VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT: c_int = 4;
pub const VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSparseImageFormatFlagBits = c_uint;
pub const VkSparseImageFormatFlagBits = enum_VkSparseImageFormatFlagBits;
pub const VkSparseImageFormatFlags = VkFlags;
pub const VK_FENCE_CREATE_SIGNALED_BIT: c_int = 1;
pub const VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFenceCreateFlagBits = c_uint;
pub const VkFenceCreateFlagBits = enum_VkFenceCreateFlagBits;
pub const VkFenceCreateFlags = VkFlags;
pub const VkSemaphoreCreateFlags = VkFlags;
pub const VK_EVENT_CREATE_DEVICE_ONLY_BIT: c_int = 1;
pub const VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR: c_int = 1;
pub const VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkEventCreateFlagBits = c_uint;
pub const VkEventCreateFlagBits = enum_VkEventCreateFlagBits;
pub const VkEventCreateFlags = VkFlags;
pub const VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT: c_int = 1;
pub const VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT: c_int = 2;
pub const VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT: c_int = 4;
pub const VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT: c_int = 8;
pub const VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT: c_int = 16;
pub const VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT: c_int = 32;
pub const VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT: c_int = 64;
pub const VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT: c_int = 128;
pub const VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT: c_int = 256;
pub const VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT: c_int = 512;
pub const VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT: c_int = 1024;
pub const VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT: c_int = 2048;
pub const VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT: c_int = 4096;
pub const VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI: c_int = 8192;
pub const VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkQueryPipelineStatisticFlagBits = c_uint;
pub const VkQueryPipelineStatisticFlagBits = enum_VkQueryPipelineStatisticFlagBits;
pub const VkQueryPipelineStatisticFlags = VkFlags;
pub const VkQueryPoolCreateFlags = VkFlags;
pub const VK_QUERY_RESULT_64_BIT: c_int = 1;
pub const VK_QUERY_RESULT_WAIT_BIT: c_int = 2;
pub const VK_QUERY_RESULT_WITH_AVAILABILITY_BIT: c_int = 4;
pub const VK_QUERY_RESULT_PARTIAL_BIT: c_int = 8;
pub const VK_QUERY_RESULT_WITH_STATUS_BIT_KHR: c_int = 16;
pub const VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkQueryResultFlagBits = c_uint;
pub const VkQueryResultFlagBits = enum_VkQueryResultFlagBits;
pub const VkQueryResultFlags = VkFlags;
pub const VK_BUFFER_CREATE_SPARSE_BINDING_BIT: c_int = 1;
pub const VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT: c_int = 2;
pub const VK_BUFFER_CREATE_SPARSE_ALIASED_BIT: c_int = 4;
pub const VK_BUFFER_CREATE_PROTECTED_BIT: c_int = 8;
pub const VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT: c_int = 16;
pub const VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT: c_int = 32;
pub const VK_BUFFER_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR: c_int = 64;
pub const VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT: c_int = 16;
pub const VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR: c_int = 16;
pub const VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkBufferCreateFlagBits = c_uint;
pub const VkBufferCreateFlagBits = enum_VkBufferCreateFlagBits;
pub const VkBufferCreateFlags = VkFlags;
pub const VK_BUFFER_USAGE_TRANSFER_SRC_BIT: c_int = 1;
pub const VK_BUFFER_USAGE_TRANSFER_DST_BIT: c_int = 2;
pub const VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT: c_int = 4;
pub const VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT: c_int = 8;
pub const VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT: c_int = 16;
pub const VK_BUFFER_USAGE_STORAGE_BUFFER_BIT: c_int = 32;
pub const VK_BUFFER_USAGE_INDEX_BUFFER_BIT: c_int = 64;
pub const VK_BUFFER_USAGE_VERTEX_BUFFER_BIT: c_int = 128;
pub const VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT: c_int = 256;
pub const VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT: c_int = 131072;
pub const VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR: c_int = 8192;
pub const VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR: c_int = 16384;
pub const VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT: c_int = 2048;
pub const VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT: c_int = 4096;
pub const VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT: c_int = 512;
pub const VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR: c_int = 524288;
pub const VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR: c_int = 1048576;
pub const VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR: c_int = 1024;
pub const VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR: c_int = 32768;
pub const VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR: c_int = 65536;
pub const VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT: c_int = 2097152;
pub const VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT: c_int = 4194304;
pub const VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT: c_int = 67108864;
pub const VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT: c_int = 8388608;
pub const VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT: c_int = 16777216;
pub const VK_BUFFER_USAGE_RAY_TRACING_BIT_NV: c_int = 1024;
pub const VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT: c_int = 131072;
pub const VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR: c_int = 131072;
pub const VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkBufferUsageFlagBits = c_uint;
pub const VkBufferUsageFlagBits = enum_VkBufferUsageFlagBits;
pub const VkBufferUsageFlags = VkFlags;
pub const VkBufferViewCreateFlags = VkFlags;
pub const VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT: c_int = 1;
pub const VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT: c_int = 4;
pub const VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT: c_int = 2;
pub const VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageViewCreateFlagBits = c_uint;
pub const VkImageViewCreateFlagBits = enum_VkImageViewCreateFlagBits;
pub const VkImageViewCreateFlags = VkFlags;
pub const VkShaderModuleCreateFlags = VkFlags;
pub const VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT: c_int = 1;
pub const VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT: c_int = 1;
pub const VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineCacheCreateFlagBits = c_uint;
pub const VkPipelineCacheCreateFlagBits = enum_VkPipelineCacheCreateFlagBits;
pub const VkPipelineCacheCreateFlags = VkFlags;
pub const VK_COLOR_COMPONENT_R_BIT: c_int = 1;
pub const VK_COLOR_COMPONENT_G_BIT: c_int = 2;
pub const VK_COLOR_COMPONENT_B_BIT: c_int = 4;
pub const VK_COLOR_COMPONENT_A_BIT: c_int = 8;
pub const VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkColorComponentFlagBits = c_uint;
pub const VkColorComponentFlagBits = enum_VkColorComponentFlagBits;
pub const VkColorComponentFlags = VkFlags;
pub const VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT: c_int = 1;
pub const VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT: c_int = 2;
pub const VK_PIPELINE_CREATE_DERIVATIVE_BIT: c_int = 4;
pub const VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT: c_int = 8;
pub const VK_PIPELINE_CREATE_DISPATCH_BASE_BIT: c_int = 16;
pub const VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT: c_int = 256;
pub const VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT: c_int = 512;
pub const VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: c_int = 2097152;
pub const VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT: c_int = 4194304;
pub const VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR: c_int = 16384;
pub const VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR: c_int = 32768;
pub const VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR: c_int = 65536;
pub const VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR: c_int = 131072;
pub const VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR: c_int = 4096;
pub const VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR: c_int = 8192;
pub const VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR: c_int = 524288;
pub const VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV: c_int = 32;
pub const VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR: c_int = 64;
pub const VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR: c_int = 128;
pub const VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV: c_int = 262144;
pub const VK_PIPELINE_CREATE_LIBRARY_BIT_KHR: c_int = 2048;
pub const VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT: c_int = 536870912;
pub const VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT: c_int = 8388608;
pub const VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT: c_int = 1024;
pub const VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV: c_int = 1048576;
pub const VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT: c_int = 33554432;
pub const VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT: c_int = 67108864;
pub const VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT: c_int = 16777216;
pub const VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT: c_int = 134217728;
pub const VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT: c_int = 1073741824;
pub const VK_PIPELINE_CREATE_DISPATCH_BASE: c_int = 16;
pub const VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: c_int = 2097152;
pub const VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT: c_int = 4194304;
pub const VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR: c_int = 8;
pub const VK_PIPELINE_CREATE_DISPATCH_BASE_KHR: c_int = 16;
pub const VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT: c_int = 256;
pub const VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT: c_int = 512;
pub const VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineCreateFlagBits = c_uint;
pub const VkPipelineCreateFlagBits = enum_VkPipelineCreateFlagBits;
pub const VkPipelineCreateFlags = VkFlags;
pub const VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT: c_int = 1;
pub const VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT: c_int = 2;
pub const VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT: c_int = 1;
pub const VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT: c_int = 2;
pub const VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineShaderStageCreateFlagBits = c_uint;
pub const VkPipelineShaderStageCreateFlagBits = enum_VkPipelineShaderStageCreateFlagBits;
pub const VkPipelineShaderStageCreateFlags = VkFlags;
pub const VK_SHADER_STAGE_VERTEX_BIT: c_int = 1;
pub const VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT: c_int = 2;
pub const VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT: c_int = 4;
pub const VK_SHADER_STAGE_GEOMETRY_BIT: c_int = 8;
pub const VK_SHADER_STAGE_FRAGMENT_BIT: c_int = 16;
pub const VK_SHADER_STAGE_COMPUTE_BIT: c_int = 32;
pub const VK_SHADER_STAGE_ALL_GRAPHICS: c_int = 31;
pub const VK_SHADER_STAGE_ALL: c_int = 2147483647;
pub const VK_SHADER_STAGE_RAYGEN_BIT_KHR: c_int = 256;
pub const VK_SHADER_STAGE_ANY_HIT_BIT_KHR: c_int = 512;
pub const VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR: c_int = 1024;
pub const VK_SHADER_STAGE_MISS_BIT_KHR: c_int = 2048;
pub const VK_SHADER_STAGE_INTERSECTION_BIT_KHR: c_int = 4096;
pub const VK_SHADER_STAGE_CALLABLE_BIT_KHR: c_int = 8192;
pub const VK_SHADER_STAGE_TASK_BIT_EXT: c_int = 64;
pub const VK_SHADER_STAGE_MESH_BIT_EXT: c_int = 128;
pub const VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI: c_int = 16384;
pub const VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI: c_int = 524288;
pub const VK_SHADER_STAGE_RAYGEN_BIT_NV: c_int = 256;
pub const VK_SHADER_STAGE_ANY_HIT_BIT_NV: c_int = 512;
pub const VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV: c_int = 1024;
pub const VK_SHADER_STAGE_MISS_BIT_NV: c_int = 2048;
pub const VK_SHADER_STAGE_INTERSECTION_BIT_NV: c_int = 4096;
pub const VK_SHADER_STAGE_CALLABLE_BIT_NV: c_int = 8192;
pub const VK_SHADER_STAGE_TASK_BIT_NV: c_int = 64;
pub const VK_SHADER_STAGE_MESH_BIT_NV: c_int = 128;
pub const VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkShaderStageFlagBits = c_uint;
pub const VkShaderStageFlagBits = enum_VkShaderStageFlagBits;
pub const VK_CULL_MODE_NONE: c_int = 0;
pub const VK_CULL_MODE_FRONT_BIT: c_int = 1;
pub const VK_CULL_MODE_BACK_BIT: c_int = 2;
pub const VK_CULL_MODE_FRONT_AND_BACK: c_int = 3;
pub const VK_CULL_MODE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCullModeFlagBits = c_uint;
pub const VkCullModeFlagBits = enum_VkCullModeFlagBits;
pub const VkCullModeFlags = VkFlags;
pub const VkPipelineVertexInputStateCreateFlags = VkFlags;
pub const VkPipelineInputAssemblyStateCreateFlags = VkFlags;
pub const VkPipelineTessellationStateCreateFlags = VkFlags;
pub const VkPipelineViewportStateCreateFlags = VkFlags;
pub const VkPipelineRasterizationStateCreateFlags = VkFlags;
pub const VkPipelineMultisampleStateCreateFlags = VkFlags;
pub const VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT: c_int = 1;
pub const VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT: c_int = 2;
pub const VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM: c_int = 1;
pub const VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM: c_int = 2;
pub const VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineDepthStencilStateCreateFlagBits = c_uint;
pub const VkPipelineDepthStencilStateCreateFlagBits = enum_VkPipelineDepthStencilStateCreateFlagBits;
pub const VkPipelineDepthStencilStateCreateFlags = VkFlags;
pub const VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT: c_int = 1;
pub const VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM: c_int = 1;
pub const VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineColorBlendStateCreateFlagBits = c_uint;
pub const VkPipelineColorBlendStateCreateFlagBits = enum_VkPipelineColorBlendStateCreateFlagBits;
pub const VkPipelineColorBlendStateCreateFlags = VkFlags;
pub const VkPipelineDynamicStateCreateFlags = VkFlags;
pub const VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT: c_int = 2;
pub const VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineLayoutCreateFlagBits = c_uint;
pub const VkPipelineLayoutCreateFlagBits = enum_VkPipelineLayoutCreateFlagBits;
pub const VkPipelineLayoutCreateFlags = VkFlags;
pub const VkShaderStageFlags = VkFlags;
pub const VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT: c_int = 1;
pub const VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT: c_int = 2;
pub const VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT: c_int = 8;
pub const VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT: c_int = 4;
pub const VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM: c_int = 16;
pub const VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSamplerCreateFlagBits = c_uint;
pub const VkSamplerCreateFlagBits = enum_VkSamplerCreateFlagBits;
pub const VkSamplerCreateFlags = VkFlags;
pub const VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT: c_int = 1;
pub const VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT: c_int = 2;
pub const VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT: c_int = 4;
pub const VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_SETS_BIT_NV: c_int = 8;
pub const VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_POOLS_BIT_NV: c_int = 16;
pub const VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT: c_int = 2;
pub const VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE: c_int = 4;
pub const VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDescriptorPoolCreateFlagBits = c_uint;
pub const VkDescriptorPoolCreateFlagBits = enum_VkDescriptorPoolCreateFlagBits;
pub const VkDescriptorPoolCreateFlags = VkFlags;
pub const VkDescriptorPoolResetFlags = VkFlags;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT: c_int = 2;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR: c_int = 1;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT: c_int = 16;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT: c_int = 32;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV: c_int = 128;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT: c_int = 4;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_PER_STAGE_BIT_NV: c_int = 64;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT: c_int = 2;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE: c_int = 4;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDescriptorSetLayoutCreateFlagBits = c_uint;
pub const VkDescriptorSetLayoutCreateFlagBits = enum_VkDescriptorSetLayoutCreateFlagBits;
pub const VkDescriptorSetLayoutCreateFlags = VkFlags;
pub const VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT: c_int = 1;
pub const VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkAttachmentDescriptionFlagBits = c_uint;
pub const VkAttachmentDescriptionFlagBits = enum_VkAttachmentDescriptionFlagBits;
pub const VkAttachmentDescriptionFlags = VkFlags;
pub const VK_DEPENDENCY_BY_REGION_BIT: c_int = 1;
pub const VK_DEPENDENCY_DEVICE_GROUP_BIT: c_int = 4;
pub const VK_DEPENDENCY_VIEW_LOCAL_BIT: c_int = 2;
pub const VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT: c_int = 8;
pub const VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR: c_int = 2;
pub const VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR: c_int = 4;
pub const VK_DEPENDENCY_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDependencyFlagBits = c_uint;
pub const VkDependencyFlagBits = enum_VkDependencyFlagBits;
pub const VkDependencyFlags = VkFlags;
pub const VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT: c_int = 1;
pub const VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR: c_int = 1;
pub const VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFramebufferCreateFlagBits = c_uint;
pub const VkFramebufferCreateFlagBits = enum_VkFramebufferCreateFlagBits;
pub const VkFramebufferCreateFlags = VkFlags;
pub const VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM: c_int = 2;
pub const VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkRenderPassCreateFlagBits = c_uint;
pub const VkRenderPassCreateFlagBits = enum_VkRenderPassCreateFlagBits;
pub const VkRenderPassCreateFlags = VkFlags;
pub const VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX: c_int = 1;
pub const VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX: c_int = 2;
pub const VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM: c_int = 4;
pub const VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM: c_int = 8;
pub const VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT: c_int = 16;
pub const VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT: c_int = 32;
pub const VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT: c_int = 64;
pub const VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT: c_int = 128;
pub const VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM: c_int = 16;
pub const VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM: c_int = 32;
pub const VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM: c_int = 64;
pub const VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSubpassDescriptionFlagBits = c_uint;
pub const VkSubpassDescriptionFlagBits = enum_VkSubpassDescriptionFlagBits;
pub const VkSubpassDescriptionFlags = VkFlags;
pub const VK_COMMAND_POOL_CREATE_TRANSIENT_BIT: c_int = 1;
pub const VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT: c_int = 2;
pub const VK_COMMAND_POOL_CREATE_PROTECTED_BIT: c_int = 4;
pub const VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCommandPoolCreateFlagBits = c_uint;
pub const VkCommandPoolCreateFlagBits = enum_VkCommandPoolCreateFlagBits;
pub const VkCommandPoolCreateFlags = VkFlags;
pub const VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT: c_int = 1;
pub const VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCommandPoolResetFlagBits = c_uint;
pub const VkCommandPoolResetFlagBits = enum_VkCommandPoolResetFlagBits;
pub const VkCommandPoolResetFlags = VkFlags;
pub const VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT: c_int = 1;
pub const VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT: c_int = 2;
pub const VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT: c_int = 4;
pub const VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCommandBufferUsageFlagBits = c_uint;
pub const VkCommandBufferUsageFlagBits = enum_VkCommandBufferUsageFlagBits;
pub const VkCommandBufferUsageFlags = VkFlags;
pub const VK_QUERY_CONTROL_PRECISE_BIT: c_int = 1;
pub const VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkQueryControlFlagBits = c_uint;
pub const VkQueryControlFlagBits = enum_VkQueryControlFlagBits;
pub const VkQueryControlFlags = VkFlags;
pub const VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT: c_int = 1;
pub const VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCommandBufferResetFlagBits = c_uint;
pub const VkCommandBufferResetFlagBits = enum_VkCommandBufferResetFlagBits;
pub const VkCommandBufferResetFlags = VkFlags;
pub const VK_STENCIL_FACE_FRONT_BIT: c_int = 1;
pub const VK_STENCIL_FACE_BACK_BIT: c_int = 2;
pub const VK_STENCIL_FACE_FRONT_AND_BACK: c_int = 3;
pub const VK_STENCIL_FRONT_AND_BACK: c_int = 3;
pub const VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkStencilFaceFlagBits = c_uint;
pub const VkStencilFaceFlagBits = enum_VkStencilFaceFlagBits;
pub const VkStencilFaceFlags = VkFlags;
pub const struct_VkExtent2D = extern struct {
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
};
pub const VkExtent2D = struct_VkExtent2D;
pub const struct_VkExtent3D = extern struct {
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
    depth: u32 = @import("std").mem.zeroes(u32),
};
pub const VkExtent3D = struct_VkExtent3D;
pub const struct_VkOffset2D = extern struct {
    x: i32 = @import("std").mem.zeroes(i32),
    y: i32 = @import("std").mem.zeroes(i32),
};
pub const VkOffset2D = struct_VkOffset2D;
pub const struct_VkOffset3D = extern struct {
    x: i32 = @import("std").mem.zeroes(i32),
    y: i32 = @import("std").mem.zeroes(i32),
    z: i32 = @import("std").mem.zeroes(i32),
};
pub const VkOffset3D = struct_VkOffset3D;
pub const struct_VkRect2D = extern struct {
    offset: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    extent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkRect2D = struct_VkRect2D;
pub const struct_VkBaseInStructure = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: [*c]const struct_VkBaseInStructure = @import("std").mem.zeroes([*c]const struct_VkBaseInStructure),
};
pub const VkBaseInStructure = struct_VkBaseInStructure;
pub const struct_VkBaseOutStructure = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: [*c]struct_VkBaseOutStructure = @import("std").mem.zeroes([*c]struct_VkBaseOutStructure),
};
pub const VkBaseOutStructure = struct_VkBaseOutStructure;
pub const struct_VkBufferMemoryBarrier = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dstAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    srcQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    dstQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkBufferMemoryBarrier = struct_VkBufferMemoryBarrier;
pub const struct_VkDispatchIndirectCommand = extern struct {
    x: u32 = @import("std").mem.zeroes(u32),
    y: u32 = @import("std").mem.zeroes(u32),
    z: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDispatchIndirectCommand = struct_VkDispatchIndirectCommand;
pub const struct_VkDrawIndexedIndirectCommand = extern struct {
    indexCount: u32 = @import("std").mem.zeroes(u32),
    instanceCount: u32 = @import("std").mem.zeroes(u32),
    firstIndex: u32 = @import("std").mem.zeroes(u32),
    vertexOffset: i32 = @import("std").mem.zeroes(i32),
    firstInstance: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDrawIndexedIndirectCommand = struct_VkDrawIndexedIndirectCommand;
pub const struct_VkDrawIndirectCommand = extern struct {
    vertexCount: u32 = @import("std").mem.zeroes(u32),
    instanceCount: u32 = @import("std").mem.zeroes(u32),
    firstVertex: u32 = @import("std").mem.zeroes(u32),
    firstInstance: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDrawIndirectCommand = struct_VkDrawIndirectCommand;
pub const struct_VkImageSubresourceRange = extern struct {
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
    baseMipLevel: u32 = @import("std").mem.zeroes(u32),
    levelCount: u32 = @import("std").mem.zeroes(u32),
    baseArrayLayer: u32 = @import("std").mem.zeroes(u32),
    layerCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkImageSubresourceRange = struct_VkImageSubresourceRange;
pub const struct_VkImageMemoryBarrier = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dstAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    oldLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    newLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    srcQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    dstQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    subresourceRange: VkImageSubresourceRange = @import("std").mem.zeroes(VkImageSubresourceRange),
};
pub const VkImageMemoryBarrier = struct_VkImageMemoryBarrier;
pub const struct_VkMemoryBarrier = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dstAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
};
pub const VkMemoryBarrier = struct_VkMemoryBarrier;
pub const struct_VkPipelineCacheHeaderVersionOne = extern struct {
    headerSize: u32 = @import("std").mem.zeroes(u32),
    headerVersion: VkPipelineCacheHeaderVersion = @import("std").mem.zeroes(VkPipelineCacheHeaderVersion),
    vendorID: u32 = @import("std").mem.zeroes(u32),
    deviceID: u32 = @import("std").mem.zeroes(u32),
    pipelineCacheUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
};
pub const VkPipelineCacheHeaderVersionOne = struct_VkPipelineCacheHeaderVersionOne;
pub const PFN_vkVoidFunction = ?*const fn () callconv(.C) void;
pub const VkAllocationCallbacks = struct_VkAllocationCallbacks;
pub const struct_VkApplicationInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pApplicationName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    applicationVersion: u32 = @import("std").mem.zeroes(u32),
    pEngineName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    engineVersion: u32 = @import("std").mem.zeroes(u32),
    apiVersion: u32 = @import("std").mem.zeroes(u32),
};
pub const VkApplicationInfo = struct_VkApplicationInfo;
pub const struct_VkFormatProperties = extern struct {
    linearTilingFeatures: VkFormatFeatureFlags = @import("std").mem.zeroes(VkFormatFeatureFlags),
    optimalTilingFeatures: VkFormatFeatureFlags = @import("std").mem.zeroes(VkFormatFeatureFlags),
    bufferFeatures: VkFormatFeatureFlags = @import("std").mem.zeroes(VkFormatFeatureFlags),
};
pub const VkFormatProperties = struct_VkFormatProperties;
pub const struct_VkImageFormatProperties = extern struct {
    maxExtent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    maxMipLevels: u32 = @import("std").mem.zeroes(u32),
    maxArrayLayers: u32 = @import("std").mem.zeroes(u32),
    sampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    maxResourceSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkImageFormatProperties = struct_VkImageFormatProperties;
pub const struct_VkInstanceCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkInstanceCreateFlags = @import("std").mem.zeroes(VkInstanceCreateFlags),
    pApplicationInfo: [*c]const VkApplicationInfo = @import("std").mem.zeroes([*c]const VkApplicationInfo),
    enabledLayerCount: u32 = @import("std").mem.zeroes(u32),
    ppEnabledLayerNames: [*c]const [*c]const u8 = @import("std").mem.zeroes([*c]const [*c]const u8),
    enabledExtensionCount: u32 = @import("std").mem.zeroes(u32),
    ppEnabledExtensionNames: [*c]const [*c]const u8 = @import("std").mem.zeroes([*c]const [*c]const u8),
};
pub const VkInstanceCreateInfo = struct_VkInstanceCreateInfo;
pub const struct_VkMemoryHeap = extern struct {
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    flags: VkMemoryHeapFlags = @import("std").mem.zeroes(VkMemoryHeapFlags),
};
pub const VkMemoryHeap = struct_VkMemoryHeap;
pub const struct_VkMemoryType = extern struct {
    propertyFlags: VkMemoryPropertyFlags = @import("std").mem.zeroes(VkMemoryPropertyFlags),
    heapIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkMemoryType = struct_VkMemoryType;
pub const struct_VkPhysicalDeviceFeatures = extern struct {
    robustBufferAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fullDrawIndexUint32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    imageCubeArray: VkBool32 = @import("std").mem.zeroes(VkBool32),
    independentBlend: VkBool32 = @import("std").mem.zeroes(VkBool32),
    geometryShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    tessellationShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sampleRateShading: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dualSrcBlend: VkBool32 = @import("std").mem.zeroes(VkBool32),
    logicOp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiDrawIndirect: VkBool32 = @import("std").mem.zeroes(VkBool32),
    drawIndirectFirstInstance: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthClamp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthBiasClamp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fillModeNonSolid: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthBounds: VkBool32 = @import("std").mem.zeroes(VkBool32),
    wideLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    largePoints: VkBool32 = @import("std").mem.zeroes(VkBool32),
    alphaToOne: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiViewport: VkBool32 = @import("std").mem.zeroes(VkBool32),
    samplerAnisotropy: VkBool32 = @import("std").mem.zeroes(VkBool32),
    textureCompressionETC2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    textureCompressionASTC_LDR: VkBool32 = @import("std").mem.zeroes(VkBool32),
    textureCompressionBC: VkBool32 = @import("std").mem.zeroes(VkBool32),
    occlusionQueryPrecise: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pipelineStatisticsQuery: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vertexPipelineStoresAndAtomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentStoresAndAtomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderTessellationAndGeometryPointSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderImageGatherExtended: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageExtendedFormats: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageMultisample: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageReadWithoutFormat: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageWriteWithoutFormat: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformBufferArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSampledImageArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageBufferArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderClipDistance: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderCullDistance: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInt64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInt16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderResourceResidency: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderResourceMinLod: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseBinding: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidencyBuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidencyImage2D: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidencyImage3D: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidency2Samples: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidency4Samples: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidency8Samples: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidency16Samples: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidencyAliased: VkBool32 = @import("std").mem.zeroes(VkBool32),
    variableMultisampleRate: VkBool32 = @import("std").mem.zeroes(VkBool32),
    inheritedQueries: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFeatures = struct_VkPhysicalDeviceFeatures;
pub const struct_VkPhysicalDeviceLimits = extern struct {
    maxImageDimension1D: u32 = @import("std").mem.zeroes(u32),
    maxImageDimension2D: u32 = @import("std").mem.zeroes(u32),
    maxImageDimension3D: u32 = @import("std").mem.zeroes(u32),
    maxImageDimensionCube: u32 = @import("std").mem.zeroes(u32),
    maxImageArrayLayers: u32 = @import("std").mem.zeroes(u32),
    maxTexelBufferElements: u32 = @import("std").mem.zeroes(u32),
    maxUniformBufferRange: u32 = @import("std").mem.zeroes(u32),
    maxStorageBufferRange: u32 = @import("std").mem.zeroes(u32),
    maxPushConstantsSize: u32 = @import("std").mem.zeroes(u32),
    maxMemoryAllocationCount: u32 = @import("std").mem.zeroes(u32),
    maxSamplerAllocationCount: u32 = @import("std").mem.zeroes(u32),
    bufferImageGranularity: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sparseAddressSpaceSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    maxBoundDescriptorSets: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorSamplers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUniformBuffers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorStorageBuffers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorSampledImages: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorStorageImages: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorInputAttachments: u32 = @import("std").mem.zeroes(u32),
    maxPerStageResources: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetSamplers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUniformBuffers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUniformBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetStorageBuffers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetStorageBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetSampledImages: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetStorageImages: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetInputAttachments: u32 = @import("std").mem.zeroes(u32),
    maxVertexInputAttributes: u32 = @import("std").mem.zeroes(u32),
    maxVertexInputBindings: u32 = @import("std").mem.zeroes(u32),
    maxVertexInputAttributeOffset: u32 = @import("std").mem.zeroes(u32),
    maxVertexInputBindingStride: u32 = @import("std").mem.zeroes(u32),
    maxVertexOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxTessellationGenerationLevel: u32 = @import("std").mem.zeroes(u32),
    maxTessellationPatchSize: u32 = @import("std").mem.zeroes(u32),
    maxTessellationControlPerVertexInputComponents: u32 = @import("std").mem.zeroes(u32),
    maxTessellationControlPerVertexOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxTessellationControlPerPatchOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxTessellationControlTotalOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxTessellationEvaluationInputComponents: u32 = @import("std").mem.zeroes(u32),
    maxTessellationEvaluationOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxGeometryShaderInvocations: u32 = @import("std").mem.zeroes(u32),
    maxGeometryInputComponents: u32 = @import("std").mem.zeroes(u32),
    maxGeometryOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxGeometryOutputVertices: u32 = @import("std").mem.zeroes(u32),
    maxGeometryTotalOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxFragmentInputComponents: u32 = @import("std").mem.zeroes(u32),
    maxFragmentOutputAttachments: u32 = @import("std").mem.zeroes(u32),
    maxFragmentDualSrcAttachments: u32 = @import("std").mem.zeroes(u32),
    maxFragmentCombinedOutputResources: u32 = @import("std").mem.zeroes(u32),
    maxComputeSharedMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxComputeWorkGroupCount: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxComputeWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    maxComputeWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
    subPixelPrecisionBits: u32 = @import("std").mem.zeroes(u32),
    subTexelPrecisionBits: u32 = @import("std").mem.zeroes(u32),
    mipmapPrecisionBits: u32 = @import("std").mem.zeroes(u32),
    maxDrawIndexedIndexValue: u32 = @import("std").mem.zeroes(u32),
    maxDrawIndirectCount: u32 = @import("std").mem.zeroes(u32),
    maxSamplerLodBias: f32 = @import("std").mem.zeroes(f32),
    maxSamplerAnisotropy: f32 = @import("std").mem.zeroes(f32),
    maxViewports: u32 = @import("std").mem.zeroes(u32),
    maxViewportDimensions: [2]u32 = @import("std").mem.zeroes([2]u32),
    viewportBoundsRange: [2]f32 = @import("std").mem.zeroes([2]f32),
    viewportSubPixelBits: u32 = @import("std").mem.zeroes(u32),
    minMemoryMapAlignment: usize = @import("std").mem.zeroes(usize),
    minTexelBufferOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    minUniformBufferOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    minStorageBufferOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    minTexelOffset: i32 = @import("std").mem.zeroes(i32),
    maxTexelOffset: u32 = @import("std").mem.zeroes(u32),
    minTexelGatherOffset: i32 = @import("std").mem.zeroes(i32),
    maxTexelGatherOffset: u32 = @import("std").mem.zeroes(u32),
    minInterpolationOffset: f32 = @import("std").mem.zeroes(f32),
    maxInterpolationOffset: f32 = @import("std").mem.zeroes(f32),
    subPixelInterpolationOffsetBits: u32 = @import("std").mem.zeroes(u32),
    maxFramebufferWidth: u32 = @import("std").mem.zeroes(u32),
    maxFramebufferHeight: u32 = @import("std").mem.zeroes(u32),
    maxFramebufferLayers: u32 = @import("std").mem.zeroes(u32),
    framebufferColorSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    framebufferDepthSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    framebufferStencilSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    maxColorAttachments: u32 = @import("std").mem.zeroes(u32),
    sampledImageColorSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    sampledImageIntegerSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    sampledImageDepthSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    sampledImageStencilSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    storageImageSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    maxSampleMaskWords: u32 = @import("std").mem.zeroes(u32),
    timestampComputeAndGraphics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    timestampPeriod: f32 = @import("std").mem.zeroes(f32),
    maxClipDistances: u32 = @import("std").mem.zeroes(u32),
    maxCullDistances: u32 = @import("std").mem.zeroes(u32),
    maxCombinedClipAndCullDistances: u32 = @import("std").mem.zeroes(u32),
    discreteQueuePriorities: u32 = @import("std").mem.zeroes(u32),
    pointSizeRange: [2]f32 = @import("std").mem.zeroes([2]f32),
    lineWidthRange: [2]f32 = @import("std").mem.zeroes([2]f32),
    pointSizeGranularity: f32 = @import("std").mem.zeroes(f32),
    lineWidthGranularity: f32 = @import("std").mem.zeroes(f32),
    strictLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    standardSampleLocations: VkBool32 = @import("std").mem.zeroes(VkBool32),
    optimalBufferCopyOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    optimalBufferCopyRowPitchAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    nonCoherentAtomSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceLimits = struct_VkPhysicalDeviceLimits;
pub const struct_VkPhysicalDeviceMemoryProperties = extern struct {
    memoryTypeCount: u32 = @import("std").mem.zeroes(u32),
    memoryTypes: [32]VkMemoryType = @import("std").mem.zeroes([32]VkMemoryType),
    memoryHeapCount: u32 = @import("std").mem.zeroes(u32),
    memoryHeaps: [16]VkMemoryHeap = @import("std").mem.zeroes([16]VkMemoryHeap),
};
pub const VkPhysicalDeviceMemoryProperties = struct_VkPhysicalDeviceMemoryProperties;
pub const struct_VkPhysicalDeviceSparseProperties = extern struct {
    residencyStandard2DBlockShape: VkBool32 = @import("std").mem.zeroes(VkBool32),
    residencyStandard2DMultisampleBlockShape: VkBool32 = @import("std").mem.zeroes(VkBool32),
    residencyStandard3DBlockShape: VkBool32 = @import("std").mem.zeroes(VkBool32),
    residencyAlignedMipSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    residencyNonResidentStrict: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSparseProperties = struct_VkPhysicalDeviceSparseProperties;
pub const struct_VkPhysicalDeviceProperties = extern struct {
    apiVersion: u32 = @import("std").mem.zeroes(u32),
    driverVersion: u32 = @import("std").mem.zeroes(u32),
    vendorID: u32 = @import("std").mem.zeroes(u32),
    deviceID: u32 = @import("std").mem.zeroes(u32),
    deviceType: VkPhysicalDeviceType = @import("std").mem.zeroes(VkPhysicalDeviceType),
    deviceName: [256]u8 = @import("std").mem.zeroes([256]u8),
    pipelineCacheUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    limits: VkPhysicalDeviceLimits = @import("std").mem.zeroes(VkPhysicalDeviceLimits),
    sparseProperties: VkPhysicalDeviceSparseProperties = @import("std").mem.zeroes(VkPhysicalDeviceSparseProperties),
};
pub const VkPhysicalDeviceProperties = struct_VkPhysicalDeviceProperties;
pub const struct_VkQueueFamilyProperties = extern struct {
    queueFlags: VkQueueFlags = @import("std").mem.zeroes(VkQueueFlags),
    queueCount: u32 = @import("std").mem.zeroes(u32),
    timestampValidBits: u32 = @import("std").mem.zeroes(u32),
    minImageTransferGranularity: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkQueueFamilyProperties = struct_VkQueueFamilyProperties;
pub const struct_VkDeviceQueueCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDeviceQueueCreateFlags = @import("std").mem.zeroes(VkDeviceQueueCreateFlags),
    queueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    queueCount: u32 = @import("std").mem.zeroes(u32),
    pQueuePriorities: [*c]const f32 = @import("std").mem.zeroes([*c]const f32),
};
pub const VkDeviceQueueCreateInfo = struct_VkDeviceQueueCreateInfo;
pub const struct_VkDeviceCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDeviceCreateFlags = @import("std").mem.zeroes(VkDeviceCreateFlags),
    queueCreateInfoCount: u32 = @import("std").mem.zeroes(u32),
    pQueueCreateInfos: [*c]const VkDeviceQueueCreateInfo = @import("std").mem.zeroes([*c]const VkDeviceQueueCreateInfo),
    enabledLayerCount: u32 = @import("std").mem.zeroes(u32),
    ppEnabledLayerNames: [*c]const [*c]const u8 = @import("std").mem.zeroes([*c]const [*c]const u8),
    enabledExtensionCount: u32 = @import("std").mem.zeroes(u32),
    ppEnabledExtensionNames: [*c]const [*c]const u8 = @import("std").mem.zeroes([*c]const [*c]const u8),
    pEnabledFeatures: [*c]const VkPhysicalDeviceFeatures = @import("std").mem.zeroes([*c]const VkPhysicalDeviceFeatures),
};
pub const VkDeviceCreateInfo = struct_VkDeviceCreateInfo;
pub const struct_VkExtensionProperties = extern struct {
    extensionName: [256]u8 = @import("std").mem.zeroes([256]u8),
    specVersion: u32 = @import("std").mem.zeroes(u32),
};
pub const VkExtensionProperties = struct_VkExtensionProperties;
pub const struct_VkLayerProperties = extern struct {
    layerName: [256]u8 = @import("std").mem.zeroes([256]u8),
    specVersion: u32 = @import("std").mem.zeroes(u32),
    implementationVersion: u32 = @import("std").mem.zeroes(u32),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
};
pub const VkLayerProperties = struct_VkLayerProperties;
pub const struct_VkSubmitInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    waitSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pWaitSemaphores: [*c]const VkSemaphore = @import("std").mem.zeroes([*c]const VkSemaphore),
    pWaitDstStageMask: [*c]const VkPipelineStageFlags = @import("std").mem.zeroes([*c]const VkPipelineStageFlags),
    commandBufferCount: u32 = @import("std").mem.zeroes(u32),
    pCommandBuffers: [*c]const VkCommandBuffer = @import("std").mem.zeroes([*c]const VkCommandBuffer),
    signalSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pSignalSemaphores: [*c]const VkSemaphore = @import("std").mem.zeroes([*c]const VkSemaphore),
};
pub const VkSubmitInfo = struct_VkSubmitInfo;
pub const struct_VkMappedMemoryRange = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkMappedMemoryRange = struct_VkMappedMemoryRange;
pub const struct_VkMemoryAllocateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    allocationSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    memoryTypeIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkMemoryAllocateInfo = struct_VkMemoryAllocateInfo;
pub const struct_VkMemoryRequirements = extern struct {
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    alignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    memoryTypeBits: u32 = @import("std").mem.zeroes(u32),
};
pub const VkMemoryRequirements = struct_VkMemoryRequirements;
pub const struct_VkSparseMemoryBind = extern struct {
    resourceOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    memoryOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    flags: VkSparseMemoryBindFlags = @import("std").mem.zeroes(VkSparseMemoryBindFlags),
};
pub const VkSparseMemoryBind = struct_VkSparseMemoryBind;
pub const struct_VkSparseBufferMemoryBindInfo = extern struct {
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    bindCount: u32 = @import("std").mem.zeroes(u32),
    pBinds: [*c]const VkSparseMemoryBind = @import("std").mem.zeroes([*c]const VkSparseMemoryBind),
};
pub const VkSparseBufferMemoryBindInfo = struct_VkSparseBufferMemoryBindInfo;
pub const struct_VkSparseImageOpaqueMemoryBindInfo = extern struct {
    image: VkImage = @import("std").mem.zeroes(VkImage),
    bindCount: u32 = @import("std").mem.zeroes(u32),
    pBinds: [*c]const VkSparseMemoryBind = @import("std").mem.zeroes([*c]const VkSparseMemoryBind),
};
pub const VkSparseImageOpaqueMemoryBindInfo = struct_VkSparseImageOpaqueMemoryBindInfo;
pub const struct_VkImageSubresource = extern struct {
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
    mipLevel: u32 = @import("std").mem.zeroes(u32),
    arrayLayer: u32 = @import("std").mem.zeroes(u32),
};
pub const VkImageSubresource = struct_VkImageSubresource;
pub const struct_VkSparseImageMemoryBind = extern struct {
    subresource: VkImageSubresource = @import("std").mem.zeroes(VkImageSubresource),
    offset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    extent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    memoryOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    flags: VkSparseMemoryBindFlags = @import("std").mem.zeroes(VkSparseMemoryBindFlags),
};
pub const VkSparseImageMemoryBind = struct_VkSparseImageMemoryBind;
pub const struct_VkSparseImageMemoryBindInfo = extern struct {
    image: VkImage = @import("std").mem.zeroes(VkImage),
    bindCount: u32 = @import("std").mem.zeroes(u32),
    pBinds: [*c]const VkSparseImageMemoryBind = @import("std").mem.zeroes([*c]const VkSparseImageMemoryBind),
};
pub const VkSparseImageMemoryBindInfo = struct_VkSparseImageMemoryBindInfo;
pub const struct_VkBindSparseInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    waitSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pWaitSemaphores: [*c]const VkSemaphore = @import("std").mem.zeroes([*c]const VkSemaphore),
    bufferBindCount: u32 = @import("std").mem.zeroes(u32),
    pBufferBinds: [*c]const VkSparseBufferMemoryBindInfo = @import("std").mem.zeroes([*c]const VkSparseBufferMemoryBindInfo),
    imageOpaqueBindCount: u32 = @import("std").mem.zeroes(u32),
    pImageOpaqueBinds: [*c]const VkSparseImageOpaqueMemoryBindInfo = @import("std").mem.zeroes([*c]const VkSparseImageOpaqueMemoryBindInfo),
    imageBindCount: u32 = @import("std").mem.zeroes(u32),
    pImageBinds: [*c]const VkSparseImageMemoryBindInfo = @import("std").mem.zeroes([*c]const VkSparseImageMemoryBindInfo),
    signalSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pSignalSemaphores: [*c]const VkSemaphore = @import("std").mem.zeroes([*c]const VkSemaphore),
};
pub const VkBindSparseInfo = struct_VkBindSparseInfo;
pub const struct_VkSparseImageFormatProperties = extern struct {
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
    imageGranularity: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    flags: VkSparseImageFormatFlags = @import("std").mem.zeroes(VkSparseImageFormatFlags),
};
pub const VkSparseImageFormatProperties = struct_VkSparseImageFormatProperties;
pub const struct_VkSparseImageMemoryRequirements = extern struct {
    formatProperties: VkSparseImageFormatProperties = @import("std").mem.zeroes(VkSparseImageFormatProperties),
    imageMipTailFirstLod: u32 = @import("std").mem.zeroes(u32),
    imageMipTailSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    imageMipTailOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    imageMipTailStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkSparseImageMemoryRequirements = struct_VkSparseImageMemoryRequirements;
pub const struct_VkFenceCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkFenceCreateFlags = @import("std").mem.zeroes(VkFenceCreateFlags),
};
pub const VkFenceCreateInfo = struct_VkFenceCreateInfo;
pub const struct_VkSemaphoreCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkSemaphoreCreateFlags = @import("std").mem.zeroes(VkSemaphoreCreateFlags),
};
pub const VkSemaphoreCreateInfo = struct_VkSemaphoreCreateInfo;
pub const struct_VkEventCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkEventCreateFlags = @import("std").mem.zeroes(VkEventCreateFlags),
};
pub const VkEventCreateInfo = struct_VkEventCreateInfo;
pub const struct_VkQueryPoolCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkQueryPoolCreateFlags = @import("std").mem.zeroes(VkQueryPoolCreateFlags),
    queryType: VkQueryType = @import("std").mem.zeroes(VkQueryType),
    queryCount: u32 = @import("std").mem.zeroes(u32),
    pipelineStatistics: VkQueryPipelineStatisticFlags = @import("std").mem.zeroes(VkQueryPipelineStatisticFlags),
};
pub const VkQueryPoolCreateInfo = struct_VkQueryPoolCreateInfo;
pub const struct_VkBufferCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkBufferCreateFlags = @import("std").mem.zeroes(VkBufferCreateFlags),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    usage: VkBufferUsageFlags = @import("std").mem.zeroes(VkBufferUsageFlags),
    sharingMode: VkSharingMode = @import("std").mem.zeroes(VkSharingMode),
    queueFamilyIndexCount: u32 = @import("std").mem.zeroes(u32),
    pQueueFamilyIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkBufferCreateInfo = struct_VkBufferCreateInfo;
pub const struct_VkBufferViewCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkBufferViewCreateFlags = @import("std").mem.zeroes(VkBufferViewCreateFlags),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    range: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkBufferViewCreateInfo = struct_VkBufferViewCreateInfo;
pub const struct_VkImageCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkImageCreateFlags = @import("std").mem.zeroes(VkImageCreateFlags),
    imageType: VkImageType = @import("std").mem.zeroes(VkImageType),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    extent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    mipLevels: u32 = @import("std").mem.zeroes(u32),
    arrayLayers: u32 = @import("std").mem.zeroes(u32),
    samples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    tiling: VkImageTiling = @import("std").mem.zeroes(VkImageTiling),
    usage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    sharingMode: VkSharingMode = @import("std").mem.zeroes(VkSharingMode),
    queueFamilyIndexCount: u32 = @import("std").mem.zeroes(u32),
    pQueueFamilyIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    initialLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
};
pub const VkImageCreateInfo = struct_VkImageCreateInfo;
pub const struct_VkSubresourceLayout = extern struct {
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    rowPitch: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    arrayPitch: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    depthPitch: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkSubresourceLayout = struct_VkSubresourceLayout;
pub const struct_VkComponentMapping = extern struct {
    r: VkComponentSwizzle = @import("std").mem.zeroes(VkComponentSwizzle),
    g: VkComponentSwizzle = @import("std").mem.zeroes(VkComponentSwizzle),
    b: VkComponentSwizzle = @import("std").mem.zeroes(VkComponentSwizzle),
    a: VkComponentSwizzle = @import("std").mem.zeroes(VkComponentSwizzle),
};
pub const VkComponentMapping = struct_VkComponentMapping;
pub const struct_VkImageViewCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkImageViewCreateFlags = @import("std").mem.zeroes(VkImageViewCreateFlags),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    viewType: VkImageViewType = @import("std").mem.zeroes(VkImageViewType),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    components: VkComponentMapping = @import("std").mem.zeroes(VkComponentMapping),
    subresourceRange: VkImageSubresourceRange = @import("std").mem.zeroes(VkImageSubresourceRange),
};
pub const VkImageViewCreateInfo = struct_VkImageViewCreateInfo;
pub const struct_VkShaderModuleCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkShaderModuleCreateFlags = @import("std").mem.zeroes(VkShaderModuleCreateFlags),
    codeSize: usize = @import("std").mem.zeroes(usize),
    pCode: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkShaderModuleCreateInfo = struct_VkShaderModuleCreateInfo;
pub const struct_VkPipelineCacheCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCacheCreateFlags = @import("std").mem.zeroes(VkPipelineCacheCreateFlags),
    initialDataSize: usize = @import("std").mem.zeroes(usize),
    pInitialData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkPipelineCacheCreateInfo = struct_VkPipelineCacheCreateInfo;
pub const struct_VkSpecializationMapEntry = extern struct {
    constantID: u32 = @import("std").mem.zeroes(u32),
    offset: u32 = @import("std").mem.zeroes(u32),
    size: usize = @import("std").mem.zeroes(usize),
};
pub const VkSpecializationMapEntry = struct_VkSpecializationMapEntry;
pub const struct_VkSpecializationInfo = extern struct {
    mapEntryCount: u32 = @import("std").mem.zeroes(u32),
    pMapEntries: [*c]const VkSpecializationMapEntry = @import("std").mem.zeroes([*c]const VkSpecializationMapEntry),
    dataSize: usize = @import("std").mem.zeroes(usize),
    pData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkSpecializationInfo = struct_VkSpecializationInfo;
pub const struct_VkPipelineShaderStageCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineShaderStageCreateFlags = @import("std").mem.zeroes(VkPipelineShaderStageCreateFlags),
    stage: VkShaderStageFlagBits = @import("std").mem.zeroes(VkShaderStageFlagBits),
    module: VkShaderModule = @import("std").mem.zeroes(VkShaderModule),
    pName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    pSpecializationInfo: [*c]const VkSpecializationInfo = @import("std").mem.zeroes([*c]const VkSpecializationInfo),
};
pub const VkPipelineShaderStageCreateInfo = struct_VkPipelineShaderStageCreateInfo;
pub const struct_VkComputePipelineCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCreateFlags = @import("std").mem.zeroes(VkPipelineCreateFlags),
    stage: VkPipelineShaderStageCreateInfo = @import("std").mem.zeroes(VkPipelineShaderStageCreateInfo),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    basePipelineHandle: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    basePipelineIndex: i32 = @import("std").mem.zeroes(i32),
};
pub const VkComputePipelineCreateInfo = struct_VkComputePipelineCreateInfo;
pub const struct_VkVertexInputBindingDescription = extern struct {
    binding: u32 = @import("std").mem.zeroes(u32),
    stride: u32 = @import("std").mem.zeroes(u32),
    inputRate: VkVertexInputRate = @import("std").mem.zeroes(VkVertexInputRate),
};
pub const VkVertexInputBindingDescription = struct_VkVertexInputBindingDescription;
pub const struct_VkVertexInputAttributeDescription = extern struct {
    location: u32 = @import("std").mem.zeroes(u32),
    binding: u32 = @import("std").mem.zeroes(u32),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    offset: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVertexInputAttributeDescription = struct_VkVertexInputAttributeDescription;
pub const struct_VkPipelineVertexInputStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineVertexInputStateCreateFlags = @import("std").mem.zeroes(VkPipelineVertexInputStateCreateFlags),
    vertexBindingDescriptionCount: u32 = @import("std").mem.zeroes(u32),
    pVertexBindingDescriptions: [*c]const VkVertexInputBindingDescription = @import("std").mem.zeroes([*c]const VkVertexInputBindingDescription),
    vertexAttributeDescriptionCount: u32 = @import("std").mem.zeroes(u32),
    pVertexAttributeDescriptions: [*c]const VkVertexInputAttributeDescription = @import("std").mem.zeroes([*c]const VkVertexInputAttributeDescription),
};
pub const VkPipelineVertexInputStateCreateInfo = struct_VkPipelineVertexInputStateCreateInfo;
pub const struct_VkPipelineInputAssemblyStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineInputAssemblyStateCreateFlags = @import("std").mem.zeroes(VkPipelineInputAssemblyStateCreateFlags),
    topology: VkPrimitiveTopology = @import("std").mem.zeroes(VkPrimitiveTopology),
    primitiveRestartEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPipelineInputAssemblyStateCreateInfo = struct_VkPipelineInputAssemblyStateCreateInfo;
pub const struct_VkPipelineTessellationStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineTessellationStateCreateFlags = @import("std").mem.zeroes(VkPipelineTessellationStateCreateFlags),
    patchControlPoints: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPipelineTessellationStateCreateInfo = struct_VkPipelineTessellationStateCreateInfo;
pub const struct_VkViewport = extern struct {
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    width: f32 = @import("std").mem.zeroes(f32),
    height: f32 = @import("std").mem.zeroes(f32),
    minDepth: f32 = @import("std").mem.zeroes(f32),
    maxDepth: f32 = @import("std").mem.zeroes(f32),
};
pub const VkViewport = struct_VkViewport;
pub const struct_VkPipelineViewportStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineViewportStateCreateFlags = @import("std").mem.zeroes(VkPipelineViewportStateCreateFlags),
    viewportCount: u32 = @import("std").mem.zeroes(u32),
    pViewports: [*c]const VkViewport = @import("std").mem.zeroes([*c]const VkViewport),
    scissorCount: u32 = @import("std").mem.zeroes(u32),
    pScissors: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
};
pub const VkPipelineViewportStateCreateInfo = struct_VkPipelineViewportStateCreateInfo;
pub const struct_VkPipelineRasterizationStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineRasterizationStateCreateFlags = @import("std").mem.zeroes(VkPipelineRasterizationStateCreateFlags),
    depthClampEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rasterizerDiscardEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    polygonMode: VkPolygonMode = @import("std").mem.zeroes(VkPolygonMode),
    cullMode: VkCullModeFlags = @import("std").mem.zeroes(VkCullModeFlags),
    frontFace: VkFrontFace = @import("std").mem.zeroes(VkFrontFace),
    depthBiasEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthBiasConstantFactor: f32 = @import("std").mem.zeroes(f32),
    depthBiasClamp: f32 = @import("std").mem.zeroes(f32),
    depthBiasSlopeFactor: f32 = @import("std").mem.zeroes(f32),
    lineWidth: f32 = @import("std").mem.zeroes(f32),
};
pub const VkPipelineRasterizationStateCreateInfo = struct_VkPipelineRasterizationStateCreateInfo;
pub const struct_VkPipelineMultisampleStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineMultisampleStateCreateFlags = @import("std").mem.zeroes(VkPipelineMultisampleStateCreateFlags),
    rasterizationSamples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    sampleShadingEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minSampleShading: f32 = @import("std").mem.zeroes(f32),
    pSampleMask: [*c]const VkSampleMask = @import("std").mem.zeroes([*c]const VkSampleMask),
    alphaToCoverageEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    alphaToOneEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPipelineMultisampleStateCreateInfo = struct_VkPipelineMultisampleStateCreateInfo;
pub const struct_VkStencilOpState = extern struct {
    failOp: VkStencilOp = @import("std").mem.zeroes(VkStencilOp),
    passOp: VkStencilOp = @import("std").mem.zeroes(VkStencilOp),
    depthFailOp: VkStencilOp = @import("std").mem.zeroes(VkStencilOp),
    compareOp: VkCompareOp = @import("std").mem.zeroes(VkCompareOp),
    compareMask: u32 = @import("std").mem.zeroes(u32),
    writeMask: u32 = @import("std").mem.zeroes(u32),
    reference: u32 = @import("std").mem.zeroes(u32),
};
pub const VkStencilOpState = struct_VkStencilOpState;
pub const struct_VkPipelineDepthStencilStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineDepthStencilStateCreateFlags = @import("std").mem.zeroes(VkPipelineDepthStencilStateCreateFlags),
    depthTestEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthWriteEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthCompareOp: VkCompareOp = @import("std").mem.zeroes(VkCompareOp),
    depthBoundsTestEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stencilTestEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    front: VkStencilOpState = @import("std").mem.zeroes(VkStencilOpState),
    back: VkStencilOpState = @import("std").mem.zeroes(VkStencilOpState),
    minDepthBounds: f32 = @import("std").mem.zeroes(f32),
    maxDepthBounds: f32 = @import("std").mem.zeroes(f32),
};
pub const VkPipelineDepthStencilStateCreateInfo = struct_VkPipelineDepthStencilStateCreateInfo;
pub const struct_VkPipelineColorBlendAttachmentState = extern struct {
    blendEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    srcColorBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    dstColorBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    colorBlendOp: VkBlendOp = @import("std").mem.zeroes(VkBlendOp),
    srcAlphaBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    dstAlphaBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    alphaBlendOp: VkBlendOp = @import("std").mem.zeroes(VkBlendOp),
    colorWriteMask: VkColorComponentFlags = @import("std").mem.zeroes(VkColorComponentFlags),
};
pub const VkPipelineColorBlendAttachmentState = struct_VkPipelineColorBlendAttachmentState;
pub const struct_VkPipelineColorBlendStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineColorBlendStateCreateFlags = @import("std").mem.zeroes(VkPipelineColorBlendStateCreateFlags),
    logicOpEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    logicOp: VkLogicOp = @import("std").mem.zeroes(VkLogicOp),
    attachmentCount: u32 = @import("std").mem.zeroes(u32),
    pAttachments: [*c]const VkPipelineColorBlendAttachmentState = @import("std").mem.zeroes([*c]const VkPipelineColorBlendAttachmentState),
    blendConstants: [4]f32 = @import("std").mem.zeroes([4]f32),
};
pub const VkPipelineColorBlendStateCreateInfo = struct_VkPipelineColorBlendStateCreateInfo;
pub const struct_VkPipelineDynamicStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineDynamicStateCreateFlags = @import("std").mem.zeroes(VkPipelineDynamicStateCreateFlags),
    dynamicStateCount: u32 = @import("std").mem.zeroes(u32),
    pDynamicStates: [*c]const VkDynamicState = @import("std").mem.zeroes([*c]const VkDynamicState),
};
pub const VkPipelineDynamicStateCreateInfo = struct_VkPipelineDynamicStateCreateInfo;
pub const struct_VkGraphicsPipelineCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCreateFlags = @import("std").mem.zeroes(VkPipelineCreateFlags),
    stageCount: u32 = @import("std").mem.zeroes(u32),
    pStages: [*c]const VkPipelineShaderStageCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineShaderStageCreateInfo),
    pVertexInputState: [*c]const VkPipelineVertexInputStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineVertexInputStateCreateInfo),
    pInputAssemblyState: [*c]const VkPipelineInputAssemblyStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineInputAssemblyStateCreateInfo),
    pTessellationState: [*c]const VkPipelineTessellationStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineTessellationStateCreateInfo),
    pViewportState: [*c]const VkPipelineViewportStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineViewportStateCreateInfo),
    pRasterizationState: [*c]const VkPipelineRasterizationStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineRasterizationStateCreateInfo),
    pMultisampleState: [*c]const VkPipelineMultisampleStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineMultisampleStateCreateInfo),
    pDepthStencilState: [*c]const VkPipelineDepthStencilStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineDepthStencilStateCreateInfo),
    pColorBlendState: [*c]const VkPipelineColorBlendStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineColorBlendStateCreateInfo),
    pDynamicState: [*c]const VkPipelineDynamicStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineDynamicStateCreateInfo),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    renderPass: VkRenderPass = @import("std").mem.zeroes(VkRenderPass),
    subpass: u32 = @import("std").mem.zeroes(u32),
    basePipelineHandle: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    basePipelineIndex: i32 = @import("std").mem.zeroes(i32),
};
pub const VkGraphicsPipelineCreateInfo = struct_VkGraphicsPipelineCreateInfo;
pub const struct_VkPushConstantRange = extern struct {
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    offset: u32 = @import("std").mem.zeroes(u32),
    size: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPushConstantRange = struct_VkPushConstantRange;
pub const struct_VkPipelineLayoutCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineLayoutCreateFlags = @import("std").mem.zeroes(VkPipelineLayoutCreateFlags),
    setLayoutCount: u32 = @import("std").mem.zeroes(u32),
    pSetLayouts: [*c]const VkDescriptorSetLayout = @import("std").mem.zeroes([*c]const VkDescriptorSetLayout),
    pushConstantRangeCount: u32 = @import("std").mem.zeroes(u32),
    pPushConstantRanges: [*c]const VkPushConstantRange = @import("std").mem.zeroes([*c]const VkPushConstantRange),
};
pub const VkPipelineLayoutCreateInfo = struct_VkPipelineLayoutCreateInfo;
pub const struct_VkSamplerCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkSamplerCreateFlags = @import("std").mem.zeroes(VkSamplerCreateFlags),
    magFilter: VkFilter = @import("std").mem.zeroes(VkFilter),
    minFilter: VkFilter = @import("std").mem.zeroes(VkFilter),
    mipmapMode: VkSamplerMipmapMode = @import("std").mem.zeroes(VkSamplerMipmapMode),
    addressModeU: VkSamplerAddressMode = @import("std").mem.zeroes(VkSamplerAddressMode),
    addressModeV: VkSamplerAddressMode = @import("std").mem.zeroes(VkSamplerAddressMode),
    addressModeW: VkSamplerAddressMode = @import("std").mem.zeroes(VkSamplerAddressMode),
    mipLodBias: f32 = @import("std").mem.zeroes(f32),
    anisotropyEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxAnisotropy: f32 = @import("std").mem.zeroes(f32),
    compareEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    compareOp: VkCompareOp = @import("std").mem.zeroes(VkCompareOp),
    minLod: f32 = @import("std").mem.zeroes(f32),
    maxLod: f32 = @import("std").mem.zeroes(f32),
    borderColor: VkBorderColor = @import("std").mem.zeroes(VkBorderColor),
    unnormalizedCoordinates: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSamplerCreateInfo = struct_VkSamplerCreateInfo;
pub const struct_VkCopyDescriptorSet = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcSet: VkDescriptorSet = @import("std").mem.zeroes(VkDescriptorSet),
    srcBinding: u32 = @import("std").mem.zeroes(u32),
    srcArrayElement: u32 = @import("std").mem.zeroes(u32),
    dstSet: VkDescriptorSet = @import("std").mem.zeroes(VkDescriptorSet),
    dstBinding: u32 = @import("std").mem.zeroes(u32),
    dstArrayElement: u32 = @import("std").mem.zeroes(u32),
    descriptorCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkCopyDescriptorSet = struct_VkCopyDescriptorSet;
pub const struct_VkDescriptorBufferInfo = extern struct {
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    range: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkDescriptorBufferInfo = struct_VkDescriptorBufferInfo;
pub const struct_VkDescriptorImageInfo = extern struct {
    sampler: VkSampler = @import("std").mem.zeroes(VkSampler),
    imageView: VkImageView = @import("std").mem.zeroes(VkImageView),
    imageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
};
pub const VkDescriptorImageInfo = struct_VkDescriptorImageInfo;
pub const struct_VkDescriptorPoolSize = extern struct {
    type: VkDescriptorType = @import("std").mem.zeroes(VkDescriptorType),
    descriptorCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDescriptorPoolSize = struct_VkDescriptorPoolSize;
pub const struct_VkDescriptorPoolCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDescriptorPoolCreateFlags = @import("std").mem.zeroes(VkDescriptorPoolCreateFlags),
    maxSets: u32 = @import("std").mem.zeroes(u32),
    poolSizeCount: u32 = @import("std").mem.zeroes(u32),
    pPoolSizes: [*c]const VkDescriptorPoolSize = @import("std").mem.zeroes([*c]const VkDescriptorPoolSize),
};
pub const VkDescriptorPoolCreateInfo = struct_VkDescriptorPoolCreateInfo;
pub const struct_VkDescriptorSetAllocateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    descriptorPool: VkDescriptorPool = @import("std").mem.zeroes(VkDescriptorPool),
    descriptorSetCount: u32 = @import("std").mem.zeroes(u32),
    pSetLayouts: [*c]const VkDescriptorSetLayout = @import("std").mem.zeroes([*c]const VkDescriptorSetLayout),
};
pub const VkDescriptorSetAllocateInfo = struct_VkDescriptorSetAllocateInfo;
pub const struct_VkDescriptorSetLayoutBinding = extern struct {
    binding: u32 = @import("std").mem.zeroes(u32),
    descriptorType: VkDescriptorType = @import("std").mem.zeroes(VkDescriptorType),
    descriptorCount: u32 = @import("std").mem.zeroes(u32),
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    pImmutableSamplers: [*c]const VkSampler = @import("std").mem.zeroes([*c]const VkSampler),
};
pub const VkDescriptorSetLayoutBinding = struct_VkDescriptorSetLayoutBinding;
pub const struct_VkDescriptorSetLayoutCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDescriptorSetLayoutCreateFlags = @import("std").mem.zeroes(VkDescriptorSetLayoutCreateFlags),
    bindingCount: u32 = @import("std").mem.zeroes(u32),
    pBindings: [*c]const VkDescriptorSetLayoutBinding = @import("std").mem.zeroes([*c]const VkDescriptorSetLayoutBinding),
};
pub const VkDescriptorSetLayoutCreateInfo = struct_VkDescriptorSetLayoutCreateInfo;
pub const struct_VkWriteDescriptorSet = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dstSet: VkDescriptorSet = @import("std").mem.zeroes(VkDescriptorSet),
    dstBinding: u32 = @import("std").mem.zeroes(u32),
    dstArrayElement: u32 = @import("std").mem.zeroes(u32),
    descriptorCount: u32 = @import("std").mem.zeroes(u32),
    descriptorType: VkDescriptorType = @import("std").mem.zeroes(VkDescriptorType),
    pImageInfo: [*c]const VkDescriptorImageInfo = @import("std").mem.zeroes([*c]const VkDescriptorImageInfo),
    pBufferInfo: [*c]const VkDescriptorBufferInfo = @import("std").mem.zeroes([*c]const VkDescriptorBufferInfo),
    pTexelBufferView: [*c]const VkBufferView = @import("std").mem.zeroes([*c]const VkBufferView),
};
pub const VkWriteDescriptorSet = struct_VkWriteDescriptorSet;
pub const struct_VkAttachmentDescription = extern struct {
    flags: VkAttachmentDescriptionFlags = @import("std").mem.zeroes(VkAttachmentDescriptionFlags),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    samples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    loadOp: VkAttachmentLoadOp = @import("std").mem.zeroes(VkAttachmentLoadOp),
    storeOp: VkAttachmentStoreOp = @import("std").mem.zeroes(VkAttachmentStoreOp),
    stencilLoadOp: VkAttachmentLoadOp = @import("std").mem.zeroes(VkAttachmentLoadOp),
    stencilStoreOp: VkAttachmentStoreOp = @import("std").mem.zeroes(VkAttachmentStoreOp),
    initialLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    finalLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
};
pub const VkAttachmentDescription = struct_VkAttachmentDescription;
pub const struct_VkAttachmentReference = extern struct {
    attachment: u32 = @import("std").mem.zeroes(u32),
    layout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
};
pub const VkAttachmentReference = struct_VkAttachmentReference;
pub const struct_VkFramebufferCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkFramebufferCreateFlags = @import("std").mem.zeroes(VkFramebufferCreateFlags),
    renderPass: VkRenderPass = @import("std").mem.zeroes(VkRenderPass),
    attachmentCount: u32 = @import("std").mem.zeroes(u32),
    pAttachments: [*c]const VkImageView = @import("std").mem.zeroes([*c]const VkImageView),
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
    layers: u32 = @import("std").mem.zeroes(u32),
};
pub const VkFramebufferCreateInfo = struct_VkFramebufferCreateInfo;
pub const struct_VkSubpassDescription = extern struct {
    flags: VkSubpassDescriptionFlags = @import("std").mem.zeroes(VkSubpassDescriptionFlags),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    inputAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pInputAttachments: [*c]const VkAttachmentReference = @import("std").mem.zeroes([*c]const VkAttachmentReference),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachments: [*c]const VkAttachmentReference = @import("std").mem.zeroes([*c]const VkAttachmentReference),
    pResolveAttachments: [*c]const VkAttachmentReference = @import("std").mem.zeroes([*c]const VkAttachmentReference),
    pDepthStencilAttachment: [*c]const VkAttachmentReference = @import("std").mem.zeroes([*c]const VkAttachmentReference),
    preserveAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pPreserveAttachments: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkSubpassDescription = struct_VkSubpassDescription;
pub const struct_VkSubpassDependency = extern struct {
    srcSubpass: u32 = @import("std").mem.zeroes(u32),
    dstSubpass: u32 = @import("std").mem.zeroes(u32),
    srcStageMask: VkPipelineStageFlags = @import("std").mem.zeroes(VkPipelineStageFlags),
    dstStageMask: VkPipelineStageFlags = @import("std").mem.zeroes(VkPipelineStageFlags),
    srcAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dstAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dependencyFlags: VkDependencyFlags = @import("std").mem.zeroes(VkDependencyFlags),
};
pub const VkSubpassDependency = struct_VkSubpassDependency;
pub const struct_VkRenderPassCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkRenderPassCreateFlags = @import("std").mem.zeroes(VkRenderPassCreateFlags),
    attachmentCount: u32 = @import("std").mem.zeroes(u32),
    pAttachments: [*c]const VkAttachmentDescription = @import("std").mem.zeroes([*c]const VkAttachmentDescription),
    subpassCount: u32 = @import("std").mem.zeroes(u32),
    pSubpasses: [*c]const VkSubpassDescription = @import("std").mem.zeroes([*c]const VkSubpassDescription),
    dependencyCount: u32 = @import("std").mem.zeroes(u32),
    pDependencies: [*c]const VkSubpassDependency = @import("std").mem.zeroes([*c]const VkSubpassDependency),
};
pub const VkRenderPassCreateInfo = struct_VkRenderPassCreateInfo;
pub const struct_VkCommandPoolCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkCommandPoolCreateFlags = @import("std").mem.zeroes(VkCommandPoolCreateFlags),
    queueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkCommandPoolCreateInfo = struct_VkCommandPoolCreateInfo;
pub const struct_VkCommandBufferAllocateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    commandPool: VkCommandPool = @import("std").mem.zeroes(VkCommandPool),
    level: VkCommandBufferLevel = @import("std").mem.zeroes(VkCommandBufferLevel),
    commandBufferCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkCommandBufferAllocateInfo = struct_VkCommandBufferAllocateInfo;
pub const struct_VkCommandBufferInheritanceInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    renderPass: VkRenderPass = @import("std").mem.zeroes(VkRenderPass),
    subpass: u32 = @import("std").mem.zeroes(u32),
    framebuffer: VkFramebuffer = @import("std").mem.zeroes(VkFramebuffer),
    occlusionQueryEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    queryFlags: VkQueryControlFlags = @import("std").mem.zeroes(VkQueryControlFlags),
    pipelineStatistics: VkQueryPipelineStatisticFlags = @import("std").mem.zeroes(VkQueryPipelineStatisticFlags),
};
pub const VkCommandBufferInheritanceInfo = struct_VkCommandBufferInheritanceInfo;
pub const struct_VkCommandBufferBeginInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkCommandBufferUsageFlags = @import("std").mem.zeroes(VkCommandBufferUsageFlags),
    pInheritanceInfo: [*c]const VkCommandBufferInheritanceInfo = @import("std").mem.zeroes([*c]const VkCommandBufferInheritanceInfo),
};
pub const VkCommandBufferBeginInfo = struct_VkCommandBufferBeginInfo;
pub const struct_VkBufferCopy = extern struct {
    srcOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    dstOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkBufferCopy = struct_VkBufferCopy;
pub const struct_VkImageSubresourceLayers = extern struct {
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
    mipLevel: u32 = @import("std").mem.zeroes(u32),
    baseArrayLayer: u32 = @import("std").mem.zeroes(u32),
    layerCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkImageSubresourceLayers = struct_VkImageSubresourceLayers;
pub const struct_VkBufferImageCopy = extern struct {
    bufferOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    bufferRowLength: u32 = @import("std").mem.zeroes(u32),
    bufferImageHeight: u32 = @import("std").mem.zeroes(u32),
    imageSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    imageOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    imageExtent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkBufferImageCopy = struct_VkBufferImageCopy;
pub const union_VkClearColorValue = extern union {
    float32: [4]f32,
    int32: [4]i32,
    uint32: [4]u32,
};
pub const VkClearColorValue = union_VkClearColorValue;
pub const struct_VkClearDepthStencilValue = extern struct {
    depth: f32 = @import("std").mem.zeroes(f32),
    stencil: u32 = @import("std").mem.zeroes(u32),
};
pub const VkClearDepthStencilValue = struct_VkClearDepthStencilValue;
pub const union_VkClearValue = extern union {
    color: VkClearColorValue,
    depthStencil: VkClearDepthStencilValue,
};
pub const VkClearValue = union_VkClearValue;
pub const struct_VkClearAttachment = extern struct {
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
    colorAttachment: u32 = @import("std").mem.zeroes(u32),
    clearValue: VkClearValue = @import("std").mem.zeroes(VkClearValue),
};
pub const VkClearAttachment = struct_VkClearAttachment;
pub const struct_VkClearRect = extern struct {
    rect: VkRect2D = @import("std").mem.zeroes(VkRect2D),
    baseArrayLayer: u32 = @import("std").mem.zeroes(u32),
    layerCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkClearRect = struct_VkClearRect;
pub const struct_VkImageBlit = extern struct {
    srcSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    srcOffsets: [2]VkOffset3D = @import("std").mem.zeroes([2]VkOffset3D),
    dstSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    dstOffsets: [2]VkOffset3D = @import("std").mem.zeroes([2]VkOffset3D),
};
pub const VkImageBlit = struct_VkImageBlit;
pub const struct_VkImageCopy = extern struct {
    srcSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    srcOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    dstSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    dstOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    extent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkImageCopy = struct_VkImageCopy;
pub const struct_VkImageResolve = extern struct {
    srcSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    srcOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    dstSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    dstOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    extent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkImageResolve = struct_VkImageResolve;
pub const struct_VkRenderPassBeginInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    renderPass: VkRenderPass = @import("std").mem.zeroes(VkRenderPass),
    framebuffer: VkFramebuffer = @import("std").mem.zeroes(VkFramebuffer),
    renderArea: VkRect2D = @import("std").mem.zeroes(VkRect2D),
    clearValueCount: u32 = @import("std").mem.zeroes(u32),
    pClearValues: [*c]const VkClearValue = @import("std").mem.zeroes([*c]const VkClearValue),
};
pub const VkRenderPassBeginInfo = struct_VkRenderPassBeginInfo;
pub const PFN_vkCreateInstance = ?*const fn ([*c]const VkInstanceCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkInstance) callconv(.C) VkResult;
pub const PFN_vkDestroyInstance = ?*const fn (VkInstance, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkEnumeratePhysicalDevices = ?*const fn (VkInstance, [*c]u32, [*c]VkPhysicalDevice) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceFeatures = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceFeatures) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceFormatProperties = ?*const fn (VkPhysicalDevice, VkFormat, [*c]VkFormatProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceImageFormatProperties = ?*const fn (VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, [*c]VkImageFormatProperties) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceProperties = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceQueueFamilyProperties = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkQueueFamilyProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceMemoryProperties = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceMemoryProperties) callconv(.C) void;
pub const PFN_vkGetInstanceProcAddr = ?*const fn (VkInstance, [*c]const u8) callconv(.C) PFN_vkVoidFunction;
pub const PFN_vkGetDeviceProcAddr = ?*const fn (VkDevice, [*c]const u8) callconv(.C) PFN_vkVoidFunction;
pub const PFN_vkCreateDevice = ?*const fn (VkPhysicalDevice, [*c]const VkDeviceCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkDevice) callconv(.C) VkResult;
pub const PFN_vkDestroyDevice = ?*const fn (VkDevice, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkEnumerateInstanceExtensionProperties = ?*const fn ([*c]const u8, [*c]u32, [*c]VkExtensionProperties) callconv(.C) VkResult;
pub const PFN_vkEnumerateDeviceExtensionProperties = ?*const fn (VkPhysicalDevice, [*c]const u8, [*c]u32, [*c]VkExtensionProperties) callconv(.C) VkResult;
pub const PFN_vkEnumerateInstanceLayerProperties = ?*const fn ([*c]u32, [*c]VkLayerProperties) callconv(.C) VkResult;
pub const PFN_vkEnumerateDeviceLayerProperties = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkLayerProperties) callconv(.C) VkResult;
pub const PFN_vkGetDeviceQueue = ?*const fn (VkDevice, u32, u32, [*c]VkQueue) callconv(.C) void;
pub const PFN_vkQueueSubmit = ?*const fn (VkQueue, u32, [*c]const VkSubmitInfo, VkFence) callconv(.C) VkResult;
pub const PFN_vkQueueWaitIdle = ?*const fn (VkQueue) callconv(.C) VkResult;
pub const PFN_vkDeviceWaitIdle = ?*const fn (VkDevice) callconv(.C) VkResult;
pub const PFN_vkAllocateMemory = ?*const fn (VkDevice, [*c]const VkMemoryAllocateInfo, [*c]const VkAllocationCallbacks, [*c]VkDeviceMemory) callconv(.C) VkResult;
pub const PFN_vkFreeMemory = ?*const fn (VkDevice, VkDeviceMemory, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkMapMemory = ?*const fn (VkDevice, VkDeviceMemory, VkDeviceSize, VkDeviceSize, VkMemoryMapFlags, [*c]?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkUnmapMemory = ?*const fn (VkDevice, VkDeviceMemory) callconv(.C) void;
pub const PFN_vkFlushMappedMemoryRanges = ?*const fn (VkDevice, u32, [*c]const VkMappedMemoryRange) callconv(.C) VkResult;
pub const PFN_vkInvalidateMappedMemoryRanges = ?*const fn (VkDevice, u32, [*c]const VkMappedMemoryRange) callconv(.C) VkResult;
pub const PFN_vkGetDeviceMemoryCommitment = ?*const fn (VkDevice, VkDeviceMemory, [*c]VkDeviceSize) callconv(.C) void;
pub const PFN_vkBindBufferMemory = ?*const fn (VkDevice, VkBuffer, VkDeviceMemory, VkDeviceSize) callconv(.C) VkResult;
pub const PFN_vkBindImageMemory = ?*const fn (VkDevice, VkImage, VkDeviceMemory, VkDeviceSize) callconv(.C) VkResult;
pub const PFN_vkGetBufferMemoryRequirements = ?*const fn (VkDevice, VkBuffer, [*c]VkMemoryRequirements) callconv(.C) void;
pub const PFN_vkGetImageMemoryRequirements = ?*const fn (VkDevice, VkImage, [*c]VkMemoryRequirements) callconv(.C) void;
pub const PFN_vkGetImageSparseMemoryRequirements = ?*const fn (VkDevice, VkImage, [*c]u32, [*c]VkSparseImageMemoryRequirements) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceSparseImageFormatProperties = ?*const fn (VkPhysicalDevice, VkFormat, VkImageType, VkSampleCountFlagBits, VkImageUsageFlags, VkImageTiling, [*c]u32, [*c]VkSparseImageFormatProperties) callconv(.C) void;
pub const PFN_vkQueueBindSparse = ?*const fn (VkQueue, u32, [*c]const VkBindSparseInfo, VkFence) callconv(.C) VkResult;
pub const PFN_vkCreateFence = ?*const fn (VkDevice, [*c]const VkFenceCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkFence) callconv(.C) VkResult;
pub const PFN_vkDestroyFence = ?*const fn (VkDevice, VkFence, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkResetFences = ?*const fn (VkDevice, u32, [*c]const VkFence) callconv(.C) VkResult;
pub const PFN_vkGetFenceStatus = ?*const fn (VkDevice, VkFence) callconv(.C) VkResult;
pub const PFN_vkWaitForFences = ?*const fn (VkDevice, u32, [*c]const VkFence, VkBool32, u64) callconv(.C) VkResult;
pub const PFN_vkCreateSemaphore = ?*const fn (VkDevice, [*c]const VkSemaphoreCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkSemaphore) callconv(.C) VkResult;
pub const PFN_vkDestroySemaphore = ?*const fn (VkDevice, VkSemaphore, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateEvent = ?*const fn (VkDevice, [*c]const VkEventCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkEvent) callconv(.C) VkResult;
pub const PFN_vkDestroyEvent = ?*const fn (VkDevice, VkEvent, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetEventStatus = ?*const fn (VkDevice, VkEvent) callconv(.C) VkResult;
pub const PFN_vkSetEvent = ?*const fn (VkDevice, VkEvent) callconv(.C) VkResult;
pub const PFN_vkResetEvent = ?*const fn (VkDevice, VkEvent) callconv(.C) VkResult;
pub const PFN_vkCreateQueryPool = ?*const fn (VkDevice, [*c]const VkQueryPoolCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkQueryPool) callconv(.C) VkResult;
pub const PFN_vkDestroyQueryPool = ?*const fn (VkDevice, VkQueryPool, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetQueryPoolResults = ?*const fn (VkDevice, VkQueryPool, u32, u32, usize, ?*anyopaque, VkDeviceSize, VkQueryResultFlags) callconv(.C) VkResult;
pub const PFN_vkCreateBuffer = ?*const fn (VkDevice, [*c]const VkBufferCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkBuffer) callconv(.C) VkResult;
pub const PFN_vkDestroyBuffer = ?*const fn (VkDevice, VkBuffer, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateBufferView = ?*const fn (VkDevice, [*c]const VkBufferViewCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkBufferView) callconv(.C) VkResult;
pub const PFN_vkDestroyBufferView = ?*const fn (VkDevice, VkBufferView, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateImage = ?*const fn (VkDevice, [*c]const VkImageCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkImage) callconv(.C) VkResult;
pub const PFN_vkDestroyImage = ?*const fn (VkDevice, VkImage, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetImageSubresourceLayout = ?*const fn (VkDevice, VkImage, [*c]const VkImageSubresource, [*c]VkSubresourceLayout) callconv(.C) void;
pub const PFN_vkCreateImageView = ?*const fn (VkDevice, [*c]const VkImageViewCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkImageView) callconv(.C) VkResult;
pub const PFN_vkDestroyImageView = ?*const fn (VkDevice, VkImageView, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateShaderModule = ?*const fn (VkDevice, [*c]const VkShaderModuleCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkShaderModule) callconv(.C) VkResult;
pub const PFN_vkDestroyShaderModule = ?*const fn (VkDevice, VkShaderModule, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreatePipelineCache = ?*const fn (VkDevice, [*c]const VkPipelineCacheCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPipelineCache) callconv(.C) VkResult;
pub const PFN_vkDestroyPipelineCache = ?*const fn (VkDevice, VkPipelineCache, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetPipelineCacheData = ?*const fn (VkDevice, VkPipelineCache, [*c]usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkMergePipelineCaches = ?*const fn (VkDevice, VkPipelineCache, u32, [*c]const VkPipelineCache) callconv(.C) VkResult;
pub const PFN_vkCreateGraphicsPipelines = ?*const fn (VkDevice, VkPipelineCache, u32, [*c]const VkGraphicsPipelineCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPipeline) callconv(.C) VkResult;
pub const PFN_vkCreateComputePipelines = ?*const fn (VkDevice, VkPipelineCache, u32, [*c]const VkComputePipelineCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPipeline) callconv(.C) VkResult;
pub const PFN_vkDestroyPipeline = ?*const fn (VkDevice, VkPipeline, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreatePipelineLayout = ?*const fn (VkDevice, [*c]const VkPipelineLayoutCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPipelineLayout) callconv(.C) VkResult;
pub const PFN_vkDestroyPipelineLayout = ?*const fn (VkDevice, VkPipelineLayout, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateSampler = ?*const fn (VkDevice, [*c]const VkSamplerCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkSampler) callconv(.C) VkResult;
pub const PFN_vkDestroySampler = ?*const fn (VkDevice, VkSampler, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateDescriptorSetLayout = ?*const fn (VkDevice, [*c]const VkDescriptorSetLayoutCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkDescriptorSetLayout) callconv(.C) VkResult;
pub const PFN_vkDestroyDescriptorSetLayout = ?*const fn (VkDevice, VkDescriptorSetLayout, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateDescriptorPool = ?*const fn (VkDevice, [*c]const VkDescriptorPoolCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkDescriptorPool) callconv(.C) VkResult;
pub const PFN_vkDestroyDescriptorPool = ?*const fn (VkDevice, VkDescriptorPool, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkResetDescriptorPool = ?*const fn (VkDevice, VkDescriptorPool, VkDescriptorPoolResetFlags) callconv(.C) VkResult;
pub const PFN_vkAllocateDescriptorSets = ?*const fn (VkDevice, [*c]const VkDescriptorSetAllocateInfo, [*c]VkDescriptorSet) callconv(.C) VkResult;
pub const PFN_vkFreeDescriptorSets = ?*const fn (VkDevice, VkDescriptorPool, u32, [*c]const VkDescriptorSet) callconv(.C) VkResult;
pub const PFN_vkUpdateDescriptorSets = ?*const fn (VkDevice, u32, [*c]const VkWriteDescriptorSet, u32, [*c]const VkCopyDescriptorSet) callconv(.C) void;
pub const PFN_vkCreateFramebuffer = ?*const fn (VkDevice, [*c]const VkFramebufferCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkFramebuffer) callconv(.C) VkResult;
pub const PFN_vkDestroyFramebuffer = ?*const fn (VkDevice, VkFramebuffer, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateRenderPass = ?*const fn (VkDevice, [*c]const VkRenderPassCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkRenderPass) callconv(.C) VkResult;
pub const PFN_vkDestroyRenderPass = ?*const fn (VkDevice, VkRenderPass, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetRenderAreaGranularity = ?*const fn (VkDevice, VkRenderPass, [*c]VkExtent2D) callconv(.C) void;
pub const PFN_vkCreateCommandPool = ?*const fn (VkDevice, [*c]const VkCommandPoolCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkCommandPool) callconv(.C) VkResult;
pub const PFN_vkDestroyCommandPool = ?*const fn (VkDevice, VkCommandPool, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkResetCommandPool = ?*const fn (VkDevice, VkCommandPool, VkCommandPoolResetFlags) callconv(.C) VkResult;
pub const PFN_vkAllocateCommandBuffers = ?*const fn (VkDevice, [*c]const VkCommandBufferAllocateInfo, [*c]VkCommandBuffer) callconv(.C) VkResult;
pub const PFN_vkFreeCommandBuffers = ?*const fn (VkDevice, VkCommandPool, u32, [*c]const VkCommandBuffer) callconv(.C) void;
pub const PFN_vkBeginCommandBuffer = ?*const fn (VkCommandBuffer, [*c]const VkCommandBufferBeginInfo) callconv(.C) VkResult;
pub const PFN_vkEndCommandBuffer = ?*const fn (VkCommandBuffer) callconv(.C) VkResult;
pub const PFN_vkResetCommandBuffer = ?*const fn (VkCommandBuffer, VkCommandBufferResetFlags) callconv(.C) VkResult;
pub const PFN_vkCmdBindPipeline = ?*const fn (VkCommandBuffer, VkPipelineBindPoint, VkPipeline) callconv(.C) void;
pub const PFN_vkCmdSetViewport = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkViewport) callconv(.C) void;
pub const PFN_vkCmdSetScissor = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkRect2D) callconv(.C) void;
pub const PFN_vkCmdSetLineWidth = ?*const fn (VkCommandBuffer, f32) callconv(.C) void;
pub const PFN_vkCmdSetDepthBias = ?*const fn (VkCommandBuffer, f32, f32, f32) callconv(.C) void;
pub const PFN_vkCmdSetBlendConstants = ?*const fn (VkCommandBuffer, [*c]const f32) callconv(.C) void;
pub const PFN_vkCmdSetDepthBounds = ?*const fn (VkCommandBuffer, f32, f32) callconv(.C) void;
pub const PFN_vkCmdSetStencilCompareMask = ?*const fn (VkCommandBuffer, VkStencilFaceFlags, u32) callconv(.C) void;
pub const PFN_vkCmdSetStencilWriteMask = ?*const fn (VkCommandBuffer, VkStencilFaceFlags, u32) callconv(.C) void;
pub const PFN_vkCmdSetStencilReference = ?*const fn (VkCommandBuffer, VkStencilFaceFlags, u32) callconv(.C) void;
pub const PFN_vkCmdBindDescriptorSets = ?*const fn (VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, u32, u32, [*c]const VkDescriptorSet, u32, [*c]const u32) callconv(.C) void;
pub const PFN_vkCmdBindIndexBuffer = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkIndexType) callconv(.C) void;
pub const PFN_vkCmdBindVertexBuffers = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdDraw = ?*const fn (VkCommandBuffer, u32, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexed = ?*const fn (VkCommandBuffer, u32, u32, u32, i32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndirect = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexedIndirect = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDispatch = ?*const fn (VkCommandBuffer, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDispatchIndirect = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdCopyBuffer = ?*const fn (VkCommandBuffer, VkBuffer, VkBuffer, u32, [*c]const VkBufferCopy) callconv(.C) void;
pub const PFN_vkCmdCopyImage = ?*const fn (VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, u32, [*c]const VkImageCopy) callconv(.C) void;
pub const PFN_vkCmdBlitImage = ?*const fn (VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, u32, [*c]const VkImageBlit, VkFilter) callconv(.C) void;
pub const PFN_vkCmdCopyBufferToImage = ?*const fn (VkCommandBuffer, VkBuffer, VkImage, VkImageLayout, u32, [*c]const VkBufferImageCopy) callconv(.C) void;
pub const PFN_vkCmdCopyImageToBuffer = ?*const fn (VkCommandBuffer, VkImage, VkImageLayout, VkBuffer, u32, [*c]const VkBufferImageCopy) callconv(.C) void;
pub const PFN_vkCmdUpdateBuffer = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, ?*const anyopaque) callconv(.C) void;
pub const PFN_vkCmdFillBuffer = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, u32) callconv(.C) void;
pub const PFN_vkCmdClearColorImage = ?*const fn (VkCommandBuffer, VkImage, VkImageLayout, [*c]const VkClearColorValue, u32, [*c]const VkImageSubresourceRange) callconv(.C) void;
pub const PFN_vkCmdClearDepthStencilImage = ?*const fn (VkCommandBuffer, VkImage, VkImageLayout, [*c]const VkClearDepthStencilValue, u32, [*c]const VkImageSubresourceRange) callconv(.C) void;
pub const PFN_vkCmdClearAttachments = ?*const fn (VkCommandBuffer, u32, [*c]const VkClearAttachment, u32, [*c]const VkClearRect) callconv(.C) void;
pub const PFN_vkCmdResolveImage = ?*const fn (VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, u32, [*c]const VkImageResolve) callconv(.C) void;
pub const PFN_vkCmdSetEvent = ?*const fn (VkCommandBuffer, VkEvent, VkPipelineStageFlags) callconv(.C) void;
pub const PFN_vkCmdResetEvent = ?*const fn (VkCommandBuffer, VkEvent, VkPipelineStageFlags) callconv(.C) void;
pub const PFN_vkCmdWaitEvents = ?*const fn (VkCommandBuffer, u32, [*c]const VkEvent, VkPipelineStageFlags, VkPipelineStageFlags, u32, [*c]const VkMemoryBarrier, u32, [*c]const VkBufferMemoryBarrier, u32, [*c]const VkImageMemoryBarrier) callconv(.C) void;
pub const PFN_vkCmdPipelineBarrier = ?*const fn (VkCommandBuffer, VkPipelineStageFlags, VkPipelineStageFlags, VkDependencyFlags, u32, [*c]const VkMemoryBarrier, u32, [*c]const VkBufferMemoryBarrier, u32, [*c]const VkImageMemoryBarrier) callconv(.C) void;
pub const PFN_vkCmdBeginQuery = ?*const fn (VkCommandBuffer, VkQueryPool, u32, VkQueryControlFlags) callconv(.C) void;
pub const PFN_vkCmdEndQuery = ?*const fn (VkCommandBuffer, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkCmdResetQueryPool = ?*const fn (VkCommandBuffer, VkQueryPool, u32, u32) callconv(.C) void;
pub const PFN_vkCmdWriteTimestamp = ?*const fn (VkCommandBuffer, VkPipelineStageFlagBits, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkCmdCopyQueryPoolResults = ?*const fn (VkCommandBuffer, VkQueryPool, u32, u32, VkBuffer, VkDeviceSize, VkDeviceSize, VkQueryResultFlags) callconv(.C) void;
pub const PFN_vkCmdPushConstants = ?*const fn (VkCommandBuffer, VkPipelineLayout, VkShaderStageFlags, u32, u32, ?*const anyopaque) callconv(.C) void;
pub const PFN_vkCmdBeginRenderPass = ?*const fn (VkCommandBuffer, [*c]const VkRenderPassBeginInfo, VkSubpassContents) callconv(.C) void;
pub const PFN_vkCmdNextSubpass = ?*const fn (VkCommandBuffer, VkSubpassContents) callconv(.C) void;
pub const PFN_vkCmdEndRenderPass = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub const PFN_vkCmdExecuteCommands = ?*const fn (VkCommandBuffer, u32, [*c]const VkCommandBuffer) callconv(.C) void;
pub extern fn vkCreateInstance(pCreateInfo: [*c]const VkInstanceCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pInstance: [*c]VkInstance) VkResult;
pub extern fn vkDestroyInstance(instance: VkInstance, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkEnumeratePhysicalDevices(instance: VkInstance, pPhysicalDeviceCount: [*c]u32, pPhysicalDevices: [*c]VkPhysicalDevice) VkResult;
pub extern fn vkGetPhysicalDeviceFeatures(physicalDevice: VkPhysicalDevice, pFeatures: [*c]VkPhysicalDeviceFeatures) void;
pub extern fn vkGetPhysicalDeviceFormatProperties(physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: [*c]VkFormatProperties) void;
pub extern fn vkGetPhysicalDeviceImageFormatProperties(physicalDevice: VkPhysicalDevice, format: VkFormat, @"type": VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags, pImageFormatProperties: [*c]VkImageFormatProperties) VkResult;
pub extern fn vkGetPhysicalDeviceProperties(physicalDevice: VkPhysicalDevice, pProperties: [*c]VkPhysicalDeviceProperties) void;
pub extern fn vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: [*c]u32, pQueueFamilyProperties: [*c]VkQueueFamilyProperties) void;
pub extern fn vkGetPhysicalDeviceMemoryProperties(physicalDevice: VkPhysicalDevice, pMemoryProperties: [*c]VkPhysicalDeviceMemoryProperties) void;
pub extern fn vkGetInstanceProcAddr(instance: VkInstance, pName: [*c]const u8) PFN_vkVoidFunction;
pub extern fn vkGetDeviceProcAddr(device: VkDevice, pName: [*c]const u8) PFN_vkVoidFunction;
pub extern fn vkCreateDevice(physicalDevice: VkPhysicalDevice, pCreateInfo: [*c]const VkDeviceCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pDevice: [*c]VkDevice) VkResult;
pub extern fn vkDestroyDevice(device: VkDevice, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkEnumerateInstanceExtensionProperties(pLayerName: [*c]const u8, pPropertyCount: [*c]u32, pProperties: [*c]VkExtensionProperties) VkResult;
pub extern fn vkEnumerateDeviceExtensionProperties(physicalDevice: VkPhysicalDevice, pLayerName: [*c]const u8, pPropertyCount: [*c]u32, pProperties: [*c]VkExtensionProperties) VkResult;
pub extern fn vkEnumerateInstanceLayerProperties(pPropertyCount: [*c]u32, pProperties: [*c]VkLayerProperties) VkResult;
pub extern fn vkEnumerateDeviceLayerProperties(physicalDevice: VkPhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]VkLayerProperties) VkResult;
pub extern fn vkGetDeviceQueue(device: VkDevice, queueFamilyIndex: u32, queueIndex: u32, pQueue: [*c]VkQueue) void;
pub extern fn vkQueueSubmit(queue: VkQueue, submitCount: u32, pSubmits: [*c]const VkSubmitInfo, fence: VkFence) VkResult;
pub extern fn vkQueueWaitIdle(queue: VkQueue) VkResult;
pub extern fn vkDeviceWaitIdle(device: VkDevice) VkResult;
pub extern fn vkAllocateMemory(device: VkDevice, pAllocateInfo: [*c]const VkMemoryAllocateInfo, pAllocator: [*c]const VkAllocationCallbacks, pMemory: [*c]VkDeviceMemory) VkResult;
pub extern fn vkFreeMemory(device: VkDevice, memory: VkDeviceMemory, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkMapMemory(device: VkDevice, memory: VkDeviceMemory, offset: VkDeviceSize, size: VkDeviceSize, flags: VkMemoryMapFlags, ppData: [*c]?*anyopaque) VkResult;
pub extern fn vkUnmapMemory(device: VkDevice, memory: VkDeviceMemory) void;
pub extern fn vkFlushMappedMemoryRanges(device: VkDevice, memoryRangeCount: u32, pMemoryRanges: [*c]const VkMappedMemoryRange) VkResult;
pub extern fn vkInvalidateMappedMemoryRanges(device: VkDevice, memoryRangeCount: u32, pMemoryRanges: [*c]const VkMappedMemoryRange) VkResult;
pub extern fn vkGetDeviceMemoryCommitment(device: VkDevice, memory: VkDeviceMemory, pCommittedMemoryInBytes: [*c]VkDeviceSize) void;
pub extern fn vkBindBufferMemory(device: VkDevice, buffer: VkBuffer, memory: VkDeviceMemory, memoryOffset: VkDeviceSize) VkResult;
pub extern fn vkBindImageMemory(device: VkDevice, image: VkImage, memory: VkDeviceMemory, memoryOffset: VkDeviceSize) VkResult;
pub extern fn vkGetBufferMemoryRequirements(device: VkDevice, buffer: VkBuffer, pMemoryRequirements: [*c]VkMemoryRequirements) void;
pub extern fn vkGetImageMemoryRequirements(device: VkDevice, image: VkImage, pMemoryRequirements: [*c]VkMemoryRequirements) void;
pub extern fn vkGetImageSparseMemoryRequirements(device: VkDevice, image: VkImage, pSparseMemoryRequirementCount: [*c]u32, pSparseMemoryRequirements: [*c]VkSparseImageMemoryRequirements) void;
pub extern fn vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice: VkPhysicalDevice, format: VkFormat, @"type": VkImageType, samples: VkSampleCountFlagBits, usage: VkImageUsageFlags, tiling: VkImageTiling, pPropertyCount: [*c]u32, pProperties: [*c]VkSparseImageFormatProperties) void;
pub extern fn vkQueueBindSparse(queue: VkQueue, bindInfoCount: u32, pBindInfo: [*c]const VkBindSparseInfo, fence: VkFence) VkResult;
pub extern fn vkCreateFence(device: VkDevice, pCreateInfo: [*c]const VkFenceCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pFence: [*c]VkFence) VkResult;
pub extern fn vkDestroyFence(device: VkDevice, fence: VkFence, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkResetFences(device: VkDevice, fenceCount: u32, pFences: [*c]const VkFence) VkResult;
pub extern fn vkGetFenceStatus(device: VkDevice, fence: VkFence) VkResult;
pub extern fn vkWaitForFences(device: VkDevice, fenceCount: u32, pFences: [*c]const VkFence, waitAll: VkBool32, timeout: u64) VkResult;
pub extern fn vkCreateSemaphore(device: VkDevice, pCreateInfo: [*c]const VkSemaphoreCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pSemaphore: [*c]VkSemaphore) VkResult;
pub extern fn vkDestroySemaphore(device: VkDevice, semaphore: VkSemaphore, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateEvent(device: VkDevice, pCreateInfo: [*c]const VkEventCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pEvent: [*c]VkEvent) VkResult;
pub extern fn vkDestroyEvent(device: VkDevice, event: VkEvent, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetEventStatus(device: VkDevice, event: VkEvent) VkResult;
pub extern fn vkSetEvent(device: VkDevice, event: VkEvent) VkResult;
pub extern fn vkResetEvent(device: VkDevice, event: VkEvent) VkResult;
pub extern fn vkCreateQueryPool(device: VkDevice, pCreateInfo: [*c]const VkQueryPoolCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pQueryPool: [*c]VkQueryPool) VkResult;
pub extern fn vkDestroyQueryPool(device: VkDevice, queryPool: VkQueryPool, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetQueryPoolResults(device: VkDevice, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32, dataSize: usize, pData: ?*anyopaque, stride: VkDeviceSize, flags: VkQueryResultFlags) VkResult;
pub extern fn vkCreateBuffer(device: VkDevice, pCreateInfo: [*c]const VkBufferCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pBuffer: [*c]VkBuffer) VkResult;
pub extern fn vkDestroyBuffer(device: VkDevice, buffer: VkBuffer, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateBufferView(device: VkDevice, pCreateInfo: [*c]const VkBufferViewCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pView: [*c]VkBufferView) VkResult;
pub extern fn vkDestroyBufferView(device: VkDevice, bufferView: VkBufferView, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateImage(device: VkDevice, pCreateInfo: [*c]const VkImageCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pImage: [*c]VkImage) VkResult;
pub extern fn vkDestroyImage(device: VkDevice, image: VkImage, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetImageSubresourceLayout(device: VkDevice, image: VkImage, pSubresource: [*c]const VkImageSubresource, pLayout: [*c]VkSubresourceLayout) void;
pub extern fn vkCreateImageView(device: VkDevice, pCreateInfo: [*c]const VkImageViewCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pView: [*c]VkImageView) VkResult;
pub extern fn vkDestroyImageView(device: VkDevice, imageView: VkImageView, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateShaderModule(device: VkDevice, pCreateInfo: [*c]const VkShaderModuleCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pShaderModule: [*c]VkShaderModule) VkResult;
pub extern fn vkDestroyShaderModule(device: VkDevice, shaderModule: VkShaderModule, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreatePipelineCache(device: VkDevice, pCreateInfo: [*c]const VkPipelineCacheCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pPipelineCache: [*c]VkPipelineCache) VkResult;
pub extern fn vkDestroyPipelineCache(device: VkDevice, pipelineCache: VkPipelineCache, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetPipelineCacheData(device: VkDevice, pipelineCache: VkPipelineCache, pDataSize: [*c]usize, pData: ?*anyopaque) VkResult;
pub extern fn vkMergePipelineCaches(device: VkDevice, dstCache: VkPipelineCache, srcCacheCount: u32, pSrcCaches: [*c]const VkPipelineCache) VkResult;
pub extern fn vkCreateGraphicsPipelines(device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: [*c]const VkGraphicsPipelineCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pPipelines: [*c]VkPipeline) VkResult;
pub extern fn vkCreateComputePipelines(device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: [*c]const VkComputePipelineCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pPipelines: [*c]VkPipeline) VkResult;
pub extern fn vkDestroyPipeline(device: VkDevice, pipeline: VkPipeline, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreatePipelineLayout(device: VkDevice, pCreateInfo: [*c]const VkPipelineLayoutCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pPipelineLayout: [*c]VkPipelineLayout) VkResult;
pub extern fn vkDestroyPipelineLayout(device: VkDevice, pipelineLayout: VkPipelineLayout, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateSampler(device: VkDevice, pCreateInfo: [*c]const VkSamplerCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pSampler: [*c]VkSampler) VkResult;
pub extern fn vkDestroySampler(device: VkDevice, sampler: VkSampler, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateDescriptorSetLayout(device: VkDevice, pCreateInfo: [*c]const VkDescriptorSetLayoutCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pSetLayout: [*c]VkDescriptorSetLayout) VkResult;
pub extern fn vkDestroyDescriptorSetLayout(device: VkDevice, descriptorSetLayout: VkDescriptorSetLayout, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateDescriptorPool(device: VkDevice, pCreateInfo: [*c]const VkDescriptorPoolCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pDescriptorPool: [*c]VkDescriptorPool) VkResult;
pub extern fn vkDestroyDescriptorPool(device: VkDevice, descriptorPool: VkDescriptorPool, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkResetDescriptorPool(device: VkDevice, descriptorPool: VkDescriptorPool, flags: VkDescriptorPoolResetFlags) VkResult;
pub extern fn vkAllocateDescriptorSets(device: VkDevice, pAllocateInfo: [*c]const VkDescriptorSetAllocateInfo, pDescriptorSets: [*c]VkDescriptorSet) VkResult;
pub extern fn vkFreeDescriptorSets(device: VkDevice, descriptorPool: VkDescriptorPool, descriptorSetCount: u32, pDescriptorSets: [*c]const VkDescriptorSet) VkResult;
pub extern fn vkUpdateDescriptorSets(device: VkDevice, descriptorWriteCount: u32, pDescriptorWrites: [*c]const VkWriteDescriptorSet, descriptorCopyCount: u32, pDescriptorCopies: [*c]const VkCopyDescriptorSet) void;
pub extern fn vkCreateFramebuffer(device: VkDevice, pCreateInfo: [*c]const VkFramebufferCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pFramebuffer: [*c]VkFramebuffer) VkResult;
pub extern fn vkDestroyFramebuffer(device: VkDevice, framebuffer: VkFramebuffer, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateRenderPass(device: VkDevice, pCreateInfo: [*c]const VkRenderPassCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pRenderPass: [*c]VkRenderPass) VkResult;
pub extern fn vkDestroyRenderPass(device: VkDevice, renderPass: VkRenderPass, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetRenderAreaGranularity(device: VkDevice, renderPass: VkRenderPass, pGranularity: [*c]VkExtent2D) void;
pub extern fn vkCreateCommandPool(device: VkDevice, pCreateInfo: [*c]const VkCommandPoolCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pCommandPool: [*c]VkCommandPool) VkResult;
pub extern fn vkDestroyCommandPool(device: VkDevice, commandPool: VkCommandPool, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkResetCommandPool(device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolResetFlags) VkResult;
pub extern fn vkAllocateCommandBuffers(device: VkDevice, pAllocateInfo: [*c]const VkCommandBufferAllocateInfo, pCommandBuffers: [*c]VkCommandBuffer) VkResult;
pub extern fn vkFreeCommandBuffers(device: VkDevice, commandPool: VkCommandPool, commandBufferCount: u32, pCommandBuffers: [*c]const VkCommandBuffer) void;
pub extern fn vkBeginCommandBuffer(commandBuffer: VkCommandBuffer, pBeginInfo: [*c]const VkCommandBufferBeginInfo) VkResult;
pub extern fn vkEndCommandBuffer(commandBuffer: VkCommandBuffer) VkResult;
pub extern fn vkResetCommandBuffer(commandBuffer: VkCommandBuffer, flags: VkCommandBufferResetFlags) VkResult;
pub extern fn vkCmdBindPipeline(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline) void;
pub extern fn vkCmdSetViewport(commandBuffer: VkCommandBuffer, firstViewport: u32, viewportCount: u32, pViewports: [*c]const VkViewport) void;
pub extern fn vkCmdSetScissor(commandBuffer: VkCommandBuffer, firstScissor: u32, scissorCount: u32, pScissors: [*c]const VkRect2D) void;
pub extern fn vkCmdSetLineWidth(commandBuffer: VkCommandBuffer, lineWidth: f32) void;
pub extern fn vkCmdSetDepthBias(commandBuffer: VkCommandBuffer, depthBiasConstantFactor: f32, depthBiasClamp: f32, depthBiasSlopeFactor: f32) void;
pub extern fn vkCmdSetBlendConstants(commandBuffer: VkCommandBuffer, blendConstants: [*c]const f32) void;
pub extern fn vkCmdSetDepthBounds(commandBuffer: VkCommandBuffer, minDepthBounds: f32, maxDepthBounds: f32) void;
pub extern fn vkCmdSetStencilCompareMask(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, compareMask: u32) void;
pub extern fn vkCmdSetStencilWriteMask(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, writeMask: u32) void;
pub extern fn vkCmdSetStencilReference(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, reference: u32) void;
pub extern fn vkCmdBindDescriptorSets(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, firstSet: u32, descriptorSetCount: u32, pDescriptorSets: [*c]const VkDescriptorSet, dynamicOffsetCount: u32, pDynamicOffsets: [*c]const u32) void;
pub extern fn vkCmdBindIndexBuffer(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, indexType: VkIndexType) void;
pub extern fn vkCmdBindVertexBuffers(commandBuffer: VkCommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: [*c]const VkBuffer, pOffsets: [*c]const VkDeviceSize) void;
pub extern fn vkCmdDraw(commandBuffer: VkCommandBuffer, vertexCount: u32, instanceCount: u32, firstVertex: u32, firstInstance: u32) void;
pub extern fn vkCmdDrawIndexed(commandBuffer: VkCommandBuffer, indexCount: u32, instanceCount: u32, firstIndex: u32, vertexOffset: i32, firstInstance: u32) void;
pub extern fn vkCmdDrawIndirect(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32) void;
pub extern fn vkCmdDrawIndexedIndirect(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32) void;
pub extern fn vkCmdDispatch(commandBuffer: VkCommandBuffer, groupCountX: u32, groupCountY: u32, groupCountZ: u32) void;
pub extern fn vkCmdDispatchIndirect(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize) void;
pub extern fn vkCmdCopyBuffer(commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstBuffer: VkBuffer, regionCount: u32, pRegions: [*c]const VkBufferCopy) void;
pub extern fn vkCmdCopyImage(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: [*c]const VkImageCopy) void;
pub extern fn vkCmdBlitImage(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: [*c]const VkImageBlit, filter: VkFilter) void;
pub extern fn vkCmdCopyBufferToImage(commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: [*c]const VkBufferImageCopy) void;
pub extern fn vkCmdCopyImageToBuffer(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstBuffer: VkBuffer, regionCount: u32, pRegions: [*c]const VkBufferImageCopy) void;
pub extern fn vkCmdUpdateBuffer(commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, dataSize: VkDeviceSize, pData: ?*const anyopaque) void;
pub extern fn vkCmdFillBuffer(commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, size: VkDeviceSize, data: u32) void;
pub extern fn vkCmdClearColorImage(commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pColor: [*c]const VkClearColorValue, rangeCount: u32, pRanges: [*c]const VkImageSubresourceRange) void;
pub extern fn vkCmdClearDepthStencilImage(commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pDepthStencil: [*c]const VkClearDepthStencilValue, rangeCount: u32, pRanges: [*c]const VkImageSubresourceRange) void;
pub extern fn vkCmdClearAttachments(commandBuffer: VkCommandBuffer, attachmentCount: u32, pAttachments: [*c]const VkClearAttachment, rectCount: u32, pRects: [*c]const VkClearRect) void;
pub extern fn vkCmdResolveImage(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: [*c]const VkImageResolve) void;
pub extern fn vkCmdSetEvent(commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags) void;
pub extern fn vkCmdResetEvent(commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags) void;
pub extern fn vkCmdWaitEvents(commandBuffer: VkCommandBuffer, eventCount: u32, pEvents: [*c]const VkEvent, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, memoryBarrierCount: u32, pMemoryBarriers: [*c]const VkMemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: [*c]const VkBufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: [*c]const VkImageMemoryBarrier) void;
pub extern fn vkCmdPipelineBarrier(commandBuffer: VkCommandBuffer, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, dependencyFlags: VkDependencyFlags, memoryBarrierCount: u32, pMemoryBarriers: [*c]const VkMemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: [*c]const VkBufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: [*c]const VkImageMemoryBarrier) void;
pub extern fn vkCmdBeginQuery(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32, flags: VkQueryControlFlags) void;
pub extern fn vkCmdEndQuery(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32) void;
pub extern fn vkCmdResetQueryPool(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32) void;
pub extern fn vkCmdWriteTimestamp(commandBuffer: VkCommandBuffer, pipelineStage: VkPipelineStageFlagBits, queryPool: VkQueryPool, query: u32) void;
pub extern fn vkCmdCopyQueryPoolResults(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, stride: VkDeviceSize, flags: VkQueryResultFlags) void;
pub extern fn vkCmdPushConstants(commandBuffer: VkCommandBuffer, layout: VkPipelineLayout, stageFlags: VkShaderStageFlags, offset: u32, size: u32, pValues: ?*const anyopaque) void;
pub extern fn vkCmdBeginRenderPass(commandBuffer: VkCommandBuffer, pRenderPassBegin: [*c]const VkRenderPassBeginInfo, contents: VkSubpassContents) void;
pub extern fn vkCmdNextSubpass(commandBuffer: VkCommandBuffer, contents: VkSubpassContents) void;
pub extern fn vkCmdEndRenderPass(commandBuffer: VkCommandBuffer) void;
pub extern fn vkCmdExecuteCommands(commandBuffer: VkCommandBuffer, commandBufferCount: u32, pCommandBuffers: [*c]const VkCommandBuffer) void;
pub const struct_VkSamplerYcbcrConversion_T = opaque {};
pub const VkSamplerYcbcrConversion = ?*struct_VkSamplerYcbcrConversion_T;
pub const struct_VkDescriptorUpdateTemplate_T = opaque {};
pub const VkDescriptorUpdateTemplate = ?*struct_VkDescriptorUpdateTemplate_T;
pub const VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES: c_int = 0;
pub const VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY: c_int = 1;
pub const VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR: c_int = 0;
pub const VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR: c_int = 1;
pub const VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPointClippingBehavior = c_uint;
pub const VkPointClippingBehavior = enum_VkPointClippingBehavior;
pub const VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT: c_int = 0;
pub const VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT: c_int = 1;
pub const VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR: c_int = 0;
pub const VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR: c_int = 1;
pub const VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM: c_int = 2147483647;
pub const enum_VkTessellationDomainOrigin = c_uint;
pub const VkTessellationDomainOrigin = enum_VkTessellationDomainOrigin;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY: c_int = 0;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY: c_int = 1;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709: c_int = 2;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601: c_int = 3;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020: c_int = 4;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR: c_int = 0;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR: c_int = 1;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR: c_int = 2;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR: c_int = 3;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR: c_int = 4;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSamplerYcbcrModelConversion = c_uint;
pub const VkSamplerYcbcrModelConversion = enum_VkSamplerYcbcrModelConversion;
pub const VK_SAMPLER_YCBCR_RANGE_ITU_FULL: c_int = 0;
pub const VK_SAMPLER_YCBCR_RANGE_ITU_NARROW: c_int = 1;
pub const VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR: c_int = 0;
pub const VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR: c_int = 1;
pub const VK_SAMPLER_YCBCR_RANGE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSamplerYcbcrRange = c_uint;
pub const VkSamplerYcbcrRange = enum_VkSamplerYcbcrRange;
pub const VK_CHROMA_LOCATION_COSITED_EVEN: c_int = 0;
pub const VK_CHROMA_LOCATION_MIDPOINT: c_int = 1;
pub const VK_CHROMA_LOCATION_COSITED_EVEN_KHR: c_int = 0;
pub const VK_CHROMA_LOCATION_MIDPOINT_KHR: c_int = 1;
pub const VK_CHROMA_LOCATION_MAX_ENUM: c_int = 2147483647;
pub const enum_VkChromaLocation = c_uint;
pub const VkChromaLocation = enum_VkChromaLocation;
pub const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET: c_int = 0;
pub const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR: c_int = 1;
pub const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR: c_int = 0;
pub const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDescriptorUpdateTemplateType = c_uint;
pub const VkDescriptorUpdateTemplateType = enum_VkDescriptorUpdateTemplateType;
pub const VK_SUBGROUP_FEATURE_BASIC_BIT: c_int = 1;
pub const VK_SUBGROUP_FEATURE_VOTE_BIT: c_int = 2;
pub const VK_SUBGROUP_FEATURE_ARITHMETIC_BIT: c_int = 4;
pub const VK_SUBGROUP_FEATURE_BALLOT_BIT: c_int = 8;
pub const VK_SUBGROUP_FEATURE_SHUFFLE_BIT: c_int = 16;
pub const VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT: c_int = 32;
pub const VK_SUBGROUP_FEATURE_CLUSTERED_BIT: c_int = 64;
pub const VK_SUBGROUP_FEATURE_QUAD_BIT: c_int = 128;
pub const VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV: c_int = 256;
pub const VK_SUBGROUP_FEATURE_ROTATE_BIT_KHR: c_int = 512;
pub const VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT_KHR: c_int = 1024;
pub const VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSubgroupFeatureFlagBits = c_uint;
pub const VkSubgroupFeatureFlagBits = enum_VkSubgroupFeatureFlagBits;
pub const VkSubgroupFeatureFlags = VkFlags;
pub const VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT: c_int = 1;
pub const VK_PEER_MEMORY_FEATURE_COPY_DST_BIT: c_int = 2;
pub const VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT: c_int = 4;
pub const VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT: c_int = 8;
pub const VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR: c_int = 1;
pub const VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR: c_int = 2;
pub const VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR: c_int = 4;
pub const VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR: c_int = 8;
pub const VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPeerMemoryFeatureFlagBits = c_uint;
pub const VkPeerMemoryFeatureFlagBits = enum_VkPeerMemoryFeatureFlagBits;
pub const VkPeerMemoryFeatureFlags = VkFlags;
pub const VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT: c_int = 1;
pub const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT: c_int = 2;
pub const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT: c_int = 4;
pub const VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR: c_int = 1;
pub const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR: c_int = 2;
pub const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR: c_int = 4;
pub const VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkMemoryAllocateFlagBits = c_uint;
pub const VkMemoryAllocateFlagBits = enum_VkMemoryAllocateFlagBits;
pub const VkMemoryAllocateFlags = VkFlags;
pub const VkCommandPoolTrimFlags = VkFlags;
pub const VkDescriptorUpdateTemplateCreateFlags = VkFlags;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT: c_int = 1;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT: c_int = 2;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: c_int = 4;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT: c_int = 8;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT: c_int = 16;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT: c_int = 32;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT: c_int = 64;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT: c_int = 512;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID: c_int = 1024;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT: c_int = 128;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT: c_int = 256;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA: c_int = 2048;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV: c_int = 4096;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCREEN_BUFFER_BIT_QNX: c_int = 16384;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: c_int = 1;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: c_int = 2;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: c_int = 4;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR: c_int = 8;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR: c_int = 16;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR: c_int = 32;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR: c_int = 64;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkExternalMemoryHandleTypeFlagBits = c_uint;
pub const VkExternalMemoryHandleTypeFlagBits = enum_VkExternalMemoryHandleTypeFlagBits;
pub const VkExternalMemoryHandleTypeFlags = VkFlags;
pub const VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT: c_int = 1;
pub const VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT: c_int = 2;
pub const VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT: c_int = 4;
pub const VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR: c_int = 1;
pub const VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR: c_int = 2;
pub const VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR: c_int = 4;
pub const VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkExternalMemoryFeatureFlagBits = c_uint;
pub const VkExternalMemoryFeatureFlagBits = enum_VkExternalMemoryFeatureFlagBits;
pub const VkExternalMemoryFeatureFlags = VkFlags;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT: c_int = 1;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT: c_int = 2;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: c_int = 4;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT: c_int = 8;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: c_int = 1;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: c_int = 2;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: c_int = 4;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR: c_int = 8;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkExternalFenceHandleTypeFlagBits = c_uint;
pub const VkExternalFenceHandleTypeFlagBits = enum_VkExternalFenceHandleTypeFlagBits;
pub const VkExternalFenceHandleTypeFlags = VkFlags;
pub const VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT: c_int = 1;
pub const VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT: c_int = 2;
pub const VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR: c_int = 1;
pub const VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR: c_int = 2;
pub const VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkExternalFenceFeatureFlagBits = c_uint;
pub const VkExternalFenceFeatureFlagBits = enum_VkExternalFenceFeatureFlagBits;
pub const VkExternalFenceFeatureFlags = VkFlags;
pub const VK_FENCE_IMPORT_TEMPORARY_BIT: c_int = 1;
pub const VK_FENCE_IMPORT_TEMPORARY_BIT_KHR: c_int = 1;
pub const VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFenceImportFlagBits = c_uint;
pub const VkFenceImportFlagBits = enum_VkFenceImportFlagBits;
pub const VkFenceImportFlags = VkFlags;
pub const VK_SEMAPHORE_IMPORT_TEMPORARY_BIT: c_int = 1;
pub const VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR: c_int = 1;
pub const VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSemaphoreImportFlagBits = c_uint;
pub const VkSemaphoreImportFlagBits = enum_VkSemaphoreImportFlagBits;
pub const VkSemaphoreImportFlags = VkFlags;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT: c_int = 1;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT: c_int = 2;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: c_int = 4;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT: c_int = 8;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT: c_int = 16;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA: c_int = 128;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT: c_int = 8;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: c_int = 1;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: c_int = 2;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: c_int = 4;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR: c_int = 8;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR: c_int = 16;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkExternalSemaphoreHandleTypeFlagBits = c_uint;
pub const VkExternalSemaphoreHandleTypeFlagBits = enum_VkExternalSemaphoreHandleTypeFlagBits;
pub const VkExternalSemaphoreHandleTypeFlags = VkFlags;
pub const VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT: c_int = 1;
pub const VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT: c_int = 2;
pub const VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR: c_int = 1;
pub const VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR: c_int = 2;
pub const VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkExternalSemaphoreFeatureFlagBits = c_uint;
pub const VkExternalSemaphoreFeatureFlagBits = enum_VkExternalSemaphoreFeatureFlagBits;
pub const VkExternalSemaphoreFeatureFlags = VkFlags;
pub const struct_VkPhysicalDeviceSubgroupProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    subgroupSize: u32 = @import("std").mem.zeroes(u32),
    supportedStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    supportedOperations: VkSubgroupFeatureFlags = @import("std").mem.zeroes(VkSubgroupFeatureFlags),
    quadOperationsInAllStages: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSubgroupProperties = struct_VkPhysicalDeviceSubgroupProperties;
pub const struct_VkBindBufferMemoryInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    memoryOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkBindBufferMemoryInfo = struct_VkBindBufferMemoryInfo;
pub const struct_VkBindImageMemoryInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    memoryOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkBindImageMemoryInfo = struct_VkBindImageMemoryInfo;
pub const struct_VkPhysicalDevice16BitStorageFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    storageBuffer16BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformAndStorageBuffer16BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storagePushConstant16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storageInputOutput16: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevice16BitStorageFeatures = struct_VkPhysicalDevice16BitStorageFeatures;
pub const struct_VkMemoryDedicatedRequirements = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    prefersDedicatedAllocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    requiresDedicatedAllocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkMemoryDedicatedRequirements = struct_VkMemoryDedicatedRequirements;
pub const struct_VkMemoryDedicatedAllocateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
};
pub const VkMemoryDedicatedAllocateInfo = struct_VkMemoryDedicatedAllocateInfo;
pub const struct_VkMemoryAllocateFlagsInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkMemoryAllocateFlags = @import("std").mem.zeroes(VkMemoryAllocateFlags),
    deviceMask: u32 = @import("std").mem.zeroes(u32),
};
pub const VkMemoryAllocateFlagsInfo = struct_VkMemoryAllocateFlagsInfo;
pub const struct_VkDeviceGroupRenderPassBeginInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceMask: u32 = @import("std").mem.zeroes(u32),
    deviceRenderAreaCount: u32 = @import("std").mem.zeroes(u32),
    pDeviceRenderAreas: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
};
pub const VkDeviceGroupRenderPassBeginInfo = struct_VkDeviceGroupRenderPassBeginInfo;
pub const struct_VkDeviceGroupCommandBufferBeginInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceMask: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDeviceGroupCommandBufferBeginInfo = struct_VkDeviceGroupCommandBufferBeginInfo;
pub const struct_VkDeviceGroupSubmitInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    waitSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pWaitSemaphoreDeviceIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    commandBufferCount: u32 = @import("std").mem.zeroes(u32),
    pCommandBufferDeviceMasks: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    signalSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pSignalSemaphoreDeviceIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkDeviceGroupSubmitInfo = struct_VkDeviceGroupSubmitInfo;
pub const struct_VkDeviceGroupBindSparseInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    resourceDeviceIndex: u32 = @import("std").mem.zeroes(u32),
    memoryDeviceIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDeviceGroupBindSparseInfo = struct_VkDeviceGroupBindSparseInfo;
pub const struct_VkBindBufferMemoryDeviceGroupInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceIndexCount: u32 = @import("std").mem.zeroes(u32),
    pDeviceIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkBindBufferMemoryDeviceGroupInfo = struct_VkBindBufferMemoryDeviceGroupInfo;
pub const struct_VkBindImageMemoryDeviceGroupInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceIndexCount: u32 = @import("std").mem.zeroes(u32),
    pDeviceIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    splitInstanceBindRegionCount: u32 = @import("std").mem.zeroes(u32),
    pSplitInstanceBindRegions: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
};
pub const VkBindImageMemoryDeviceGroupInfo = struct_VkBindImageMemoryDeviceGroupInfo;
pub const struct_VkPhysicalDeviceGroupProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    physicalDeviceCount: u32 = @import("std").mem.zeroes(u32),
    physicalDevices: [32]VkPhysicalDevice = @import("std").mem.zeroes([32]VkPhysicalDevice),
    subsetAllocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceGroupProperties = struct_VkPhysicalDeviceGroupProperties;
pub const struct_VkDeviceGroupDeviceCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    physicalDeviceCount: u32 = @import("std").mem.zeroes(u32),
    pPhysicalDevices: [*c]const VkPhysicalDevice = @import("std").mem.zeroes([*c]const VkPhysicalDevice),
};
pub const VkDeviceGroupDeviceCreateInfo = struct_VkDeviceGroupDeviceCreateInfo;
pub const struct_VkBufferMemoryRequirementsInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
};
pub const VkBufferMemoryRequirementsInfo2 = struct_VkBufferMemoryRequirementsInfo2;
pub const struct_VkImageMemoryRequirementsInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
};
pub const VkImageMemoryRequirementsInfo2 = struct_VkImageMemoryRequirementsInfo2;
pub const struct_VkImageSparseMemoryRequirementsInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
};
pub const VkImageSparseMemoryRequirementsInfo2 = struct_VkImageSparseMemoryRequirementsInfo2;
pub const struct_VkMemoryRequirements2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryRequirements: VkMemoryRequirements = @import("std").mem.zeroes(VkMemoryRequirements),
};
pub const VkMemoryRequirements2 = struct_VkMemoryRequirements2;
pub const struct_VkSparseImageMemoryRequirements2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryRequirements: VkSparseImageMemoryRequirements = @import("std").mem.zeroes(VkSparseImageMemoryRequirements),
};
pub const VkSparseImageMemoryRequirements2 = struct_VkSparseImageMemoryRequirements2;
pub const struct_VkPhysicalDeviceFeatures2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    features: VkPhysicalDeviceFeatures = @import("std").mem.zeroes(VkPhysicalDeviceFeatures),
};
pub const VkPhysicalDeviceFeatures2 = struct_VkPhysicalDeviceFeatures2;
pub const struct_VkPhysicalDeviceProperties2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    properties: VkPhysicalDeviceProperties = @import("std").mem.zeroes(VkPhysicalDeviceProperties),
};
pub const VkPhysicalDeviceProperties2 = struct_VkPhysicalDeviceProperties2;
pub const struct_VkFormatProperties2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    formatProperties: VkFormatProperties = @import("std").mem.zeroes(VkFormatProperties),
};
pub const VkFormatProperties2 = struct_VkFormatProperties2;
pub const struct_VkImageFormatProperties2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageFormatProperties: VkImageFormatProperties = @import("std").mem.zeroes(VkImageFormatProperties),
};
pub const VkImageFormatProperties2 = struct_VkImageFormatProperties2;
pub const struct_VkPhysicalDeviceImageFormatInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    type: VkImageType = @import("std").mem.zeroes(VkImageType),
    tiling: VkImageTiling = @import("std").mem.zeroes(VkImageTiling),
    usage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    flags: VkImageCreateFlags = @import("std").mem.zeroes(VkImageCreateFlags),
};
pub const VkPhysicalDeviceImageFormatInfo2 = struct_VkPhysicalDeviceImageFormatInfo2;
pub const struct_VkQueueFamilyProperties2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    queueFamilyProperties: VkQueueFamilyProperties = @import("std").mem.zeroes(VkQueueFamilyProperties),
};
pub const VkQueueFamilyProperties2 = struct_VkQueueFamilyProperties2;
pub const struct_VkPhysicalDeviceMemoryProperties2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryProperties: VkPhysicalDeviceMemoryProperties = @import("std").mem.zeroes(VkPhysicalDeviceMemoryProperties),
};
pub const VkPhysicalDeviceMemoryProperties2 = struct_VkPhysicalDeviceMemoryProperties2;
pub const struct_VkSparseImageFormatProperties2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    properties: VkSparseImageFormatProperties = @import("std").mem.zeroes(VkSparseImageFormatProperties),
};
pub const VkSparseImageFormatProperties2 = struct_VkSparseImageFormatProperties2;
pub const struct_VkPhysicalDeviceSparseImageFormatInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    type: VkImageType = @import("std").mem.zeroes(VkImageType),
    samples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    usage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    tiling: VkImageTiling = @import("std").mem.zeroes(VkImageTiling),
};
pub const VkPhysicalDeviceSparseImageFormatInfo2 = struct_VkPhysicalDeviceSparseImageFormatInfo2;
pub const struct_VkPhysicalDevicePointClippingProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pointClippingBehavior: VkPointClippingBehavior = @import("std").mem.zeroes(VkPointClippingBehavior),
};
pub const VkPhysicalDevicePointClippingProperties = struct_VkPhysicalDevicePointClippingProperties;
pub const struct_VkInputAttachmentAspectReference = extern struct {
    subpass: u32 = @import("std").mem.zeroes(u32),
    inputAttachmentIndex: u32 = @import("std").mem.zeroes(u32),
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
};
pub const VkInputAttachmentAspectReference = struct_VkInputAttachmentAspectReference;
pub const struct_VkRenderPassInputAttachmentAspectCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    aspectReferenceCount: u32 = @import("std").mem.zeroes(u32),
    pAspectReferences: [*c]const VkInputAttachmentAspectReference = @import("std").mem.zeroes([*c]const VkInputAttachmentAspectReference),
};
pub const VkRenderPassInputAttachmentAspectCreateInfo = struct_VkRenderPassInputAttachmentAspectCreateInfo;
pub const struct_VkImageViewUsageCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    usage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
};
pub const VkImageViewUsageCreateInfo = struct_VkImageViewUsageCreateInfo;
pub const struct_VkPipelineTessellationDomainOriginStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    domainOrigin: VkTessellationDomainOrigin = @import("std").mem.zeroes(VkTessellationDomainOrigin),
};
pub const VkPipelineTessellationDomainOriginStateCreateInfo = struct_VkPipelineTessellationDomainOriginStateCreateInfo;
pub const struct_VkRenderPassMultiviewCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    subpassCount: u32 = @import("std").mem.zeroes(u32),
    pViewMasks: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    dependencyCount: u32 = @import("std").mem.zeroes(u32),
    pViewOffsets: [*c]const i32 = @import("std").mem.zeroes([*c]const i32),
    correlationMaskCount: u32 = @import("std").mem.zeroes(u32),
    pCorrelationMasks: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkRenderPassMultiviewCreateInfo = struct_VkRenderPassMultiviewCreateInfo;
pub const struct_VkPhysicalDeviceMultiviewFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    multiview: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiviewGeometryShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiviewTessellationShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMultiviewFeatures = struct_VkPhysicalDeviceMultiviewFeatures;
pub const struct_VkPhysicalDeviceMultiviewProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxMultiviewViewCount: u32 = @import("std").mem.zeroes(u32),
    maxMultiviewInstanceIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceMultiviewProperties = struct_VkPhysicalDeviceMultiviewProperties;
pub const struct_VkPhysicalDeviceVariablePointersFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    variablePointersStorageBuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    variablePointers: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVariablePointersFeatures = struct_VkPhysicalDeviceVariablePointersFeatures;
pub const VkPhysicalDeviceVariablePointerFeatures = VkPhysicalDeviceVariablePointersFeatures;
pub const struct_VkPhysicalDeviceProtectedMemoryFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    protectedMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceProtectedMemoryFeatures = struct_VkPhysicalDeviceProtectedMemoryFeatures;
pub const struct_VkPhysicalDeviceProtectedMemoryProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    protectedNoFault: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceProtectedMemoryProperties = struct_VkPhysicalDeviceProtectedMemoryProperties;
pub const struct_VkDeviceQueueInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDeviceQueueCreateFlags = @import("std").mem.zeroes(VkDeviceQueueCreateFlags),
    queueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    queueIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDeviceQueueInfo2 = struct_VkDeviceQueueInfo2;
pub const struct_VkProtectedSubmitInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    protectedSubmit: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkProtectedSubmitInfo = struct_VkProtectedSubmitInfo;
pub const struct_VkSamplerYcbcrConversionCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    ycbcrModel: VkSamplerYcbcrModelConversion = @import("std").mem.zeroes(VkSamplerYcbcrModelConversion),
    ycbcrRange: VkSamplerYcbcrRange = @import("std").mem.zeroes(VkSamplerYcbcrRange),
    components: VkComponentMapping = @import("std").mem.zeroes(VkComponentMapping),
    xChromaOffset: VkChromaLocation = @import("std").mem.zeroes(VkChromaLocation),
    yChromaOffset: VkChromaLocation = @import("std").mem.zeroes(VkChromaLocation),
    chromaFilter: VkFilter = @import("std").mem.zeroes(VkFilter),
    forceExplicitReconstruction: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSamplerYcbcrConversionCreateInfo = struct_VkSamplerYcbcrConversionCreateInfo;
pub const struct_VkSamplerYcbcrConversionInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    conversion: VkSamplerYcbcrConversion = @import("std").mem.zeroes(VkSamplerYcbcrConversion),
};
pub const VkSamplerYcbcrConversionInfo = struct_VkSamplerYcbcrConversionInfo;
pub const struct_VkBindImagePlaneMemoryInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    planeAspect: VkImageAspectFlagBits = @import("std").mem.zeroes(VkImageAspectFlagBits),
};
pub const VkBindImagePlaneMemoryInfo = struct_VkBindImagePlaneMemoryInfo;
pub const struct_VkImagePlaneMemoryRequirementsInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    planeAspect: VkImageAspectFlagBits = @import("std").mem.zeroes(VkImageAspectFlagBits),
};
pub const VkImagePlaneMemoryRequirementsInfo = struct_VkImagePlaneMemoryRequirementsInfo;
pub const struct_VkPhysicalDeviceSamplerYcbcrConversionFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    samplerYcbcrConversion: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSamplerYcbcrConversionFeatures = struct_VkPhysicalDeviceSamplerYcbcrConversionFeatures;
pub const struct_VkSamplerYcbcrConversionImageFormatProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    combinedImageSamplerDescriptorCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkSamplerYcbcrConversionImageFormatProperties = struct_VkSamplerYcbcrConversionImageFormatProperties;
pub const struct_VkDescriptorUpdateTemplateEntry = extern struct {
    dstBinding: u32 = @import("std").mem.zeroes(u32),
    dstArrayElement: u32 = @import("std").mem.zeroes(u32),
    descriptorCount: u32 = @import("std").mem.zeroes(u32),
    descriptorType: VkDescriptorType = @import("std").mem.zeroes(VkDescriptorType),
    offset: usize = @import("std").mem.zeroes(usize),
    stride: usize = @import("std").mem.zeroes(usize),
};
pub const VkDescriptorUpdateTemplateEntry = struct_VkDescriptorUpdateTemplateEntry;
pub const struct_VkDescriptorUpdateTemplateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDescriptorUpdateTemplateCreateFlags = @import("std").mem.zeroes(VkDescriptorUpdateTemplateCreateFlags),
    descriptorUpdateEntryCount: u32 = @import("std").mem.zeroes(u32),
    pDescriptorUpdateEntries: [*c]const VkDescriptorUpdateTemplateEntry = @import("std").mem.zeroes([*c]const VkDescriptorUpdateTemplateEntry),
    templateType: VkDescriptorUpdateTemplateType = @import("std").mem.zeroes(VkDescriptorUpdateTemplateType),
    descriptorSetLayout: VkDescriptorSetLayout = @import("std").mem.zeroes(VkDescriptorSetLayout),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    pipelineLayout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    set: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDescriptorUpdateTemplateCreateInfo = struct_VkDescriptorUpdateTemplateCreateInfo;
pub const struct_VkExternalMemoryProperties = extern struct {
    externalMemoryFeatures: VkExternalMemoryFeatureFlags = @import("std").mem.zeroes(VkExternalMemoryFeatureFlags),
    exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlags = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlags),
    compatibleHandleTypes: VkExternalMemoryHandleTypeFlags = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlags),
};
pub const VkExternalMemoryProperties = struct_VkExternalMemoryProperties;
pub const struct_VkPhysicalDeviceExternalImageFormatInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleType: VkExternalMemoryHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagBits),
};
pub const VkPhysicalDeviceExternalImageFormatInfo = struct_VkPhysicalDeviceExternalImageFormatInfo;
pub const struct_VkExternalImageFormatProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    externalMemoryProperties: VkExternalMemoryProperties = @import("std").mem.zeroes(VkExternalMemoryProperties),
};
pub const VkExternalImageFormatProperties = struct_VkExternalImageFormatProperties;
pub const struct_VkPhysicalDeviceExternalBufferInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkBufferCreateFlags = @import("std").mem.zeroes(VkBufferCreateFlags),
    usage: VkBufferUsageFlags = @import("std").mem.zeroes(VkBufferUsageFlags),
    handleType: VkExternalMemoryHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagBits),
};
pub const VkPhysicalDeviceExternalBufferInfo = struct_VkPhysicalDeviceExternalBufferInfo;
pub const struct_VkExternalBufferProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    externalMemoryProperties: VkExternalMemoryProperties = @import("std").mem.zeroes(VkExternalMemoryProperties),
};
pub const VkExternalBufferProperties = struct_VkExternalBufferProperties;
pub const struct_VkPhysicalDeviceIDProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    driverUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    deviceLUID: [8]u8 = @import("std").mem.zeroes([8]u8),
    deviceNodeMask: u32 = @import("std").mem.zeroes(u32),
    deviceLUIDValid: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceIDProperties = struct_VkPhysicalDeviceIDProperties;
pub const struct_VkExternalMemoryImageCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalMemoryHandleTypeFlags = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlags),
};
pub const VkExternalMemoryImageCreateInfo = struct_VkExternalMemoryImageCreateInfo;
pub const struct_VkExternalMemoryBufferCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalMemoryHandleTypeFlags = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlags),
};
pub const VkExternalMemoryBufferCreateInfo = struct_VkExternalMemoryBufferCreateInfo;
pub const struct_VkExportMemoryAllocateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalMemoryHandleTypeFlags = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlags),
};
pub const VkExportMemoryAllocateInfo = struct_VkExportMemoryAllocateInfo;
pub const struct_VkPhysicalDeviceExternalFenceInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleType: VkExternalFenceHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalFenceHandleTypeFlagBits),
};
pub const VkPhysicalDeviceExternalFenceInfo = struct_VkPhysicalDeviceExternalFenceInfo;
pub const struct_VkExternalFenceProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlags = @import("std").mem.zeroes(VkExternalFenceHandleTypeFlags),
    compatibleHandleTypes: VkExternalFenceHandleTypeFlags = @import("std").mem.zeroes(VkExternalFenceHandleTypeFlags),
    externalFenceFeatures: VkExternalFenceFeatureFlags = @import("std").mem.zeroes(VkExternalFenceFeatureFlags),
};
pub const VkExternalFenceProperties = struct_VkExternalFenceProperties;
pub const struct_VkExportFenceCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalFenceHandleTypeFlags = @import("std").mem.zeroes(VkExternalFenceHandleTypeFlags),
};
pub const VkExportFenceCreateInfo = struct_VkExportFenceCreateInfo;
pub const struct_VkExportSemaphoreCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalSemaphoreHandleTypeFlags = @import("std").mem.zeroes(VkExternalSemaphoreHandleTypeFlags),
};
pub const VkExportSemaphoreCreateInfo = struct_VkExportSemaphoreCreateInfo;
pub const struct_VkPhysicalDeviceExternalSemaphoreInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleType: VkExternalSemaphoreHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalSemaphoreHandleTypeFlagBits),
};
pub const VkPhysicalDeviceExternalSemaphoreInfo = struct_VkPhysicalDeviceExternalSemaphoreInfo;
pub const struct_VkExternalSemaphoreProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlags = @import("std").mem.zeroes(VkExternalSemaphoreHandleTypeFlags),
    compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlags = @import("std").mem.zeroes(VkExternalSemaphoreHandleTypeFlags),
    externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlags = @import("std").mem.zeroes(VkExternalSemaphoreFeatureFlags),
};
pub const VkExternalSemaphoreProperties = struct_VkExternalSemaphoreProperties;
pub const struct_VkPhysicalDeviceMaintenance3Properties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxPerSetDescriptors: u32 = @import("std").mem.zeroes(u32),
    maxMemoryAllocationSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceMaintenance3Properties = struct_VkPhysicalDeviceMaintenance3Properties;
pub const struct_VkDescriptorSetLayoutSupport = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supported: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkDescriptorSetLayoutSupport = struct_VkDescriptorSetLayoutSupport;
pub const struct_VkPhysicalDeviceShaderDrawParametersFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderDrawParameters: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderDrawParametersFeatures = struct_VkPhysicalDeviceShaderDrawParametersFeatures;
pub const VkPhysicalDeviceShaderDrawParameterFeatures = VkPhysicalDeviceShaderDrawParametersFeatures;
pub const PFN_vkEnumerateInstanceVersion = ?*const fn ([*c]u32) callconv(.C) VkResult;
pub const PFN_vkBindBufferMemory2 = ?*const fn (VkDevice, u32, [*c]const VkBindBufferMemoryInfo) callconv(.C) VkResult;
pub const PFN_vkBindImageMemory2 = ?*const fn (VkDevice, u32, [*c]const VkBindImageMemoryInfo) callconv(.C) VkResult;
pub const PFN_vkGetDeviceGroupPeerMemoryFeatures = ?*const fn (VkDevice, u32, u32, u32, [*c]VkPeerMemoryFeatureFlags) callconv(.C) void;
pub const PFN_vkCmdSetDeviceMask = ?*const fn (VkCommandBuffer, u32) callconv(.C) void;
pub const PFN_vkCmdDispatchBase = ?*const fn (VkCommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.C) void;
pub const PFN_vkEnumeratePhysicalDeviceGroups = ?*const fn (VkInstance, [*c]u32, [*c]VkPhysicalDeviceGroupProperties) callconv(.C) VkResult;
pub const PFN_vkGetImageMemoryRequirements2 = ?*const fn (VkDevice, [*c]const VkImageMemoryRequirementsInfo2, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetBufferMemoryRequirements2 = ?*const fn (VkDevice, [*c]const VkBufferMemoryRequirementsInfo2, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetImageSparseMemoryRequirements2 = ?*const fn (VkDevice, [*c]const VkImageSparseMemoryRequirementsInfo2, [*c]u32, [*c]VkSparseImageMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceFeatures2 = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceFeatures2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceProperties2 = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceFormatProperties2 = ?*const fn (VkPhysicalDevice, VkFormat, [*c]VkFormatProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceImageFormatProperties2 = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceImageFormatInfo2, [*c]VkImageFormatProperties2) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceQueueFamilyProperties2 = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkQueueFamilyProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceMemoryProperties2 = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceMemoryProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceSparseImageFormatInfo2, [*c]u32, [*c]VkSparseImageFormatProperties2) callconv(.C) void;
pub const PFN_vkTrimCommandPool = ?*const fn (VkDevice, VkCommandPool, VkCommandPoolTrimFlags) callconv(.C) void;
pub const PFN_vkGetDeviceQueue2 = ?*const fn (VkDevice, [*c]const VkDeviceQueueInfo2, [*c]VkQueue) callconv(.C) void;
pub const PFN_vkCreateSamplerYcbcrConversion = ?*const fn (VkDevice, [*c]const VkSamplerYcbcrConversionCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkSamplerYcbcrConversion) callconv(.C) VkResult;
pub const PFN_vkDestroySamplerYcbcrConversion = ?*const fn (VkDevice, VkSamplerYcbcrConversion, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateDescriptorUpdateTemplate = ?*const fn (VkDevice, [*c]const VkDescriptorUpdateTemplateCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkDescriptorUpdateTemplate) callconv(.C) VkResult;
pub const PFN_vkDestroyDescriptorUpdateTemplate = ?*const fn (VkDevice, VkDescriptorUpdateTemplate, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkUpdateDescriptorSetWithTemplate = ?*const fn (VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, ?*const anyopaque) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceExternalBufferProperties = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalBufferInfo, [*c]VkExternalBufferProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceExternalFenceProperties = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalFenceInfo, [*c]VkExternalFenceProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceExternalSemaphoreProperties = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalSemaphoreInfo, [*c]VkExternalSemaphoreProperties) callconv(.C) void;
pub const PFN_vkGetDescriptorSetLayoutSupport = ?*const fn (VkDevice, [*c]const VkDescriptorSetLayoutCreateInfo, [*c]VkDescriptorSetLayoutSupport) callconv(.C) void;
pub extern fn vkEnumerateInstanceVersion(pApiVersion: [*c]u32) VkResult;
pub extern fn vkBindBufferMemory2(device: VkDevice, bindInfoCount: u32, pBindInfos: [*c]const VkBindBufferMemoryInfo) VkResult;
pub extern fn vkBindImageMemory2(device: VkDevice, bindInfoCount: u32, pBindInfos: [*c]const VkBindImageMemoryInfo) VkResult;
pub extern fn vkGetDeviceGroupPeerMemoryFeatures(device: VkDevice, heapIndex: u32, localDeviceIndex: u32, remoteDeviceIndex: u32, pPeerMemoryFeatures: [*c]VkPeerMemoryFeatureFlags) void;
pub extern fn vkCmdSetDeviceMask(commandBuffer: VkCommandBuffer, deviceMask: u32) void;
pub extern fn vkCmdDispatchBase(commandBuffer: VkCommandBuffer, baseGroupX: u32, baseGroupY: u32, baseGroupZ: u32, groupCountX: u32, groupCountY: u32, groupCountZ: u32) void;
pub extern fn vkEnumeratePhysicalDeviceGroups(instance: VkInstance, pPhysicalDeviceGroupCount: [*c]u32, pPhysicalDeviceGroupProperties: [*c]VkPhysicalDeviceGroupProperties) VkResult;
pub extern fn vkGetImageMemoryRequirements2(device: VkDevice, pInfo: [*c]const VkImageMemoryRequirementsInfo2, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetBufferMemoryRequirements2(device: VkDevice, pInfo: [*c]const VkBufferMemoryRequirementsInfo2, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetImageSparseMemoryRequirements2(device: VkDevice, pInfo: [*c]const VkImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: [*c]u32, pSparseMemoryRequirements: [*c]VkSparseImageMemoryRequirements2) void;
pub extern fn vkGetPhysicalDeviceFeatures2(physicalDevice: VkPhysicalDevice, pFeatures: [*c]VkPhysicalDeviceFeatures2) void;
pub extern fn vkGetPhysicalDeviceProperties2(physicalDevice: VkPhysicalDevice, pProperties: [*c]VkPhysicalDeviceProperties2) void;
pub extern fn vkGetPhysicalDeviceFormatProperties2(physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: [*c]VkFormatProperties2) void;
pub extern fn vkGetPhysicalDeviceImageFormatProperties2(physicalDevice: VkPhysicalDevice, pImageFormatInfo: [*c]const VkPhysicalDeviceImageFormatInfo2, pImageFormatProperties: [*c]VkImageFormatProperties2) VkResult;
pub extern fn vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: [*c]u32, pQueueFamilyProperties: [*c]VkQueueFamilyProperties2) void;
pub extern fn vkGetPhysicalDeviceMemoryProperties2(physicalDevice: VkPhysicalDevice, pMemoryProperties: [*c]VkPhysicalDeviceMemoryProperties2) void;
pub extern fn vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice: VkPhysicalDevice, pFormatInfo: [*c]const VkPhysicalDeviceSparseImageFormatInfo2, pPropertyCount: [*c]u32, pProperties: [*c]VkSparseImageFormatProperties2) void;
pub extern fn vkTrimCommandPool(device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolTrimFlags) void;
pub extern fn vkGetDeviceQueue2(device: VkDevice, pQueueInfo: [*c]const VkDeviceQueueInfo2, pQueue: [*c]VkQueue) void;
pub extern fn vkCreateSamplerYcbcrConversion(device: VkDevice, pCreateInfo: [*c]const VkSamplerYcbcrConversionCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pYcbcrConversion: [*c]VkSamplerYcbcrConversion) VkResult;
pub extern fn vkDestroySamplerYcbcrConversion(device: VkDevice, ycbcrConversion: VkSamplerYcbcrConversion, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateDescriptorUpdateTemplate(device: VkDevice, pCreateInfo: [*c]const VkDescriptorUpdateTemplateCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pDescriptorUpdateTemplate: [*c]VkDescriptorUpdateTemplate) VkResult;
pub extern fn vkDestroyDescriptorUpdateTemplate(device: VkDevice, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkUpdateDescriptorSetWithTemplate(device: VkDevice, descriptorSet: VkDescriptorSet, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pData: ?*const anyopaque) void;
pub extern fn vkGetPhysicalDeviceExternalBufferProperties(physicalDevice: VkPhysicalDevice, pExternalBufferInfo: [*c]const VkPhysicalDeviceExternalBufferInfo, pExternalBufferProperties: [*c]VkExternalBufferProperties) void;
pub extern fn vkGetPhysicalDeviceExternalFenceProperties(physicalDevice: VkPhysicalDevice, pExternalFenceInfo: [*c]const VkPhysicalDeviceExternalFenceInfo, pExternalFenceProperties: [*c]VkExternalFenceProperties) void;
pub extern fn vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice: VkPhysicalDevice, pExternalSemaphoreInfo: [*c]const VkPhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: [*c]VkExternalSemaphoreProperties) void;
pub extern fn vkGetDescriptorSetLayoutSupport(device: VkDevice, pCreateInfo: [*c]const VkDescriptorSetLayoutCreateInfo, pSupport: [*c]VkDescriptorSetLayoutSupport) void;
pub const VK_DRIVER_ID_AMD_PROPRIETARY: c_int = 1;
pub const VK_DRIVER_ID_AMD_OPEN_SOURCE: c_int = 2;
pub const VK_DRIVER_ID_MESA_RADV: c_int = 3;
pub const VK_DRIVER_ID_NVIDIA_PROPRIETARY: c_int = 4;
pub const VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS: c_int = 5;
pub const VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA: c_int = 6;
pub const VK_DRIVER_ID_IMAGINATION_PROPRIETARY: c_int = 7;
pub const VK_DRIVER_ID_QUALCOMM_PROPRIETARY: c_int = 8;
pub const VK_DRIVER_ID_ARM_PROPRIETARY: c_int = 9;
pub const VK_DRIVER_ID_GOOGLE_SWIFTSHADER: c_int = 10;
pub const VK_DRIVER_ID_GGP_PROPRIETARY: c_int = 11;
pub const VK_DRIVER_ID_BROADCOM_PROPRIETARY: c_int = 12;
pub const VK_DRIVER_ID_MESA_LLVMPIPE: c_int = 13;
pub const VK_DRIVER_ID_MOLTENVK: c_int = 14;
pub const VK_DRIVER_ID_COREAVI_PROPRIETARY: c_int = 15;
pub const VK_DRIVER_ID_JUICE_PROPRIETARY: c_int = 16;
pub const VK_DRIVER_ID_VERISILICON_PROPRIETARY: c_int = 17;
pub const VK_DRIVER_ID_MESA_TURNIP: c_int = 18;
pub const VK_DRIVER_ID_MESA_V3DV: c_int = 19;
pub const VK_DRIVER_ID_MESA_PANVK: c_int = 20;
pub const VK_DRIVER_ID_SAMSUNG_PROPRIETARY: c_int = 21;
pub const VK_DRIVER_ID_MESA_VENUS: c_int = 22;
pub const VK_DRIVER_ID_MESA_DOZEN: c_int = 23;
pub const VK_DRIVER_ID_MESA_NVK: c_int = 24;
pub const VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA: c_int = 25;
pub const VK_DRIVER_ID_MESA_AGXV: c_int = 26;
pub const VK_DRIVER_ID_AMD_PROPRIETARY_KHR: c_int = 1;
pub const VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR: c_int = 2;
pub const VK_DRIVER_ID_MESA_RADV_KHR: c_int = 3;
pub const VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR: c_int = 4;
pub const VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR: c_int = 5;
pub const VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR: c_int = 6;
pub const VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR: c_int = 7;
pub const VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR: c_int = 8;
pub const VK_DRIVER_ID_ARM_PROPRIETARY_KHR: c_int = 9;
pub const VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR: c_int = 10;
pub const VK_DRIVER_ID_GGP_PROPRIETARY_KHR: c_int = 11;
pub const VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR: c_int = 12;
pub const VK_DRIVER_ID_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDriverId = c_uint;
pub const VkDriverId = enum_VkDriverId;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY: c_int = 0;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL: c_int = 1;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE: c_int = 2;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR: c_int = 0;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR: c_int = 1;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR: c_int = 2;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkShaderFloatControlsIndependence = c_uint;
pub const VkShaderFloatControlsIndependence = enum_VkShaderFloatControlsIndependence;
pub const VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE: c_int = 0;
pub const VK_SAMPLER_REDUCTION_MODE_MIN: c_int = 1;
pub const VK_SAMPLER_REDUCTION_MODE_MAX: c_int = 2;
pub const VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_RANGECLAMP_QCOM: c_int = 1000521000;
pub const VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT: c_int = 0;
pub const VK_SAMPLER_REDUCTION_MODE_MIN_EXT: c_int = 1;
pub const VK_SAMPLER_REDUCTION_MODE_MAX_EXT: c_int = 2;
pub const VK_SAMPLER_REDUCTION_MODE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSamplerReductionMode = c_uint;
pub const VkSamplerReductionMode = enum_VkSamplerReductionMode;
pub const VK_SEMAPHORE_TYPE_BINARY: c_int = 0;
pub const VK_SEMAPHORE_TYPE_TIMELINE: c_int = 1;
pub const VK_SEMAPHORE_TYPE_BINARY_KHR: c_int = 0;
pub const VK_SEMAPHORE_TYPE_TIMELINE_KHR: c_int = 1;
pub const VK_SEMAPHORE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSemaphoreType = c_uint;
pub const VkSemaphoreType = enum_VkSemaphoreType;
pub const VK_RESOLVE_MODE_NONE: c_int = 0;
pub const VK_RESOLVE_MODE_SAMPLE_ZERO_BIT: c_int = 1;
pub const VK_RESOLVE_MODE_AVERAGE_BIT: c_int = 2;
pub const VK_RESOLVE_MODE_MIN_BIT: c_int = 4;
pub const VK_RESOLVE_MODE_MAX_BIT: c_int = 8;
pub const VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID: c_int = 16;
pub const VK_RESOLVE_MODE_NONE_KHR: c_int = 0;
pub const VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR: c_int = 1;
pub const VK_RESOLVE_MODE_AVERAGE_BIT_KHR: c_int = 2;
pub const VK_RESOLVE_MODE_MIN_BIT_KHR: c_int = 4;
pub const VK_RESOLVE_MODE_MAX_BIT_KHR: c_int = 8;
pub const VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkResolveModeFlagBits = c_uint;
pub const VkResolveModeFlagBits = enum_VkResolveModeFlagBits;
pub const VkResolveModeFlags = VkFlags;
pub const VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT: c_int = 1;
pub const VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT: c_int = 2;
pub const VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT: c_int = 4;
pub const VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT: c_int = 8;
pub const VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT: c_int = 1;
pub const VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT: c_int = 2;
pub const VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT: c_int = 4;
pub const VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT: c_int = 8;
pub const VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDescriptorBindingFlagBits = c_uint;
pub const VkDescriptorBindingFlagBits = enum_VkDescriptorBindingFlagBits;
pub const VkDescriptorBindingFlags = VkFlags;
pub const VK_SEMAPHORE_WAIT_ANY_BIT: c_int = 1;
pub const VK_SEMAPHORE_WAIT_ANY_BIT_KHR: c_int = 1;
pub const VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSemaphoreWaitFlagBits = c_uint;
pub const VkSemaphoreWaitFlagBits = enum_VkSemaphoreWaitFlagBits;
pub const VkSemaphoreWaitFlags = VkFlags;
pub const struct_VkPhysicalDeviceVulkan11Features = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    storageBuffer16BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformAndStorageBuffer16BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storagePushConstant16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storageInputOutput16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiview: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiviewGeometryShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiviewTessellationShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    variablePointersStorageBuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    variablePointers: VkBool32 = @import("std").mem.zeroes(VkBool32),
    protectedMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
    samplerYcbcrConversion: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDrawParameters: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVulkan11Features = struct_VkPhysicalDeviceVulkan11Features;
pub const struct_VkPhysicalDeviceVulkan11Properties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    driverUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    deviceLUID: [8]u8 = @import("std").mem.zeroes([8]u8),
    deviceNodeMask: u32 = @import("std").mem.zeroes(u32),
    deviceLUIDValid: VkBool32 = @import("std").mem.zeroes(VkBool32),
    subgroupSize: u32 = @import("std").mem.zeroes(u32),
    subgroupSupportedStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    subgroupSupportedOperations: VkSubgroupFeatureFlags = @import("std").mem.zeroes(VkSubgroupFeatureFlags),
    subgroupQuadOperationsInAllStages: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pointClippingBehavior: VkPointClippingBehavior = @import("std").mem.zeroes(VkPointClippingBehavior),
    maxMultiviewViewCount: u32 = @import("std").mem.zeroes(u32),
    maxMultiviewInstanceIndex: u32 = @import("std").mem.zeroes(u32),
    protectedNoFault: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxPerSetDescriptors: u32 = @import("std").mem.zeroes(u32),
    maxMemoryAllocationSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceVulkan11Properties = struct_VkPhysicalDeviceVulkan11Properties;
pub const struct_VkPhysicalDeviceVulkan12Features = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    samplerMirrorClampToEdge: VkBool32 = @import("std").mem.zeroes(VkBool32),
    drawIndirectCount: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storageBuffer8BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformAndStorageBuffer8BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storagePushConstant8: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferInt64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedInt64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInt8: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInputAttachmentArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformTexelBufferArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageTexelBufferArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSampledImageArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInputAttachmentArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingUniformBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingSampledImageUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingStorageImageUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingStorageBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingUpdateUnusedWhilePending: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingPartiallyBound: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingVariableDescriptorCount: VkBool32 = @import("std").mem.zeroes(VkBool32),
    runtimeDescriptorArray: VkBool32 = @import("std").mem.zeroes(VkBool32),
    samplerFilterMinmax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    scalarBlockLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
    imagelessFramebuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformBufferStandardLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSubgroupExtendedTypes: VkBool32 = @import("std").mem.zeroes(VkBool32),
    separateDepthStencilLayouts: VkBool32 = @import("std").mem.zeroes(VkBool32),
    hostQueryReset: VkBool32 = @import("std").mem.zeroes(VkBool32),
    timelineSemaphore: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddress: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddressCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddressMultiDevice: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vulkanMemoryModel: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vulkanMemoryModelDeviceScope: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vulkanMemoryModelAvailabilityVisibilityChains: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderOutputViewportIndex: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderOutputLayer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    subgroupBroadcastDynamicId: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVulkan12Features = struct_VkPhysicalDeviceVulkan12Features;
pub const struct_VkConformanceVersion = extern struct {
    major: u8 = @import("std").mem.zeroes(u8),
    minor: u8 = @import("std").mem.zeroes(u8),
    subminor: u8 = @import("std").mem.zeroes(u8),
    patch: u8 = @import("std").mem.zeroes(u8),
};
pub const VkConformanceVersion = struct_VkConformanceVersion;
pub const struct_VkPhysicalDeviceVulkan12Properties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    driverID: VkDriverId = @import("std").mem.zeroes(VkDriverId),
    driverName: [256]u8 = @import("std").mem.zeroes([256]u8),
    driverInfo: [256]u8 = @import("std").mem.zeroes([256]u8),
    conformanceVersion: VkConformanceVersion = @import("std").mem.zeroes(VkConformanceVersion),
    denormBehaviorIndependence: VkShaderFloatControlsIndependence = @import("std").mem.zeroes(VkShaderFloatControlsIndependence),
    roundingModeIndependence: VkShaderFloatControlsIndependence = @import("std").mem.zeroes(VkShaderFloatControlsIndependence),
    shaderSignedZeroInfNanPreserveFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSignedZeroInfNanPreserveFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSignedZeroInfNanPreserveFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormPreserveFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormPreserveFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormPreserveFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormFlushToZeroFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormFlushToZeroFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormFlushToZeroFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTEFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTEFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTEFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTZFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTZFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTZFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxUpdateAfterBindDescriptorsInAllPools: u32 = @import("std").mem.zeroes(u32),
    shaderUniformBufferArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSampledImageArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageBufferArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    robustBufferAccessUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    quadDivergentImplicitLod: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxPerStageDescriptorUpdateAfterBindSamplers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindSampledImages: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindStorageImages: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindInputAttachments: u32 = @import("std").mem.zeroes(u32),
    maxPerStageUpdateAfterBindResources: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindSamplers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindUniformBuffers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindStorageBuffers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindSampledImages: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindStorageImages: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindInputAttachments: u32 = @import("std").mem.zeroes(u32),
    supportedDepthResolveModes: VkResolveModeFlags = @import("std").mem.zeroes(VkResolveModeFlags),
    supportedStencilResolveModes: VkResolveModeFlags = @import("std").mem.zeroes(VkResolveModeFlags),
    independentResolveNone: VkBool32 = @import("std").mem.zeroes(VkBool32),
    independentResolve: VkBool32 = @import("std").mem.zeroes(VkBool32),
    filterMinmaxSingleComponentFormats: VkBool32 = @import("std").mem.zeroes(VkBool32),
    filterMinmaxImageComponentMapping: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxTimelineSemaphoreValueDifference: u64 = @import("std").mem.zeroes(u64),
    framebufferIntegerColorSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
};
pub const VkPhysicalDeviceVulkan12Properties = struct_VkPhysicalDeviceVulkan12Properties;
pub const struct_VkImageFormatListCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    viewFormatCount: u32 = @import("std").mem.zeroes(u32),
    pViewFormats: [*c]const VkFormat = @import("std").mem.zeroes([*c]const VkFormat),
};
pub const VkImageFormatListCreateInfo = struct_VkImageFormatListCreateInfo;
pub const struct_VkAttachmentDescription2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkAttachmentDescriptionFlags = @import("std").mem.zeroes(VkAttachmentDescriptionFlags),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    samples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    loadOp: VkAttachmentLoadOp = @import("std").mem.zeroes(VkAttachmentLoadOp),
    storeOp: VkAttachmentStoreOp = @import("std").mem.zeroes(VkAttachmentStoreOp),
    stencilLoadOp: VkAttachmentLoadOp = @import("std").mem.zeroes(VkAttachmentLoadOp),
    stencilStoreOp: VkAttachmentStoreOp = @import("std").mem.zeroes(VkAttachmentStoreOp),
    initialLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    finalLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
};
pub const VkAttachmentDescription2 = struct_VkAttachmentDescription2;
pub const struct_VkAttachmentReference2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    attachment: u32 = @import("std").mem.zeroes(u32),
    layout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
};
pub const VkAttachmentReference2 = struct_VkAttachmentReference2;
pub const struct_VkSubpassDescription2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkSubpassDescriptionFlags = @import("std").mem.zeroes(VkSubpassDescriptionFlags),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    viewMask: u32 = @import("std").mem.zeroes(u32),
    inputAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pInputAttachments: [*c]const VkAttachmentReference2 = @import("std").mem.zeroes([*c]const VkAttachmentReference2),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachments: [*c]const VkAttachmentReference2 = @import("std").mem.zeroes([*c]const VkAttachmentReference2),
    pResolveAttachments: [*c]const VkAttachmentReference2 = @import("std").mem.zeroes([*c]const VkAttachmentReference2),
    pDepthStencilAttachment: [*c]const VkAttachmentReference2 = @import("std").mem.zeroes([*c]const VkAttachmentReference2),
    preserveAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pPreserveAttachments: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkSubpassDescription2 = struct_VkSubpassDescription2;
pub const struct_VkSubpassDependency2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcSubpass: u32 = @import("std").mem.zeroes(u32),
    dstSubpass: u32 = @import("std").mem.zeroes(u32),
    srcStageMask: VkPipelineStageFlags = @import("std").mem.zeroes(VkPipelineStageFlags),
    dstStageMask: VkPipelineStageFlags = @import("std").mem.zeroes(VkPipelineStageFlags),
    srcAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dstAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dependencyFlags: VkDependencyFlags = @import("std").mem.zeroes(VkDependencyFlags),
    viewOffset: i32 = @import("std").mem.zeroes(i32),
};
pub const VkSubpassDependency2 = struct_VkSubpassDependency2;
pub const struct_VkRenderPassCreateInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkRenderPassCreateFlags = @import("std").mem.zeroes(VkRenderPassCreateFlags),
    attachmentCount: u32 = @import("std").mem.zeroes(u32),
    pAttachments: [*c]const VkAttachmentDescription2 = @import("std").mem.zeroes([*c]const VkAttachmentDescription2),
    subpassCount: u32 = @import("std").mem.zeroes(u32),
    pSubpasses: [*c]const VkSubpassDescription2 = @import("std").mem.zeroes([*c]const VkSubpassDescription2),
    dependencyCount: u32 = @import("std").mem.zeroes(u32),
    pDependencies: [*c]const VkSubpassDependency2 = @import("std").mem.zeroes([*c]const VkSubpassDependency2),
    correlatedViewMaskCount: u32 = @import("std").mem.zeroes(u32),
    pCorrelatedViewMasks: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkRenderPassCreateInfo2 = struct_VkRenderPassCreateInfo2;
pub const struct_VkSubpassBeginInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    contents: VkSubpassContents = @import("std").mem.zeroes(VkSubpassContents),
};
pub const VkSubpassBeginInfo = struct_VkSubpassBeginInfo;
pub const struct_VkSubpassEndInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkSubpassEndInfo = struct_VkSubpassEndInfo;
pub const struct_VkPhysicalDevice8BitStorageFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    storageBuffer8BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformAndStorageBuffer8BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storagePushConstant8: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevice8BitStorageFeatures = struct_VkPhysicalDevice8BitStorageFeatures;
pub const struct_VkPhysicalDeviceDriverProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    driverID: VkDriverId = @import("std").mem.zeroes(VkDriverId),
    driverName: [256]u8 = @import("std").mem.zeroes([256]u8),
    driverInfo: [256]u8 = @import("std").mem.zeroes([256]u8),
    conformanceVersion: VkConformanceVersion = @import("std").mem.zeroes(VkConformanceVersion),
};
pub const VkPhysicalDeviceDriverProperties = struct_VkPhysicalDeviceDriverProperties;
pub const struct_VkPhysicalDeviceShaderAtomicInt64Features = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderBufferInt64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedInt64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderAtomicInt64Features = struct_VkPhysicalDeviceShaderAtomicInt64Features;
pub const struct_VkPhysicalDeviceShaderFloat16Int8Features = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInt8: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderFloat16Int8Features = struct_VkPhysicalDeviceShaderFloat16Int8Features;
pub const struct_VkPhysicalDeviceFloatControlsProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    denormBehaviorIndependence: VkShaderFloatControlsIndependence = @import("std").mem.zeroes(VkShaderFloatControlsIndependence),
    roundingModeIndependence: VkShaderFloatControlsIndependence = @import("std").mem.zeroes(VkShaderFloatControlsIndependence),
    shaderSignedZeroInfNanPreserveFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSignedZeroInfNanPreserveFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSignedZeroInfNanPreserveFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormPreserveFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormPreserveFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormPreserveFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormFlushToZeroFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormFlushToZeroFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormFlushToZeroFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTEFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTEFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTEFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTZFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTZFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTZFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFloatControlsProperties = struct_VkPhysicalDeviceFloatControlsProperties;
pub const struct_VkDescriptorSetLayoutBindingFlagsCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    bindingCount: u32 = @import("std").mem.zeroes(u32),
    pBindingFlags: [*c]const VkDescriptorBindingFlags = @import("std").mem.zeroes([*c]const VkDescriptorBindingFlags),
};
pub const VkDescriptorSetLayoutBindingFlagsCreateInfo = struct_VkDescriptorSetLayoutBindingFlagsCreateInfo;
pub const struct_VkPhysicalDeviceDescriptorIndexingFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderInputAttachmentArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformTexelBufferArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageTexelBufferArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSampledImageArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInputAttachmentArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingUniformBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingSampledImageUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingStorageImageUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingStorageBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingUpdateUnusedWhilePending: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingPartiallyBound: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingVariableDescriptorCount: VkBool32 = @import("std").mem.zeroes(VkBool32),
    runtimeDescriptorArray: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDescriptorIndexingFeatures = struct_VkPhysicalDeviceDescriptorIndexingFeatures;
pub const struct_VkPhysicalDeviceDescriptorIndexingProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxUpdateAfterBindDescriptorsInAllPools: u32 = @import("std").mem.zeroes(u32),
    shaderUniformBufferArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSampledImageArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageBufferArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    robustBufferAccessUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    quadDivergentImplicitLod: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxPerStageDescriptorUpdateAfterBindSamplers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindSampledImages: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindStorageImages: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindInputAttachments: u32 = @import("std").mem.zeroes(u32),
    maxPerStageUpdateAfterBindResources: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindSamplers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindUniformBuffers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindStorageBuffers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindSampledImages: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindStorageImages: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindInputAttachments: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceDescriptorIndexingProperties = struct_VkPhysicalDeviceDescriptorIndexingProperties;
pub const struct_VkDescriptorSetVariableDescriptorCountAllocateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    descriptorSetCount: u32 = @import("std").mem.zeroes(u32),
    pDescriptorCounts: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkDescriptorSetVariableDescriptorCountAllocateInfo = struct_VkDescriptorSetVariableDescriptorCountAllocateInfo;
pub const struct_VkDescriptorSetVariableDescriptorCountLayoutSupport = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxVariableDescriptorCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDescriptorSetVariableDescriptorCountLayoutSupport = struct_VkDescriptorSetVariableDescriptorCountLayoutSupport;
pub const struct_VkSubpassDescriptionDepthStencilResolve = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    depthResolveMode: VkResolveModeFlagBits = @import("std").mem.zeroes(VkResolveModeFlagBits),
    stencilResolveMode: VkResolveModeFlagBits = @import("std").mem.zeroes(VkResolveModeFlagBits),
    pDepthStencilResolveAttachment: [*c]const VkAttachmentReference2 = @import("std").mem.zeroes([*c]const VkAttachmentReference2),
};
pub const VkSubpassDescriptionDepthStencilResolve = struct_VkSubpassDescriptionDepthStencilResolve;
pub const struct_VkPhysicalDeviceDepthStencilResolveProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportedDepthResolveModes: VkResolveModeFlags = @import("std").mem.zeroes(VkResolveModeFlags),
    supportedStencilResolveModes: VkResolveModeFlags = @import("std").mem.zeroes(VkResolveModeFlags),
    independentResolveNone: VkBool32 = @import("std").mem.zeroes(VkBool32),
    independentResolve: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDepthStencilResolveProperties = struct_VkPhysicalDeviceDepthStencilResolveProperties;
pub const struct_VkPhysicalDeviceScalarBlockLayoutFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    scalarBlockLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceScalarBlockLayoutFeatures = struct_VkPhysicalDeviceScalarBlockLayoutFeatures;
pub const struct_VkImageStencilUsageCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stencilUsage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
};
pub const VkImageStencilUsageCreateInfo = struct_VkImageStencilUsageCreateInfo;
pub const struct_VkSamplerReductionModeCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    reductionMode: VkSamplerReductionMode = @import("std").mem.zeroes(VkSamplerReductionMode),
};
pub const VkSamplerReductionModeCreateInfo = struct_VkSamplerReductionModeCreateInfo;
pub const struct_VkPhysicalDeviceSamplerFilterMinmaxProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    filterMinmaxSingleComponentFormats: VkBool32 = @import("std").mem.zeroes(VkBool32),
    filterMinmaxImageComponentMapping: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSamplerFilterMinmaxProperties = struct_VkPhysicalDeviceSamplerFilterMinmaxProperties;
pub const struct_VkPhysicalDeviceVulkanMemoryModelFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    vulkanMemoryModel: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vulkanMemoryModelDeviceScope: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vulkanMemoryModelAvailabilityVisibilityChains: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVulkanMemoryModelFeatures = struct_VkPhysicalDeviceVulkanMemoryModelFeatures;
pub const struct_VkPhysicalDeviceImagelessFramebufferFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imagelessFramebuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImagelessFramebufferFeatures = struct_VkPhysicalDeviceImagelessFramebufferFeatures;
pub const struct_VkFramebufferAttachmentImageInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkImageCreateFlags = @import("std").mem.zeroes(VkImageCreateFlags),
    usage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
    layerCount: u32 = @import("std").mem.zeroes(u32),
    viewFormatCount: u32 = @import("std").mem.zeroes(u32),
    pViewFormats: [*c]const VkFormat = @import("std").mem.zeroes([*c]const VkFormat),
};
pub const VkFramebufferAttachmentImageInfo = struct_VkFramebufferAttachmentImageInfo;
pub const struct_VkFramebufferAttachmentsCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    attachmentImageInfoCount: u32 = @import("std").mem.zeroes(u32),
    pAttachmentImageInfos: [*c]const VkFramebufferAttachmentImageInfo = @import("std").mem.zeroes([*c]const VkFramebufferAttachmentImageInfo),
};
pub const VkFramebufferAttachmentsCreateInfo = struct_VkFramebufferAttachmentsCreateInfo;
pub const struct_VkRenderPassAttachmentBeginInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    attachmentCount: u32 = @import("std").mem.zeroes(u32),
    pAttachments: [*c]const VkImageView = @import("std").mem.zeroes([*c]const VkImageView),
};
pub const VkRenderPassAttachmentBeginInfo = struct_VkRenderPassAttachmentBeginInfo;
pub const struct_VkPhysicalDeviceUniformBufferStandardLayoutFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    uniformBufferStandardLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceUniformBufferStandardLayoutFeatures = struct_VkPhysicalDeviceUniformBufferStandardLayoutFeatures;
pub const struct_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderSubgroupExtendedTypes: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures = struct_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;
pub const struct_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    separateDepthStencilLayouts: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures = struct_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;
pub const struct_VkAttachmentReferenceStencilLayout = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    stencilLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
};
pub const VkAttachmentReferenceStencilLayout = struct_VkAttachmentReferenceStencilLayout;
pub const struct_VkAttachmentDescriptionStencilLayout = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    stencilInitialLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    stencilFinalLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
};
pub const VkAttachmentDescriptionStencilLayout = struct_VkAttachmentDescriptionStencilLayout;
pub const struct_VkPhysicalDeviceHostQueryResetFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    hostQueryReset: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceHostQueryResetFeatures = struct_VkPhysicalDeviceHostQueryResetFeatures;
pub const struct_VkPhysicalDeviceTimelineSemaphoreFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    timelineSemaphore: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceTimelineSemaphoreFeatures = struct_VkPhysicalDeviceTimelineSemaphoreFeatures;
pub const struct_VkPhysicalDeviceTimelineSemaphoreProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxTimelineSemaphoreValueDifference: u64 = @import("std").mem.zeroes(u64),
};
pub const VkPhysicalDeviceTimelineSemaphoreProperties = struct_VkPhysicalDeviceTimelineSemaphoreProperties;
pub const struct_VkSemaphoreTypeCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    semaphoreType: VkSemaphoreType = @import("std").mem.zeroes(VkSemaphoreType),
    initialValue: u64 = @import("std").mem.zeroes(u64),
};
pub const VkSemaphoreTypeCreateInfo = struct_VkSemaphoreTypeCreateInfo;
pub const struct_VkTimelineSemaphoreSubmitInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    waitSemaphoreValueCount: u32 = @import("std").mem.zeroes(u32),
    pWaitSemaphoreValues: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
    signalSemaphoreValueCount: u32 = @import("std").mem.zeroes(u32),
    pSignalSemaphoreValues: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
};
pub const VkTimelineSemaphoreSubmitInfo = struct_VkTimelineSemaphoreSubmitInfo;
pub const struct_VkSemaphoreWaitInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkSemaphoreWaitFlags = @import("std").mem.zeroes(VkSemaphoreWaitFlags),
    semaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pSemaphores: [*c]const VkSemaphore = @import("std").mem.zeroes([*c]const VkSemaphore),
    pValues: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
};
pub const VkSemaphoreWaitInfo = struct_VkSemaphoreWaitInfo;
pub const struct_VkSemaphoreSignalInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    semaphore: VkSemaphore = @import("std").mem.zeroes(VkSemaphore),
    value: u64 = @import("std").mem.zeroes(u64),
};
pub const VkSemaphoreSignalInfo = struct_VkSemaphoreSignalInfo;
pub const struct_VkPhysicalDeviceBufferDeviceAddressFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    bufferDeviceAddress: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddressCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddressMultiDevice: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceBufferDeviceAddressFeatures = struct_VkPhysicalDeviceBufferDeviceAddressFeatures;
pub const struct_VkBufferDeviceAddressInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
};
pub const VkBufferDeviceAddressInfo = struct_VkBufferDeviceAddressInfo;
pub const struct_VkBufferOpaqueCaptureAddressCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    opaqueCaptureAddress: u64 = @import("std").mem.zeroes(u64),
};
pub const VkBufferOpaqueCaptureAddressCreateInfo = struct_VkBufferOpaqueCaptureAddressCreateInfo;
pub const struct_VkMemoryOpaqueCaptureAddressAllocateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    opaqueCaptureAddress: u64 = @import("std").mem.zeroes(u64),
};
pub const VkMemoryOpaqueCaptureAddressAllocateInfo = struct_VkMemoryOpaqueCaptureAddressAllocateInfo;
pub const struct_VkDeviceMemoryOpaqueCaptureAddressInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
};
pub const VkDeviceMemoryOpaqueCaptureAddressInfo = struct_VkDeviceMemoryOpaqueCaptureAddressInfo;
pub const PFN_vkCmdDrawIndirectCount = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexedIndirectCount = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCreateRenderPass2 = ?*const fn (VkDevice, [*c]const VkRenderPassCreateInfo2, [*c]const VkAllocationCallbacks, [*c]VkRenderPass) callconv(.C) VkResult;
pub const PFN_vkCmdBeginRenderPass2 = ?*const fn (VkCommandBuffer, [*c]const VkRenderPassBeginInfo, [*c]const VkSubpassBeginInfo) callconv(.C) void;
pub const PFN_vkCmdNextSubpass2 = ?*const fn (VkCommandBuffer, [*c]const VkSubpassBeginInfo, [*c]const VkSubpassEndInfo) callconv(.C) void;
pub const PFN_vkCmdEndRenderPass2 = ?*const fn (VkCommandBuffer, [*c]const VkSubpassEndInfo) callconv(.C) void;
pub const PFN_vkResetQueryPool = ?*const fn (VkDevice, VkQueryPool, u32, u32) callconv(.C) void;
pub const PFN_vkGetSemaphoreCounterValue = ?*const fn (VkDevice, VkSemaphore, [*c]u64) callconv(.C) VkResult;
pub const PFN_vkWaitSemaphores = ?*const fn (VkDevice, [*c]const VkSemaphoreWaitInfo, u64) callconv(.C) VkResult;
pub const PFN_vkSignalSemaphore = ?*const fn (VkDevice, [*c]const VkSemaphoreSignalInfo) callconv(.C) VkResult;
pub const PFN_vkGetBufferDeviceAddress = ?*const fn (VkDevice, [*c]const VkBufferDeviceAddressInfo) callconv(.C) VkDeviceAddress;
pub const PFN_vkGetBufferOpaqueCaptureAddress = ?*const fn (VkDevice, [*c]const VkBufferDeviceAddressInfo) callconv(.C) u64;
pub const PFN_vkGetDeviceMemoryOpaqueCaptureAddress = ?*const fn (VkDevice, [*c]const VkDeviceMemoryOpaqueCaptureAddressInfo) callconv(.C) u64;
pub extern fn vkCmdDrawIndirectCount(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub extern fn vkCmdDrawIndexedIndirectCount(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub extern fn vkCreateRenderPass2(device: VkDevice, pCreateInfo: [*c]const VkRenderPassCreateInfo2, pAllocator: [*c]const VkAllocationCallbacks, pRenderPass: [*c]VkRenderPass) VkResult;
pub extern fn vkCmdBeginRenderPass2(commandBuffer: VkCommandBuffer, pRenderPassBegin: [*c]const VkRenderPassBeginInfo, pSubpassBeginInfo: [*c]const VkSubpassBeginInfo) void;
pub extern fn vkCmdNextSubpass2(commandBuffer: VkCommandBuffer, pSubpassBeginInfo: [*c]const VkSubpassBeginInfo, pSubpassEndInfo: [*c]const VkSubpassEndInfo) void;
pub extern fn vkCmdEndRenderPass2(commandBuffer: VkCommandBuffer, pSubpassEndInfo: [*c]const VkSubpassEndInfo) void;
pub extern fn vkResetQueryPool(device: VkDevice, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32) void;
pub extern fn vkGetSemaphoreCounterValue(device: VkDevice, semaphore: VkSemaphore, pValue: [*c]u64) VkResult;
pub extern fn vkWaitSemaphores(device: VkDevice, pWaitInfo: [*c]const VkSemaphoreWaitInfo, timeout: u64) VkResult;
pub extern fn vkSignalSemaphore(device: VkDevice, pSignalInfo: [*c]const VkSemaphoreSignalInfo) VkResult;
pub extern fn vkGetBufferDeviceAddress(device: VkDevice, pInfo: [*c]const VkBufferDeviceAddressInfo) VkDeviceAddress;
pub extern fn vkGetBufferOpaqueCaptureAddress(device: VkDevice, pInfo: [*c]const VkBufferDeviceAddressInfo) u64;
pub extern fn vkGetDeviceMemoryOpaqueCaptureAddress(device: VkDevice, pInfo: [*c]const VkDeviceMemoryOpaqueCaptureAddressInfo) u64;
pub const VkFlags64 = u64;
pub const struct_VkPrivateDataSlot_T = opaque {};
pub const VkPrivateDataSlot = ?*struct_VkPrivateDataSlot_T;
pub const VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT: c_int = 1;
pub const VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT: c_int = 2;
pub const VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT: c_int = 4;
pub const VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT: c_int = 1;
pub const VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT: c_int = 2;
pub const VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT: c_int = 4;
pub const VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineCreationFeedbackFlagBits = c_uint;
pub const VkPipelineCreationFeedbackFlagBits = enum_VkPipelineCreationFeedbackFlagBits;
pub const VkPipelineCreationFeedbackFlags = VkFlags;
pub const VK_TOOL_PURPOSE_VALIDATION_BIT: c_int = 1;
pub const VK_TOOL_PURPOSE_PROFILING_BIT: c_int = 2;
pub const VK_TOOL_PURPOSE_TRACING_BIT: c_int = 4;
pub const VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT: c_int = 8;
pub const VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT: c_int = 16;
pub const VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT: c_int = 32;
pub const VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT: c_int = 64;
pub const VK_TOOL_PURPOSE_VALIDATION_BIT_EXT: c_int = 1;
pub const VK_TOOL_PURPOSE_PROFILING_BIT_EXT: c_int = 2;
pub const VK_TOOL_PURPOSE_TRACING_BIT_EXT: c_int = 4;
pub const VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT: c_int = 8;
pub const VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT: c_int = 16;
pub const VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkToolPurposeFlagBits = c_uint;
pub const VkToolPurposeFlagBits = enum_VkToolPurposeFlagBits;
pub const VkToolPurposeFlags = VkFlags;
pub const VkPrivateDataSlotCreateFlags = VkFlags;
pub const VkPipelineStageFlags2 = VkFlags64;
pub const VkPipelineStageFlagBits2 = VkFlags64;
pub const VK_PIPELINE_STAGE_2_NONE: VkPipelineStageFlagBits2 = 0;
pub const VK_PIPELINE_STAGE_2_NONE_KHR: VkPipelineStageFlagBits2 = 0;
pub const VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT: VkPipelineStageFlagBits2 = 1;
pub const VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR: VkPipelineStageFlagBits2 = 1;
pub const VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT: VkPipelineStageFlagBits2 = 2;
pub const VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR: VkPipelineStageFlagBits2 = 2;
pub const VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT: VkPipelineStageFlagBits2 = 4;
pub const VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR: VkPipelineStageFlagBits2 = 4;
pub const VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT: VkPipelineStageFlagBits2 = 8;
pub const VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 8;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT: VkPipelineStageFlagBits2 = 16;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 16;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT: VkPipelineStageFlagBits2 = 32;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 32;
pub const VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT: VkPipelineStageFlagBits2 = 64;
pub const VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 64;
pub const VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT: VkPipelineStageFlagBits2 = 128;
pub const VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 128;
pub const VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 256)))));
pub const VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 256)))));
pub const VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 512)))));
pub const VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 512)))));
pub const VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1024)))));
pub const VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1024)))));
pub const VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2048)))));
pub const VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2048)))));
pub const VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_PIPELINE_STAGE_2_TRANSFER_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8192)))));
pub const VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8192)))));
pub const VK_PIPELINE_STAGE_2_HOST_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16384)))));
pub const VK_PIPELINE_STAGE_2_HOST_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16384)))));
pub const VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 32768)))));
pub const VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 32768)))));
pub const VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 65536)))));
pub const VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 65536)))));
pub const VK_PIPELINE_STAGE_2_COPY_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4294967296)))));
pub const VK_PIPELINE_STAGE_2_COPY_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4294967296)))));
pub const VK_PIPELINE_STAGE_2_RESOLVE_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8589934592)))));
pub const VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8589934592)))));
pub const VK_PIPELINE_STAGE_2_BLIT_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 17179869184)))));
pub const VK_PIPELINE_STAGE_2_BLIT_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 17179869184)))));
pub const VK_PIPELINE_STAGE_2_CLEAR_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 34359738368)))));
pub const VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 34359738368)))));
pub const VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 68719476736)))));
pub const VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 68719476736)))));
pub const VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 137438953472)))));
pub const VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 137438953472)))));
pub const VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 274877906944)))));
pub const VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 274877906944)))));
pub const VK_PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 67108864)))));
pub const VK_PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 134217728)))));
pub const VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16777216)))));
pub const VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 262144)))));
pub const VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 131072)))));
pub const VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4194304)))));
pub const VK_PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4194304)))));
pub const VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 33554432)))));
pub const VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2097152)))));
pub const VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2097152)))));
pub const VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 33554432)))));
pub const VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8388608)))));
pub const VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_NV: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 524288)))));
pub const VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_NV: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1048576)))));
pub const VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 524288)))));
pub const VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1048576)))));
pub const VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 549755813888)))));
pub const VK_PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 549755813888)))));
pub const VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1099511627776)))));
pub const VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 268435456)))));
pub const VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1073741824)))));
pub const VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2199023255552)))));
pub const VK_PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 536870912)))));
pub const VkAccessFlags2 = VkFlags64;
pub const VkAccessFlagBits2 = VkFlags64;
pub const VK_ACCESS_2_NONE: VkAccessFlagBits2 = 0;
pub const VK_ACCESS_2_NONE_KHR: VkAccessFlagBits2 = 0;
pub const VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT: VkAccessFlagBits2 = 1;
pub const VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR: VkAccessFlagBits2 = 1;
pub const VK_ACCESS_2_INDEX_READ_BIT: VkAccessFlagBits2 = 2;
pub const VK_ACCESS_2_INDEX_READ_BIT_KHR: VkAccessFlagBits2 = 2;
pub const VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT: VkAccessFlagBits2 = 4;
pub const VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR: VkAccessFlagBits2 = 4;
pub const VK_ACCESS_2_UNIFORM_READ_BIT: VkAccessFlagBits2 = 8;
pub const VK_ACCESS_2_UNIFORM_READ_BIT_KHR: VkAccessFlagBits2 = 8;
pub const VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT: VkAccessFlagBits2 = 16;
pub const VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = 16;
pub const VK_ACCESS_2_SHADER_READ_BIT: VkAccessFlagBits2 = 32;
pub const VK_ACCESS_2_SHADER_READ_BIT_KHR: VkAccessFlagBits2 = 32;
pub const VK_ACCESS_2_SHADER_WRITE_BIT: VkAccessFlagBits2 = 64;
pub const VK_ACCESS_2_SHADER_WRITE_BIT_KHR: VkAccessFlagBits2 = 64;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT: VkAccessFlagBits2 = 128;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = 128;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 256)))));
pub const VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 256)))));
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 512)))));
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 512)))));
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1024)))));
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1024)))));
pub const VK_ACCESS_2_TRANSFER_READ_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2048)))));
pub const VK_ACCESS_2_TRANSFER_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2048)))));
pub const VK_ACCESS_2_TRANSFER_WRITE_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_ACCESS_2_HOST_READ_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8192)))));
pub const VK_ACCESS_2_HOST_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8192)))));
pub const VK_ACCESS_2_HOST_WRITE_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16384)))));
pub const VK_ACCESS_2_HOST_WRITE_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16384)))));
pub const VK_ACCESS_2_MEMORY_READ_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 32768)))));
pub const VK_ACCESS_2_MEMORY_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 32768)))));
pub const VK_ACCESS_2_MEMORY_WRITE_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 65536)))));
pub const VK_ACCESS_2_MEMORY_WRITE_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 65536)))));
pub const VK_ACCESS_2_SHADER_SAMPLED_READ_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4294967296)))));
pub const VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4294967296)))));
pub const VK_ACCESS_2_SHADER_STORAGE_READ_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8589934592)))));
pub const VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8589934592)))));
pub const VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 17179869184)))));
pub const VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 17179869184)))));
pub const VK_ACCESS_2_VIDEO_DECODE_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 34359738368)))));
pub const VK_ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 68719476736)))));
pub const VK_ACCESS_2_VIDEO_ENCODE_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 137438953472)))));
pub const VK_ACCESS_2_VIDEO_ENCODE_WRITE_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 274877906944)))));
pub const VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 33554432)))));
pub const VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 67108864)))));
pub const VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 134217728)))));
pub const VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1048576)))));
pub const VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 131072)))));
pub const VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 262144)))));
pub const VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8388608)))));
pub const VK_ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8388608)))));
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2097152)))));
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4194304)))));
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2097152)))));
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4194304)))));
pub const VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16777216)))));
pub const VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 524288)))));
pub const VK_ACCESS_2_DESCRIPTOR_BUFFER_READ_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2199023255552)))));
pub const VK_ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 549755813888)))));
pub const VK_ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1099511627776)))));
pub const VK_ACCESS_2_MICROMAP_READ_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 17592186044416)))));
pub const VK_ACCESS_2_MICROMAP_WRITE_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 35184372088832)))));
pub const VK_ACCESS_2_OPTICAL_FLOW_READ_BIT_NV: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4398046511104)))));
pub const VK_ACCESS_2_OPTICAL_FLOW_WRITE_BIT_NV: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8796093022208)))));
pub const VK_SUBMIT_PROTECTED_BIT: c_int = 1;
pub const VK_SUBMIT_PROTECTED_BIT_KHR: c_int = 1;
pub const VK_SUBMIT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSubmitFlagBits = c_uint;
pub const VkSubmitFlagBits = enum_VkSubmitFlagBits;
pub const VkSubmitFlags = VkFlags;
pub const VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT: c_int = 1;
pub const VK_RENDERING_SUSPENDING_BIT: c_int = 2;
pub const VK_RENDERING_RESUMING_BIT: c_int = 4;
pub const VK_RENDERING_CONTENTS_INLINE_BIT_EXT: c_int = 16;
pub const VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT: c_int = 8;
pub const VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR: c_int = 1;
pub const VK_RENDERING_SUSPENDING_BIT_KHR: c_int = 2;
pub const VK_RENDERING_RESUMING_BIT_KHR: c_int = 4;
pub const VK_RENDERING_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkRenderingFlagBits = c_uint;
pub const VkRenderingFlagBits = enum_VkRenderingFlagBits;
pub const VkRenderingFlags = VkFlags;
pub const VkFormatFeatureFlags2 = VkFlags64;
pub const VkFormatFeatureFlagBits2 = VkFlags64;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT: VkFormatFeatureFlagBits2 = 1;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT_KHR: VkFormatFeatureFlagBits2 = 1;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT: VkFormatFeatureFlagBits2 = 2;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT_KHR: VkFormatFeatureFlagBits2 = 2;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT: VkFormatFeatureFlagBits2 = 4;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT_KHR: VkFormatFeatureFlagBits2 = 4;
pub const VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT: VkFormatFeatureFlagBits2 = 8;
pub const VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR: VkFormatFeatureFlagBits2 = 8;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT: VkFormatFeatureFlagBits2 = 16;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT_KHR: VkFormatFeatureFlagBits2 = 16;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT: VkFormatFeatureFlagBits2 = 32;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT_KHR: VkFormatFeatureFlagBits2 = 32;
pub const VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT: VkFormatFeatureFlagBits2 = 64;
pub const VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT_KHR: VkFormatFeatureFlagBits2 = 64;
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT: VkFormatFeatureFlagBits2 = 128;
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR: VkFormatFeatureFlagBits2 = 128;
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 256)))));
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 256)))));
pub const VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 512)))));
pub const VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 512)))));
pub const VK_FORMAT_FEATURE_2_BLIT_SRC_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1024)))));
pub const VK_FORMAT_FEATURE_2_BLIT_SRC_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1024)))));
pub const VK_FORMAT_FEATURE_2_BLIT_DST_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2048)))));
pub const VK_FORMAT_FEATURE_2_BLIT_DST_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2048)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8192)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8192)))));
pub const VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16384)))));
pub const VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16384)))));
pub const VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 32768)))));
pub const VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 32768)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 65536)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 65536)))));
pub const VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 131072)))));
pub const VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 131072)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 262144)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 262144)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 524288)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 524288)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1048576)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1048576)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2097152)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2097152)))));
pub const VK_FORMAT_FEATURE_2_DISJOINT_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4194304)))));
pub const VK_FORMAT_FEATURE_2_DISJOINT_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4194304)))));
pub const VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8388608)))));
pub const VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8388608)))));
pub const VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2147483648)))));
pub const VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2147483648)))));
pub const VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4294967296)))));
pub const VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4294967296)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8589934592)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8589934592)))));
pub const VK_FORMAT_FEATURE_2_VIDEO_DECODE_OUTPUT_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 33554432)))));
pub const VK_FORMAT_FEATURE_2_VIDEO_DECODE_DPB_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 67108864)))));
pub const VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 536870912)))));
pub const VK_FORMAT_FEATURE_2_FRAGMENT_DENSITY_MAP_BIT_EXT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16777216)))));
pub const VK_FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1073741824)))));
pub const VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT_EXT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 70368744177664)))));
pub const VK_FORMAT_FEATURE_2_VIDEO_ENCODE_INPUT_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 134217728)))));
pub const VK_FORMAT_FEATURE_2_VIDEO_ENCODE_DPB_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 268435456)))));
pub const VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 274877906944)))));
pub const VK_FORMAT_FEATURE_2_WEIGHT_IMAGE_BIT_QCOM: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 17179869184)))));
pub const VK_FORMAT_FEATURE_2_WEIGHT_SAMPLED_IMAGE_BIT_QCOM: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 34359738368)))));
pub const VK_FORMAT_FEATURE_2_BLOCK_MATCHING_BIT_QCOM: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 68719476736)))));
pub const VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 137438953472)))));
pub const VK_FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1099511627776)))));
pub const VK_FORMAT_FEATURE_2_OPTICAL_FLOW_VECTOR_BIT_NV: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2199023255552)))));
pub const VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4398046511104)))));
pub const struct_VkPhysicalDeviceVulkan13Features = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    robustImageAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    inlineUniformBlock: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pipelineCreationCacheControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
    privateData: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDemoteToHelperInvocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderTerminateInvocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    subgroupSizeControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
    computeFullSubgroups: VkBool32 = @import("std").mem.zeroes(VkBool32),
    synchronization2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    textureCompressionASTC_HDR: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderZeroInitializeWorkgroupMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dynamicRendering: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderIntegerDotProduct: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maintenance4: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVulkan13Features = struct_VkPhysicalDeviceVulkan13Features;
pub const struct_VkPhysicalDeviceVulkan13Properties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minSubgroupSize: u32 = @import("std").mem.zeroes(u32),
    maxSubgroupSize: u32 = @import("std").mem.zeroes(u32),
    maxComputeWorkgroupSubgroups: u32 = @import("std").mem.zeroes(u32),
    requiredSubgroupSizeStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    maxInlineUniformBlockSize: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxInlineUniformTotalSize: u32 = @import("std").mem.zeroes(u32),
    integerDotProduct8BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct8BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct8BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct4x8BitPackedUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct4x8BitPackedSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct4x8BitPackedMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct16BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct16BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct16BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct32BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct32BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct32BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct64BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct64BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct64BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating8BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating16BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating32BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating64BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storageTexelBufferOffsetAlignmentBytes: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    storageTexelBufferOffsetSingleTexelAlignment: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    uniformTexelBufferOffsetSingleTexelAlignment: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxBufferSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceVulkan13Properties = struct_VkPhysicalDeviceVulkan13Properties;
pub const struct_VkPipelineCreationFeedback = extern struct {
    flags: VkPipelineCreationFeedbackFlags = @import("std").mem.zeroes(VkPipelineCreationFeedbackFlags),
    duration: u64 = @import("std").mem.zeroes(u64),
};
pub const VkPipelineCreationFeedback = struct_VkPipelineCreationFeedback;
pub const struct_VkPipelineCreationFeedbackCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pPipelineCreationFeedback: [*c]VkPipelineCreationFeedback = @import("std").mem.zeroes([*c]VkPipelineCreationFeedback),
    pipelineStageCreationFeedbackCount: u32 = @import("std").mem.zeroes(u32),
    pPipelineStageCreationFeedbacks: [*c]VkPipelineCreationFeedback = @import("std").mem.zeroes([*c]VkPipelineCreationFeedback),
};
pub const VkPipelineCreationFeedbackCreateInfo = struct_VkPipelineCreationFeedbackCreateInfo;
pub const struct_VkPhysicalDeviceShaderTerminateInvocationFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderTerminateInvocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderTerminateInvocationFeatures = struct_VkPhysicalDeviceShaderTerminateInvocationFeatures;
pub const struct_VkPhysicalDeviceToolProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    name: [256]u8 = @import("std").mem.zeroes([256]u8),
    version: [256]u8 = @import("std").mem.zeroes([256]u8),
    purposes: VkToolPurposeFlags = @import("std").mem.zeroes(VkToolPurposeFlags),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    layer: [256]u8 = @import("std").mem.zeroes([256]u8),
};
pub const VkPhysicalDeviceToolProperties = struct_VkPhysicalDeviceToolProperties;
pub const struct_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderDemoteToHelperInvocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures = struct_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures;
pub const struct_VkPhysicalDevicePrivateDataFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    privateData: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePrivateDataFeatures = struct_VkPhysicalDevicePrivateDataFeatures;
pub const struct_VkDevicePrivateDataCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    privateDataSlotRequestCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDevicePrivateDataCreateInfo = struct_VkDevicePrivateDataCreateInfo;
pub const struct_VkPrivateDataSlotCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPrivateDataSlotCreateFlags = @import("std").mem.zeroes(VkPrivateDataSlotCreateFlags),
};
pub const VkPrivateDataSlotCreateInfo = struct_VkPrivateDataSlotCreateInfo;
pub const struct_VkPhysicalDevicePipelineCreationCacheControlFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineCreationCacheControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePipelineCreationCacheControlFeatures = struct_VkPhysicalDevicePipelineCreationCacheControlFeatures;
pub const struct_VkMemoryBarrier2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    srcAccessMask: VkAccessFlags2 = @import("std").mem.zeroes(VkAccessFlags2),
    dstStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    dstAccessMask: VkAccessFlags2 = @import("std").mem.zeroes(VkAccessFlags2),
};
pub const VkMemoryBarrier2 = struct_VkMemoryBarrier2;
pub const struct_VkBufferMemoryBarrier2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    srcAccessMask: VkAccessFlags2 = @import("std").mem.zeroes(VkAccessFlags2),
    dstStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    dstAccessMask: VkAccessFlags2 = @import("std").mem.zeroes(VkAccessFlags2),
    srcQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    dstQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkBufferMemoryBarrier2 = struct_VkBufferMemoryBarrier2;
pub const struct_VkImageMemoryBarrier2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    srcAccessMask: VkAccessFlags2 = @import("std").mem.zeroes(VkAccessFlags2),
    dstStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    dstAccessMask: VkAccessFlags2 = @import("std").mem.zeroes(VkAccessFlags2),
    oldLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    newLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    srcQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    dstQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    subresourceRange: VkImageSubresourceRange = @import("std").mem.zeroes(VkImageSubresourceRange),
};
pub const VkImageMemoryBarrier2 = struct_VkImageMemoryBarrier2;
pub const struct_VkDependencyInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dependencyFlags: VkDependencyFlags = @import("std").mem.zeroes(VkDependencyFlags),
    memoryBarrierCount: u32 = @import("std").mem.zeroes(u32),
    pMemoryBarriers: [*c]const VkMemoryBarrier2 = @import("std").mem.zeroes([*c]const VkMemoryBarrier2),
    bufferMemoryBarrierCount: u32 = @import("std").mem.zeroes(u32),
    pBufferMemoryBarriers: [*c]const VkBufferMemoryBarrier2 = @import("std").mem.zeroes([*c]const VkBufferMemoryBarrier2),
    imageMemoryBarrierCount: u32 = @import("std").mem.zeroes(u32),
    pImageMemoryBarriers: [*c]const VkImageMemoryBarrier2 = @import("std").mem.zeroes([*c]const VkImageMemoryBarrier2),
};
pub const VkDependencyInfo = struct_VkDependencyInfo;
pub const struct_VkSemaphoreSubmitInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    semaphore: VkSemaphore = @import("std").mem.zeroes(VkSemaphore),
    value: u64 = @import("std").mem.zeroes(u64),
    stageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    deviceIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkSemaphoreSubmitInfo = struct_VkSemaphoreSubmitInfo;
pub const struct_VkCommandBufferSubmitInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    commandBuffer: VkCommandBuffer = @import("std").mem.zeroes(VkCommandBuffer),
    deviceMask: u32 = @import("std").mem.zeroes(u32),
};
pub const VkCommandBufferSubmitInfo = struct_VkCommandBufferSubmitInfo;
pub const struct_VkSubmitInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkSubmitFlags = @import("std").mem.zeroes(VkSubmitFlags),
    waitSemaphoreInfoCount: u32 = @import("std").mem.zeroes(u32),
    pWaitSemaphoreInfos: [*c]const VkSemaphoreSubmitInfo = @import("std").mem.zeroes([*c]const VkSemaphoreSubmitInfo),
    commandBufferInfoCount: u32 = @import("std").mem.zeroes(u32),
    pCommandBufferInfos: [*c]const VkCommandBufferSubmitInfo = @import("std").mem.zeroes([*c]const VkCommandBufferSubmitInfo),
    signalSemaphoreInfoCount: u32 = @import("std").mem.zeroes(u32),
    pSignalSemaphoreInfos: [*c]const VkSemaphoreSubmitInfo = @import("std").mem.zeroes([*c]const VkSemaphoreSubmitInfo),
};
pub const VkSubmitInfo2 = struct_VkSubmitInfo2;
pub const struct_VkPhysicalDeviceSynchronization2Features = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    synchronization2: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSynchronization2Features = struct_VkPhysicalDeviceSynchronization2Features;
pub const struct_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderZeroInitializeWorkgroupMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = struct_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;
pub const struct_VkPhysicalDeviceImageRobustnessFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    robustImageAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImageRobustnessFeatures = struct_VkPhysicalDeviceImageRobustnessFeatures;
pub const struct_VkBufferCopy2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    dstOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkBufferCopy2 = struct_VkBufferCopy2;
pub const struct_VkCopyBufferInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    dstBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkBufferCopy2 = @import("std").mem.zeroes([*c]const VkBufferCopy2),
};
pub const VkCopyBufferInfo2 = struct_VkCopyBufferInfo2;
pub const struct_VkImageCopy2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    srcOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    dstSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    dstOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    extent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkImageCopy2 = struct_VkImageCopy2;
pub const struct_VkCopyImageInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcImage: VkImage = @import("std").mem.zeroes(VkImage),
    srcImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    dstImage: VkImage = @import("std").mem.zeroes(VkImage),
    dstImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkImageCopy2 = @import("std").mem.zeroes([*c]const VkImageCopy2),
};
pub const VkCopyImageInfo2 = struct_VkCopyImageInfo2;
pub const struct_VkBufferImageCopy2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    bufferOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    bufferRowLength: u32 = @import("std").mem.zeroes(u32),
    bufferImageHeight: u32 = @import("std").mem.zeroes(u32),
    imageSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    imageOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    imageExtent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkBufferImageCopy2 = struct_VkBufferImageCopy2;
pub const struct_VkCopyBufferToImageInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    dstImage: VkImage = @import("std").mem.zeroes(VkImage),
    dstImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkBufferImageCopy2 = @import("std").mem.zeroes([*c]const VkBufferImageCopy2),
};
pub const VkCopyBufferToImageInfo2 = struct_VkCopyBufferToImageInfo2;
pub const struct_VkCopyImageToBufferInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcImage: VkImage = @import("std").mem.zeroes(VkImage),
    srcImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    dstBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkBufferImageCopy2 = @import("std").mem.zeroes([*c]const VkBufferImageCopy2),
};
pub const VkCopyImageToBufferInfo2 = struct_VkCopyImageToBufferInfo2;
pub const struct_VkImageBlit2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    srcOffsets: [2]VkOffset3D = @import("std").mem.zeroes([2]VkOffset3D),
    dstSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    dstOffsets: [2]VkOffset3D = @import("std").mem.zeroes([2]VkOffset3D),
};
pub const VkImageBlit2 = struct_VkImageBlit2;
pub const struct_VkBlitImageInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcImage: VkImage = @import("std").mem.zeroes(VkImage),
    srcImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    dstImage: VkImage = @import("std").mem.zeroes(VkImage),
    dstImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkImageBlit2 = @import("std").mem.zeroes([*c]const VkImageBlit2),
    filter: VkFilter = @import("std").mem.zeroes(VkFilter),
};
pub const VkBlitImageInfo2 = struct_VkBlitImageInfo2;
pub const struct_VkImageResolve2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    srcOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    dstSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    dstOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    extent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkImageResolve2 = struct_VkImageResolve2;
pub const struct_VkResolveImageInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcImage: VkImage = @import("std").mem.zeroes(VkImage),
    srcImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    dstImage: VkImage = @import("std").mem.zeroes(VkImage),
    dstImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkImageResolve2 = @import("std").mem.zeroes([*c]const VkImageResolve2),
};
pub const VkResolveImageInfo2 = struct_VkResolveImageInfo2;
pub const struct_VkPhysicalDeviceSubgroupSizeControlFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    subgroupSizeControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
    computeFullSubgroups: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSubgroupSizeControlFeatures = struct_VkPhysicalDeviceSubgroupSizeControlFeatures;
pub const struct_VkPhysicalDeviceSubgroupSizeControlProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minSubgroupSize: u32 = @import("std").mem.zeroes(u32),
    maxSubgroupSize: u32 = @import("std").mem.zeroes(u32),
    maxComputeWorkgroupSubgroups: u32 = @import("std").mem.zeroes(u32),
    requiredSubgroupSizeStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
};
pub const VkPhysicalDeviceSubgroupSizeControlProperties = struct_VkPhysicalDeviceSubgroupSizeControlProperties;
pub const struct_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    requiredSubgroupSize: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPipelineShaderStageRequiredSubgroupSizeCreateInfo = struct_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;
pub const struct_VkPhysicalDeviceInlineUniformBlockFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    inlineUniformBlock: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceInlineUniformBlockFeatures = struct_VkPhysicalDeviceInlineUniformBlockFeatures;
pub const struct_VkPhysicalDeviceInlineUniformBlockProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxInlineUniformBlockSize: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceInlineUniformBlockProperties = struct_VkPhysicalDeviceInlineUniformBlockProperties;
pub const struct_VkWriteDescriptorSetInlineUniformBlock = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dataSize: u32 = @import("std").mem.zeroes(u32),
    pData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkWriteDescriptorSetInlineUniformBlock = struct_VkWriteDescriptorSetInlineUniformBlock;
pub const struct_VkDescriptorPoolInlineUniformBlockCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxInlineUniformBlockBindings: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDescriptorPoolInlineUniformBlockCreateInfo = struct_VkDescriptorPoolInlineUniformBlockCreateInfo;
pub const struct_VkPhysicalDeviceTextureCompressionASTCHDRFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    textureCompressionASTC_HDR: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceTextureCompressionASTCHDRFeatures = struct_VkPhysicalDeviceTextureCompressionASTCHDRFeatures;
pub const struct_VkRenderingAttachmentInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    imageView: VkImageView = @import("std").mem.zeroes(VkImageView),
    imageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    resolveMode: VkResolveModeFlagBits = @import("std").mem.zeroes(VkResolveModeFlagBits),
    resolveImageView: VkImageView = @import("std").mem.zeroes(VkImageView),
    resolveImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    loadOp: VkAttachmentLoadOp = @import("std").mem.zeroes(VkAttachmentLoadOp),
    storeOp: VkAttachmentStoreOp = @import("std").mem.zeroes(VkAttachmentStoreOp),
    clearValue: VkClearValue = @import("std").mem.zeroes(VkClearValue),
};
pub const VkRenderingAttachmentInfo = struct_VkRenderingAttachmentInfo;
pub const struct_VkRenderingInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkRenderingFlags = @import("std").mem.zeroes(VkRenderingFlags),
    renderArea: VkRect2D = @import("std").mem.zeroes(VkRect2D),
    layerCount: u32 = @import("std").mem.zeroes(u32),
    viewMask: u32 = @import("std").mem.zeroes(u32),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachments: [*c]const VkRenderingAttachmentInfo = @import("std").mem.zeroes([*c]const VkRenderingAttachmentInfo),
    pDepthAttachment: [*c]const VkRenderingAttachmentInfo = @import("std").mem.zeroes([*c]const VkRenderingAttachmentInfo),
    pStencilAttachment: [*c]const VkRenderingAttachmentInfo = @import("std").mem.zeroes([*c]const VkRenderingAttachmentInfo),
};
pub const VkRenderingInfo = struct_VkRenderingInfo;
pub const struct_VkPipelineRenderingCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    viewMask: u32 = @import("std").mem.zeroes(u32),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachmentFormats: [*c]const VkFormat = @import("std").mem.zeroes([*c]const VkFormat),
    depthAttachmentFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    stencilAttachmentFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
};
pub const VkPipelineRenderingCreateInfo = struct_VkPipelineRenderingCreateInfo;
pub const struct_VkPhysicalDeviceDynamicRenderingFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    dynamicRendering: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDynamicRenderingFeatures = struct_VkPhysicalDeviceDynamicRenderingFeatures;
pub const struct_VkCommandBufferInheritanceRenderingInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkRenderingFlags = @import("std").mem.zeroes(VkRenderingFlags),
    viewMask: u32 = @import("std").mem.zeroes(u32),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachmentFormats: [*c]const VkFormat = @import("std").mem.zeroes([*c]const VkFormat),
    depthAttachmentFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    stencilAttachmentFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    rasterizationSamples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
};
pub const VkCommandBufferInheritanceRenderingInfo = struct_VkCommandBufferInheritanceRenderingInfo;
pub const struct_VkPhysicalDeviceShaderIntegerDotProductFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderIntegerDotProduct: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderIntegerDotProductFeatures = struct_VkPhysicalDeviceShaderIntegerDotProductFeatures;
pub const struct_VkPhysicalDeviceShaderIntegerDotProductProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    integerDotProduct8BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct8BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct8BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct4x8BitPackedUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct4x8BitPackedSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct4x8BitPackedMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct16BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct16BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct16BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct32BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct32BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct32BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct64BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct64BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct64BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating8BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating16BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating32BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating64BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderIntegerDotProductProperties = struct_VkPhysicalDeviceShaderIntegerDotProductProperties;
pub const struct_VkPhysicalDeviceTexelBufferAlignmentProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    storageTexelBufferOffsetAlignmentBytes: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    storageTexelBufferOffsetSingleTexelAlignment: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    uniformTexelBufferOffsetSingleTexelAlignment: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceTexelBufferAlignmentProperties = struct_VkPhysicalDeviceTexelBufferAlignmentProperties;
pub const struct_VkFormatProperties3 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    linearTilingFeatures: VkFormatFeatureFlags2 = @import("std").mem.zeroes(VkFormatFeatureFlags2),
    optimalTilingFeatures: VkFormatFeatureFlags2 = @import("std").mem.zeroes(VkFormatFeatureFlags2),
    bufferFeatures: VkFormatFeatureFlags2 = @import("std").mem.zeroes(VkFormatFeatureFlags2),
};
pub const VkFormatProperties3 = struct_VkFormatProperties3;
pub const struct_VkPhysicalDeviceMaintenance4Features = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maintenance4: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMaintenance4Features = struct_VkPhysicalDeviceMaintenance4Features;
pub const struct_VkPhysicalDeviceMaintenance4Properties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxBufferSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceMaintenance4Properties = struct_VkPhysicalDeviceMaintenance4Properties;
pub const struct_VkDeviceBufferMemoryRequirements = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pCreateInfo: [*c]const VkBufferCreateInfo = @import("std").mem.zeroes([*c]const VkBufferCreateInfo),
};
pub const VkDeviceBufferMemoryRequirements = struct_VkDeviceBufferMemoryRequirements;
pub const struct_VkDeviceImageMemoryRequirements = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pCreateInfo: [*c]const VkImageCreateInfo = @import("std").mem.zeroes([*c]const VkImageCreateInfo),
    planeAspect: VkImageAspectFlagBits = @import("std").mem.zeroes(VkImageAspectFlagBits),
};
pub const VkDeviceImageMemoryRequirements = struct_VkDeviceImageMemoryRequirements;
pub const PFN_vkGetPhysicalDeviceToolProperties = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkPhysicalDeviceToolProperties) callconv(.C) VkResult;
pub const PFN_vkCreatePrivateDataSlot = ?*const fn (VkDevice, [*c]const VkPrivateDataSlotCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPrivateDataSlot) callconv(.C) VkResult;
pub const PFN_vkDestroyPrivateDataSlot = ?*const fn (VkDevice, VkPrivateDataSlot, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkSetPrivateData = ?*const fn (VkDevice, VkObjectType, u64, VkPrivateDataSlot, u64) callconv(.C) VkResult;
pub const PFN_vkGetPrivateData = ?*const fn (VkDevice, VkObjectType, u64, VkPrivateDataSlot, [*c]u64) callconv(.C) void;
pub const PFN_vkCmdSetEvent2 = ?*const fn (VkCommandBuffer, VkEvent, [*c]const VkDependencyInfo) callconv(.C) void;
pub const PFN_vkCmdResetEvent2 = ?*const fn (VkCommandBuffer, VkEvent, VkPipelineStageFlags2) callconv(.C) void;
pub const PFN_vkCmdWaitEvents2 = ?*const fn (VkCommandBuffer, u32, [*c]const VkEvent, [*c]const VkDependencyInfo) callconv(.C) void;
pub const PFN_vkCmdPipelineBarrier2 = ?*const fn (VkCommandBuffer, [*c]const VkDependencyInfo) callconv(.C) void;
pub const PFN_vkCmdWriteTimestamp2 = ?*const fn (VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkQueueSubmit2 = ?*const fn (VkQueue, u32, [*c]const VkSubmitInfo2, VkFence) callconv(.C) VkResult;
pub const PFN_vkCmdCopyBuffer2 = ?*const fn (VkCommandBuffer, [*c]const VkCopyBufferInfo2) callconv(.C) void;
pub const PFN_vkCmdCopyImage2 = ?*const fn (VkCommandBuffer, [*c]const VkCopyImageInfo2) callconv(.C) void;
pub const PFN_vkCmdCopyBufferToImage2 = ?*const fn (VkCommandBuffer, [*c]const VkCopyBufferToImageInfo2) callconv(.C) void;
pub const PFN_vkCmdCopyImageToBuffer2 = ?*const fn (VkCommandBuffer, [*c]const VkCopyImageToBufferInfo2) callconv(.C) void;
pub const PFN_vkCmdBlitImage2 = ?*const fn (VkCommandBuffer, [*c]const VkBlitImageInfo2) callconv(.C) void;
pub const PFN_vkCmdResolveImage2 = ?*const fn (VkCommandBuffer, [*c]const VkResolveImageInfo2) callconv(.C) void;
pub const PFN_vkCmdBeginRendering = ?*const fn (VkCommandBuffer, [*c]const VkRenderingInfo) callconv(.C) void;
pub const PFN_vkCmdEndRendering = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub const PFN_vkCmdSetCullMode = ?*const fn (VkCommandBuffer, VkCullModeFlags) callconv(.C) void;
pub const PFN_vkCmdSetFrontFace = ?*const fn (VkCommandBuffer, VkFrontFace) callconv(.C) void;
pub const PFN_vkCmdSetPrimitiveTopology = ?*const fn (VkCommandBuffer, VkPrimitiveTopology) callconv(.C) void;
pub const PFN_vkCmdSetViewportWithCount = ?*const fn (VkCommandBuffer, u32, [*c]const VkViewport) callconv(.C) void;
pub const PFN_vkCmdSetScissorWithCount = ?*const fn (VkCommandBuffer, u32, [*c]const VkRect2D) callconv(.C) void;
pub const PFN_vkCmdBindVertexBuffers2 = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize, [*c]const VkDeviceSize, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdSetDepthTestEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthWriteEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthCompareOp = ?*const fn (VkCommandBuffer, VkCompareOp) callconv(.C) void;
pub const PFN_vkCmdSetDepthBoundsTestEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetStencilTestEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetStencilOp = ?*const fn (VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp) callconv(.C) void;
pub const PFN_vkCmdSetRasterizerDiscardEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthBiasEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetPrimitiveRestartEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkGetDeviceBufferMemoryRequirements = ?*const fn (VkDevice, [*c]const VkDeviceBufferMemoryRequirements, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetDeviceImageMemoryRequirements = ?*const fn (VkDevice, [*c]const VkDeviceImageMemoryRequirements, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetDeviceImageSparseMemoryRequirements = ?*const fn (VkDevice, [*c]const VkDeviceImageMemoryRequirements, [*c]u32, [*c]VkSparseImageMemoryRequirements2) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceToolProperties(physicalDevice: VkPhysicalDevice, pToolCount: [*c]u32, pToolProperties: [*c]VkPhysicalDeviceToolProperties) VkResult;
pub extern fn vkCreatePrivateDataSlot(device: VkDevice, pCreateInfo: [*c]const VkPrivateDataSlotCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pPrivateDataSlot: [*c]VkPrivateDataSlot) VkResult;
pub extern fn vkDestroyPrivateDataSlot(device: VkDevice, privateDataSlot: VkPrivateDataSlot, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkSetPrivateData(device: VkDevice, objectType: VkObjectType, objectHandle: u64, privateDataSlot: VkPrivateDataSlot, data: u64) VkResult;
pub extern fn vkGetPrivateData(device: VkDevice, objectType: VkObjectType, objectHandle: u64, privateDataSlot: VkPrivateDataSlot, pData: [*c]u64) void;
pub extern fn vkCmdSetEvent2(commandBuffer: VkCommandBuffer, event: VkEvent, pDependencyInfo: [*c]const VkDependencyInfo) void;
pub extern fn vkCmdResetEvent2(commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags2) void;
pub extern fn vkCmdWaitEvents2(commandBuffer: VkCommandBuffer, eventCount: u32, pEvents: [*c]const VkEvent, pDependencyInfos: [*c]const VkDependencyInfo) void;
pub extern fn vkCmdPipelineBarrier2(commandBuffer: VkCommandBuffer, pDependencyInfo: [*c]const VkDependencyInfo) void;
pub extern fn vkCmdWriteTimestamp2(commandBuffer: VkCommandBuffer, stage: VkPipelineStageFlags2, queryPool: VkQueryPool, query: u32) void;
pub extern fn vkQueueSubmit2(queue: VkQueue, submitCount: u32, pSubmits: [*c]const VkSubmitInfo2, fence: VkFence) VkResult;
pub extern fn vkCmdCopyBuffer2(commandBuffer: VkCommandBuffer, pCopyBufferInfo: [*c]const VkCopyBufferInfo2) void;
pub extern fn vkCmdCopyImage2(commandBuffer: VkCommandBuffer, pCopyImageInfo: [*c]const VkCopyImageInfo2) void;
pub extern fn vkCmdCopyBufferToImage2(commandBuffer: VkCommandBuffer, pCopyBufferToImageInfo: [*c]const VkCopyBufferToImageInfo2) void;
pub extern fn vkCmdCopyImageToBuffer2(commandBuffer: VkCommandBuffer, pCopyImageToBufferInfo: [*c]const VkCopyImageToBufferInfo2) void;
pub extern fn vkCmdBlitImage2(commandBuffer: VkCommandBuffer, pBlitImageInfo: [*c]const VkBlitImageInfo2) void;
pub extern fn vkCmdResolveImage2(commandBuffer: VkCommandBuffer, pResolveImageInfo: [*c]const VkResolveImageInfo2) void;
pub extern fn vkCmdBeginRendering(commandBuffer: VkCommandBuffer, pRenderingInfo: [*c]const VkRenderingInfo) void;
pub extern fn vkCmdEndRendering(commandBuffer: VkCommandBuffer) void;
pub extern fn vkCmdSetCullMode(commandBuffer: VkCommandBuffer, cullMode: VkCullModeFlags) void;
pub extern fn vkCmdSetFrontFace(commandBuffer: VkCommandBuffer, frontFace: VkFrontFace) void;
pub extern fn vkCmdSetPrimitiveTopology(commandBuffer: VkCommandBuffer, primitiveTopology: VkPrimitiveTopology) void;
pub extern fn vkCmdSetViewportWithCount(commandBuffer: VkCommandBuffer, viewportCount: u32, pViewports: [*c]const VkViewport) void;
pub extern fn vkCmdSetScissorWithCount(commandBuffer: VkCommandBuffer, scissorCount: u32, pScissors: [*c]const VkRect2D) void;
pub extern fn vkCmdBindVertexBuffers2(commandBuffer: VkCommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: [*c]const VkBuffer, pOffsets: [*c]const VkDeviceSize, pSizes: [*c]const VkDeviceSize, pStrides: [*c]const VkDeviceSize) void;
pub extern fn vkCmdSetDepthTestEnable(commandBuffer: VkCommandBuffer, depthTestEnable: VkBool32) void;
pub extern fn vkCmdSetDepthWriteEnable(commandBuffer: VkCommandBuffer, depthWriteEnable: VkBool32) void;
pub extern fn vkCmdSetDepthCompareOp(commandBuffer: VkCommandBuffer, depthCompareOp: VkCompareOp) void;
pub extern fn vkCmdSetDepthBoundsTestEnable(commandBuffer: VkCommandBuffer, depthBoundsTestEnable: VkBool32) void;
pub extern fn vkCmdSetStencilTestEnable(commandBuffer: VkCommandBuffer, stencilTestEnable: VkBool32) void;
pub extern fn vkCmdSetStencilOp(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, failOp: VkStencilOp, passOp: VkStencilOp, depthFailOp: VkStencilOp, compareOp: VkCompareOp) void;
pub extern fn vkCmdSetRasterizerDiscardEnable(commandBuffer: VkCommandBuffer, rasterizerDiscardEnable: VkBool32) void;
pub extern fn vkCmdSetDepthBiasEnable(commandBuffer: VkCommandBuffer, depthBiasEnable: VkBool32) void;
pub extern fn vkCmdSetPrimitiveRestartEnable(commandBuffer: VkCommandBuffer, primitiveRestartEnable: VkBool32) void;
pub extern fn vkGetDeviceBufferMemoryRequirements(device: VkDevice, pInfo: [*c]const VkDeviceBufferMemoryRequirements, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetDeviceImageMemoryRequirements(device: VkDevice, pInfo: [*c]const VkDeviceImageMemoryRequirements, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetDeviceImageSparseMemoryRequirements(device: VkDevice, pInfo: [*c]const VkDeviceImageMemoryRequirements, pSparseMemoryRequirementCount: [*c]u32, pSparseMemoryRequirements: [*c]VkSparseImageMemoryRequirements2) void;
pub const VK_PRESENT_MODE_IMMEDIATE_KHR: c_int = 0;
pub const VK_PRESENT_MODE_MAILBOX_KHR: c_int = 1;
pub const VK_PRESENT_MODE_FIFO_KHR: c_int = 2;
pub const VK_PRESENT_MODE_FIFO_RELAXED_KHR: c_int = 3;
pub const VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR: c_int = 1000111000;
pub const VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR: c_int = 1000111001;
pub const VK_PRESENT_MODE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkPresentModeKHR = c_uint;
pub const VkPresentModeKHR = enum_VkPresentModeKHR;
pub const VK_COLOR_SPACE_SRGB_NONLINEAR_KHR: c_int = 0;
pub const VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT: c_int = 1000104001;
pub const VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT: c_int = 1000104002;
pub const VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT: c_int = 1000104003;
pub const VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT: c_int = 1000104004;
pub const VK_COLOR_SPACE_BT709_LINEAR_EXT: c_int = 1000104005;
pub const VK_COLOR_SPACE_BT709_NONLINEAR_EXT: c_int = 1000104006;
pub const VK_COLOR_SPACE_BT2020_LINEAR_EXT: c_int = 1000104007;
pub const VK_COLOR_SPACE_HDR10_ST2084_EXT: c_int = 1000104008;
pub const VK_COLOR_SPACE_DOLBYVISION_EXT: c_int = 1000104009;
pub const VK_COLOR_SPACE_HDR10_HLG_EXT: c_int = 1000104010;
pub const VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT: c_int = 1000104011;
pub const VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT: c_int = 1000104012;
pub const VK_COLOR_SPACE_PASS_THROUGH_EXT: c_int = 1000104013;
pub const VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT: c_int = 1000104014;
pub const VK_COLOR_SPACE_DISPLAY_NATIVE_AMD: c_int = 1000213000;
pub const VK_COLORSPACE_SRGB_NONLINEAR_KHR: c_int = 0;
pub const VK_COLOR_SPACE_DCI_P3_LINEAR_EXT: c_int = 1000104003;
pub const VK_COLOR_SPACE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkColorSpaceKHR = c_uint;
pub const VkColorSpaceKHR = enum_VkColorSpaceKHR;
pub const VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR: c_int = 1;
pub const VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR: c_int = 2;
pub const VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR: c_int = 4;
pub const VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR: c_int = 8;
pub const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR: c_int = 16;
pub const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR: c_int = 32;
pub const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR: c_int = 64;
pub const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR: c_int = 128;
pub const VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR: c_int = 256;
pub const VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkSurfaceTransformFlagBitsKHR = c_uint;
pub const VkSurfaceTransformFlagBitsKHR = enum_VkSurfaceTransformFlagBitsKHR;
pub const VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR: c_int = 1;
pub const VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR: c_int = 2;
pub const VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR: c_int = 4;
pub const VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR: c_int = 8;
pub const VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkCompositeAlphaFlagBitsKHR = c_uint;
pub const VkCompositeAlphaFlagBitsKHR = enum_VkCompositeAlphaFlagBitsKHR;
pub const VkCompositeAlphaFlagsKHR = VkFlags;
pub const VkSurfaceTransformFlagsKHR = VkFlags;
pub const struct_VkSurfaceCapabilitiesKHR = extern struct {
    minImageCount: u32 = @import("std").mem.zeroes(u32),
    maxImageCount: u32 = @import("std").mem.zeroes(u32),
    currentExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    minImageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxImageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxImageArrayLayers: u32 = @import("std").mem.zeroes(u32),
    supportedTransforms: VkSurfaceTransformFlagsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagsKHR),
    currentTransform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
    supportedCompositeAlpha: VkCompositeAlphaFlagsKHR = @import("std").mem.zeroes(VkCompositeAlphaFlagsKHR),
    supportedUsageFlags: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
};
pub const VkSurfaceCapabilitiesKHR = struct_VkSurfaceCapabilitiesKHR;
pub const struct_VkSurfaceFormatKHR = extern struct {
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    colorSpace: VkColorSpaceKHR = @import("std").mem.zeroes(VkColorSpaceKHR),
};
pub const VkSurfaceFormatKHR = struct_VkSurfaceFormatKHR;
pub const PFN_vkDestroySurfaceKHR = ?*const fn (VkInstance, VkSurfaceKHR, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceSurfaceSupportKHR = ?*const fn (VkPhysicalDevice, u32, VkSurfaceKHR, [*c]VkBool32) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = ?*const fn (VkPhysicalDevice, VkSurfaceKHR, [*c]VkSurfaceCapabilitiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceSurfaceFormatsKHR = ?*const fn (VkPhysicalDevice, VkSurfaceKHR, [*c]u32, [*c]VkSurfaceFormatKHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceSurfacePresentModesKHR = ?*const fn (VkPhysicalDevice, VkSurfaceKHR, [*c]u32, [*c]VkPresentModeKHR) callconv(.C) VkResult;
pub extern fn vkDestroySurfaceKHR(instance: VkInstance, surface: VkSurfaceKHR, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, surface: VkSurfaceKHR, pSupported: [*c]VkBool32) VkResult;
pub extern fn vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceCapabilities: [*c]VkSurfaceCapabilitiesKHR) VkResult;
pub extern fn vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceFormatCount: [*c]u32, pSurfaceFormats: [*c]VkSurfaceFormatKHR) VkResult;
pub extern fn vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pPresentModeCount: [*c]u32, pPresentModes: [*c]VkPresentModeKHR) VkResult;
pub const struct_VkSwapchainKHR_T = opaque {};
pub const VkSwapchainKHR = ?*struct_VkSwapchainKHR_T;
pub const VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR: c_int = 1;
pub const VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR: c_int = 2;
pub const VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR: c_int = 4;
pub const VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT: c_int = 8;
pub const VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkSwapchainCreateFlagBitsKHR = c_uint;
pub const VkSwapchainCreateFlagBitsKHR = enum_VkSwapchainCreateFlagBitsKHR;
pub const VkSwapchainCreateFlagsKHR = VkFlags;
pub const VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR: c_int = 1;
pub const VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR: c_int = 2;
pub const VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR: c_int = 4;
pub const VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR: c_int = 8;
pub const VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkDeviceGroupPresentModeFlagBitsKHR = c_uint;
pub const VkDeviceGroupPresentModeFlagBitsKHR = enum_VkDeviceGroupPresentModeFlagBitsKHR;
pub const VkDeviceGroupPresentModeFlagsKHR = VkFlags;
pub const struct_VkSwapchainCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkSwapchainCreateFlagsKHR = @import("std").mem.zeroes(VkSwapchainCreateFlagsKHR),
    surface: VkSurfaceKHR = @import("std").mem.zeroes(VkSurfaceKHR),
    minImageCount: u32 = @import("std").mem.zeroes(u32),
    imageFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    imageColorSpace: VkColorSpaceKHR = @import("std").mem.zeroes(VkColorSpaceKHR),
    imageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    imageArrayLayers: u32 = @import("std").mem.zeroes(u32),
    imageUsage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    imageSharingMode: VkSharingMode = @import("std").mem.zeroes(VkSharingMode),
    queueFamilyIndexCount: u32 = @import("std").mem.zeroes(u32),
    pQueueFamilyIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    preTransform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
    compositeAlpha: VkCompositeAlphaFlagBitsKHR = @import("std").mem.zeroes(VkCompositeAlphaFlagBitsKHR),
    presentMode: VkPresentModeKHR = @import("std").mem.zeroes(VkPresentModeKHR),
    clipped: VkBool32 = @import("std").mem.zeroes(VkBool32),
    oldSwapchain: VkSwapchainKHR = @import("std").mem.zeroes(VkSwapchainKHR),
};
pub const VkSwapchainCreateInfoKHR = struct_VkSwapchainCreateInfoKHR;
pub const struct_VkPresentInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    waitSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pWaitSemaphores: [*c]const VkSemaphore = @import("std").mem.zeroes([*c]const VkSemaphore),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pSwapchains: [*c]const VkSwapchainKHR = @import("std").mem.zeroes([*c]const VkSwapchainKHR),
    pImageIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    pResults: [*c]VkResult = @import("std").mem.zeroes([*c]VkResult),
};
pub const VkPresentInfoKHR = struct_VkPresentInfoKHR;
pub const struct_VkImageSwapchainCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchain: VkSwapchainKHR = @import("std").mem.zeroes(VkSwapchainKHR),
};
pub const VkImageSwapchainCreateInfoKHR = struct_VkImageSwapchainCreateInfoKHR;
pub const struct_VkBindImageMemorySwapchainInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchain: VkSwapchainKHR = @import("std").mem.zeroes(VkSwapchainKHR),
    imageIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkBindImageMemorySwapchainInfoKHR = struct_VkBindImageMemorySwapchainInfoKHR;
pub const struct_VkAcquireNextImageInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchain: VkSwapchainKHR = @import("std").mem.zeroes(VkSwapchainKHR),
    timeout: u64 = @import("std").mem.zeroes(u64),
    semaphore: VkSemaphore = @import("std").mem.zeroes(VkSemaphore),
    fence: VkFence = @import("std").mem.zeroes(VkFence),
    deviceMask: u32 = @import("std").mem.zeroes(u32),
};
pub const VkAcquireNextImageInfoKHR = struct_VkAcquireNextImageInfoKHR;
pub const struct_VkDeviceGroupPresentCapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentMask: [32]u32 = @import("std").mem.zeroes([32]u32),
    modes: VkDeviceGroupPresentModeFlagsKHR = @import("std").mem.zeroes(VkDeviceGroupPresentModeFlagsKHR),
};
pub const VkDeviceGroupPresentCapabilitiesKHR = struct_VkDeviceGroupPresentCapabilitiesKHR;
pub const struct_VkDeviceGroupPresentInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pDeviceMasks: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    mode: VkDeviceGroupPresentModeFlagBitsKHR = @import("std").mem.zeroes(VkDeviceGroupPresentModeFlagBitsKHR),
};
pub const VkDeviceGroupPresentInfoKHR = struct_VkDeviceGroupPresentInfoKHR;
pub const struct_VkDeviceGroupSwapchainCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    modes: VkDeviceGroupPresentModeFlagsKHR = @import("std").mem.zeroes(VkDeviceGroupPresentModeFlagsKHR),
};
pub const VkDeviceGroupSwapchainCreateInfoKHR = struct_VkDeviceGroupSwapchainCreateInfoKHR;
pub const PFN_vkCreateSwapchainKHR = ?*const fn (VkDevice, [*c]const VkSwapchainCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkSwapchainKHR) callconv(.C) VkResult;
pub const PFN_vkDestroySwapchainKHR = ?*const fn (VkDevice, VkSwapchainKHR, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetSwapchainImagesKHR = ?*const fn (VkDevice, VkSwapchainKHR, [*c]u32, [*c]VkImage) callconv(.C) VkResult;
pub const PFN_vkAcquireNextImageKHR = ?*const fn (VkDevice, VkSwapchainKHR, u64, VkSemaphore, VkFence, [*c]u32) callconv(.C) VkResult;
pub const PFN_vkQueuePresentKHR = ?*const fn (VkQueue, [*c]const VkPresentInfoKHR) callconv(.C) VkResult;
pub const PFN_vkGetDeviceGroupPresentCapabilitiesKHR = ?*const fn (VkDevice, [*c]VkDeviceGroupPresentCapabilitiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetDeviceGroupSurfacePresentModesKHR = ?*const fn (VkDevice, VkSurfaceKHR, [*c]VkDeviceGroupPresentModeFlagsKHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDevicePresentRectanglesKHR = ?*const fn (VkPhysicalDevice, VkSurfaceKHR, [*c]u32, [*c]VkRect2D) callconv(.C) VkResult;
pub const PFN_vkAcquireNextImage2KHR = ?*const fn (VkDevice, [*c]const VkAcquireNextImageInfoKHR, [*c]u32) callconv(.C) VkResult;
pub extern fn vkCreateSwapchainKHR(device: VkDevice, pCreateInfo: [*c]const VkSwapchainCreateInfoKHR, pAllocator: [*c]const VkAllocationCallbacks, pSwapchain: [*c]VkSwapchainKHR) VkResult;
pub extern fn vkDestroySwapchainKHR(device: VkDevice, swapchain: VkSwapchainKHR, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetSwapchainImagesKHR(device: VkDevice, swapchain: VkSwapchainKHR, pSwapchainImageCount: [*c]u32, pSwapchainImages: [*c]VkImage) VkResult;
pub extern fn vkAcquireNextImageKHR(device: VkDevice, swapchain: VkSwapchainKHR, timeout: u64, semaphore: VkSemaphore, fence: VkFence, pImageIndex: [*c]u32) VkResult;
pub extern fn vkQueuePresentKHR(queue: VkQueue, pPresentInfo: [*c]const VkPresentInfoKHR) VkResult;
pub extern fn vkGetDeviceGroupPresentCapabilitiesKHR(device: VkDevice, pDeviceGroupPresentCapabilities: [*c]VkDeviceGroupPresentCapabilitiesKHR) VkResult;
pub extern fn vkGetDeviceGroupSurfacePresentModesKHR(device: VkDevice, surface: VkSurfaceKHR, pModes: [*c]VkDeviceGroupPresentModeFlagsKHR) VkResult;
pub extern fn vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pRectCount: [*c]u32, pRects: [*c]VkRect2D) VkResult;
pub extern fn vkAcquireNextImage2KHR(device: VkDevice, pAcquireInfo: [*c]const VkAcquireNextImageInfoKHR, pImageIndex: [*c]u32) VkResult;
pub const struct_VkDisplayKHR_T = opaque {};
pub const VkDisplayKHR = ?*struct_VkDisplayKHR_T;
pub const struct_VkDisplayModeKHR_T = opaque {};
pub const VkDisplayModeKHR = ?*struct_VkDisplayModeKHR_T;
pub const VkDisplayModeCreateFlagsKHR = VkFlags;
pub const VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR: c_int = 1;
pub const VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR: c_int = 2;
pub const VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR: c_int = 4;
pub const VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR: c_int = 8;
pub const VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkDisplayPlaneAlphaFlagBitsKHR = c_uint;
pub const VkDisplayPlaneAlphaFlagBitsKHR = enum_VkDisplayPlaneAlphaFlagBitsKHR;
pub const VkDisplayPlaneAlphaFlagsKHR = VkFlags;
pub const VkDisplaySurfaceCreateFlagsKHR = VkFlags;
pub const struct_VkDisplayModeParametersKHR = extern struct {
    visibleRegion: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    refreshRate: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDisplayModeParametersKHR = struct_VkDisplayModeParametersKHR;
pub const struct_VkDisplayModeCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDisplayModeCreateFlagsKHR = @import("std").mem.zeroes(VkDisplayModeCreateFlagsKHR),
    parameters: VkDisplayModeParametersKHR = @import("std").mem.zeroes(VkDisplayModeParametersKHR),
};
pub const VkDisplayModeCreateInfoKHR = struct_VkDisplayModeCreateInfoKHR;
pub const struct_VkDisplayModePropertiesKHR = extern struct {
    displayMode: VkDisplayModeKHR = @import("std").mem.zeroes(VkDisplayModeKHR),
    parameters: VkDisplayModeParametersKHR = @import("std").mem.zeroes(VkDisplayModeParametersKHR),
};
pub const VkDisplayModePropertiesKHR = struct_VkDisplayModePropertiesKHR;
pub const struct_VkDisplayPlaneCapabilitiesKHR = extern struct {
    supportedAlpha: VkDisplayPlaneAlphaFlagsKHR = @import("std").mem.zeroes(VkDisplayPlaneAlphaFlagsKHR),
    minSrcPosition: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    maxSrcPosition: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    minSrcExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxSrcExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    minDstPosition: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    maxDstPosition: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    minDstExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxDstExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkDisplayPlaneCapabilitiesKHR = struct_VkDisplayPlaneCapabilitiesKHR;
pub const struct_VkDisplayPlanePropertiesKHR = extern struct {
    currentDisplay: VkDisplayKHR = @import("std").mem.zeroes(VkDisplayKHR),
    currentStackIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDisplayPlanePropertiesKHR = struct_VkDisplayPlanePropertiesKHR;
pub const struct_VkDisplayPropertiesKHR = extern struct {
    display: VkDisplayKHR = @import("std").mem.zeroes(VkDisplayKHR),
    displayName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    physicalDimensions: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    physicalResolution: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    supportedTransforms: VkSurfaceTransformFlagsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagsKHR),
    planeReorderPossible: VkBool32 = @import("std").mem.zeroes(VkBool32),
    persistentContent: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkDisplayPropertiesKHR = struct_VkDisplayPropertiesKHR;
pub const struct_VkDisplaySurfaceCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDisplaySurfaceCreateFlagsKHR = @import("std").mem.zeroes(VkDisplaySurfaceCreateFlagsKHR),
    displayMode: VkDisplayModeKHR = @import("std").mem.zeroes(VkDisplayModeKHR),
    planeIndex: u32 = @import("std").mem.zeroes(u32),
    planeStackIndex: u32 = @import("std").mem.zeroes(u32),
    transform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
    globalAlpha: f32 = @import("std").mem.zeroes(f32),
    alphaMode: VkDisplayPlaneAlphaFlagBitsKHR = @import("std").mem.zeroes(VkDisplayPlaneAlphaFlagBitsKHR),
    imageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkDisplaySurfaceCreateInfoKHR = struct_VkDisplaySurfaceCreateInfoKHR;
pub const PFN_vkGetPhysicalDeviceDisplayPropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkDisplayPropertiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkDisplayPlanePropertiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetDisplayPlaneSupportedDisplaysKHR = ?*const fn (VkPhysicalDevice, u32, [*c]u32, [*c]VkDisplayKHR) callconv(.C) VkResult;
pub const PFN_vkGetDisplayModePropertiesKHR = ?*const fn (VkPhysicalDevice, VkDisplayKHR, [*c]u32, [*c]VkDisplayModePropertiesKHR) callconv(.C) VkResult;
pub const PFN_vkCreateDisplayModeKHR = ?*const fn (VkPhysicalDevice, VkDisplayKHR, [*c]const VkDisplayModeCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkDisplayModeKHR) callconv(.C) VkResult;
pub const PFN_vkGetDisplayPlaneCapabilitiesKHR = ?*const fn (VkPhysicalDevice, VkDisplayModeKHR, u32, [*c]VkDisplayPlaneCapabilitiesKHR) callconv(.C) VkResult;
pub const PFN_vkCreateDisplayPlaneSurfaceKHR = ?*const fn (VkInstance, [*c]const VkDisplaySurfaceCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkSurfaceKHR) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice: VkPhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]VkDisplayPropertiesKHR) VkResult;
pub extern fn vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice: VkPhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]VkDisplayPlanePropertiesKHR) VkResult;
pub extern fn vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice: VkPhysicalDevice, planeIndex: u32, pDisplayCount: [*c]u32, pDisplays: [*c]VkDisplayKHR) VkResult;
pub extern fn vkGetDisplayModePropertiesKHR(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pPropertyCount: [*c]u32, pProperties: [*c]VkDisplayModePropertiesKHR) VkResult;
pub extern fn vkCreateDisplayModeKHR(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pCreateInfo: [*c]const VkDisplayModeCreateInfoKHR, pAllocator: [*c]const VkAllocationCallbacks, pMode: [*c]VkDisplayModeKHR) VkResult;
pub extern fn vkGetDisplayPlaneCapabilitiesKHR(physicalDevice: VkPhysicalDevice, mode: VkDisplayModeKHR, planeIndex: u32, pCapabilities: [*c]VkDisplayPlaneCapabilitiesKHR) VkResult;
pub extern fn vkCreateDisplayPlaneSurfaceKHR(instance: VkInstance, pCreateInfo: [*c]const VkDisplaySurfaceCreateInfoKHR, pAllocator: [*c]const VkAllocationCallbacks, pSurface: [*c]VkSurfaceKHR) VkResult;
pub const struct_VkDisplayPresentInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcRect: VkRect2D = @import("std").mem.zeroes(VkRect2D),
    dstRect: VkRect2D = @import("std").mem.zeroes(VkRect2D),
    persistent: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkDisplayPresentInfoKHR = struct_VkDisplayPresentInfoKHR;
pub const PFN_vkCreateSharedSwapchainsKHR = ?*const fn (VkDevice, u32, [*c]const VkSwapchainCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkSwapchainKHR) callconv(.C) VkResult;
pub extern fn vkCreateSharedSwapchainsKHR(device: VkDevice, swapchainCount: u32, pCreateInfos: [*c]const VkSwapchainCreateInfoKHR, pAllocator: [*c]const VkAllocationCallbacks, pSwapchains: [*c]VkSwapchainKHR) VkResult;
pub const struct_VkVideoSessionKHR_T = opaque {};
pub const VkVideoSessionKHR = ?*struct_VkVideoSessionKHR_T;
pub const struct_VkVideoSessionParametersKHR_T = opaque {};
pub const VkVideoSessionParametersKHR = ?*struct_VkVideoSessionParametersKHR_T;
pub const VK_QUERY_RESULT_STATUS_ERROR_KHR: c_int = -1;
pub const VK_QUERY_RESULT_STATUS_NOT_READY_KHR: c_int = 0;
pub const VK_QUERY_RESULT_STATUS_COMPLETE_KHR: c_int = 1;
pub const VK_QUERY_RESULT_STATUS_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_KHR: c_int = -1000299000;
pub const VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkQueryResultStatusKHR = c_int;
pub const VkQueryResultStatusKHR = enum_VkQueryResultStatusKHR;
pub const VK_VIDEO_CODEC_OPERATION_NONE_KHR: c_int = 0;
pub const VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR: c_int = 65536;
pub const VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR: c_int = 131072;
pub const VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR: c_int = 1;
pub const VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR: c_int = 2;
pub const VK_VIDEO_CODEC_OPERATION_DECODE_AV1_BIT_KHR: c_int = 4;
pub const VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoCodecOperationFlagBitsKHR = c_uint;
pub const VkVideoCodecOperationFlagBitsKHR = enum_VkVideoCodecOperationFlagBitsKHR;
pub const VkVideoCodecOperationFlagsKHR = VkFlags;
pub const VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR: c_int = 0;
pub const VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR: c_int = 1;
pub const VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR: c_int = 2;
pub const VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR: c_int = 4;
pub const VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR: c_int = 8;
pub const VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoChromaSubsamplingFlagBitsKHR = c_uint;
pub const VkVideoChromaSubsamplingFlagBitsKHR = enum_VkVideoChromaSubsamplingFlagBitsKHR;
pub const VkVideoChromaSubsamplingFlagsKHR = VkFlags;
pub const VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR: c_int = 0;
pub const VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR: c_int = 1;
pub const VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR: c_int = 4;
pub const VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR: c_int = 16;
pub const VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoComponentBitDepthFlagBitsKHR = c_uint;
pub const VkVideoComponentBitDepthFlagBitsKHR = enum_VkVideoComponentBitDepthFlagBitsKHR;
pub const VkVideoComponentBitDepthFlagsKHR = VkFlags;
pub const VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR: c_int = 1;
pub const VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR: c_int = 2;
pub const VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoCapabilityFlagBitsKHR = c_uint;
pub const VkVideoCapabilityFlagBitsKHR = enum_VkVideoCapabilityFlagBitsKHR;
pub const VkVideoCapabilityFlagsKHR = VkFlags;
pub const VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR: c_int = 1;
pub const VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR: c_int = 2;
pub const VK_VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR: c_int = 4;
pub const VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoSessionCreateFlagBitsKHR = c_uint;
pub const VkVideoSessionCreateFlagBitsKHR = enum_VkVideoSessionCreateFlagBitsKHR;
pub const VkVideoSessionCreateFlagsKHR = VkFlags;
pub const VkVideoSessionParametersCreateFlagsKHR = VkFlags;
pub const VkVideoBeginCodingFlagsKHR = VkFlags;
pub const VkVideoEndCodingFlagsKHR = VkFlags;
pub const VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR: c_int = 1;
pub const VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR: c_int = 2;
pub const VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR: c_int = 4;
pub const VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoCodingControlFlagBitsKHR = c_uint;
pub const VkVideoCodingControlFlagBitsKHR = enum_VkVideoCodingControlFlagBitsKHR;
pub const VkVideoCodingControlFlagsKHR = VkFlags;
pub const struct_VkQueueFamilyQueryResultStatusPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    queryResultStatusSupport: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkQueueFamilyQueryResultStatusPropertiesKHR = struct_VkQueueFamilyQueryResultStatusPropertiesKHR;
pub const struct_VkQueueFamilyVideoPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    videoCodecOperations: VkVideoCodecOperationFlagsKHR = @import("std").mem.zeroes(VkVideoCodecOperationFlagsKHR),
};
pub const VkQueueFamilyVideoPropertiesKHR = struct_VkQueueFamilyVideoPropertiesKHR;
pub const struct_VkVideoProfileInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    videoCodecOperation: VkVideoCodecOperationFlagBitsKHR = @import("std").mem.zeroes(VkVideoCodecOperationFlagBitsKHR),
    chromaSubsampling: VkVideoChromaSubsamplingFlagsKHR = @import("std").mem.zeroes(VkVideoChromaSubsamplingFlagsKHR),
    lumaBitDepth: VkVideoComponentBitDepthFlagsKHR = @import("std").mem.zeroes(VkVideoComponentBitDepthFlagsKHR),
    chromaBitDepth: VkVideoComponentBitDepthFlagsKHR = @import("std").mem.zeroes(VkVideoComponentBitDepthFlagsKHR),
};
pub const VkVideoProfileInfoKHR = struct_VkVideoProfileInfoKHR;
pub const struct_VkVideoProfileListInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    profileCount: u32 = @import("std").mem.zeroes(u32),
    pProfiles: [*c]const VkVideoProfileInfoKHR = @import("std").mem.zeroes([*c]const VkVideoProfileInfoKHR),
};
pub const VkVideoProfileListInfoKHR = struct_VkVideoProfileListInfoKHR;
pub const struct_VkVideoCapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkVideoCapabilityFlagsKHR = @import("std").mem.zeroes(VkVideoCapabilityFlagsKHR),
    minBitstreamBufferOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    minBitstreamBufferSizeAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    pictureAccessGranularity: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    minCodedExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxCodedExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxDpbSlots: u32 = @import("std").mem.zeroes(u32),
    maxActiveReferencePictures: u32 = @import("std").mem.zeroes(u32),
    stdHeaderVersion: VkExtensionProperties = @import("std").mem.zeroes(VkExtensionProperties),
};
pub const VkVideoCapabilitiesKHR = struct_VkVideoCapabilitiesKHR;
pub const struct_VkPhysicalDeviceVideoFormatInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    imageUsage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
};
pub const VkPhysicalDeviceVideoFormatInfoKHR = struct_VkPhysicalDeviceVideoFormatInfoKHR;
pub const struct_VkVideoFormatPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    componentMapping: VkComponentMapping = @import("std").mem.zeroes(VkComponentMapping),
    imageCreateFlags: VkImageCreateFlags = @import("std").mem.zeroes(VkImageCreateFlags),
    imageType: VkImageType = @import("std").mem.zeroes(VkImageType),
    imageTiling: VkImageTiling = @import("std").mem.zeroes(VkImageTiling),
    imageUsageFlags: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
};
pub const VkVideoFormatPropertiesKHR = struct_VkVideoFormatPropertiesKHR;
pub const struct_VkVideoPictureResourceInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    codedOffset: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    codedExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    baseArrayLayer: u32 = @import("std").mem.zeroes(u32),
    imageViewBinding: VkImageView = @import("std").mem.zeroes(VkImageView),
};
pub const VkVideoPictureResourceInfoKHR = struct_VkVideoPictureResourceInfoKHR;
pub const struct_VkVideoReferenceSlotInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    slotIndex: i32 = @import("std").mem.zeroes(i32),
    pPictureResource: [*c]const VkVideoPictureResourceInfoKHR = @import("std").mem.zeroes([*c]const VkVideoPictureResourceInfoKHR),
};
pub const VkVideoReferenceSlotInfoKHR = struct_VkVideoReferenceSlotInfoKHR;
pub const struct_VkVideoSessionMemoryRequirementsKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryBindIndex: u32 = @import("std").mem.zeroes(u32),
    memoryRequirements: VkMemoryRequirements = @import("std").mem.zeroes(VkMemoryRequirements),
};
pub const VkVideoSessionMemoryRequirementsKHR = struct_VkVideoSessionMemoryRequirementsKHR;
pub const struct_VkBindVideoSessionMemoryInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    memoryBindIndex: u32 = @import("std").mem.zeroes(u32),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    memoryOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    memorySize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkBindVideoSessionMemoryInfoKHR = struct_VkBindVideoSessionMemoryInfoKHR;
pub const struct_VkVideoSessionCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    queueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    flags: VkVideoSessionCreateFlagsKHR = @import("std").mem.zeroes(VkVideoSessionCreateFlagsKHR),
    pVideoProfile: [*c]const VkVideoProfileInfoKHR = @import("std").mem.zeroes([*c]const VkVideoProfileInfoKHR),
    pictureFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    maxCodedExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    referencePictureFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    maxDpbSlots: u32 = @import("std").mem.zeroes(u32),
    maxActiveReferencePictures: u32 = @import("std").mem.zeroes(u32),
    pStdHeaderVersion: [*c]const VkExtensionProperties = @import("std").mem.zeroes([*c]const VkExtensionProperties),
};
pub const VkVideoSessionCreateInfoKHR = struct_VkVideoSessionCreateInfoKHR;
pub const struct_VkVideoSessionParametersCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoSessionParametersCreateFlagsKHR = @import("std").mem.zeroes(VkVideoSessionParametersCreateFlagsKHR),
    videoSessionParametersTemplate: VkVideoSessionParametersKHR = @import("std").mem.zeroes(VkVideoSessionParametersKHR),
    videoSession: VkVideoSessionKHR = @import("std").mem.zeroes(VkVideoSessionKHR),
};
pub const VkVideoSessionParametersCreateInfoKHR = struct_VkVideoSessionParametersCreateInfoKHR;
pub const struct_VkVideoSessionParametersUpdateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    updateSequenceCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoSessionParametersUpdateInfoKHR = struct_VkVideoSessionParametersUpdateInfoKHR;
pub const struct_VkVideoBeginCodingInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoBeginCodingFlagsKHR = @import("std").mem.zeroes(VkVideoBeginCodingFlagsKHR),
    videoSession: VkVideoSessionKHR = @import("std").mem.zeroes(VkVideoSessionKHR),
    videoSessionParameters: VkVideoSessionParametersKHR = @import("std").mem.zeroes(VkVideoSessionParametersKHR),
    referenceSlotCount: u32 = @import("std").mem.zeroes(u32),
    pReferenceSlots: [*c]const VkVideoReferenceSlotInfoKHR = @import("std").mem.zeroes([*c]const VkVideoReferenceSlotInfoKHR),
};
pub const VkVideoBeginCodingInfoKHR = struct_VkVideoBeginCodingInfoKHR;
pub const struct_VkVideoEndCodingInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoEndCodingFlagsKHR = @import("std").mem.zeroes(VkVideoEndCodingFlagsKHR),
};
pub const VkVideoEndCodingInfoKHR = struct_VkVideoEndCodingInfoKHR;
pub const struct_VkVideoCodingControlInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoCodingControlFlagsKHR = @import("std").mem.zeroes(VkVideoCodingControlFlagsKHR),
};
pub const VkVideoCodingControlInfoKHR = struct_VkVideoCodingControlInfoKHR;
pub const PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR = ?*const fn (VkPhysicalDevice, [*c]const VkVideoProfileInfoKHR, [*c]VkVideoCapabilitiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceVideoFormatInfoKHR, [*c]u32, [*c]VkVideoFormatPropertiesKHR) callconv(.C) VkResult;
pub const PFN_vkCreateVideoSessionKHR = ?*const fn (VkDevice, [*c]const VkVideoSessionCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkVideoSessionKHR) callconv(.C) VkResult;
pub const PFN_vkDestroyVideoSessionKHR = ?*const fn (VkDevice, VkVideoSessionKHR, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetVideoSessionMemoryRequirementsKHR = ?*const fn (VkDevice, VkVideoSessionKHR, [*c]u32, [*c]VkVideoSessionMemoryRequirementsKHR) callconv(.C) VkResult;
pub const PFN_vkBindVideoSessionMemoryKHR = ?*const fn (VkDevice, VkVideoSessionKHR, u32, [*c]const VkBindVideoSessionMemoryInfoKHR) callconv(.C) VkResult;
pub const PFN_vkCreateVideoSessionParametersKHR = ?*const fn (VkDevice, [*c]const VkVideoSessionParametersCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkVideoSessionParametersKHR) callconv(.C) VkResult;
pub const PFN_vkUpdateVideoSessionParametersKHR = ?*const fn (VkDevice, VkVideoSessionParametersKHR, [*c]const VkVideoSessionParametersUpdateInfoKHR) callconv(.C) VkResult;
pub const PFN_vkDestroyVideoSessionParametersKHR = ?*const fn (VkDevice, VkVideoSessionParametersKHR, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCmdBeginVideoCodingKHR = ?*const fn (VkCommandBuffer, [*c]const VkVideoBeginCodingInfoKHR) callconv(.C) void;
pub const PFN_vkCmdEndVideoCodingKHR = ?*const fn (VkCommandBuffer, [*c]const VkVideoEndCodingInfoKHR) callconv(.C) void;
pub const PFN_vkCmdControlVideoCodingKHR = ?*const fn (VkCommandBuffer, [*c]const VkVideoCodingControlInfoKHR) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceVideoCapabilitiesKHR(physicalDevice: VkPhysicalDevice, pVideoProfile: [*c]const VkVideoProfileInfoKHR, pCapabilities: [*c]VkVideoCapabilitiesKHR) VkResult;
pub extern fn vkGetPhysicalDeviceVideoFormatPropertiesKHR(physicalDevice: VkPhysicalDevice, pVideoFormatInfo: [*c]const VkPhysicalDeviceVideoFormatInfoKHR, pVideoFormatPropertyCount: [*c]u32, pVideoFormatProperties: [*c]VkVideoFormatPropertiesKHR) VkResult;
pub extern fn vkCreateVideoSessionKHR(device: VkDevice, pCreateInfo: [*c]const VkVideoSessionCreateInfoKHR, pAllocator: [*c]const VkAllocationCallbacks, pVideoSession: [*c]VkVideoSessionKHR) VkResult;
pub extern fn vkDestroyVideoSessionKHR(device: VkDevice, videoSession: VkVideoSessionKHR, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetVideoSessionMemoryRequirementsKHR(device: VkDevice, videoSession: VkVideoSessionKHR, pMemoryRequirementsCount: [*c]u32, pMemoryRequirements: [*c]VkVideoSessionMemoryRequirementsKHR) VkResult;
pub extern fn vkBindVideoSessionMemoryKHR(device: VkDevice, videoSession: VkVideoSessionKHR, bindSessionMemoryInfoCount: u32, pBindSessionMemoryInfos: [*c]const VkBindVideoSessionMemoryInfoKHR) VkResult;
pub extern fn vkCreateVideoSessionParametersKHR(device: VkDevice, pCreateInfo: [*c]const VkVideoSessionParametersCreateInfoKHR, pAllocator: [*c]const VkAllocationCallbacks, pVideoSessionParameters: [*c]VkVideoSessionParametersKHR) VkResult;
pub extern fn vkUpdateVideoSessionParametersKHR(device: VkDevice, videoSessionParameters: VkVideoSessionParametersKHR, pUpdateInfo: [*c]const VkVideoSessionParametersUpdateInfoKHR) VkResult;
pub extern fn vkDestroyVideoSessionParametersKHR(device: VkDevice, videoSessionParameters: VkVideoSessionParametersKHR, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCmdBeginVideoCodingKHR(commandBuffer: VkCommandBuffer, pBeginInfo: [*c]const VkVideoBeginCodingInfoKHR) void;
pub extern fn vkCmdEndVideoCodingKHR(commandBuffer: VkCommandBuffer, pEndCodingInfo: [*c]const VkVideoEndCodingInfoKHR) void;
pub extern fn vkCmdControlVideoCodingKHR(commandBuffer: VkCommandBuffer, pCodingControlInfo: [*c]const VkVideoCodingControlInfoKHR) void;
pub const VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR: c_int = 1;
pub const VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR: c_int = 2;
pub const VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoDecodeCapabilityFlagBitsKHR = c_uint;
pub const VkVideoDecodeCapabilityFlagBitsKHR = enum_VkVideoDecodeCapabilityFlagBitsKHR;
pub const VkVideoDecodeCapabilityFlagsKHR = VkFlags;
pub const VK_VIDEO_DECODE_USAGE_DEFAULT_KHR: c_int = 0;
pub const VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR: c_int = 1;
pub const VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR: c_int = 2;
pub const VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR: c_int = 4;
pub const VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoDecodeUsageFlagBitsKHR = c_uint;
pub const VkVideoDecodeUsageFlagBitsKHR = enum_VkVideoDecodeUsageFlagBitsKHR;
pub const VkVideoDecodeUsageFlagsKHR = VkFlags;
pub const VkVideoDecodeFlagsKHR = VkFlags;
pub const struct_VkVideoDecodeCapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkVideoDecodeCapabilityFlagsKHR = @import("std").mem.zeroes(VkVideoDecodeCapabilityFlagsKHR),
};
pub const VkVideoDecodeCapabilitiesKHR = struct_VkVideoDecodeCapabilitiesKHR;
pub const struct_VkVideoDecodeUsageInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    videoUsageHints: VkVideoDecodeUsageFlagsKHR = @import("std").mem.zeroes(VkVideoDecodeUsageFlagsKHR),
};
pub const VkVideoDecodeUsageInfoKHR = struct_VkVideoDecodeUsageInfoKHR;
pub const struct_VkVideoDecodeInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoDecodeFlagsKHR = @import("std").mem.zeroes(VkVideoDecodeFlagsKHR),
    srcBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    srcBufferOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    srcBufferRange: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    dstPictureResource: VkVideoPictureResourceInfoKHR = @import("std").mem.zeroes(VkVideoPictureResourceInfoKHR),
    pSetupReferenceSlot: [*c]const VkVideoReferenceSlotInfoKHR = @import("std").mem.zeroes([*c]const VkVideoReferenceSlotInfoKHR),
    referenceSlotCount: u32 = @import("std").mem.zeroes(u32),
    pReferenceSlots: [*c]const VkVideoReferenceSlotInfoKHR = @import("std").mem.zeroes([*c]const VkVideoReferenceSlotInfoKHR),
};
pub const VkVideoDecodeInfoKHR = struct_VkVideoDecodeInfoKHR;
pub const PFN_vkCmdDecodeVideoKHR = ?*const fn (VkCommandBuffer, [*c]const VkVideoDecodeInfoKHR) callconv(.C) void;
pub extern fn vkCmdDecodeVideoKHR(commandBuffer: VkCommandBuffer, pDecodeInfo: [*c]const VkVideoDecodeInfoKHR) void;
pub const STD_VIDEO_H264_CHROMA_FORMAT_IDC_MONOCHROME: c_int = 0;
pub const STD_VIDEO_H264_CHROMA_FORMAT_IDC_420: c_int = 1;
pub const STD_VIDEO_H264_CHROMA_FORMAT_IDC_422: c_int = 2;
pub const STD_VIDEO_H264_CHROMA_FORMAT_IDC_444: c_int = 3;
pub const STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_CHROMA_FORMAT_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264ChromaFormatIdc = c_uint;
pub const StdVideoH264ChromaFormatIdc = enum_StdVideoH264ChromaFormatIdc;
pub const STD_VIDEO_H264_PROFILE_IDC_BASELINE: c_int = 66;
pub const STD_VIDEO_H264_PROFILE_IDC_MAIN: c_int = 77;
pub const STD_VIDEO_H264_PROFILE_IDC_HIGH: c_int = 100;
pub const STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE: c_int = 244;
pub const STD_VIDEO_H264_PROFILE_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_PROFILE_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264ProfileIdc = c_uint;
pub const StdVideoH264ProfileIdc = enum_StdVideoH264ProfileIdc;
pub const STD_VIDEO_H264_LEVEL_IDC_1_0: c_int = 0;
pub const STD_VIDEO_H264_LEVEL_IDC_1_1: c_int = 1;
pub const STD_VIDEO_H264_LEVEL_IDC_1_2: c_int = 2;
pub const STD_VIDEO_H264_LEVEL_IDC_1_3: c_int = 3;
pub const STD_VIDEO_H264_LEVEL_IDC_2_0: c_int = 4;
pub const STD_VIDEO_H264_LEVEL_IDC_2_1: c_int = 5;
pub const STD_VIDEO_H264_LEVEL_IDC_2_2: c_int = 6;
pub const STD_VIDEO_H264_LEVEL_IDC_3_0: c_int = 7;
pub const STD_VIDEO_H264_LEVEL_IDC_3_1: c_int = 8;
pub const STD_VIDEO_H264_LEVEL_IDC_3_2: c_int = 9;
pub const STD_VIDEO_H264_LEVEL_IDC_4_0: c_int = 10;
pub const STD_VIDEO_H264_LEVEL_IDC_4_1: c_int = 11;
pub const STD_VIDEO_H264_LEVEL_IDC_4_2: c_int = 12;
pub const STD_VIDEO_H264_LEVEL_IDC_5_0: c_int = 13;
pub const STD_VIDEO_H264_LEVEL_IDC_5_1: c_int = 14;
pub const STD_VIDEO_H264_LEVEL_IDC_5_2: c_int = 15;
pub const STD_VIDEO_H264_LEVEL_IDC_6_0: c_int = 16;
pub const STD_VIDEO_H264_LEVEL_IDC_6_1: c_int = 17;
pub const STD_VIDEO_H264_LEVEL_IDC_6_2: c_int = 18;
pub const STD_VIDEO_H264_LEVEL_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_LEVEL_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264LevelIdc = c_uint;
pub const StdVideoH264LevelIdc = enum_StdVideoH264LevelIdc;
pub const STD_VIDEO_H264_POC_TYPE_0: c_int = 0;
pub const STD_VIDEO_H264_POC_TYPE_1: c_int = 1;
pub const STD_VIDEO_H264_POC_TYPE_2: c_int = 2;
pub const STD_VIDEO_H264_POC_TYPE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_POC_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264PocType = c_uint;
pub const StdVideoH264PocType = enum_StdVideoH264PocType;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_UNSPECIFIED: c_int = 0;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_SQUARE: c_int = 1;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_12_11: c_int = 2;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_10_11: c_int = 3;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_16_11: c_int = 4;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_40_33: c_int = 5;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_24_11: c_int = 6;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_20_11: c_int = 7;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_32_11: c_int = 8;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_80_33: c_int = 9;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_18_11: c_int = 10;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_15_11: c_int = 11;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_64_33: c_int = 12;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_160_99: c_int = 13;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_4_3: c_int = 14;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_3_2: c_int = 15;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_2_1: c_int = 16;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_EXTENDED_SAR: c_int = 255;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264AspectRatioIdc = c_uint;
pub const StdVideoH264AspectRatioIdc = enum_StdVideoH264AspectRatioIdc;
pub const STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_DEFAULT: c_int = 0;
pub const STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_EXPLICIT: c_int = 1;
pub const STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_IMPLICIT: c_int = 2;
pub const STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264WeightedBipredIdc = c_uint;
pub const StdVideoH264WeightedBipredIdc = enum_StdVideoH264WeightedBipredIdc;
pub const STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_SUBTRACT: c_int = 0;
pub const STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_ADD: c_int = 1;
pub const STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_LONG_TERM: c_int = 2;
pub const STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_END: c_int = 3;
pub const STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264ModificationOfPicNumsIdc = c_uint;
pub const StdVideoH264ModificationOfPicNumsIdc = enum_StdVideoH264ModificationOfPicNumsIdc;
pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_END: c_int = 0;
pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_SHORT_TERM: c_int = 1;
pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_LONG_TERM: c_int = 2;
pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_LONG_TERM: c_int = 3;
pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_SET_MAX_LONG_TERM_INDEX: c_int = 4;
pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_ALL: c_int = 5;
pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_CURRENT_AS_LONG_TERM: c_int = 6;
pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264MemMgmtControlOp = c_uint;
pub const StdVideoH264MemMgmtControlOp = enum_StdVideoH264MemMgmtControlOp;
pub const STD_VIDEO_H264_CABAC_INIT_IDC_0: c_int = 0;
pub const STD_VIDEO_H264_CABAC_INIT_IDC_1: c_int = 1;
pub const STD_VIDEO_H264_CABAC_INIT_IDC_2: c_int = 2;
pub const STD_VIDEO_H264_CABAC_INIT_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_CABAC_INIT_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264CabacInitIdc = c_uint;
pub const StdVideoH264CabacInitIdc = enum_StdVideoH264CabacInitIdc;
pub const STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_DISABLED: c_int = 0;
pub const STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_ENABLED: c_int = 1;
pub const STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_PARTIAL: c_int = 2;
pub const STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264DisableDeblockingFilterIdc = c_uint;
pub const StdVideoH264DisableDeblockingFilterIdc = enum_StdVideoH264DisableDeblockingFilterIdc;
pub const STD_VIDEO_H264_SLICE_TYPE_P: c_int = 0;
pub const STD_VIDEO_H264_SLICE_TYPE_B: c_int = 1;
pub const STD_VIDEO_H264_SLICE_TYPE_I: c_int = 2;
pub const STD_VIDEO_H264_SLICE_TYPE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_SLICE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264SliceType = c_uint;
pub const StdVideoH264SliceType = enum_StdVideoH264SliceType;
pub const STD_VIDEO_H264_PICTURE_TYPE_P: c_int = 0;
pub const STD_VIDEO_H264_PICTURE_TYPE_B: c_int = 1;
pub const STD_VIDEO_H264_PICTURE_TYPE_I: c_int = 2;
pub const STD_VIDEO_H264_PICTURE_TYPE_IDR: c_int = 5;
pub const STD_VIDEO_H264_PICTURE_TYPE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_PICTURE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264PictureType = c_uint;
pub const StdVideoH264PictureType = enum_StdVideoH264PictureType;
pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_SPS: c_int = 0;
pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_PPS: c_int = 1;
pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_AUD: c_int = 2;
pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_PREFIX: c_int = 3;
pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_SEQUENCE: c_int = 4;
pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_STREAM: c_int = 5;
pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_PRECODED: c_int = 6;
pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264NonVclNaluType = c_uint;
pub const StdVideoH264NonVclNaluType = enum_StdVideoH264NonVclNaluType;
// /usr/include/vk_video/vulkan_video_codec_h264std.h:181:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH264SpsVuiFlags = opaque {};
pub const StdVideoH264SpsVuiFlags = struct_StdVideoH264SpsVuiFlags;
pub const struct_StdVideoH264HrdParameters = extern struct {
    cpb_cnt_minus1: u8 = @import("std").mem.zeroes(u8),
    bit_rate_scale: u8 = @import("std").mem.zeroes(u8),
    cpb_size_scale: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    bit_rate_value_minus1: [32]u32 = @import("std").mem.zeroes([32]u32),
    cpb_size_value_minus1: [32]u32 = @import("std").mem.zeroes([32]u32),
    cbr_flag: [32]u8 = @import("std").mem.zeroes([32]u8),
    initial_cpb_removal_delay_length_minus1: u32 = @import("std").mem.zeroes(u32),
    cpb_removal_delay_length_minus1: u32 = @import("std").mem.zeroes(u32),
    dpb_output_delay_length_minus1: u32 = @import("std").mem.zeroes(u32),
    time_offset_length: u32 = @import("std").mem.zeroes(u32),
};
pub const StdVideoH264HrdParameters = struct_StdVideoH264HrdParameters;
pub const struct_StdVideoH264SequenceParameterSetVui = extern struct {
    flags: StdVideoH264SpsVuiFlags = @import("std").mem.zeroes(StdVideoH264SpsVuiFlags),
    aspect_ratio_idc: StdVideoH264AspectRatioIdc = @import("std").mem.zeroes(StdVideoH264AspectRatioIdc),
    sar_width: u16 = @import("std").mem.zeroes(u16),
    sar_height: u16 = @import("std").mem.zeroes(u16),
    video_format: u8 = @import("std").mem.zeroes(u8),
    colour_primaries: u8 = @import("std").mem.zeroes(u8),
    transfer_characteristics: u8 = @import("std").mem.zeroes(u8),
    matrix_coefficients: u8 = @import("std").mem.zeroes(u8),
    num_units_in_tick: u32 = @import("std").mem.zeroes(u32),
    time_scale: u32 = @import("std").mem.zeroes(u32),
    max_num_reorder_frames: u8 = @import("std").mem.zeroes(u8),
    max_dec_frame_buffering: u8 = @import("std").mem.zeroes(u8),
    chroma_sample_loc_type_top_field: u8 = @import("std").mem.zeroes(u8),
    chroma_sample_loc_type_bottom_field: u8 = @import("std").mem.zeroes(u8),
    reserved1: u32 = @import("std").mem.zeroes(u32),
    pHrdParameters: [*c]const StdVideoH264HrdParameters = @import("std").mem.zeroes([*c]const StdVideoH264HrdParameters),
};
pub const StdVideoH264SequenceParameterSetVui = struct_StdVideoH264SequenceParameterSetVui;
// /usr/include/vk_video/vulkan_video_codec_h264std.h:229:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH264SpsFlags = opaque {};
pub const StdVideoH264SpsFlags = struct_StdVideoH264SpsFlags;
pub const struct_StdVideoH264ScalingLists = extern struct {
    scaling_list_present_mask: u16 = @import("std").mem.zeroes(u16),
    use_default_scaling_matrix_mask: u16 = @import("std").mem.zeroes(u16),
    ScalingList4x4: [6][16]u8 = @import("std").mem.zeroes([6][16]u8),
    ScalingList8x8: [6][64]u8 = @import("std").mem.zeroes([6][64]u8),
};
pub const StdVideoH264ScalingLists = struct_StdVideoH264ScalingLists;
pub const struct_StdVideoH264SequenceParameterSet = extern struct {
    flags: StdVideoH264SpsFlags = @import("std").mem.zeroes(StdVideoH264SpsFlags),
    profile_idc: StdVideoH264ProfileIdc = @import("std").mem.zeroes(StdVideoH264ProfileIdc),
    level_idc: StdVideoH264LevelIdc = @import("std").mem.zeroes(StdVideoH264LevelIdc),
    chroma_format_idc: StdVideoH264ChromaFormatIdc = @import("std").mem.zeroes(StdVideoH264ChromaFormatIdc),
    seq_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    bit_depth_luma_minus8: u8 = @import("std").mem.zeroes(u8),
    bit_depth_chroma_minus8: u8 = @import("std").mem.zeroes(u8),
    log2_max_frame_num_minus4: u8 = @import("std").mem.zeroes(u8),
    pic_order_cnt_type: StdVideoH264PocType = @import("std").mem.zeroes(StdVideoH264PocType),
    offset_for_non_ref_pic: i32 = @import("std").mem.zeroes(i32),
    offset_for_top_to_bottom_field: i32 = @import("std").mem.zeroes(i32),
    log2_max_pic_order_cnt_lsb_minus4: u8 = @import("std").mem.zeroes(u8),
    num_ref_frames_in_pic_order_cnt_cycle: u8 = @import("std").mem.zeroes(u8),
    max_num_ref_frames: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    pic_width_in_mbs_minus1: u32 = @import("std").mem.zeroes(u32),
    pic_height_in_map_units_minus1: u32 = @import("std").mem.zeroes(u32),
    frame_crop_left_offset: u32 = @import("std").mem.zeroes(u32),
    frame_crop_right_offset: u32 = @import("std").mem.zeroes(u32),
    frame_crop_top_offset: u32 = @import("std").mem.zeroes(u32),
    frame_crop_bottom_offset: u32 = @import("std").mem.zeroes(u32),
    reserved2: u32 = @import("std").mem.zeroes(u32),
    pOffsetForRefFrame: [*c]const i32 = @import("std").mem.zeroes([*c]const i32),
    pScalingLists: [*c]const StdVideoH264ScalingLists = @import("std").mem.zeroes([*c]const StdVideoH264ScalingLists),
    pSequenceParameterSetVui: ?*const StdVideoH264SequenceParameterSetVui = @import("std").mem.zeroes(?*const StdVideoH264SequenceParameterSetVui),
};
pub const StdVideoH264SequenceParameterSet = struct_StdVideoH264SequenceParameterSet;
// /usr/include/vk_video/vulkan_video_codec_h264std.h:283:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH264PpsFlags = opaque {};
pub const StdVideoH264PpsFlags = struct_StdVideoH264PpsFlags;
pub const struct_StdVideoH264PictureParameterSet = extern struct {
    flags: StdVideoH264PpsFlags = @import("std").mem.zeroes(StdVideoH264PpsFlags),
    seq_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    pic_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    num_ref_idx_l0_default_active_minus1: u8 = @import("std").mem.zeroes(u8),
    num_ref_idx_l1_default_active_minus1: u8 = @import("std").mem.zeroes(u8),
    weighted_bipred_idc: StdVideoH264WeightedBipredIdc = @import("std").mem.zeroes(StdVideoH264WeightedBipredIdc),
    pic_init_qp_minus26: i8 = @import("std").mem.zeroes(i8),
    pic_init_qs_minus26: i8 = @import("std").mem.zeroes(i8),
    chroma_qp_index_offset: i8 = @import("std").mem.zeroes(i8),
    second_chroma_qp_index_offset: i8 = @import("std").mem.zeroes(i8),
    pScalingLists: [*c]const StdVideoH264ScalingLists = @import("std").mem.zeroes([*c]const StdVideoH264ScalingLists),
};
pub const StdVideoH264PictureParameterSet = struct_StdVideoH264PictureParameterSet;
pub const struct_StdVideoEncodeH264WeightTableFlags = extern struct {
    luma_weight_l0_flag: u32 = @import("std").mem.zeroes(u32),
    chroma_weight_l0_flag: u32 = @import("std").mem.zeroes(u32),
    luma_weight_l1_flag: u32 = @import("std").mem.zeroes(u32),
    chroma_weight_l1_flag: u32 = @import("std").mem.zeroes(u32),
};
pub const StdVideoEncodeH264WeightTableFlags = struct_StdVideoEncodeH264WeightTableFlags;
pub const struct_StdVideoEncodeH264WeightTable = extern struct {
    flags: StdVideoEncodeH264WeightTableFlags = @import("std").mem.zeroes(StdVideoEncodeH264WeightTableFlags),
    luma_log2_weight_denom: u8 = @import("std").mem.zeroes(u8),
    chroma_log2_weight_denom: u8 = @import("std").mem.zeroes(u8),
    luma_weight_l0: [32]i8 = @import("std").mem.zeroes([32]i8),
    luma_offset_l0: [32]i8 = @import("std").mem.zeroes([32]i8),
    chroma_weight_l0: [32][2]i8 = @import("std").mem.zeroes([32][2]i8),
    chroma_offset_l0: [32][2]i8 = @import("std").mem.zeroes([32][2]i8),
    luma_weight_l1: [32]i8 = @import("std").mem.zeroes([32]i8),
    luma_offset_l1: [32]i8 = @import("std").mem.zeroes([32]i8),
    chroma_weight_l1: [32][2]i8 = @import("std").mem.zeroes([32][2]i8),
    chroma_offset_l1: [32][2]i8 = @import("std").mem.zeroes([32][2]i8),
};
pub const StdVideoEncodeH264WeightTable = struct_StdVideoEncodeH264WeightTable;
// /usr/include/vk_video/vulkan_video_codec_h264std_encode.h:52:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoEncodeH264SliceHeaderFlags = opaque {};
pub const StdVideoEncodeH264SliceHeaderFlags = struct_StdVideoEncodeH264SliceHeaderFlags;
// /usr/include/vk_video/vulkan_video_codec_h264std_encode.h:58:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoEncodeH264PictureInfoFlags = opaque {};
pub const StdVideoEncodeH264PictureInfoFlags = struct_StdVideoEncodeH264PictureInfoFlags;
// /usr/include/vk_video/vulkan_video_codec_h264std_encode.h:67:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoEncodeH264ReferenceInfoFlags = opaque {};
pub const StdVideoEncodeH264ReferenceInfoFlags = struct_StdVideoEncodeH264ReferenceInfoFlags;
// /usr/include/vk_video/vulkan_video_codec_h264std_encode.h:72:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoEncodeH264ReferenceListsInfoFlags = opaque {};
pub const StdVideoEncodeH264ReferenceListsInfoFlags = struct_StdVideoEncodeH264ReferenceListsInfoFlags;
pub const struct_StdVideoEncodeH264RefListModEntry = extern struct {
    modification_of_pic_nums_idc: StdVideoH264ModificationOfPicNumsIdc = @import("std").mem.zeroes(StdVideoH264ModificationOfPicNumsIdc),
    abs_diff_pic_num_minus1: u16 = @import("std").mem.zeroes(u16),
    long_term_pic_num: u16 = @import("std").mem.zeroes(u16),
};
pub const StdVideoEncodeH264RefListModEntry = struct_StdVideoEncodeH264RefListModEntry;
pub const struct_StdVideoEncodeH264RefPicMarkingEntry = extern struct {
    memory_management_control_operation: StdVideoH264MemMgmtControlOp = @import("std").mem.zeroes(StdVideoH264MemMgmtControlOp),
    difference_of_pic_nums_minus1: u16 = @import("std").mem.zeroes(u16),
    long_term_pic_num: u16 = @import("std").mem.zeroes(u16),
    long_term_frame_idx: u16 = @import("std").mem.zeroes(u16),
    max_long_term_frame_idx_plus1: u16 = @import("std").mem.zeroes(u16),
};
pub const StdVideoEncodeH264RefPicMarkingEntry = struct_StdVideoEncodeH264RefPicMarkingEntry;
pub const struct_StdVideoEncodeH264ReferenceListsInfo = extern struct {
    flags: StdVideoEncodeH264ReferenceListsInfoFlags = @import("std").mem.zeroes(StdVideoEncodeH264ReferenceListsInfoFlags),
    num_ref_idx_l0_active_minus1: u8 = @import("std").mem.zeroes(u8),
    num_ref_idx_l1_active_minus1: u8 = @import("std").mem.zeroes(u8),
    RefPicList0: [32]u8 = @import("std").mem.zeroes([32]u8),
    RefPicList1: [32]u8 = @import("std").mem.zeroes([32]u8),
    refList0ModOpCount: u8 = @import("std").mem.zeroes(u8),
    refList1ModOpCount: u8 = @import("std").mem.zeroes(u8),
    refPicMarkingOpCount: u8 = @import("std").mem.zeroes(u8),
    reserved1: [7]u8 = @import("std").mem.zeroes([7]u8),
    pRefList0ModOperations: [*c]const StdVideoEncodeH264RefListModEntry = @import("std").mem.zeroes([*c]const StdVideoEncodeH264RefListModEntry),
    pRefList1ModOperations: [*c]const StdVideoEncodeH264RefListModEntry = @import("std").mem.zeroes([*c]const StdVideoEncodeH264RefListModEntry),
    pRefPicMarkingOperations: [*c]const StdVideoEncodeH264RefPicMarkingEntry = @import("std").mem.zeroes([*c]const StdVideoEncodeH264RefPicMarkingEntry),
};
pub const StdVideoEncodeH264ReferenceListsInfo = struct_StdVideoEncodeH264ReferenceListsInfo;
pub const struct_StdVideoEncodeH264PictureInfo = extern struct {
    flags: StdVideoEncodeH264PictureInfoFlags = @import("std").mem.zeroes(StdVideoEncodeH264PictureInfoFlags),
    seq_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    pic_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    idr_pic_id: u16 = @import("std").mem.zeroes(u16),
    primary_pic_type: StdVideoH264PictureType = @import("std").mem.zeroes(StdVideoH264PictureType),
    frame_num: u32 = @import("std").mem.zeroes(u32),
    PicOrderCnt: i32 = @import("std").mem.zeroes(i32),
    temporal_id: u8 = @import("std").mem.zeroes(u8),
    reserved1: [3]u8 = @import("std").mem.zeroes([3]u8),
    pRefLists: ?*const StdVideoEncodeH264ReferenceListsInfo = @import("std").mem.zeroes(?*const StdVideoEncodeH264ReferenceListsInfo),
};
pub const StdVideoEncodeH264PictureInfo = struct_StdVideoEncodeH264PictureInfo;
pub const struct_StdVideoEncodeH264ReferenceInfo = extern struct {
    flags: StdVideoEncodeH264ReferenceInfoFlags = @import("std").mem.zeroes(StdVideoEncodeH264ReferenceInfoFlags),
    primary_pic_type: StdVideoH264PictureType = @import("std").mem.zeroes(StdVideoH264PictureType),
    FrameNum: u32 = @import("std").mem.zeroes(u32),
    PicOrderCnt: i32 = @import("std").mem.zeroes(i32),
    long_term_pic_num: u16 = @import("std").mem.zeroes(u16),
    long_term_frame_idx: u16 = @import("std").mem.zeroes(u16),
    temporal_id: u8 = @import("std").mem.zeroes(u8),
};
pub const StdVideoEncodeH264ReferenceInfo = struct_StdVideoEncodeH264ReferenceInfo;
pub const struct_StdVideoEncodeH264SliceHeader = extern struct {
    flags: StdVideoEncodeH264SliceHeaderFlags = @import("std").mem.zeroes(StdVideoEncodeH264SliceHeaderFlags),
    first_mb_in_slice: u32 = @import("std").mem.zeroes(u32),
    slice_type: StdVideoH264SliceType = @import("std").mem.zeroes(StdVideoH264SliceType),
    slice_alpha_c0_offset_div2: i8 = @import("std").mem.zeroes(i8),
    slice_beta_offset_div2: i8 = @import("std").mem.zeroes(i8),
    slice_qp_delta: i8 = @import("std").mem.zeroes(i8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    cabac_init_idc: StdVideoH264CabacInitIdc = @import("std").mem.zeroes(StdVideoH264CabacInitIdc),
    disable_deblocking_filter_idc: StdVideoH264DisableDeblockingFilterIdc = @import("std").mem.zeroes(StdVideoH264DisableDeblockingFilterIdc),
    pWeightTable: [*c]const StdVideoEncodeH264WeightTable = @import("std").mem.zeroes([*c]const StdVideoEncodeH264WeightTable),
};
pub const StdVideoEncodeH264SliceHeader = struct_StdVideoEncodeH264SliceHeader;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR: c_int = 16;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR: c_int = 32;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR: c_int = 64;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_PER_SLICE_CONSTANT_QP_BIT_KHR: c_int = 128;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_GENERATE_PREFIX_NALU_BIT_KHR: c_int = 256;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeH264CapabilityFlagBitsKHR = c_uint;
pub const VkVideoEncodeH264CapabilityFlagBitsKHR = enum_VkVideoEncodeH264CapabilityFlagBitsKHR;
pub const VkVideoEncodeH264CapabilityFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_H264_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_H264_STD_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_FLAG_SET_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_H264_STD_SCALING_MATRIX_PRESENT_FLAG_SET_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_H264_STD_CHROMA_QP_INDEX_OFFSET_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_H264_STD_SECOND_CHROMA_QP_INDEX_OFFSET_BIT_KHR: c_int = 16;
pub const VK_VIDEO_ENCODE_H264_STD_PIC_INIT_QP_MINUS26_BIT_KHR: c_int = 32;
pub const VK_VIDEO_ENCODE_H264_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR: c_int = 64;
pub const VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_EXPLICIT_BIT_KHR: c_int = 128;
pub const VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_IMPLICIT_BIT_KHR: c_int = 256;
pub const VK_VIDEO_ENCODE_H264_STD_TRANSFORM_8X8_MODE_FLAG_SET_BIT_KHR: c_int = 512;
pub const VK_VIDEO_ENCODE_H264_STD_DIRECT_SPATIAL_MV_PRED_FLAG_UNSET_BIT_KHR: c_int = 1024;
pub const VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_UNSET_BIT_KHR: c_int = 2048;
pub const VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_SET_BIT_KHR: c_int = 4096;
pub const VK_VIDEO_ENCODE_H264_STD_DIRECT_8X8_INFERENCE_FLAG_UNSET_BIT_KHR: c_int = 8192;
pub const VK_VIDEO_ENCODE_H264_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR: c_int = 16384;
pub const VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_DISABLED_BIT_KHR: c_int = 32768;
pub const VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_ENABLED_BIT_KHR: c_int = 65536;
pub const VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_PARTIAL_BIT_KHR: c_int = 131072;
pub const VK_VIDEO_ENCODE_H264_STD_SLICE_QP_DELTA_BIT_KHR: c_int = 524288;
pub const VK_VIDEO_ENCODE_H264_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR: c_int = 1048576;
pub const VK_VIDEO_ENCODE_H264_STD_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeH264StdFlagBitsKHR = c_uint;
pub const VkVideoEncodeH264StdFlagBitsKHR = enum_VkVideoEncodeH264StdFlagBitsKHR;
pub const VkVideoEncodeH264StdFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_H264_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_H264_RATE_CONTROL_REGULAR_GOP_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_H264_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR: c_int = 16;
pub const VK_VIDEO_ENCODE_H264_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeH264RateControlFlagBitsKHR = c_uint;
pub const VkVideoEncodeH264RateControlFlagBitsKHR = enum_VkVideoEncodeH264RateControlFlagBitsKHR;
pub const VkVideoEncodeH264RateControlFlagsKHR = VkFlags;
pub const struct_VkVideoEncodeH264CapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkVideoEncodeH264CapabilityFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH264CapabilityFlagsKHR),
    maxLevelIdc: StdVideoH264LevelIdc = @import("std").mem.zeroes(StdVideoH264LevelIdc),
    maxSliceCount: u32 = @import("std").mem.zeroes(u32),
    maxPPictureL0ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxBPictureL0ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxL1ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxTemporalLayerCount: u32 = @import("std").mem.zeroes(u32),
    expectDyadicTemporalLayerPattern: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minQp: i32 = @import("std").mem.zeroes(i32),
    maxQp: i32 = @import("std").mem.zeroes(i32),
    prefersGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    requiresGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stdSyntaxFlags: VkVideoEncodeH264StdFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH264StdFlagsKHR),
};
pub const VkVideoEncodeH264CapabilitiesKHR = struct_VkVideoEncodeH264CapabilitiesKHR;
pub const struct_VkVideoEncodeH264QpKHR = extern struct {
    qpI: i32 = @import("std").mem.zeroes(i32),
    qpP: i32 = @import("std").mem.zeroes(i32),
    qpB: i32 = @import("std").mem.zeroes(i32),
};
pub const VkVideoEncodeH264QpKHR = struct_VkVideoEncodeH264QpKHR;
pub const struct_VkVideoEncodeH264QualityLevelPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    preferredRateControlFlags: VkVideoEncodeH264RateControlFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH264RateControlFlagsKHR),
    preferredGopFrameCount: u32 = @import("std").mem.zeroes(u32),
    preferredIdrPeriod: u32 = @import("std").mem.zeroes(u32),
    preferredConsecutiveBFrameCount: u32 = @import("std").mem.zeroes(u32),
    preferredTemporalLayerCount: u32 = @import("std").mem.zeroes(u32),
    preferredConstantQp: VkVideoEncodeH264QpKHR = @import("std").mem.zeroes(VkVideoEncodeH264QpKHR),
    preferredMaxL0ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    preferredMaxL1ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    preferredStdEntropyCodingModeFlag: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkVideoEncodeH264QualityLevelPropertiesKHR = struct_VkVideoEncodeH264QualityLevelPropertiesKHR;
pub const struct_VkVideoEncodeH264SessionCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useMaxLevelIdc: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxLevelIdc: StdVideoH264LevelIdc = @import("std").mem.zeroes(StdVideoH264LevelIdc),
};
pub const VkVideoEncodeH264SessionCreateInfoKHR = struct_VkVideoEncodeH264SessionCreateInfoKHR;
pub const struct_VkVideoEncodeH264SessionParametersAddInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdSPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdSPSs: ?*const StdVideoH264SequenceParameterSet = @import("std").mem.zeroes(?*const StdVideoH264SequenceParameterSet),
    stdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdPPSs: ?*const StdVideoH264PictureParameterSet = @import("std").mem.zeroes(?*const StdVideoH264PictureParameterSet),
};
pub const VkVideoEncodeH264SessionParametersAddInfoKHR = struct_VkVideoEncodeH264SessionParametersAddInfoKHR;
pub const struct_VkVideoEncodeH264SessionParametersCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxStdSPSCount: u32 = @import("std").mem.zeroes(u32),
    maxStdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pParametersAddInfo: [*c]const VkVideoEncodeH264SessionParametersAddInfoKHR = @import("std").mem.zeroes([*c]const VkVideoEncodeH264SessionParametersAddInfoKHR),
};
pub const VkVideoEncodeH264SessionParametersCreateInfoKHR = struct_VkVideoEncodeH264SessionParametersCreateInfoKHR;
pub const struct_VkVideoEncodeH264SessionParametersGetInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    writeStdSPS: VkBool32 = @import("std").mem.zeroes(VkBool32),
    writeStdPPS: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stdSPSId: u32 = @import("std").mem.zeroes(u32),
    stdPPSId: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeH264SessionParametersGetInfoKHR = struct_VkVideoEncodeH264SessionParametersGetInfoKHR;
pub const struct_VkVideoEncodeH264SessionParametersFeedbackInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    hasStdSPSOverrides: VkBool32 = @import("std").mem.zeroes(VkBool32),
    hasStdPPSOverrides: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkVideoEncodeH264SessionParametersFeedbackInfoKHR = struct_VkVideoEncodeH264SessionParametersFeedbackInfoKHR;
pub const struct_VkVideoEncodeH264NaluSliceInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    constantQp: i32 = @import("std").mem.zeroes(i32),
    pStdSliceHeader: ?*const StdVideoEncodeH264SliceHeader = @import("std").mem.zeroes(?*const StdVideoEncodeH264SliceHeader),
};
pub const VkVideoEncodeH264NaluSliceInfoKHR = struct_VkVideoEncodeH264NaluSliceInfoKHR;
pub const struct_VkVideoEncodeH264PictureInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    naluSliceEntryCount: u32 = @import("std").mem.zeroes(u32),
    pNaluSliceEntries: [*c]const VkVideoEncodeH264NaluSliceInfoKHR = @import("std").mem.zeroes([*c]const VkVideoEncodeH264NaluSliceInfoKHR),
    pStdPictureInfo: ?*const StdVideoEncodeH264PictureInfo = @import("std").mem.zeroes(?*const StdVideoEncodeH264PictureInfo),
    generatePrefixNalu: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkVideoEncodeH264PictureInfoKHR = struct_VkVideoEncodeH264PictureInfoKHR;
pub const struct_VkVideoEncodeH264DpbSlotInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdReferenceInfo: ?*const StdVideoEncodeH264ReferenceInfo = @import("std").mem.zeroes(?*const StdVideoEncodeH264ReferenceInfo),
};
pub const VkVideoEncodeH264DpbSlotInfoKHR = struct_VkVideoEncodeH264DpbSlotInfoKHR;
pub const struct_VkVideoEncodeH264ProfileInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdProfileIdc: StdVideoH264ProfileIdc = @import("std").mem.zeroes(StdVideoH264ProfileIdc),
};
pub const VkVideoEncodeH264ProfileInfoKHR = struct_VkVideoEncodeH264ProfileInfoKHR;
pub const struct_VkVideoEncodeH264RateControlInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoEncodeH264RateControlFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH264RateControlFlagsKHR),
    gopFrameCount: u32 = @import("std").mem.zeroes(u32),
    idrPeriod: u32 = @import("std").mem.zeroes(u32),
    consecutiveBFrameCount: u32 = @import("std").mem.zeroes(u32),
    temporalLayerCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeH264RateControlInfoKHR = struct_VkVideoEncodeH264RateControlInfoKHR;
pub const struct_VkVideoEncodeH264FrameSizeKHR = extern struct {
    frameISize: u32 = @import("std").mem.zeroes(u32),
    framePSize: u32 = @import("std").mem.zeroes(u32),
    frameBSize: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeH264FrameSizeKHR = struct_VkVideoEncodeH264FrameSizeKHR;
pub const struct_VkVideoEncodeH264RateControlLayerInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useMinQp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minQp: VkVideoEncodeH264QpKHR = @import("std").mem.zeroes(VkVideoEncodeH264QpKHR),
    useMaxQp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxQp: VkVideoEncodeH264QpKHR = @import("std").mem.zeroes(VkVideoEncodeH264QpKHR),
    useMaxFrameSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxFrameSize: VkVideoEncodeH264FrameSizeKHR = @import("std").mem.zeroes(VkVideoEncodeH264FrameSizeKHR),
};
pub const VkVideoEncodeH264RateControlLayerInfoKHR = struct_VkVideoEncodeH264RateControlLayerInfoKHR;
pub const struct_VkVideoEncodeH264GopRemainingFrameInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    gopRemainingI: u32 = @import("std").mem.zeroes(u32),
    gopRemainingP: u32 = @import("std").mem.zeroes(u32),
    gopRemainingB: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeH264GopRemainingFrameInfoKHR = struct_VkVideoEncodeH264GopRemainingFrameInfoKHR;
pub const STD_VIDEO_H265_CHROMA_FORMAT_IDC_MONOCHROME: c_int = 0;
pub const STD_VIDEO_H265_CHROMA_FORMAT_IDC_420: c_int = 1;
pub const STD_VIDEO_H265_CHROMA_FORMAT_IDC_422: c_int = 2;
pub const STD_VIDEO_H265_CHROMA_FORMAT_IDC_444: c_int = 3;
pub const STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H265_CHROMA_FORMAT_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH265ChromaFormatIdc = c_uint;
pub const StdVideoH265ChromaFormatIdc = enum_StdVideoH265ChromaFormatIdc;
pub const STD_VIDEO_H265_PROFILE_IDC_MAIN: c_int = 1;
pub const STD_VIDEO_H265_PROFILE_IDC_MAIN_10: c_int = 2;
pub const STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE: c_int = 3;
pub const STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS: c_int = 4;
pub const STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS: c_int = 9;
pub const STD_VIDEO_H265_PROFILE_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H265_PROFILE_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH265ProfileIdc = c_uint;
pub const StdVideoH265ProfileIdc = enum_StdVideoH265ProfileIdc;
pub const STD_VIDEO_H265_LEVEL_IDC_1_0: c_int = 0;
pub const STD_VIDEO_H265_LEVEL_IDC_2_0: c_int = 1;
pub const STD_VIDEO_H265_LEVEL_IDC_2_1: c_int = 2;
pub const STD_VIDEO_H265_LEVEL_IDC_3_0: c_int = 3;
pub const STD_VIDEO_H265_LEVEL_IDC_3_1: c_int = 4;
pub const STD_VIDEO_H265_LEVEL_IDC_4_0: c_int = 5;
pub const STD_VIDEO_H265_LEVEL_IDC_4_1: c_int = 6;
pub const STD_VIDEO_H265_LEVEL_IDC_5_0: c_int = 7;
pub const STD_VIDEO_H265_LEVEL_IDC_5_1: c_int = 8;
pub const STD_VIDEO_H265_LEVEL_IDC_5_2: c_int = 9;
pub const STD_VIDEO_H265_LEVEL_IDC_6_0: c_int = 10;
pub const STD_VIDEO_H265_LEVEL_IDC_6_1: c_int = 11;
pub const STD_VIDEO_H265_LEVEL_IDC_6_2: c_int = 12;
pub const STD_VIDEO_H265_LEVEL_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H265_LEVEL_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH265LevelIdc = c_uint;
pub const StdVideoH265LevelIdc = enum_StdVideoH265LevelIdc;
pub const STD_VIDEO_H265_SLICE_TYPE_B: c_int = 0;
pub const STD_VIDEO_H265_SLICE_TYPE_P: c_int = 1;
pub const STD_VIDEO_H265_SLICE_TYPE_I: c_int = 2;
pub const STD_VIDEO_H265_SLICE_TYPE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H265_SLICE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH265SliceType = c_uint;
pub const StdVideoH265SliceType = enum_StdVideoH265SliceType;
pub const STD_VIDEO_H265_PICTURE_TYPE_P: c_int = 0;
pub const STD_VIDEO_H265_PICTURE_TYPE_B: c_int = 1;
pub const STD_VIDEO_H265_PICTURE_TYPE_I: c_int = 2;
pub const STD_VIDEO_H265_PICTURE_TYPE_IDR: c_int = 3;
pub const STD_VIDEO_H265_PICTURE_TYPE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H265_PICTURE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH265PictureType = c_uint;
pub const StdVideoH265PictureType = enum_StdVideoH265PictureType;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_UNSPECIFIED: c_int = 0;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_SQUARE: c_int = 1;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_12_11: c_int = 2;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_10_11: c_int = 3;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_16_11: c_int = 4;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_40_33: c_int = 5;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_24_11: c_int = 6;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_20_11: c_int = 7;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_32_11: c_int = 8;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_80_33: c_int = 9;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_18_11: c_int = 10;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_15_11: c_int = 11;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_64_33: c_int = 12;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_160_99: c_int = 13;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_4_3: c_int = 14;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_3_2: c_int = 15;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_2_1: c_int = 16;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_EXTENDED_SAR: c_int = 255;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH265AspectRatioIdc = c_uint;
pub const StdVideoH265AspectRatioIdc = enum_StdVideoH265AspectRatioIdc;
pub const struct_StdVideoH265DecPicBufMgr = extern struct {
    max_latency_increase_plus1: [7]u32 = @import("std").mem.zeroes([7]u32),
    max_dec_pic_buffering_minus1: [7]u8 = @import("std").mem.zeroes([7]u8),
    max_num_reorder_pics: [7]u8 = @import("std").mem.zeroes([7]u8),
};
pub const StdVideoH265DecPicBufMgr = struct_StdVideoH265DecPicBufMgr;
pub const struct_StdVideoH265SubLayerHrdParameters = extern struct {
    bit_rate_value_minus1: [32]u32 = @import("std").mem.zeroes([32]u32),
    cpb_size_value_minus1: [32]u32 = @import("std").mem.zeroes([32]u32),
    cpb_size_du_value_minus1: [32]u32 = @import("std").mem.zeroes([32]u32),
    bit_rate_du_value_minus1: [32]u32 = @import("std").mem.zeroes([32]u32),
    cbr_flag: u32 = @import("std").mem.zeroes(u32),
};
pub const StdVideoH265SubLayerHrdParameters = struct_StdVideoH265SubLayerHrdParameters;
// /usr/include/vk_video/vulkan_video_codec_h265std.h:140:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH265HrdFlags = opaque {};
pub const StdVideoH265HrdFlags = struct_StdVideoH265HrdFlags;
pub const struct_StdVideoH265HrdParameters = extern struct {
    flags: StdVideoH265HrdFlags = @import("std").mem.zeroes(StdVideoH265HrdFlags),
    tick_divisor_minus2: u8 = @import("std").mem.zeroes(u8),
    du_cpb_removal_delay_increment_length_minus1: u8 = @import("std").mem.zeroes(u8),
    dpb_output_delay_du_length_minus1: u8 = @import("std").mem.zeroes(u8),
    bit_rate_scale: u8 = @import("std").mem.zeroes(u8),
    cpb_size_scale: u8 = @import("std").mem.zeroes(u8),
    cpb_size_du_scale: u8 = @import("std").mem.zeroes(u8),
    initial_cpb_removal_delay_length_minus1: u8 = @import("std").mem.zeroes(u8),
    au_cpb_removal_delay_length_minus1: u8 = @import("std").mem.zeroes(u8),
    dpb_output_delay_length_minus1: u8 = @import("std").mem.zeroes(u8),
    cpb_cnt_minus1: [7]u8 = @import("std").mem.zeroes([7]u8),
    elemental_duration_in_tc_minus1: [7]u16 = @import("std").mem.zeroes([7]u16),
    reserved: [3]u16 = @import("std").mem.zeroes([3]u16),
    pSubLayerHrdParametersNal: [*c]const StdVideoH265SubLayerHrdParameters = @import("std").mem.zeroes([*c]const StdVideoH265SubLayerHrdParameters),
    pSubLayerHrdParametersVcl: [*c]const StdVideoH265SubLayerHrdParameters = @import("std").mem.zeroes([*c]const StdVideoH265SubLayerHrdParameters),
};
pub const StdVideoH265HrdParameters = struct_StdVideoH265HrdParameters;
// /usr/include/vk_video/vulkan_video_codec_h265std.h:168:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH265VpsFlags = opaque {};
pub const StdVideoH265VpsFlags = struct_StdVideoH265VpsFlags;
// /usr/include/vk_video/vulkan_video_codec_h265std.h:175:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH265ProfileTierLevelFlags = opaque {};
pub const StdVideoH265ProfileTierLevelFlags = struct_StdVideoH265ProfileTierLevelFlags;
pub const struct_StdVideoH265ProfileTierLevel = extern struct {
    flags: StdVideoH265ProfileTierLevelFlags = @import("std").mem.zeroes(StdVideoH265ProfileTierLevelFlags),
    general_profile_idc: StdVideoH265ProfileIdc = @import("std").mem.zeroes(StdVideoH265ProfileIdc),
    general_level_idc: StdVideoH265LevelIdc = @import("std").mem.zeroes(StdVideoH265LevelIdc),
};
pub const StdVideoH265ProfileTierLevel = struct_StdVideoH265ProfileTierLevel;
pub const struct_StdVideoH265VideoParameterSet = extern struct {
    flags: StdVideoH265VpsFlags = @import("std").mem.zeroes(StdVideoH265VpsFlags),
    vps_video_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    vps_max_sub_layers_minus1: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    reserved2: u8 = @import("std").mem.zeroes(u8),
    vps_num_units_in_tick: u32 = @import("std").mem.zeroes(u32),
    vps_time_scale: u32 = @import("std").mem.zeroes(u32),
    vps_num_ticks_poc_diff_one_minus1: u32 = @import("std").mem.zeroes(u32),
    reserved3: u32 = @import("std").mem.zeroes(u32),
    pDecPicBufMgr: [*c]const StdVideoH265DecPicBufMgr = @import("std").mem.zeroes([*c]const StdVideoH265DecPicBufMgr),
    pHrdParameters: ?*const StdVideoH265HrdParameters = @import("std").mem.zeroes(?*const StdVideoH265HrdParameters),
    pProfileTierLevel: ?*const StdVideoH265ProfileTierLevel = @import("std").mem.zeroes(?*const StdVideoH265ProfileTierLevel),
};
pub const StdVideoH265VideoParameterSet = struct_StdVideoH265VideoParameterSet;
pub const struct_StdVideoH265ScalingLists = extern struct {
    ScalingList4x4: [6][16]u8 = @import("std").mem.zeroes([6][16]u8),
    ScalingList8x8: [6][64]u8 = @import("std").mem.zeroes([6][64]u8),
    ScalingList16x16: [6][64]u8 = @import("std").mem.zeroes([6][64]u8),
    ScalingList32x32: [2][64]u8 = @import("std").mem.zeroes([2][64]u8),
    ScalingListDCCoef16x16: [6]u8 = @import("std").mem.zeroes([6]u8),
    ScalingListDCCoef32x32: [2]u8 = @import("std").mem.zeroes([2]u8),
};
pub const StdVideoH265ScalingLists = struct_StdVideoH265ScalingLists;
// /usr/include/vk_video/vulkan_video_codec_h265std.h:213:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH265SpsVuiFlags = opaque {};
pub const StdVideoH265SpsVuiFlags = struct_StdVideoH265SpsVuiFlags;
pub const struct_StdVideoH265SequenceParameterSetVui = extern struct {
    flags: StdVideoH265SpsVuiFlags = @import("std").mem.zeroes(StdVideoH265SpsVuiFlags),
    aspect_ratio_idc: StdVideoH265AspectRatioIdc = @import("std").mem.zeroes(StdVideoH265AspectRatioIdc),
    sar_width: u16 = @import("std").mem.zeroes(u16),
    sar_height: u16 = @import("std").mem.zeroes(u16),
    video_format: u8 = @import("std").mem.zeroes(u8),
    colour_primaries: u8 = @import("std").mem.zeroes(u8),
    transfer_characteristics: u8 = @import("std").mem.zeroes(u8),
    matrix_coeffs: u8 = @import("std").mem.zeroes(u8),
    chroma_sample_loc_type_top_field: u8 = @import("std").mem.zeroes(u8),
    chroma_sample_loc_type_bottom_field: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    reserved2: u8 = @import("std").mem.zeroes(u8),
    def_disp_win_left_offset: u16 = @import("std").mem.zeroes(u16),
    def_disp_win_right_offset: u16 = @import("std").mem.zeroes(u16),
    def_disp_win_top_offset: u16 = @import("std").mem.zeroes(u16),
    def_disp_win_bottom_offset: u16 = @import("std").mem.zeroes(u16),
    vui_num_units_in_tick: u32 = @import("std").mem.zeroes(u32),
    vui_time_scale: u32 = @import("std").mem.zeroes(u32),
    vui_num_ticks_poc_diff_one_minus1: u32 = @import("std").mem.zeroes(u32),
    min_spatial_segmentation_idc: u16 = @import("std").mem.zeroes(u16),
    reserved3: u16 = @import("std").mem.zeroes(u16),
    max_bytes_per_pic_denom: u8 = @import("std").mem.zeroes(u8),
    max_bits_per_min_cu_denom: u8 = @import("std").mem.zeroes(u8),
    log2_max_mv_length_horizontal: u8 = @import("std").mem.zeroes(u8),
    log2_max_mv_length_vertical: u8 = @import("std").mem.zeroes(u8),
    pHrdParameters: ?*const StdVideoH265HrdParameters = @import("std").mem.zeroes(?*const StdVideoH265HrdParameters),
};
pub const StdVideoH265SequenceParameterSetVui = struct_StdVideoH265SequenceParameterSetVui;
pub const struct_StdVideoH265PredictorPaletteEntries = extern struct {
    PredictorPaletteEntries: [3][128]u16 = @import("std").mem.zeroes([3][128]u16),
};
pub const StdVideoH265PredictorPaletteEntries = struct_StdVideoH265PredictorPaletteEntries;
// /usr/include/vk_video/vulkan_video_codec_h265std.h:267:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH265SpsFlags = opaque {};
pub const StdVideoH265SpsFlags = struct_StdVideoH265SpsFlags;
// /usr/include/vk_video/vulkan_video_codec_h265std.h:300:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH265ShortTermRefPicSetFlags = opaque {};
pub const StdVideoH265ShortTermRefPicSetFlags = struct_StdVideoH265ShortTermRefPicSetFlags;
pub const struct_StdVideoH265ShortTermRefPicSet = extern struct {
    flags: StdVideoH265ShortTermRefPicSetFlags = @import("std").mem.zeroes(StdVideoH265ShortTermRefPicSetFlags),
    delta_idx_minus1: u32 = @import("std").mem.zeroes(u32),
    use_delta_flag: u16 = @import("std").mem.zeroes(u16),
    abs_delta_rps_minus1: u16 = @import("std").mem.zeroes(u16),
    used_by_curr_pic_flag: u16 = @import("std").mem.zeroes(u16),
    used_by_curr_pic_s0_flag: u16 = @import("std").mem.zeroes(u16),
    used_by_curr_pic_s1_flag: u16 = @import("std").mem.zeroes(u16),
    reserved1: u16 = @import("std").mem.zeroes(u16),
    reserved2: u8 = @import("std").mem.zeroes(u8),
    reserved3: u8 = @import("std").mem.zeroes(u8),
    num_negative_pics: u8 = @import("std").mem.zeroes(u8),
    num_positive_pics: u8 = @import("std").mem.zeroes(u8),
    delta_poc_s0_minus1: [16]u16 = @import("std").mem.zeroes([16]u16),
    delta_poc_s1_minus1: [16]u16 = @import("std").mem.zeroes([16]u16),
};
pub const StdVideoH265ShortTermRefPicSet = struct_StdVideoH265ShortTermRefPicSet;
pub const struct_StdVideoH265LongTermRefPicsSps = extern struct {
    used_by_curr_pic_lt_sps_flag: u32 = @import("std").mem.zeroes(u32),
    lt_ref_pic_poc_lsb_sps: [32]u32 = @import("std").mem.zeroes([32]u32),
};
pub const StdVideoH265LongTermRefPicsSps = struct_StdVideoH265LongTermRefPicsSps;
pub const struct_StdVideoH265SequenceParameterSet = extern struct {
    flags: StdVideoH265SpsFlags = @import("std").mem.zeroes(StdVideoH265SpsFlags),
    chroma_format_idc: StdVideoH265ChromaFormatIdc = @import("std").mem.zeroes(StdVideoH265ChromaFormatIdc),
    pic_width_in_luma_samples: u32 = @import("std").mem.zeroes(u32),
    pic_height_in_luma_samples: u32 = @import("std").mem.zeroes(u32),
    sps_video_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    sps_max_sub_layers_minus1: u8 = @import("std").mem.zeroes(u8),
    sps_seq_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    bit_depth_luma_minus8: u8 = @import("std").mem.zeroes(u8),
    bit_depth_chroma_minus8: u8 = @import("std").mem.zeroes(u8),
    log2_max_pic_order_cnt_lsb_minus4: u8 = @import("std").mem.zeroes(u8),
    log2_min_luma_coding_block_size_minus3: u8 = @import("std").mem.zeroes(u8),
    log2_diff_max_min_luma_coding_block_size: u8 = @import("std").mem.zeroes(u8),
    log2_min_luma_transform_block_size_minus2: u8 = @import("std").mem.zeroes(u8),
    log2_diff_max_min_luma_transform_block_size: u8 = @import("std").mem.zeroes(u8),
    max_transform_hierarchy_depth_inter: u8 = @import("std").mem.zeroes(u8),
    max_transform_hierarchy_depth_intra: u8 = @import("std").mem.zeroes(u8),
    num_short_term_ref_pic_sets: u8 = @import("std").mem.zeroes(u8),
    num_long_term_ref_pics_sps: u8 = @import("std").mem.zeroes(u8),
    pcm_sample_bit_depth_luma_minus1: u8 = @import("std").mem.zeroes(u8),
    pcm_sample_bit_depth_chroma_minus1: u8 = @import("std").mem.zeroes(u8),
    log2_min_pcm_luma_coding_block_size_minus3: u8 = @import("std").mem.zeroes(u8),
    log2_diff_max_min_pcm_luma_coding_block_size: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    reserved2: u8 = @import("std").mem.zeroes(u8),
    palette_max_size: u8 = @import("std").mem.zeroes(u8),
    delta_palette_max_predictor_size: u8 = @import("std").mem.zeroes(u8),
    motion_vector_resolution_control_idc: u8 = @import("std").mem.zeroes(u8),
    sps_num_palette_predictor_initializers_minus1: u8 = @import("std").mem.zeroes(u8),
    conf_win_left_offset: u32 = @import("std").mem.zeroes(u32),
    conf_win_right_offset: u32 = @import("std").mem.zeroes(u32),
    conf_win_top_offset: u32 = @import("std").mem.zeroes(u32),
    conf_win_bottom_offset: u32 = @import("std").mem.zeroes(u32),
    pProfileTierLevel: ?*const StdVideoH265ProfileTierLevel = @import("std").mem.zeroes(?*const StdVideoH265ProfileTierLevel),
    pDecPicBufMgr: [*c]const StdVideoH265DecPicBufMgr = @import("std").mem.zeroes([*c]const StdVideoH265DecPicBufMgr),
    pScalingLists: [*c]const StdVideoH265ScalingLists = @import("std").mem.zeroes([*c]const StdVideoH265ScalingLists),
    pShortTermRefPicSet: ?*const StdVideoH265ShortTermRefPicSet = @import("std").mem.zeroes(?*const StdVideoH265ShortTermRefPicSet),
    pLongTermRefPicsSps: [*c]const StdVideoH265LongTermRefPicsSps = @import("std").mem.zeroes([*c]const StdVideoH265LongTermRefPicsSps),
    pSequenceParameterSetVui: ?*const StdVideoH265SequenceParameterSetVui = @import("std").mem.zeroes(?*const StdVideoH265SequenceParameterSetVui),
    pPredictorPaletteEntries: [*c]const StdVideoH265PredictorPaletteEntries = @import("std").mem.zeroes([*c]const StdVideoH265PredictorPaletteEntries),
};
pub const StdVideoH265SequenceParameterSet = struct_StdVideoH265SequenceParameterSet;
// /usr/include/vk_video/vulkan_video_codec_h265std.h:369:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH265PpsFlags = opaque {};
pub const StdVideoH265PpsFlags = struct_StdVideoH265PpsFlags;
pub const struct_StdVideoH265PictureParameterSet = extern struct {
    flags: StdVideoH265PpsFlags = @import("std").mem.zeroes(StdVideoH265PpsFlags),
    pps_pic_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    pps_seq_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    sps_video_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    num_extra_slice_header_bits: u8 = @import("std").mem.zeroes(u8),
    num_ref_idx_l0_default_active_minus1: u8 = @import("std").mem.zeroes(u8),
    num_ref_idx_l1_default_active_minus1: u8 = @import("std").mem.zeroes(u8),
    init_qp_minus26: i8 = @import("std").mem.zeroes(i8),
    diff_cu_qp_delta_depth: u8 = @import("std").mem.zeroes(u8),
    pps_cb_qp_offset: i8 = @import("std").mem.zeroes(i8),
    pps_cr_qp_offset: i8 = @import("std").mem.zeroes(i8),
    pps_beta_offset_div2: i8 = @import("std").mem.zeroes(i8),
    pps_tc_offset_div2: i8 = @import("std").mem.zeroes(i8),
    log2_parallel_merge_level_minus2: u8 = @import("std").mem.zeroes(u8),
    log2_max_transform_skip_block_size_minus2: u8 = @import("std").mem.zeroes(u8),
    diff_cu_chroma_qp_offset_depth: u8 = @import("std").mem.zeroes(u8),
    chroma_qp_offset_list_len_minus1: u8 = @import("std").mem.zeroes(u8),
    cb_qp_offset_list: [6]i8 = @import("std").mem.zeroes([6]i8),
    cr_qp_offset_list: [6]i8 = @import("std").mem.zeroes([6]i8),
    log2_sao_offset_scale_luma: u8 = @import("std").mem.zeroes(u8),
    log2_sao_offset_scale_chroma: u8 = @import("std").mem.zeroes(u8),
    pps_act_y_qp_offset_plus5: i8 = @import("std").mem.zeroes(i8),
    pps_act_cb_qp_offset_plus5: i8 = @import("std").mem.zeroes(i8),
    pps_act_cr_qp_offset_plus3: i8 = @import("std").mem.zeroes(i8),
    pps_num_palette_predictor_initializers: u8 = @import("std").mem.zeroes(u8),
    luma_bit_depth_entry_minus8: u8 = @import("std").mem.zeroes(u8),
    chroma_bit_depth_entry_minus8: u8 = @import("std").mem.zeroes(u8),
    num_tile_columns_minus1: u8 = @import("std").mem.zeroes(u8),
    num_tile_rows_minus1: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    reserved2: u8 = @import("std").mem.zeroes(u8),
    column_width_minus1: [19]u16 = @import("std").mem.zeroes([19]u16),
    row_height_minus1: [21]u16 = @import("std").mem.zeroes([21]u16),
    reserved3: u32 = @import("std").mem.zeroes(u32),
    pScalingLists: [*c]const StdVideoH265ScalingLists = @import("std").mem.zeroes([*c]const StdVideoH265ScalingLists),
    pPredictorPaletteEntries: [*c]const StdVideoH265PredictorPaletteEntries = @import("std").mem.zeroes([*c]const StdVideoH265PredictorPaletteEntries),
};
pub const StdVideoH265PictureParameterSet = struct_StdVideoH265PictureParameterSet;
pub const struct_StdVideoEncodeH265WeightTableFlags = extern struct {
    luma_weight_l0_flag: u16 = @import("std").mem.zeroes(u16),
    chroma_weight_l0_flag: u16 = @import("std").mem.zeroes(u16),
    luma_weight_l1_flag: u16 = @import("std").mem.zeroes(u16),
    chroma_weight_l1_flag: u16 = @import("std").mem.zeroes(u16),
};
pub const StdVideoEncodeH265WeightTableFlags = struct_StdVideoEncodeH265WeightTableFlags;
pub const struct_StdVideoEncodeH265WeightTable = extern struct {
    flags: StdVideoEncodeH265WeightTableFlags = @import("std").mem.zeroes(StdVideoEncodeH265WeightTableFlags),
    luma_log2_weight_denom: u8 = @import("std").mem.zeroes(u8),
    delta_chroma_log2_weight_denom: i8 = @import("std").mem.zeroes(i8),
    delta_luma_weight_l0: [15]i8 = @import("std").mem.zeroes([15]i8),
    luma_offset_l0: [15]i8 = @import("std").mem.zeroes([15]i8),
    delta_chroma_weight_l0: [15][2]i8 = @import("std").mem.zeroes([15][2]i8),
    delta_chroma_offset_l0: [15][2]i8 = @import("std").mem.zeroes([15][2]i8),
    delta_luma_weight_l1: [15]i8 = @import("std").mem.zeroes([15]i8),
    luma_offset_l1: [15]i8 = @import("std").mem.zeroes([15]i8),
    delta_chroma_weight_l1: [15][2]i8 = @import("std").mem.zeroes([15][2]i8),
    delta_chroma_offset_l1: [15][2]i8 = @import("std").mem.zeroes([15][2]i8),
};
pub const StdVideoEncodeH265WeightTable = struct_StdVideoEncodeH265WeightTable;
// /usr/include/vk_video/vulkan_video_codec_h265std_encode.h:52:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoEncodeH265SliceSegmentHeaderFlags = opaque {};
pub const StdVideoEncodeH265SliceSegmentHeaderFlags = struct_StdVideoEncodeH265SliceSegmentHeaderFlags;
pub const struct_StdVideoEncodeH265SliceSegmentHeader = extern struct {
    flags: StdVideoEncodeH265SliceSegmentHeaderFlags = @import("std").mem.zeroes(StdVideoEncodeH265SliceSegmentHeaderFlags),
    slice_type: StdVideoH265SliceType = @import("std").mem.zeroes(StdVideoH265SliceType),
    slice_segment_address: u32 = @import("std").mem.zeroes(u32),
    collocated_ref_idx: u8 = @import("std").mem.zeroes(u8),
    MaxNumMergeCand: u8 = @import("std").mem.zeroes(u8),
    slice_cb_qp_offset: i8 = @import("std").mem.zeroes(i8),
    slice_cr_qp_offset: i8 = @import("std").mem.zeroes(i8),
    slice_beta_offset_div2: i8 = @import("std").mem.zeroes(i8),
    slice_tc_offset_div2: i8 = @import("std").mem.zeroes(i8),
    slice_act_y_qp_offset: i8 = @import("std").mem.zeroes(i8),
    slice_act_cb_qp_offset: i8 = @import("std").mem.zeroes(i8),
    slice_act_cr_qp_offset: i8 = @import("std").mem.zeroes(i8),
    slice_qp_delta: i8 = @import("std").mem.zeroes(i8),
    reserved1: u16 = @import("std").mem.zeroes(u16),
    pWeightTable: [*c]const StdVideoEncodeH265WeightTable = @import("std").mem.zeroes([*c]const StdVideoEncodeH265WeightTable),
};
pub const StdVideoEncodeH265SliceSegmentHeader = struct_StdVideoEncodeH265SliceSegmentHeader;
// /usr/include/vk_video/vulkan_video_codec_h265std_encode.h:86:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoEncodeH265ReferenceListsInfoFlags = opaque {};
pub const StdVideoEncodeH265ReferenceListsInfoFlags = struct_StdVideoEncodeH265ReferenceListsInfoFlags;
pub const struct_StdVideoEncodeH265ReferenceListsInfo = extern struct {
    flags: StdVideoEncodeH265ReferenceListsInfoFlags = @import("std").mem.zeroes(StdVideoEncodeH265ReferenceListsInfoFlags),
    num_ref_idx_l0_active_minus1: u8 = @import("std").mem.zeroes(u8),
    num_ref_idx_l1_active_minus1: u8 = @import("std").mem.zeroes(u8),
    RefPicList0: [15]u8 = @import("std").mem.zeroes([15]u8),
    RefPicList1: [15]u8 = @import("std").mem.zeroes([15]u8),
    list_entry_l0: [15]u8 = @import("std").mem.zeroes([15]u8),
    list_entry_l1: [15]u8 = @import("std").mem.zeroes([15]u8),
};
pub const StdVideoEncodeH265ReferenceListsInfo = struct_StdVideoEncodeH265ReferenceListsInfo;
// /usr/include/vk_video/vulkan_video_codec_h265std_encode.h:102:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoEncodeH265PictureInfoFlags = opaque {};
pub const StdVideoEncodeH265PictureInfoFlags = struct_StdVideoEncodeH265PictureInfoFlags;
pub const struct_StdVideoEncodeH265LongTermRefPics = extern struct {
    num_long_term_sps: u8 = @import("std").mem.zeroes(u8),
    num_long_term_pics: u8 = @import("std").mem.zeroes(u8),
    lt_idx_sps: [32]u8 = @import("std").mem.zeroes([32]u8),
    poc_lsb_lt: [16]u8 = @import("std").mem.zeroes([16]u8),
    used_by_curr_pic_lt_flag: u16 = @import("std").mem.zeroes(u16),
    delta_poc_msb_present_flag: [48]u8 = @import("std").mem.zeroes([48]u8),
    delta_poc_msb_cycle_lt: [48]u8 = @import("std").mem.zeroes([48]u8),
};
pub const StdVideoEncodeH265LongTermRefPics = struct_StdVideoEncodeH265LongTermRefPics;
pub const struct_StdVideoEncodeH265PictureInfo = extern struct {
    flags: StdVideoEncodeH265PictureInfoFlags = @import("std").mem.zeroes(StdVideoEncodeH265PictureInfoFlags),
    pic_type: StdVideoH265PictureType = @import("std").mem.zeroes(StdVideoH265PictureType),
    sps_video_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    pps_seq_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    pps_pic_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    short_term_ref_pic_set_idx: u8 = @import("std").mem.zeroes(u8),
    PicOrderCntVal: i32 = @import("std").mem.zeroes(i32),
    TemporalId: u8 = @import("std").mem.zeroes(u8),
    reserved1: [7]u8 = @import("std").mem.zeroes([7]u8),
    pRefLists: ?*const StdVideoEncodeH265ReferenceListsInfo = @import("std").mem.zeroes(?*const StdVideoEncodeH265ReferenceListsInfo),
    pShortTermRefPicSet: ?*const StdVideoH265ShortTermRefPicSet = @import("std").mem.zeroes(?*const StdVideoH265ShortTermRefPicSet),
    pLongTermRefPics: [*c]const StdVideoEncodeH265LongTermRefPics = @import("std").mem.zeroes([*c]const StdVideoEncodeH265LongTermRefPics),
};
pub const StdVideoEncodeH265PictureInfo = struct_StdVideoEncodeH265PictureInfo;
// /usr/include/vk_video/vulkan_video_codec_h265std_encode.h:140:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoEncodeH265ReferenceInfoFlags = opaque {};
pub const StdVideoEncodeH265ReferenceInfoFlags = struct_StdVideoEncodeH265ReferenceInfoFlags;
pub const struct_StdVideoEncodeH265ReferenceInfo = extern struct {
    flags: StdVideoEncodeH265ReferenceInfoFlags = @import("std").mem.zeroes(StdVideoEncodeH265ReferenceInfoFlags),
    pic_type: StdVideoH265PictureType = @import("std").mem.zeroes(StdVideoH265PictureType),
    PicOrderCntVal: i32 = @import("std").mem.zeroes(i32),
    TemporalId: u8 = @import("std").mem.zeroes(u8),
};
pub const StdVideoEncodeH265ReferenceInfo = struct_StdVideoEncodeH265ReferenceInfo;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_SEGMENT_TYPE_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR: c_int = 16;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR: c_int = 32;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR: c_int = 64;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_PER_SLICE_SEGMENT_CONSTANT_QP_BIT_KHR: c_int = 128;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILES_PER_SLICE_SEGMENT_BIT_KHR: c_int = 256;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_SEGMENTS_PER_TILE_BIT_KHR: c_int = 512;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeH265CapabilityFlagBitsKHR = c_uint;
pub const VkVideoEncodeH265CapabilityFlagBitsKHR = enum_VkVideoEncodeH265CapabilityFlagBitsKHR;
pub const VkVideoEncodeH265CapabilityFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_H265_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_H265_STD_SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG_SET_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_H265_STD_SCALING_LIST_DATA_PRESENT_FLAG_SET_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_H265_STD_PCM_ENABLED_FLAG_SET_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_H265_STD_SPS_TEMPORAL_MVP_ENABLED_FLAG_SET_BIT_KHR: c_int = 16;
pub const VK_VIDEO_ENCODE_H265_STD_INIT_QP_MINUS26_BIT_KHR: c_int = 32;
pub const VK_VIDEO_ENCODE_H265_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR: c_int = 64;
pub const VK_VIDEO_ENCODE_H265_STD_WEIGHTED_BIPRED_FLAG_SET_BIT_KHR: c_int = 128;
pub const VK_VIDEO_ENCODE_H265_STD_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_KHR: c_int = 256;
pub const VK_VIDEO_ENCODE_H265_STD_SIGN_DATA_HIDING_ENABLED_FLAG_SET_BIT_KHR: c_int = 512;
pub const VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_SET_BIT_KHR: c_int = 1024;
pub const VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_UNSET_BIT_KHR: c_int = 2048;
pub const VK_VIDEO_ENCODE_H265_STD_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG_SET_BIT_KHR: c_int = 4096;
pub const VK_VIDEO_ENCODE_H265_STD_TRANSQUANT_BYPASS_ENABLED_FLAG_SET_BIT_KHR: c_int = 8192;
pub const VK_VIDEO_ENCODE_H265_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR: c_int = 16384;
pub const VK_VIDEO_ENCODE_H265_STD_ENTROPY_CODING_SYNC_ENABLED_FLAG_SET_BIT_KHR: c_int = 32768;
pub const VK_VIDEO_ENCODE_H265_STD_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG_SET_BIT_KHR: c_int = 65536;
pub const VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG_SET_BIT_KHR: c_int = 131072;
pub const VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENT_FLAG_SET_BIT_KHR: c_int = 262144;
pub const VK_VIDEO_ENCODE_H265_STD_SLICE_QP_DELTA_BIT_KHR: c_int = 524288;
pub const VK_VIDEO_ENCODE_H265_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR: c_int = 1048576;
pub const VK_VIDEO_ENCODE_H265_STD_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeH265StdFlagBitsKHR = c_uint;
pub const VkVideoEncodeH265StdFlagBitsKHR = enum_VkVideoEncodeH265StdFlagBitsKHR;
pub const VkVideoEncodeH265StdFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_H265_CTB_SIZE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeH265CtbSizeFlagBitsKHR = c_uint;
pub const VkVideoEncodeH265CtbSizeFlagBitsKHR = enum_VkVideoEncodeH265CtbSizeFlagBitsKHR;
pub const VkVideoEncodeH265CtbSizeFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeH265TransformBlockSizeFlagBitsKHR = c_uint;
pub const VkVideoEncodeH265TransformBlockSizeFlagBitsKHR = enum_VkVideoEncodeH265TransformBlockSizeFlagBitsKHR;
pub const VkVideoEncodeH265TransformBlockSizeFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_H265_RATE_CONTROL_REGULAR_GOP_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_H265_RATE_CONTROL_TEMPORAL_SUB_LAYER_PATTERN_DYADIC_BIT_KHR: c_int = 16;
pub const VK_VIDEO_ENCODE_H265_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeH265RateControlFlagBitsKHR = c_uint;
pub const VkVideoEncodeH265RateControlFlagBitsKHR = enum_VkVideoEncodeH265RateControlFlagBitsKHR;
pub const VkVideoEncodeH265RateControlFlagsKHR = VkFlags;
pub const struct_VkVideoEncodeH265CapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkVideoEncodeH265CapabilityFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH265CapabilityFlagsKHR),
    maxLevelIdc: StdVideoH265LevelIdc = @import("std").mem.zeroes(StdVideoH265LevelIdc),
    maxSliceSegmentCount: u32 = @import("std").mem.zeroes(u32),
    maxTiles: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    ctbSizes: VkVideoEncodeH265CtbSizeFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH265CtbSizeFlagsKHR),
    transformBlockSizes: VkVideoEncodeH265TransformBlockSizeFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH265TransformBlockSizeFlagsKHR),
    maxPPictureL0ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxBPictureL0ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxL1ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxSubLayerCount: u32 = @import("std").mem.zeroes(u32),
    expectDyadicTemporalSubLayerPattern: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minQp: i32 = @import("std").mem.zeroes(i32),
    maxQp: i32 = @import("std").mem.zeroes(i32),
    prefersGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    requiresGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stdSyntaxFlags: VkVideoEncodeH265StdFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH265StdFlagsKHR),
};
pub const VkVideoEncodeH265CapabilitiesKHR = struct_VkVideoEncodeH265CapabilitiesKHR;
pub const struct_VkVideoEncodeH265SessionCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useMaxLevelIdc: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxLevelIdc: StdVideoH265LevelIdc = @import("std").mem.zeroes(StdVideoH265LevelIdc),
};
pub const VkVideoEncodeH265SessionCreateInfoKHR = struct_VkVideoEncodeH265SessionCreateInfoKHR;
pub const struct_VkVideoEncodeH265QpKHR = extern struct {
    qpI: i32 = @import("std").mem.zeroes(i32),
    qpP: i32 = @import("std").mem.zeroes(i32),
    qpB: i32 = @import("std").mem.zeroes(i32),
};
pub const VkVideoEncodeH265QpKHR = struct_VkVideoEncodeH265QpKHR;
pub const struct_VkVideoEncodeH265QualityLevelPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    preferredRateControlFlags: VkVideoEncodeH265RateControlFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH265RateControlFlagsKHR),
    preferredGopFrameCount: u32 = @import("std").mem.zeroes(u32),
    preferredIdrPeriod: u32 = @import("std").mem.zeroes(u32),
    preferredConsecutiveBFrameCount: u32 = @import("std").mem.zeroes(u32),
    preferredSubLayerCount: u32 = @import("std").mem.zeroes(u32),
    preferredConstantQp: VkVideoEncodeH265QpKHR = @import("std").mem.zeroes(VkVideoEncodeH265QpKHR),
    preferredMaxL0ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    preferredMaxL1ReferenceCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeH265QualityLevelPropertiesKHR = struct_VkVideoEncodeH265QualityLevelPropertiesKHR;
pub const struct_VkVideoEncodeH265SessionParametersAddInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdVPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdVPSs: ?*const StdVideoH265VideoParameterSet = @import("std").mem.zeroes(?*const StdVideoH265VideoParameterSet),
    stdSPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdSPSs: ?*const StdVideoH265SequenceParameterSet = @import("std").mem.zeroes(?*const StdVideoH265SequenceParameterSet),
    stdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdPPSs: ?*const StdVideoH265PictureParameterSet = @import("std").mem.zeroes(?*const StdVideoH265PictureParameterSet),
};
pub const VkVideoEncodeH265SessionParametersAddInfoKHR = struct_VkVideoEncodeH265SessionParametersAddInfoKHR;
pub const struct_VkVideoEncodeH265SessionParametersCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxStdVPSCount: u32 = @import("std").mem.zeroes(u32),
    maxStdSPSCount: u32 = @import("std").mem.zeroes(u32),
    maxStdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pParametersAddInfo: [*c]const VkVideoEncodeH265SessionParametersAddInfoKHR = @import("std").mem.zeroes([*c]const VkVideoEncodeH265SessionParametersAddInfoKHR),
};
pub const VkVideoEncodeH265SessionParametersCreateInfoKHR = struct_VkVideoEncodeH265SessionParametersCreateInfoKHR;
pub const struct_VkVideoEncodeH265SessionParametersGetInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    writeStdVPS: VkBool32 = @import("std").mem.zeroes(VkBool32),
    writeStdSPS: VkBool32 = @import("std").mem.zeroes(VkBool32),
    writeStdPPS: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stdVPSId: u32 = @import("std").mem.zeroes(u32),
    stdSPSId: u32 = @import("std").mem.zeroes(u32),
    stdPPSId: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeH265SessionParametersGetInfoKHR = struct_VkVideoEncodeH265SessionParametersGetInfoKHR;
pub const struct_VkVideoEncodeH265SessionParametersFeedbackInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    hasStdVPSOverrides: VkBool32 = @import("std").mem.zeroes(VkBool32),
    hasStdSPSOverrides: VkBool32 = @import("std").mem.zeroes(VkBool32),
    hasStdPPSOverrides: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkVideoEncodeH265SessionParametersFeedbackInfoKHR = struct_VkVideoEncodeH265SessionParametersFeedbackInfoKHR;
pub const struct_VkVideoEncodeH265NaluSliceSegmentInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    constantQp: i32 = @import("std").mem.zeroes(i32),
    pStdSliceSegmentHeader: ?*const StdVideoEncodeH265SliceSegmentHeader = @import("std").mem.zeroes(?*const StdVideoEncodeH265SliceSegmentHeader),
};
pub const VkVideoEncodeH265NaluSliceSegmentInfoKHR = struct_VkVideoEncodeH265NaluSliceSegmentInfoKHR;
pub const struct_VkVideoEncodeH265PictureInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    naluSliceSegmentEntryCount: u32 = @import("std").mem.zeroes(u32),
    pNaluSliceSegmentEntries: [*c]const VkVideoEncodeH265NaluSliceSegmentInfoKHR = @import("std").mem.zeroes([*c]const VkVideoEncodeH265NaluSliceSegmentInfoKHR),
    pStdPictureInfo: ?*const StdVideoEncodeH265PictureInfo = @import("std").mem.zeroes(?*const StdVideoEncodeH265PictureInfo),
};
pub const VkVideoEncodeH265PictureInfoKHR = struct_VkVideoEncodeH265PictureInfoKHR;
pub const struct_VkVideoEncodeH265DpbSlotInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdReferenceInfo: ?*const StdVideoEncodeH265ReferenceInfo = @import("std").mem.zeroes(?*const StdVideoEncodeH265ReferenceInfo),
};
pub const VkVideoEncodeH265DpbSlotInfoKHR = struct_VkVideoEncodeH265DpbSlotInfoKHR;
pub const struct_VkVideoEncodeH265ProfileInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdProfileIdc: StdVideoH265ProfileIdc = @import("std").mem.zeroes(StdVideoH265ProfileIdc),
};
pub const VkVideoEncodeH265ProfileInfoKHR = struct_VkVideoEncodeH265ProfileInfoKHR;
pub const struct_VkVideoEncodeH265RateControlInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoEncodeH265RateControlFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH265RateControlFlagsKHR),
    gopFrameCount: u32 = @import("std").mem.zeroes(u32),
    idrPeriod: u32 = @import("std").mem.zeroes(u32),
    consecutiveBFrameCount: u32 = @import("std").mem.zeroes(u32),
    subLayerCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeH265RateControlInfoKHR = struct_VkVideoEncodeH265RateControlInfoKHR;
pub const struct_VkVideoEncodeH265FrameSizeKHR = extern struct {
    frameISize: u32 = @import("std").mem.zeroes(u32),
    framePSize: u32 = @import("std").mem.zeroes(u32),
    frameBSize: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeH265FrameSizeKHR = struct_VkVideoEncodeH265FrameSizeKHR;
pub const struct_VkVideoEncodeH265RateControlLayerInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useMinQp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minQp: VkVideoEncodeH265QpKHR = @import("std").mem.zeroes(VkVideoEncodeH265QpKHR),
    useMaxQp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxQp: VkVideoEncodeH265QpKHR = @import("std").mem.zeroes(VkVideoEncodeH265QpKHR),
    useMaxFrameSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxFrameSize: VkVideoEncodeH265FrameSizeKHR = @import("std").mem.zeroes(VkVideoEncodeH265FrameSizeKHR),
};
pub const VkVideoEncodeH265RateControlLayerInfoKHR = struct_VkVideoEncodeH265RateControlLayerInfoKHR;
pub const struct_VkVideoEncodeH265GopRemainingFrameInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    gopRemainingI: u32 = @import("std").mem.zeroes(u32),
    gopRemainingP: u32 = @import("std").mem.zeroes(u32),
    gopRemainingB: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeH265GopRemainingFrameInfoKHR = struct_VkVideoEncodeH265GopRemainingFrameInfoKHR;
pub const STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_TOP: c_int = 0;
pub const STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_BOTTOM: c_int = 1;
pub const STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_INVALID: c_int = 2147483647;
pub const STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoDecodeH264FieldOrderCount = c_uint;
pub const StdVideoDecodeH264FieldOrderCount = enum_StdVideoDecodeH264FieldOrderCount;
// /usr/include/vk_video/vulkan_video_codec_h264std_decode.h:39:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoDecodeH264PictureInfoFlags = opaque {};
pub const StdVideoDecodeH264PictureInfoFlags = struct_StdVideoDecodeH264PictureInfoFlags;
pub const struct_StdVideoDecodeH264PictureInfo = extern struct {
    flags: StdVideoDecodeH264PictureInfoFlags = @import("std").mem.zeroes(StdVideoDecodeH264PictureInfoFlags),
    seq_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    pic_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    reserved2: u8 = @import("std").mem.zeroes(u8),
    frame_num: u16 = @import("std").mem.zeroes(u16),
    idr_pic_id: u16 = @import("std").mem.zeroes(u16),
    PicOrderCnt: [2]i32 = @import("std").mem.zeroes([2]i32),
};
pub const StdVideoDecodeH264PictureInfo = struct_StdVideoDecodeH264PictureInfo;
// /usr/include/vk_video/vulkan_video_codec_h264std_decode.h:59:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoDecodeH264ReferenceInfoFlags = opaque {};
pub const StdVideoDecodeH264ReferenceInfoFlags = struct_StdVideoDecodeH264ReferenceInfoFlags;
pub const struct_StdVideoDecodeH264ReferenceInfo = extern struct {
    flags: StdVideoDecodeH264ReferenceInfoFlags = @import("std").mem.zeroes(StdVideoDecodeH264ReferenceInfoFlags),
    FrameNum: u16 = @import("std").mem.zeroes(u16),
    reserved: u16 = @import("std").mem.zeroes(u16),
    PicOrderCnt: [2]i32 = @import("std").mem.zeroes([2]i32),
};
pub const StdVideoDecodeH264ReferenceInfo = struct_StdVideoDecodeH264ReferenceInfo;
pub const VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR: c_int = 0;
pub const VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR: c_int = 1;
pub const VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR: c_int = 2;
pub const VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoDecodeH264PictureLayoutFlagBitsKHR = c_uint;
pub const VkVideoDecodeH264PictureLayoutFlagBitsKHR = enum_VkVideoDecodeH264PictureLayoutFlagBitsKHR;
pub const VkVideoDecodeH264PictureLayoutFlagsKHR = VkFlags;
pub const struct_VkVideoDecodeH264ProfileInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdProfileIdc: StdVideoH264ProfileIdc = @import("std").mem.zeroes(StdVideoH264ProfileIdc),
    pictureLayout: VkVideoDecodeH264PictureLayoutFlagBitsKHR = @import("std").mem.zeroes(VkVideoDecodeH264PictureLayoutFlagBitsKHR),
};
pub const VkVideoDecodeH264ProfileInfoKHR = struct_VkVideoDecodeH264ProfileInfoKHR;
pub const struct_VkVideoDecodeH264CapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxLevelIdc: StdVideoH264LevelIdc = @import("std").mem.zeroes(StdVideoH264LevelIdc),
    fieldOffsetGranularity: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
};
pub const VkVideoDecodeH264CapabilitiesKHR = struct_VkVideoDecodeH264CapabilitiesKHR;
pub const struct_VkVideoDecodeH264SessionParametersAddInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdSPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdSPSs: ?*const StdVideoH264SequenceParameterSet = @import("std").mem.zeroes(?*const StdVideoH264SequenceParameterSet),
    stdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdPPSs: ?*const StdVideoH264PictureParameterSet = @import("std").mem.zeroes(?*const StdVideoH264PictureParameterSet),
};
pub const VkVideoDecodeH264SessionParametersAddInfoKHR = struct_VkVideoDecodeH264SessionParametersAddInfoKHR;
pub const struct_VkVideoDecodeH264SessionParametersCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxStdSPSCount: u32 = @import("std").mem.zeroes(u32),
    maxStdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pParametersAddInfo: [*c]const VkVideoDecodeH264SessionParametersAddInfoKHR = @import("std").mem.zeroes([*c]const VkVideoDecodeH264SessionParametersAddInfoKHR),
};
pub const VkVideoDecodeH264SessionParametersCreateInfoKHR = struct_VkVideoDecodeH264SessionParametersCreateInfoKHR;
pub const struct_VkVideoDecodeH264PictureInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdPictureInfo: ?*const StdVideoDecodeH264PictureInfo = @import("std").mem.zeroes(?*const StdVideoDecodeH264PictureInfo),
    sliceCount: u32 = @import("std").mem.zeroes(u32),
    pSliceOffsets: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkVideoDecodeH264PictureInfoKHR = struct_VkVideoDecodeH264PictureInfoKHR;
pub const struct_VkVideoDecodeH264DpbSlotInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdReferenceInfo: ?*const StdVideoDecodeH264ReferenceInfo = @import("std").mem.zeroes(?*const StdVideoDecodeH264ReferenceInfo),
};
pub const VkVideoDecodeH264DpbSlotInfoKHR = struct_VkVideoDecodeH264DpbSlotInfoKHR;
pub const VkRenderingFlagsKHR = VkRenderingFlags;
pub const VkRenderingFlagBitsKHR = VkRenderingFlagBits;
pub const VkRenderingInfoKHR = VkRenderingInfo;
pub const VkRenderingAttachmentInfoKHR = VkRenderingAttachmentInfo;
pub const VkPipelineRenderingCreateInfoKHR = VkPipelineRenderingCreateInfo;
pub const VkPhysicalDeviceDynamicRenderingFeaturesKHR = VkPhysicalDeviceDynamicRenderingFeatures;
pub const VkCommandBufferInheritanceRenderingInfoKHR = VkCommandBufferInheritanceRenderingInfo;
pub const struct_VkRenderingFragmentShadingRateAttachmentInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    imageView: VkImageView = @import("std").mem.zeroes(VkImageView),
    imageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    shadingRateAttachmentTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkRenderingFragmentShadingRateAttachmentInfoKHR = struct_VkRenderingFragmentShadingRateAttachmentInfoKHR;
pub const struct_VkRenderingFragmentDensityMapAttachmentInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    imageView: VkImageView = @import("std").mem.zeroes(VkImageView),
    imageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
};
pub const VkRenderingFragmentDensityMapAttachmentInfoEXT = struct_VkRenderingFragmentDensityMapAttachmentInfoEXT;
pub const struct_VkAttachmentSampleCountInfoAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachmentSamples: [*c]const VkSampleCountFlagBits = @import("std").mem.zeroes([*c]const VkSampleCountFlagBits),
    depthStencilAttachmentSamples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
};
pub const VkAttachmentSampleCountInfoAMD = struct_VkAttachmentSampleCountInfoAMD;
pub const VkAttachmentSampleCountInfoNV = VkAttachmentSampleCountInfoAMD;
pub const struct_VkMultiviewPerViewAttributesInfoNVX = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    perViewAttributes: VkBool32 = @import("std").mem.zeroes(VkBool32),
    perViewAttributesPositionXOnly: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkMultiviewPerViewAttributesInfoNVX = struct_VkMultiviewPerViewAttributesInfoNVX;
pub const PFN_vkCmdBeginRenderingKHR = ?*const fn (VkCommandBuffer, [*c]const VkRenderingInfo) callconv(.C) void;
pub const PFN_vkCmdEndRenderingKHR = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub extern fn vkCmdBeginRenderingKHR(commandBuffer: VkCommandBuffer, pRenderingInfo: [*c]const VkRenderingInfo) void;
pub extern fn vkCmdEndRenderingKHR(commandBuffer: VkCommandBuffer) void;
pub const VkRenderPassMultiviewCreateInfoKHR = VkRenderPassMultiviewCreateInfo;
pub const VkPhysicalDeviceMultiviewFeaturesKHR = VkPhysicalDeviceMultiviewFeatures;
pub const VkPhysicalDeviceMultiviewPropertiesKHR = VkPhysicalDeviceMultiviewProperties;
pub const VkPhysicalDeviceFeatures2KHR = VkPhysicalDeviceFeatures2;
pub const VkPhysicalDeviceProperties2KHR = VkPhysicalDeviceProperties2;
pub const VkFormatProperties2KHR = VkFormatProperties2;
pub const VkImageFormatProperties2KHR = VkImageFormatProperties2;
pub const VkPhysicalDeviceImageFormatInfo2KHR = VkPhysicalDeviceImageFormatInfo2;
pub const VkQueueFamilyProperties2KHR = VkQueueFamilyProperties2;
pub const VkPhysicalDeviceMemoryProperties2KHR = VkPhysicalDeviceMemoryProperties2;
pub const VkSparseImageFormatProperties2KHR = VkSparseImageFormatProperties2;
pub const VkPhysicalDeviceSparseImageFormatInfo2KHR = VkPhysicalDeviceSparseImageFormatInfo2;
pub const PFN_vkGetPhysicalDeviceFeatures2KHR = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceFeatures2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceFormatProperties2KHR = ?*const fn (VkPhysicalDevice, VkFormat, [*c]VkFormatProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceImageFormatProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceImageFormatInfo2, [*c]VkImageFormatProperties2) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkQueueFamilyProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceMemoryProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceMemoryProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceSparseImageFormatInfo2, [*c]u32, [*c]VkSparseImageFormatProperties2) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceFeatures2KHR(physicalDevice: VkPhysicalDevice, pFeatures: [*c]VkPhysicalDeviceFeatures2) void;
pub extern fn vkGetPhysicalDeviceProperties2KHR(physicalDevice: VkPhysicalDevice, pProperties: [*c]VkPhysicalDeviceProperties2) void;
pub extern fn vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: [*c]VkFormatProperties2) void;
pub extern fn vkGetPhysicalDeviceImageFormatProperties2KHR(physicalDevice: VkPhysicalDevice, pImageFormatInfo: [*c]const VkPhysicalDeviceImageFormatInfo2, pImageFormatProperties: [*c]VkImageFormatProperties2) VkResult;
pub extern fn vkGetPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: [*c]u32, pQueueFamilyProperties: [*c]VkQueueFamilyProperties2) void;
pub extern fn vkGetPhysicalDeviceMemoryProperties2KHR(physicalDevice: VkPhysicalDevice, pMemoryProperties: [*c]VkPhysicalDeviceMemoryProperties2) void;
pub extern fn vkGetPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice: VkPhysicalDevice, pFormatInfo: [*c]const VkPhysicalDeviceSparseImageFormatInfo2, pPropertyCount: [*c]u32, pProperties: [*c]VkSparseImageFormatProperties2) void;
pub const VkPeerMemoryFeatureFlagsKHR = VkPeerMemoryFeatureFlags;
pub const VkPeerMemoryFeatureFlagBitsKHR = VkPeerMemoryFeatureFlagBits;
pub const VkMemoryAllocateFlagsKHR = VkMemoryAllocateFlags;
pub const VkMemoryAllocateFlagBitsKHR = VkMemoryAllocateFlagBits;
pub const VkMemoryAllocateFlagsInfoKHR = VkMemoryAllocateFlagsInfo;
pub const VkDeviceGroupRenderPassBeginInfoKHR = VkDeviceGroupRenderPassBeginInfo;
pub const VkDeviceGroupCommandBufferBeginInfoKHR = VkDeviceGroupCommandBufferBeginInfo;
pub const VkDeviceGroupSubmitInfoKHR = VkDeviceGroupSubmitInfo;
pub const VkDeviceGroupBindSparseInfoKHR = VkDeviceGroupBindSparseInfo;
pub const VkBindBufferMemoryDeviceGroupInfoKHR = VkBindBufferMemoryDeviceGroupInfo;
pub const VkBindImageMemoryDeviceGroupInfoKHR = VkBindImageMemoryDeviceGroupInfo;
pub const PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR = ?*const fn (VkDevice, u32, u32, u32, [*c]VkPeerMemoryFeatureFlags) callconv(.C) void;
pub const PFN_vkCmdSetDeviceMaskKHR = ?*const fn (VkCommandBuffer, u32) callconv(.C) void;
pub const PFN_vkCmdDispatchBaseKHR = ?*const fn (VkCommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.C) void;
pub extern fn vkGetDeviceGroupPeerMemoryFeaturesKHR(device: VkDevice, heapIndex: u32, localDeviceIndex: u32, remoteDeviceIndex: u32, pPeerMemoryFeatures: [*c]VkPeerMemoryFeatureFlags) void;
pub extern fn vkCmdSetDeviceMaskKHR(commandBuffer: VkCommandBuffer, deviceMask: u32) void;
pub extern fn vkCmdDispatchBaseKHR(commandBuffer: VkCommandBuffer, baseGroupX: u32, baseGroupY: u32, baseGroupZ: u32, groupCountX: u32, groupCountY: u32, groupCountZ: u32) void;
pub const VkCommandPoolTrimFlagsKHR = VkCommandPoolTrimFlags;
pub const PFN_vkTrimCommandPoolKHR = ?*const fn (VkDevice, VkCommandPool, VkCommandPoolTrimFlags) callconv(.C) void;
pub extern fn vkTrimCommandPoolKHR(device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolTrimFlags) void;
pub const VkPhysicalDeviceGroupPropertiesKHR = VkPhysicalDeviceGroupProperties;
pub const VkDeviceGroupDeviceCreateInfoKHR = VkDeviceGroupDeviceCreateInfo;
pub const PFN_vkEnumeratePhysicalDeviceGroupsKHR = ?*const fn (VkInstance, [*c]u32, [*c]VkPhysicalDeviceGroupProperties) callconv(.C) VkResult;
pub extern fn vkEnumeratePhysicalDeviceGroupsKHR(instance: VkInstance, pPhysicalDeviceGroupCount: [*c]u32, pPhysicalDeviceGroupProperties: [*c]VkPhysicalDeviceGroupProperties) VkResult;
pub const VkExternalMemoryHandleTypeFlagsKHR = VkExternalMemoryHandleTypeFlags;
pub const VkExternalMemoryHandleTypeFlagBitsKHR = VkExternalMemoryHandleTypeFlagBits;
pub const VkExternalMemoryFeatureFlagsKHR = VkExternalMemoryFeatureFlags;
pub const VkExternalMemoryFeatureFlagBitsKHR = VkExternalMemoryFeatureFlagBits;
pub const VkExternalMemoryPropertiesKHR = VkExternalMemoryProperties;
pub const VkPhysicalDeviceExternalImageFormatInfoKHR = VkPhysicalDeviceExternalImageFormatInfo;
pub const VkExternalImageFormatPropertiesKHR = VkExternalImageFormatProperties;
pub const VkPhysicalDeviceExternalBufferInfoKHR = VkPhysicalDeviceExternalBufferInfo;
pub const VkExternalBufferPropertiesKHR = VkExternalBufferProperties;
pub const VkPhysicalDeviceIDPropertiesKHR = VkPhysicalDeviceIDProperties;
pub const PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalBufferInfo, [*c]VkExternalBufferProperties) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceExternalBufferPropertiesKHR(physicalDevice: VkPhysicalDevice, pExternalBufferInfo: [*c]const VkPhysicalDeviceExternalBufferInfo, pExternalBufferProperties: [*c]VkExternalBufferProperties) void;
pub const VkExternalMemoryImageCreateInfoKHR = VkExternalMemoryImageCreateInfo;
pub const VkExternalMemoryBufferCreateInfoKHR = VkExternalMemoryBufferCreateInfo;
pub const VkExportMemoryAllocateInfoKHR = VkExportMemoryAllocateInfo;
pub const struct_VkImportMemoryFdInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleType: VkExternalMemoryHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagBits),
    fd: c_int = @import("std").mem.zeroes(c_int),
};
pub const VkImportMemoryFdInfoKHR = struct_VkImportMemoryFdInfoKHR;
pub const struct_VkMemoryFdPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryTypeBits: u32 = @import("std").mem.zeroes(u32),
};
pub const VkMemoryFdPropertiesKHR = struct_VkMemoryFdPropertiesKHR;
pub const struct_VkMemoryGetFdInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    handleType: VkExternalMemoryHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagBits),
};
pub const VkMemoryGetFdInfoKHR = struct_VkMemoryGetFdInfoKHR;
pub const PFN_vkGetMemoryFdKHR = ?*const fn (VkDevice, [*c]const VkMemoryGetFdInfoKHR, [*c]c_int) callconv(.C) VkResult;
pub const PFN_vkGetMemoryFdPropertiesKHR = ?*const fn (VkDevice, VkExternalMemoryHandleTypeFlagBits, c_int, [*c]VkMemoryFdPropertiesKHR) callconv(.C) VkResult;
pub extern fn vkGetMemoryFdKHR(device: VkDevice, pGetFdInfo: [*c]const VkMemoryGetFdInfoKHR, pFd: [*c]c_int) VkResult;
pub extern fn vkGetMemoryFdPropertiesKHR(device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, fd: c_int, pMemoryFdProperties: [*c]VkMemoryFdPropertiesKHR) VkResult;
pub const VkExternalSemaphoreHandleTypeFlagsKHR = VkExternalSemaphoreHandleTypeFlags;
pub const VkExternalSemaphoreHandleTypeFlagBitsKHR = VkExternalSemaphoreHandleTypeFlagBits;
pub const VkExternalSemaphoreFeatureFlagsKHR = VkExternalSemaphoreFeatureFlags;
pub const VkExternalSemaphoreFeatureFlagBitsKHR = VkExternalSemaphoreFeatureFlagBits;
pub const VkPhysicalDeviceExternalSemaphoreInfoKHR = VkPhysicalDeviceExternalSemaphoreInfo;
pub const VkExternalSemaphorePropertiesKHR = VkExternalSemaphoreProperties;
pub const PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalSemaphoreInfo, [*c]VkExternalSemaphoreProperties) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(physicalDevice: VkPhysicalDevice, pExternalSemaphoreInfo: [*c]const VkPhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: [*c]VkExternalSemaphoreProperties) void;
pub const VkSemaphoreImportFlagsKHR = VkSemaphoreImportFlags;
pub const VkSemaphoreImportFlagBitsKHR = VkSemaphoreImportFlagBits;
pub const VkExportSemaphoreCreateInfoKHR = VkExportSemaphoreCreateInfo;
pub const struct_VkImportSemaphoreFdInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    semaphore: VkSemaphore = @import("std").mem.zeroes(VkSemaphore),
    flags: VkSemaphoreImportFlags = @import("std").mem.zeroes(VkSemaphoreImportFlags),
    handleType: VkExternalSemaphoreHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalSemaphoreHandleTypeFlagBits),
    fd: c_int = @import("std").mem.zeroes(c_int),
};
pub const VkImportSemaphoreFdInfoKHR = struct_VkImportSemaphoreFdInfoKHR;
pub const struct_VkSemaphoreGetFdInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    semaphore: VkSemaphore = @import("std").mem.zeroes(VkSemaphore),
    handleType: VkExternalSemaphoreHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalSemaphoreHandleTypeFlagBits),
};
pub const VkSemaphoreGetFdInfoKHR = struct_VkSemaphoreGetFdInfoKHR;
pub const PFN_vkImportSemaphoreFdKHR = ?*const fn (VkDevice, [*c]const VkImportSemaphoreFdInfoKHR) callconv(.C) VkResult;
pub const PFN_vkGetSemaphoreFdKHR = ?*const fn (VkDevice, [*c]const VkSemaphoreGetFdInfoKHR, [*c]c_int) callconv(.C) VkResult;
pub extern fn vkImportSemaphoreFdKHR(device: VkDevice, pImportSemaphoreFdInfo: [*c]const VkImportSemaphoreFdInfoKHR) VkResult;
pub extern fn vkGetSemaphoreFdKHR(device: VkDevice, pGetFdInfo: [*c]const VkSemaphoreGetFdInfoKHR, pFd: [*c]c_int) VkResult;
pub const struct_VkPhysicalDevicePushDescriptorPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxPushDescriptors: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDevicePushDescriptorPropertiesKHR = struct_VkPhysicalDevicePushDescriptorPropertiesKHR;
pub const PFN_vkCmdPushDescriptorSetKHR = ?*const fn (VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, u32, u32, [*c]const VkWriteDescriptorSet) callconv(.C) void;
pub const PFN_vkCmdPushDescriptorSetWithTemplateKHR = ?*const fn (VkCommandBuffer, VkDescriptorUpdateTemplate, VkPipelineLayout, u32, ?*const anyopaque) callconv(.C) void;
pub extern fn vkCmdPushDescriptorSetKHR(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, set: u32, descriptorWriteCount: u32, pDescriptorWrites: [*c]const VkWriteDescriptorSet) void;
pub extern fn vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer: VkCommandBuffer, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, layout: VkPipelineLayout, set: u32, pData: ?*const anyopaque) void;
pub const VkPhysicalDeviceShaderFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;
pub const VkPhysicalDeviceFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;
pub const VkPhysicalDevice16BitStorageFeaturesKHR = VkPhysicalDevice16BitStorageFeatures;
pub const struct_VkRectLayerKHR = extern struct {
    offset: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    extent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    layer: u32 = @import("std").mem.zeroes(u32),
};
pub const VkRectLayerKHR = struct_VkRectLayerKHR;
pub const struct_VkPresentRegionKHR = extern struct {
    rectangleCount: u32 = @import("std").mem.zeroes(u32),
    pRectangles: [*c]const VkRectLayerKHR = @import("std").mem.zeroes([*c]const VkRectLayerKHR),
};
pub const VkPresentRegionKHR = struct_VkPresentRegionKHR;
pub const struct_VkPresentRegionsKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkPresentRegionKHR = @import("std").mem.zeroes([*c]const VkPresentRegionKHR),
};
pub const VkPresentRegionsKHR = struct_VkPresentRegionsKHR;
pub const VkDescriptorUpdateTemplateKHR = VkDescriptorUpdateTemplate;
pub const VkDescriptorUpdateTemplateTypeKHR = VkDescriptorUpdateTemplateType;
pub const VkDescriptorUpdateTemplateCreateFlagsKHR = VkDescriptorUpdateTemplateCreateFlags;
pub const VkDescriptorUpdateTemplateEntryKHR = VkDescriptorUpdateTemplateEntry;
pub const VkDescriptorUpdateTemplateCreateInfoKHR = VkDescriptorUpdateTemplateCreateInfo;
pub const PFN_vkCreateDescriptorUpdateTemplateKHR = ?*const fn (VkDevice, [*c]const VkDescriptorUpdateTemplateCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkDescriptorUpdateTemplate) callconv(.C) VkResult;
pub const PFN_vkDestroyDescriptorUpdateTemplateKHR = ?*const fn (VkDevice, VkDescriptorUpdateTemplate, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkUpdateDescriptorSetWithTemplateKHR = ?*const fn (VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, ?*const anyopaque) callconv(.C) void;
pub extern fn vkCreateDescriptorUpdateTemplateKHR(device: VkDevice, pCreateInfo: [*c]const VkDescriptorUpdateTemplateCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pDescriptorUpdateTemplate: [*c]VkDescriptorUpdateTemplate) VkResult;
pub extern fn vkDestroyDescriptorUpdateTemplateKHR(device: VkDevice, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkUpdateDescriptorSetWithTemplateKHR(device: VkDevice, descriptorSet: VkDescriptorSet, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pData: ?*const anyopaque) void;
pub const VkPhysicalDeviceImagelessFramebufferFeaturesKHR = VkPhysicalDeviceImagelessFramebufferFeatures;
pub const VkFramebufferAttachmentsCreateInfoKHR = VkFramebufferAttachmentsCreateInfo;
pub const VkFramebufferAttachmentImageInfoKHR = VkFramebufferAttachmentImageInfo;
pub const VkRenderPassAttachmentBeginInfoKHR = VkRenderPassAttachmentBeginInfo;
pub const VkRenderPassCreateInfo2KHR = VkRenderPassCreateInfo2;
pub const VkAttachmentDescription2KHR = VkAttachmentDescription2;
pub const VkAttachmentReference2KHR = VkAttachmentReference2;
pub const VkSubpassDescription2KHR = VkSubpassDescription2;
pub const VkSubpassDependency2KHR = VkSubpassDependency2;
pub const VkSubpassBeginInfoKHR = VkSubpassBeginInfo;
pub const VkSubpassEndInfoKHR = VkSubpassEndInfo;
pub const PFN_vkCreateRenderPass2KHR = ?*const fn (VkDevice, [*c]const VkRenderPassCreateInfo2, [*c]const VkAllocationCallbacks, [*c]VkRenderPass) callconv(.C) VkResult;
pub const PFN_vkCmdBeginRenderPass2KHR = ?*const fn (VkCommandBuffer, [*c]const VkRenderPassBeginInfo, [*c]const VkSubpassBeginInfo) callconv(.C) void;
pub const PFN_vkCmdNextSubpass2KHR = ?*const fn (VkCommandBuffer, [*c]const VkSubpassBeginInfo, [*c]const VkSubpassEndInfo) callconv(.C) void;
pub const PFN_vkCmdEndRenderPass2KHR = ?*const fn (VkCommandBuffer, [*c]const VkSubpassEndInfo) callconv(.C) void;
pub extern fn vkCreateRenderPass2KHR(device: VkDevice, pCreateInfo: [*c]const VkRenderPassCreateInfo2, pAllocator: [*c]const VkAllocationCallbacks, pRenderPass: [*c]VkRenderPass) VkResult;
pub extern fn vkCmdBeginRenderPass2KHR(commandBuffer: VkCommandBuffer, pRenderPassBegin: [*c]const VkRenderPassBeginInfo, pSubpassBeginInfo: [*c]const VkSubpassBeginInfo) void;
pub extern fn vkCmdNextSubpass2KHR(commandBuffer: VkCommandBuffer, pSubpassBeginInfo: [*c]const VkSubpassBeginInfo, pSubpassEndInfo: [*c]const VkSubpassEndInfo) void;
pub extern fn vkCmdEndRenderPass2KHR(commandBuffer: VkCommandBuffer, pSubpassEndInfo: [*c]const VkSubpassEndInfo) void;
pub const struct_VkSharedPresentSurfaceCapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sharedPresentSupportedUsageFlags: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
};
pub const VkSharedPresentSurfaceCapabilitiesKHR = struct_VkSharedPresentSurfaceCapabilitiesKHR;
pub const PFN_vkGetSwapchainStatusKHR = ?*const fn (VkDevice, VkSwapchainKHR) callconv(.C) VkResult;
pub extern fn vkGetSwapchainStatusKHR(device: VkDevice, swapchain: VkSwapchainKHR) VkResult;
pub const VkExternalFenceHandleTypeFlagsKHR = VkExternalFenceHandleTypeFlags;
pub const VkExternalFenceHandleTypeFlagBitsKHR = VkExternalFenceHandleTypeFlagBits;
pub const VkExternalFenceFeatureFlagsKHR = VkExternalFenceFeatureFlags;
pub const VkExternalFenceFeatureFlagBitsKHR = VkExternalFenceFeatureFlagBits;
pub const VkPhysicalDeviceExternalFenceInfoKHR = VkPhysicalDeviceExternalFenceInfo;
pub const VkExternalFencePropertiesKHR = VkExternalFenceProperties;
pub const PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalFenceInfo, [*c]VkExternalFenceProperties) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceExternalFencePropertiesKHR(physicalDevice: VkPhysicalDevice, pExternalFenceInfo: [*c]const VkPhysicalDeviceExternalFenceInfo, pExternalFenceProperties: [*c]VkExternalFenceProperties) void;
pub const VkFenceImportFlagsKHR = VkFenceImportFlags;
pub const VkFenceImportFlagBitsKHR = VkFenceImportFlagBits;
pub const VkExportFenceCreateInfoKHR = VkExportFenceCreateInfo;
pub const struct_VkImportFenceFdInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    fence: VkFence = @import("std").mem.zeroes(VkFence),
    flags: VkFenceImportFlags = @import("std").mem.zeroes(VkFenceImportFlags),
    handleType: VkExternalFenceHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalFenceHandleTypeFlagBits),
    fd: c_int = @import("std").mem.zeroes(c_int),
};
pub const VkImportFenceFdInfoKHR = struct_VkImportFenceFdInfoKHR;
pub const struct_VkFenceGetFdInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    fence: VkFence = @import("std").mem.zeroes(VkFence),
    handleType: VkExternalFenceHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalFenceHandleTypeFlagBits),
};
pub const VkFenceGetFdInfoKHR = struct_VkFenceGetFdInfoKHR;
pub const PFN_vkImportFenceFdKHR = ?*const fn (VkDevice, [*c]const VkImportFenceFdInfoKHR) callconv(.C) VkResult;
pub const PFN_vkGetFenceFdKHR = ?*const fn (VkDevice, [*c]const VkFenceGetFdInfoKHR, [*c]c_int) callconv(.C) VkResult;
pub extern fn vkImportFenceFdKHR(device: VkDevice, pImportFenceFdInfo: [*c]const VkImportFenceFdInfoKHR) VkResult;
pub extern fn vkGetFenceFdKHR(device: VkDevice, pGetFdInfo: [*c]const VkFenceGetFdInfoKHR, pFd: [*c]c_int) VkResult;
pub const VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR: c_int = 0;
pub const VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR: c_int = 1;
pub const VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR: c_int = 2;
pub const VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR: c_int = 3;
pub const VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR: c_int = 4;
pub const VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR: c_int = 5;
pub const VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR: c_int = 6;
pub const VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR: c_int = 7;
pub const VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR: c_int = 8;
pub const VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR: c_int = 9;
pub const VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR: c_int = 10;
pub const VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkPerformanceCounterUnitKHR = c_uint;
pub const VkPerformanceCounterUnitKHR = enum_VkPerformanceCounterUnitKHR;
pub const VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR: c_int = 0;
pub const VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR: c_int = 1;
pub const VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR: c_int = 2;
pub const VK_QUERY_SCOPE_COMMAND_BUFFER_KHR: c_int = 0;
pub const VK_QUERY_SCOPE_RENDER_PASS_KHR: c_int = 1;
pub const VK_QUERY_SCOPE_COMMAND_KHR: c_int = 2;
pub const VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkPerformanceCounterScopeKHR = c_uint;
pub const VkPerformanceCounterScopeKHR = enum_VkPerformanceCounterScopeKHR;
pub const VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR: c_int = 0;
pub const VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR: c_int = 1;
pub const VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR: c_int = 2;
pub const VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR: c_int = 3;
pub const VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR: c_int = 4;
pub const VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR: c_int = 5;
pub const VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkPerformanceCounterStorageKHR = c_uint;
pub const VkPerformanceCounterStorageKHR = enum_VkPerformanceCounterStorageKHR;
pub const VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR: c_int = 1;
pub const VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR: c_int = 2;
pub const VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR: c_int = 1;
pub const VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR: c_int = 2;
pub const VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkPerformanceCounterDescriptionFlagBitsKHR = c_uint;
pub const VkPerformanceCounterDescriptionFlagBitsKHR = enum_VkPerformanceCounterDescriptionFlagBitsKHR;
pub const VkPerformanceCounterDescriptionFlagsKHR = VkFlags;
pub const VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkAcquireProfilingLockFlagBitsKHR = c_uint;
pub const VkAcquireProfilingLockFlagBitsKHR = enum_VkAcquireProfilingLockFlagBitsKHR;
pub const VkAcquireProfilingLockFlagsKHR = VkFlags;
pub const struct_VkPhysicalDevicePerformanceQueryFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    performanceCounterQueryPools: VkBool32 = @import("std").mem.zeroes(VkBool32),
    performanceCounterMultipleQueryPools: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePerformanceQueryFeaturesKHR = struct_VkPhysicalDevicePerformanceQueryFeaturesKHR;
pub const struct_VkPhysicalDevicePerformanceQueryPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    allowCommandBufferQueryCopies: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePerformanceQueryPropertiesKHR = struct_VkPhysicalDevicePerformanceQueryPropertiesKHR;
pub const struct_VkPerformanceCounterKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    unit: VkPerformanceCounterUnitKHR = @import("std").mem.zeroes(VkPerformanceCounterUnitKHR),
    scope: VkPerformanceCounterScopeKHR = @import("std").mem.zeroes(VkPerformanceCounterScopeKHR),
    storage: VkPerformanceCounterStorageKHR = @import("std").mem.zeroes(VkPerformanceCounterStorageKHR),
    uuid: [16]u8 = @import("std").mem.zeroes([16]u8),
};
pub const VkPerformanceCounterKHR = struct_VkPerformanceCounterKHR;
pub const struct_VkPerformanceCounterDescriptionKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkPerformanceCounterDescriptionFlagsKHR = @import("std").mem.zeroes(VkPerformanceCounterDescriptionFlagsKHR),
    name: [256]u8 = @import("std").mem.zeroes([256]u8),
    category: [256]u8 = @import("std").mem.zeroes([256]u8),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
};
pub const VkPerformanceCounterDescriptionKHR = struct_VkPerformanceCounterDescriptionKHR;
pub const struct_VkQueryPoolPerformanceCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    queueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    counterIndexCount: u32 = @import("std").mem.zeroes(u32),
    pCounterIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkQueryPoolPerformanceCreateInfoKHR = struct_VkQueryPoolPerformanceCreateInfoKHR;
pub const union_VkPerformanceCounterResultKHR = extern union {
    int32: i32,
    int64: i64,
    uint32: u32,
    uint64: u64,
    float32: f32,
    float64: f64,
};
pub const VkPerformanceCounterResultKHR = union_VkPerformanceCounterResultKHR;
pub const struct_VkAcquireProfilingLockInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkAcquireProfilingLockFlagsKHR = @import("std").mem.zeroes(VkAcquireProfilingLockFlagsKHR),
    timeout: u64 = @import("std").mem.zeroes(u64),
};
pub const VkAcquireProfilingLockInfoKHR = struct_VkAcquireProfilingLockInfoKHR;
pub const struct_VkPerformanceQuerySubmitInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    counterPassIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPerformanceQuerySubmitInfoKHR = struct_VkPerformanceQuerySubmitInfoKHR;
pub const PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = ?*const fn (VkPhysicalDevice, u32, [*c]u32, [*c]VkPerformanceCounterKHR, [*c]VkPerformanceCounterDescriptionKHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = ?*const fn (VkPhysicalDevice, [*c]const VkQueryPoolPerformanceCreateInfoKHR, [*c]u32) callconv(.C) void;
pub const PFN_vkAcquireProfilingLockKHR = ?*const fn (VkDevice, [*c]const VkAcquireProfilingLockInfoKHR) callconv(.C) VkResult;
pub const PFN_vkReleaseProfilingLockKHR = ?*const fn (VkDevice) callconv(.C) void;
pub extern fn vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, pCounterCount: [*c]u32, pCounters: [*c]VkPerformanceCounterKHR, pCounterDescriptions: [*c]VkPerformanceCounterDescriptionKHR) VkResult;
pub extern fn vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice: VkPhysicalDevice, pPerformanceQueryCreateInfo: [*c]const VkQueryPoolPerformanceCreateInfoKHR, pNumPasses: [*c]u32) void;
pub extern fn vkAcquireProfilingLockKHR(device: VkDevice, pInfo: [*c]const VkAcquireProfilingLockInfoKHR) VkResult;
pub extern fn vkReleaseProfilingLockKHR(device: VkDevice) void;
pub const VkPointClippingBehaviorKHR = VkPointClippingBehavior;
pub const VkTessellationDomainOriginKHR = VkTessellationDomainOrigin;
pub const VkPhysicalDevicePointClippingPropertiesKHR = VkPhysicalDevicePointClippingProperties;
pub const VkRenderPassInputAttachmentAspectCreateInfoKHR = VkRenderPassInputAttachmentAspectCreateInfo;
pub const VkInputAttachmentAspectReferenceKHR = VkInputAttachmentAspectReference;
pub const VkImageViewUsageCreateInfoKHR = VkImageViewUsageCreateInfo;
pub const VkPipelineTessellationDomainOriginStateCreateInfoKHR = VkPipelineTessellationDomainOriginStateCreateInfo;
pub const struct_VkPhysicalDeviceSurfaceInfo2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    surface: VkSurfaceKHR = @import("std").mem.zeroes(VkSurfaceKHR),
};
pub const VkPhysicalDeviceSurfaceInfo2KHR = struct_VkPhysicalDeviceSurfaceInfo2KHR;
pub const struct_VkSurfaceCapabilities2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    surfaceCapabilities: VkSurfaceCapabilitiesKHR = @import("std").mem.zeroes(VkSurfaceCapabilitiesKHR),
};
pub const VkSurfaceCapabilities2KHR = struct_VkSurfaceCapabilities2KHR;
pub const struct_VkSurfaceFormat2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    surfaceFormat: VkSurfaceFormatKHR = @import("std").mem.zeroes(VkSurfaceFormatKHR),
};
pub const VkSurfaceFormat2KHR = struct_VkSurfaceFormat2KHR;
pub const PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceSurfaceInfo2KHR, [*c]VkSurfaceCapabilities2KHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceSurfaceFormats2KHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceSurfaceInfo2KHR, [*c]u32, [*c]VkSurfaceFormat2KHR) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice: VkPhysicalDevice, pSurfaceInfo: [*c]const VkPhysicalDeviceSurfaceInfo2KHR, pSurfaceCapabilities: [*c]VkSurfaceCapabilities2KHR) VkResult;
pub extern fn vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice: VkPhysicalDevice, pSurfaceInfo: [*c]const VkPhysicalDeviceSurfaceInfo2KHR, pSurfaceFormatCount: [*c]u32, pSurfaceFormats: [*c]VkSurfaceFormat2KHR) VkResult;
pub const VkPhysicalDeviceVariablePointerFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;
pub const VkPhysicalDeviceVariablePointersFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;
pub const struct_VkDisplayProperties2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    displayProperties: VkDisplayPropertiesKHR = @import("std").mem.zeroes(VkDisplayPropertiesKHR),
};
pub const VkDisplayProperties2KHR = struct_VkDisplayProperties2KHR;
pub const struct_VkDisplayPlaneProperties2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    displayPlaneProperties: VkDisplayPlanePropertiesKHR = @import("std").mem.zeroes(VkDisplayPlanePropertiesKHR),
};
pub const VkDisplayPlaneProperties2KHR = struct_VkDisplayPlaneProperties2KHR;
pub const struct_VkDisplayModeProperties2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    displayModeProperties: VkDisplayModePropertiesKHR = @import("std").mem.zeroes(VkDisplayModePropertiesKHR),
};
pub const VkDisplayModeProperties2KHR = struct_VkDisplayModeProperties2KHR;
pub const struct_VkDisplayPlaneInfo2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    mode: VkDisplayModeKHR = @import("std").mem.zeroes(VkDisplayModeKHR),
    planeIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDisplayPlaneInfo2KHR = struct_VkDisplayPlaneInfo2KHR;
pub const struct_VkDisplayPlaneCapabilities2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    capabilities: VkDisplayPlaneCapabilitiesKHR = @import("std").mem.zeroes(VkDisplayPlaneCapabilitiesKHR),
};
pub const VkDisplayPlaneCapabilities2KHR = struct_VkDisplayPlaneCapabilities2KHR;
pub const PFN_vkGetPhysicalDeviceDisplayProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkDisplayProperties2KHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkDisplayPlaneProperties2KHR) callconv(.C) VkResult;
pub const PFN_vkGetDisplayModeProperties2KHR = ?*const fn (VkPhysicalDevice, VkDisplayKHR, [*c]u32, [*c]VkDisplayModeProperties2KHR) callconv(.C) VkResult;
pub const PFN_vkGetDisplayPlaneCapabilities2KHR = ?*const fn (VkPhysicalDevice, [*c]const VkDisplayPlaneInfo2KHR, [*c]VkDisplayPlaneCapabilities2KHR) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice: VkPhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]VkDisplayProperties2KHR) VkResult;
pub extern fn vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice: VkPhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]VkDisplayPlaneProperties2KHR) VkResult;
pub extern fn vkGetDisplayModeProperties2KHR(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pPropertyCount: [*c]u32, pProperties: [*c]VkDisplayModeProperties2KHR) VkResult;
pub extern fn vkGetDisplayPlaneCapabilities2KHR(physicalDevice: VkPhysicalDevice, pDisplayPlaneInfo: [*c]const VkDisplayPlaneInfo2KHR, pCapabilities: [*c]VkDisplayPlaneCapabilities2KHR) VkResult;
pub const VkMemoryDedicatedRequirementsKHR = VkMemoryDedicatedRequirements;
pub const VkMemoryDedicatedAllocateInfoKHR = VkMemoryDedicatedAllocateInfo;
pub const VkBufferMemoryRequirementsInfo2KHR = VkBufferMemoryRequirementsInfo2;
pub const VkImageMemoryRequirementsInfo2KHR = VkImageMemoryRequirementsInfo2;
pub const VkImageSparseMemoryRequirementsInfo2KHR = VkImageSparseMemoryRequirementsInfo2;
pub const VkMemoryRequirements2KHR = VkMemoryRequirements2;
pub const VkSparseImageMemoryRequirements2KHR = VkSparseImageMemoryRequirements2;
pub const PFN_vkGetImageMemoryRequirements2KHR = ?*const fn (VkDevice, [*c]const VkImageMemoryRequirementsInfo2, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetBufferMemoryRequirements2KHR = ?*const fn (VkDevice, [*c]const VkBufferMemoryRequirementsInfo2, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetImageSparseMemoryRequirements2KHR = ?*const fn (VkDevice, [*c]const VkImageSparseMemoryRequirementsInfo2, [*c]u32, [*c]VkSparseImageMemoryRequirements2) callconv(.C) void;
pub extern fn vkGetImageMemoryRequirements2KHR(device: VkDevice, pInfo: [*c]const VkImageMemoryRequirementsInfo2, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetBufferMemoryRequirements2KHR(device: VkDevice, pInfo: [*c]const VkBufferMemoryRequirementsInfo2, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetImageSparseMemoryRequirements2KHR(device: VkDevice, pInfo: [*c]const VkImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: [*c]u32, pSparseMemoryRequirements: [*c]VkSparseImageMemoryRequirements2) void;
pub const VkImageFormatListCreateInfoKHR = VkImageFormatListCreateInfo;
pub const VkSamplerYcbcrConversionKHR = VkSamplerYcbcrConversion;
pub const VkSamplerYcbcrModelConversionKHR = VkSamplerYcbcrModelConversion;
pub const VkSamplerYcbcrRangeKHR = VkSamplerYcbcrRange;
pub const VkChromaLocationKHR = VkChromaLocation;
pub const VkSamplerYcbcrConversionCreateInfoKHR = VkSamplerYcbcrConversionCreateInfo;
pub const VkSamplerYcbcrConversionInfoKHR = VkSamplerYcbcrConversionInfo;
pub const VkBindImagePlaneMemoryInfoKHR = VkBindImagePlaneMemoryInfo;
pub const VkImagePlaneMemoryRequirementsInfoKHR = VkImagePlaneMemoryRequirementsInfo;
pub const VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR = VkPhysicalDeviceSamplerYcbcrConversionFeatures;
pub const VkSamplerYcbcrConversionImageFormatPropertiesKHR = VkSamplerYcbcrConversionImageFormatProperties;
pub const PFN_vkCreateSamplerYcbcrConversionKHR = ?*const fn (VkDevice, [*c]const VkSamplerYcbcrConversionCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkSamplerYcbcrConversion) callconv(.C) VkResult;
pub const PFN_vkDestroySamplerYcbcrConversionKHR = ?*const fn (VkDevice, VkSamplerYcbcrConversion, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub extern fn vkCreateSamplerYcbcrConversionKHR(device: VkDevice, pCreateInfo: [*c]const VkSamplerYcbcrConversionCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pYcbcrConversion: [*c]VkSamplerYcbcrConversion) VkResult;
pub extern fn vkDestroySamplerYcbcrConversionKHR(device: VkDevice, ycbcrConversion: VkSamplerYcbcrConversion, pAllocator: [*c]const VkAllocationCallbacks) void;
pub const VkBindBufferMemoryInfoKHR = VkBindBufferMemoryInfo;
pub const VkBindImageMemoryInfoKHR = VkBindImageMemoryInfo;
pub const PFN_vkBindBufferMemory2KHR = ?*const fn (VkDevice, u32, [*c]const VkBindBufferMemoryInfo) callconv(.C) VkResult;
pub const PFN_vkBindImageMemory2KHR = ?*const fn (VkDevice, u32, [*c]const VkBindImageMemoryInfo) callconv(.C) VkResult;
pub extern fn vkBindBufferMemory2KHR(device: VkDevice, bindInfoCount: u32, pBindInfos: [*c]const VkBindBufferMemoryInfo) VkResult;
pub extern fn vkBindImageMemory2KHR(device: VkDevice, bindInfoCount: u32, pBindInfos: [*c]const VkBindImageMemoryInfo) VkResult;
pub const VkPhysicalDeviceMaintenance3PropertiesKHR = VkPhysicalDeviceMaintenance3Properties;
pub const VkDescriptorSetLayoutSupportKHR = VkDescriptorSetLayoutSupport;
pub const PFN_vkGetDescriptorSetLayoutSupportKHR = ?*const fn (VkDevice, [*c]const VkDescriptorSetLayoutCreateInfo, [*c]VkDescriptorSetLayoutSupport) callconv(.C) void;
pub extern fn vkGetDescriptorSetLayoutSupportKHR(device: VkDevice, pCreateInfo: [*c]const VkDescriptorSetLayoutCreateInfo, pSupport: [*c]VkDescriptorSetLayoutSupport) void;
pub const PFN_vkCmdDrawIndirectCountKHR = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexedIndirectCountKHR = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub extern fn vkCmdDrawIndirectCountKHR(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub extern fn vkCmdDrawIndexedIndirectCountKHR(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub const VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR = VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;
pub const VkPhysicalDevice8BitStorageFeaturesKHR = VkPhysicalDevice8BitStorageFeatures;
pub const VkPhysicalDeviceShaderAtomicInt64FeaturesKHR = VkPhysicalDeviceShaderAtomicInt64Features;
pub const struct_VkPhysicalDeviceShaderClockFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderSubgroupClock: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDeviceClock: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderClockFeaturesKHR = struct_VkPhysicalDeviceShaderClockFeaturesKHR;
// /usr/include/vk_video/vulkan_video_codec_h265std_decode.h:32:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoDecodeH265PictureInfoFlags = opaque {};
pub const StdVideoDecodeH265PictureInfoFlags = struct_StdVideoDecodeH265PictureInfoFlags;
pub const struct_StdVideoDecodeH265PictureInfo = extern struct {
    flags: StdVideoDecodeH265PictureInfoFlags = @import("std").mem.zeroes(StdVideoDecodeH265PictureInfoFlags),
    sps_video_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    pps_seq_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    pps_pic_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    NumDeltaPocsOfRefRpsIdx: u8 = @import("std").mem.zeroes(u8),
    PicOrderCntVal: i32 = @import("std").mem.zeroes(i32),
    NumBitsForSTRefPicSetInSlice: u16 = @import("std").mem.zeroes(u16),
    reserved: u16 = @import("std").mem.zeroes(u16),
    RefPicSetStCurrBefore: [8]u8 = @import("std").mem.zeroes([8]u8),
    RefPicSetStCurrAfter: [8]u8 = @import("std").mem.zeroes([8]u8),
    RefPicSetLtCurr: [8]u8 = @import("std").mem.zeroes([8]u8),
};
pub const StdVideoDecodeH265PictureInfo = struct_StdVideoDecodeH265PictureInfo;
// /usr/include/vk_video/vulkan_video_codec_h265std_decode.h:53:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoDecodeH265ReferenceInfoFlags = opaque {};
pub const StdVideoDecodeH265ReferenceInfoFlags = struct_StdVideoDecodeH265ReferenceInfoFlags;
pub const struct_StdVideoDecodeH265ReferenceInfo = extern struct {
    flags: StdVideoDecodeH265ReferenceInfoFlags = @import("std").mem.zeroes(StdVideoDecodeH265ReferenceInfoFlags),
    PicOrderCntVal: i32 = @import("std").mem.zeroes(i32),
};
pub const StdVideoDecodeH265ReferenceInfo = struct_StdVideoDecodeH265ReferenceInfo;
pub const struct_VkVideoDecodeH265ProfileInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdProfileIdc: StdVideoH265ProfileIdc = @import("std").mem.zeroes(StdVideoH265ProfileIdc),
};
pub const VkVideoDecodeH265ProfileInfoKHR = struct_VkVideoDecodeH265ProfileInfoKHR;
pub const struct_VkVideoDecodeH265CapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxLevelIdc: StdVideoH265LevelIdc = @import("std").mem.zeroes(StdVideoH265LevelIdc),
};
pub const VkVideoDecodeH265CapabilitiesKHR = struct_VkVideoDecodeH265CapabilitiesKHR;
pub const struct_VkVideoDecodeH265SessionParametersAddInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdVPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdVPSs: ?*const StdVideoH265VideoParameterSet = @import("std").mem.zeroes(?*const StdVideoH265VideoParameterSet),
    stdSPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdSPSs: ?*const StdVideoH265SequenceParameterSet = @import("std").mem.zeroes(?*const StdVideoH265SequenceParameterSet),
    stdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdPPSs: ?*const StdVideoH265PictureParameterSet = @import("std").mem.zeroes(?*const StdVideoH265PictureParameterSet),
};
pub const VkVideoDecodeH265SessionParametersAddInfoKHR = struct_VkVideoDecodeH265SessionParametersAddInfoKHR;
pub const struct_VkVideoDecodeH265SessionParametersCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxStdVPSCount: u32 = @import("std").mem.zeroes(u32),
    maxStdSPSCount: u32 = @import("std").mem.zeroes(u32),
    maxStdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pParametersAddInfo: [*c]const VkVideoDecodeH265SessionParametersAddInfoKHR = @import("std").mem.zeroes([*c]const VkVideoDecodeH265SessionParametersAddInfoKHR),
};
pub const VkVideoDecodeH265SessionParametersCreateInfoKHR = struct_VkVideoDecodeH265SessionParametersCreateInfoKHR;
pub const struct_VkVideoDecodeH265PictureInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdPictureInfo: ?*const StdVideoDecodeH265PictureInfo = @import("std").mem.zeroes(?*const StdVideoDecodeH265PictureInfo),
    sliceSegmentCount: u32 = @import("std").mem.zeroes(u32),
    pSliceSegmentOffsets: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkVideoDecodeH265PictureInfoKHR = struct_VkVideoDecodeH265PictureInfoKHR;
pub const struct_VkVideoDecodeH265DpbSlotInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdReferenceInfo: ?*const StdVideoDecodeH265ReferenceInfo = @import("std").mem.zeroes(?*const StdVideoDecodeH265ReferenceInfo),
};
pub const VkVideoDecodeH265DpbSlotInfoKHR = struct_VkVideoDecodeH265DpbSlotInfoKHR;
pub const VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR: c_int = 128;
pub const VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR: c_int = 256;
pub const VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR: c_int = 512;
pub const VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR: c_int = 1024;
pub const VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT: c_int = 128;
pub const VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT: c_int = 256;
pub const VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT: c_int = 512;
pub const VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT: c_int = 1024;
pub const VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkQueueGlobalPriorityKHR = c_uint;
pub const VkQueueGlobalPriorityKHR = enum_VkQueueGlobalPriorityKHR;
pub const struct_VkDeviceQueueGlobalPriorityCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    globalPriority: VkQueueGlobalPriorityKHR = @import("std").mem.zeroes(VkQueueGlobalPriorityKHR),
};
pub const VkDeviceQueueGlobalPriorityCreateInfoKHR = struct_VkDeviceQueueGlobalPriorityCreateInfoKHR;
pub const struct_VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    globalPriorityQuery: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR = struct_VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR;
pub const struct_VkQueueFamilyGlobalPriorityPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    priorityCount: u32 = @import("std").mem.zeroes(u32),
    priorities: [16]VkQueueGlobalPriorityKHR = @import("std").mem.zeroes([16]VkQueueGlobalPriorityKHR),
};
pub const VkQueueFamilyGlobalPriorityPropertiesKHR = struct_VkQueueFamilyGlobalPriorityPropertiesKHR;
pub const VkDriverIdKHR = VkDriverId;
pub const VkConformanceVersionKHR = VkConformanceVersion;
pub const VkPhysicalDeviceDriverPropertiesKHR = VkPhysicalDeviceDriverProperties;
pub const VkShaderFloatControlsIndependenceKHR = VkShaderFloatControlsIndependence;
pub const VkPhysicalDeviceFloatControlsPropertiesKHR = VkPhysicalDeviceFloatControlsProperties;
pub const VkResolveModeFlagBitsKHR = VkResolveModeFlagBits;
pub const VkResolveModeFlagsKHR = VkResolveModeFlags;
pub const VkSubpassDescriptionDepthStencilResolveKHR = VkSubpassDescriptionDepthStencilResolve;
pub const VkPhysicalDeviceDepthStencilResolvePropertiesKHR = VkPhysicalDeviceDepthStencilResolveProperties;
pub const VkSemaphoreTypeKHR = VkSemaphoreType;
pub const VkSemaphoreWaitFlagBitsKHR = VkSemaphoreWaitFlagBits;
pub const VkSemaphoreWaitFlagsKHR = VkSemaphoreWaitFlags;
pub const VkPhysicalDeviceTimelineSemaphoreFeaturesKHR = VkPhysicalDeviceTimelineSemaphoreFeatures;
pub const VkPhysicalDeviceTimelineSemaphorePropertiesKHR = VkPhysicalDeviceTimelineSemaphoreProperties;
pub const VkSemaphoreTypeCreateInfoKHR = VkSemaphoreTypeCreateInfo;
pub const VkTimelineSemaphoreSubmitInfoKHR = VkTimelineSemaphoreSubmitInfo;
pub const VkSemaphoreWaitInfoKHR = VkSemaphoreWaitInfo;
pub const VkSemaphoreSignalInfoKHR = VkSemaphoreSignalInfo;
pub const PFN_vkGetSemaphoreCounterValueKHR = ?*const fn (VkDevice, VkSemaphore, [*c]u64) callconv(.C) VkResult;
pub const PFN_vkWaitSemaphoresKHR = ?*const fn (VkDevice, [*c]const VkSemaphoreWaitInfo, u64) callconv(.C) VkResult;
pub const PFN_vkSignalSemaphoreKHR = ?*const fn (VkDevice, [*c]const VkSemaphoreSignalInfo) callconv(.C) VkResult;
pub extern fn vkGetSemaphoreCounterValueKHR(device: VkDevice, semaphore: VkSemaphore, pValue: [*c]u64) VkResult;
pub extern fn vkWaitSemaphoresKHR(device: VkDevice, pWaitInfo: [*c]const VkSemaphoreWaitInfo, timeout: u64) VkResult;
pub extern fn vkSignalSemaphoreKHR(device: VkDevice, pSignalInfo: [*c]const VkSemaphoreSignalInfo) VkResult;
pub const VkPhysicalDeviceVulkanMemoryModelFeaturesKHR = VkPhysicalDeviceVulkanMemoryModelFeatures;
pub const VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR = VkPhysicalDeviceShaderTerminateInvocationFeatures;
pub const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR: c_int = 0;
pub const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR: c_int = 1;
pub const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR: c_int = 2;
pub const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR: c_int = 3;
pub const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR: c_int = 4;
pub const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkFragmentShadingRateCombinerOpKHR = c_uint;
pub const VkFragmentShadingRateCombinerOpKHR = enum_VkFragmentShadingRateCombinerOpKHR;
pub const struct_VkFragmentShadingRateAttachmentInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pFragmentShadingRateAttachment: [*c]const VkAttachmentReference2 = @import("std").mem.zeroes([*c]const VkAttachmentReference2),
    shadingRateAttachmentTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkFragmentShadingRateAttachmentInfoKHR = struct_VkFragmentShadingRateAttachmentInfoKHR;
pub const struct_VkPipelineFragmentShadingRateStateCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    fragmentSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    combinerOps: [2]VkFragmentShadingRateCombinerOpKHR = @import("std").mem.zeroes([2]VkFragmentShadingRateCombinerOpKHR),
};
pub const VkPipelineFragmentShadingRateStateCreateInfoKHR = struct_VkPipelineFragmentShadingRateStateCreateInfoKHR;
pub const struct_VkPhysicalDeviceFragmentShadingRateFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineFragmentShadingRate: VkBool32 = @import("std").mem.zeroes(VkBool32),
    primitiveFragmentShadingRate: VkBool32 = @import("std").mem.zeroes(VkBool32),
    attachmentFragmentShadingRate: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentShadingRateFeaturesKHR = struct_VkPhysicalDeviceFragmentShadingRateFeaturesKHR;
pub const struct_VkPhysicalDeviceFragmentShadingRatePropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minFragmentShadingRateAttachmentTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxFragmentShadingRateAttachmentTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxFragmentShadingRateAttachmentTexelSizeAspectRatio: u32 = @import("std").mem.zeroes(u32),
    primitiveFragmentShadingRateWithMultipleViewports: VkBool32 = @import("std").mem.zeroes(VkBool32),
    layeredShadingRateAttachments: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateNonTrivialCombinerOps: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxFragmentSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxFragmentSizeAspectRatio: u32 = @import("std").mem.zeroes(u32),
    maxFragmentShadingRateCoverageSamples: u32 = @import("std").mem.zeroes(u32),
    maxFragmentShadingRateRasterizationSamples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    fragmentShadingRateWithShaderDepthStencilWrites: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateWithSampleMask: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateWithShaderSampleMask: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateWithConservativeRasterization: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateWithFragmentShaderInterlock: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateWithCustomSampleLocations: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateStrictMultiplyCombiner: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentShadingRatePropertiesKHR = struct_VkPhysicalDeviceFragmentShadingRatePropertiesKHR;
pub const struct_VkPhysicalDeviceFragmentShadingRateKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    fragmentSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkPhysicalDeviceFragmentShadingRateKHR = struct_VkPhysicalDeviceFragmentShadingRateKHR;
pub const PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkPhysicalDeviceFragmentShadingRateKHR) callconv(.C) VkResult;
pub const PFN_vkCmdSetFragmentShadingRateKHR = ?*const fn (VkCommandBuffer, [*c]const VkExtent2D, [*c]const VkFragmentShadingRateCombinerOpKHR) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice: VkPhysicalDevice, pFragmentShadingRateCount: [*c]u32, pFragmentShadingRates: [*c]VkPhysicalDeviceFragmentShadingRateKHR) VkResult;
pub extern fn vkCmdSetFragmentShadingRateKHR(commandBuffer: VkCommandBuffer, pFragmentSize: [*c]const VkExtent2D, combinerOps: [*c]const VkFragmentShadingRateCombinerOpKHR) void;
pub const struct_VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    dynamicRenderingLocalRead: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR = struct_VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR;
pub const struct_VkRenderingAttachmentLocationInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachmentLocations: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkRenderingAttachmentLocationInfoKHR = struct_VkRenderingAttachmentLocationInfoKHR;
pub const struct_VkRenderingInputAttachmentIndexInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachmentInputIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    pDepthInputAttachmentIndex: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    pStencilInputAttachmentIndex: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkRenderingInputAttachmentIndexInfoKHR = struct_VkRenderingInputAttachmentIndexInfoKHR;
pub const PFN_vkCmdSetRenderingAttachmentLocationsKHR = ?*const fn (VkCommandBuffer, [*c]const VkRenderingAttachmentLocationInfoKHR) callconv(.C) void;
pub const PFN_vkCmdSetRenderingInputAttachmentIndicesKHR = ?*const fn (VkCommandBuffer, [*c]const VkRenderingInputAttachmentIndexInfoKHR) callconv(.C) void;
pub extern fn vkCmdSetRenderingAttachmentLocationsKHR(commandBuffer: VkCommandBuffer, pLocationInfo: [*c]const VkRenderingAttachmentLocationInfoKHR) void;
pub extern fn vkCmdSetRenderingInputAttachmentIndicesKHR(commandBuffer: VkCommandBuffer, pLocationInfo: [*c]const VkRenderingInputAttachmentIndexInfoKHR) void;
pub const struct_VkPhysicalDeviceShaderQuadControlFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderQuadControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderQuadControlFeaturesKHR = struct_VkPhysicalDeviceShaderQuadControlFeaturesKHR;
pub const struct_VkSurfaceProtectedCapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    supportsProtected: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSurfaceProtectedCapabilitiesKHR = struct_VkSurfaceProtectedCapabilitiesKHR;
pub const VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR = VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;
pub const VkAttachmentReferenceStencilLayoutKHR = VkAttachmentReferenceStencilLayout;
pub const VkAttachmentDescriptionStencilLayoutKHR = VkAttachmentDescriptionStencilLayout;
pub const struct_VkPhysicalDevicePresentWaitFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentWait: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePresentWaitFeaturesKHR = struct_VkPhysicalDevicePresentWaitFeaturesKHR;
pub const PFN_vkWaitForPresentKHR = ?*const fn (VkDevice, VkSwapchainKHR, u64, u64) callconv(.C) VkResult;
pub extern fn vkWaitForPresentKHR(device: VkDevice, swapchain: VkSwapchainKHR, presentId: u64, timeout: u64) VkResult;
pub const VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR = VkPhysicalDeviceUniformBufferStandardLayoutFeatures;
pub const VkPhysicalDeviceBufferDeviceAddressFeaturesKHR = VkPhysicalDeviceBufferDeviceAddressFeatures;
pub const VkBufferDeviceAddressInfoKHR = VkBufferDeviceAddressInfo;
pub const VkBufferOpaqueCaptureAddressCreateInfoKHR = VkBufferOpaqueCaptureAddressCreateInfo;
pub const VkMemoryOpaqueCaptureAddressAllocateInfoKHR = VkMemoryOpaqueCaptureAddressAllocateInfo;
pub const VkDeviceMemoryOpaqueCaptureAddressInfoKHR = VkDeviceMemoryOpaqueCaptureAddressInfo;
pub const PFN_vkGetBufferDeviceAddressKHR = ?*const fn (VkDevice, [*c]const VkBufferDeviceAddressInfo) callconv(.C) VkDeviceAddress;
pub const PFN_vkGetBufferOpaqueCaptureAddressKHR = ?*const fn (VkDevice, [*c]const VkBufferDeviceAddressInfo) callconv(.C) u64;
pub const PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR = ?*const fn (VkDevice, [*c]const VkDeviceMemoryOpaqueCaptureAddressInfo) callconv(.C) u64;
pub extern fn vkGetBufferDeviceAddressKHR(device: VkDevice, pInfo: [*c]const VkBufferDeviceAddressInfo) VkDeviceAddress;
pub extern fn vkGetBufferOpaqueCaptureAddressKHR(device: VkDevice, pInfo: [*c]const VkBufferDeviceAddressInfo) u64;
pub extern fn vkGetDeviceMemoryOpaqueCaptureAddressKHR(device: VkDevice, pInfo: [*c]const VkDeviceMemoryOpaqueCaptureAddressInfo) u64;
pub const struct_VkDeferredOperationKHR_T = opaque {};
pub const VkDeferredOperationKHR = ?*struct_VkDeferredOperationKHR_T;
pub const PFN_vkCreateDeferredOperationKHR = ?*const fn (VkDevice, [*c]const VkAllocationCallbacks, [*c]VkDeferredOperationKHR) callconv(.C) VkResult;
pub const PFN_vkDestroyDeferredOperationKHR = ?*const fn (VkDevice, VkDeferredOperationKHR, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetDeferredOperationMaxConcurrencyKHR = ?*const fn (VkDevice, VkDeferredOperationKHR) callconv(.C) u32;
pub const PFN_vkGetDeferredOperationResultKHR = ?*const fn (VkDevice, VkDeferredOperationKHR) callconv(.C) VkResult;
pub const PFN_vkDeferredOperationJoinKHR = ?*const fn (VkDevice, VkDeferredOperationKHR) callconv(.C) VkResult;
pub extern fn vkCreateDeferredOperationKHR(device: VkDevice, pAllocator: [*c]const VkAllocationCallbacks, pDeferredOperation: [*c]VkDeferredOperationKHR) VkResult;
pub extern fn vkDestroyDeferredOperationKHR(device: VkDevice, operation: VkDeferredOperationKHR, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetDeferredOperationMaxConcurrencyKHR(device: VkDevice, operation: VkDeferredOperationKHR) u32;
pub extern fn vkGetDeferredOperationResultKHR(device: VkDevice, operation: VkDeferredOperationKHR) VkResult;
pub extern fn vkDeferredOperationJoinKHR(device: VkDevice, operation: VkDeferredOperationKHR) VkResult;
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR: c_int = 0;
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR: c_int = 1;
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR: c_int = 2;
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR: c_int = 3;
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkPipelineExecutableStatisticFormatKHR = c_uint;
pub const VkPipelineExecutableStatisticFormatKHR = enum_VkPipelineExecutableStatisticFormatKHR;
pub const struct_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineExecutableInfo: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR = struct_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR;
pub const struct_VkPipelineInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
};
pub const VkPipelineInfoKHR = struct_VkPipelineInfoKHR;
pub const struct_VkPipelineExecutablePropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    stages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    name: [256]u8 = @import("std").mem.zeroes([256]u8),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    subgroupSize: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPipelineExecutablePropertiesKHR = struct_VkPipelineExecutablePropertiesKHR;
pub const struct_VkPipelineExecutableInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    executableIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPipelineExecutableInfoKHR = struct_VkPipelineExecutableInfoKHR;
pub const union_VkPipelineExecutableStatisticValueKHR = extern union {
    b32: VkBool32,
    i64: i64,
    u64: u64,
    f64: f64,
};
pub const VkPipelineExecutableStatisticValueKHR = union_VkPipelineExecutableStatisticValueKHR;
pub const struct_VkPipelineExecutableStatisticKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    name: [256]u8 = @import("std").mem.zeroes([256]u8),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    format: VkPipelineExecutableStatisticFormatKHR = @import("std").mem.zeroes(VkPipelineExecutableStatisticFormatKHR),
    value: VkPipelineExecutableStatisticValueKHR = @import("std").mem.zeroes(VkPipelineExecutableStatisticValueKHR),
};
pub const VkPipelineExecutableStatisticKHR = struct_VkPipelineExecutableStatisticKHR;
pub const struct_VkPipelineExecutableInternalRepresentationKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    name: [256]u8 = @import("std").mem.zeroes([256]u8),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    isText: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dataSize: usize = @import("std").mem.zeroes(usize),
    pData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkPipelineExecutableInternalRepresentationKHR = struct_VkPipelineExecutableInternalRepresentationKHR;
pub const PFN_vkGetPipelineExecutablePropertiesKHR = ?*const fn (VkDevice, [*c]const VkPipelineInfoKHR, [*c]u32, [*c]VkPipelineExecutablePropertiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetPipelineExecutableStatisticsKHR = ?*const fn (VkDevice, [*c]const VkPipelineExecutableInfoKHR, [*c]u32, [*c]VkPipelineExecutableStatisticKHR) callconv(.C) VkResult;
pub const PFN_vkGetPipelineExecutableInternalRepresentationsKHR = ?*const fn (VkDevice, [*c]const VkPipelineExecutableInfoKHR, [*c]u32, [*c]VkPipelineExecutableInternalRepresentationKHR) callconv(.C) VkResult;
pub extern fn vkGetPipelineExecutablePropertiesKHR(device: VkDevice, pPipelineInfo: [*c]const VkPipelineInfoKHR, pExecutableCount: [*c]u32, pProperties: [*c]VkPipelineExecutablePropertiesKHR) VkResult;
pub extern fn vkGetPipelineExecutableStatisticsKHR(device: VkDevice, pExecutableInfo: [*c]const VkPipelineExecutableInfoKHR, pStatisticCount: [*c]u32, pStatistics: [*c]VkPipelineExecutableStatisticKHR) VkResult;
pub extern fn vkGetPipelineExecutableInternalRepresentationsKHR(device: VkDevice, pExecutableInfo: [*c]const VkPipelineExecutableInfoKHR, pInternalRepresentationCount: [*c]u32, pInternalRepresentations: [*c]VkPipelineExecutableInternalRepresentationKHR) VkResult;
pub const VK_MEMORY_UNMAP_RESERVE_BIT_EXT: c_int = 1;
pub const VK_MEMORY_UNMAP_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkMemoryUnmapFlagBitsKHR = c_uint;
pub const VkMemoryUnmapFlagBitsKHR = enum_VkMemoryUnmapFlagBitsKHR;
pub const VkMemoryUnmapFlagsKHR = VkFlags;
pub const struct_VkMemoryMapInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkMemoryMapFlags = @import("std").mem.zeroes(VkMemoryMapFlags),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkMemoryMapInfoKHR = struct_VkMemoryMapInfoKHR;
pub const struct_VkMemoryUnmapInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkMemoryUnmapFlagsKHR = @import("std").mem.zeroes(VkMemoryUnmapFlagsKHR),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
};
pub const VkMemoryUnmapInfoKHR = struct_VkMemoryUnmapInfoKHR;
pub const PFN_vkMapMemory2KHR = ?*const fn (VkDevice, [*c]const VkMemoryMapInfoKHR, [*c]?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkUnmapMemory2KHR = ?*const fn (VkDevice, [*c]const VkMemoryUnmapInfoKHR) callconv(.C) VkResult;
pub extern fn vkMapMemory2KHR(device: VkDevice, pMemoryMapInfo: [*c]const VkMemoryMapInfoKHR, ppData: [*c]?*anyopaque) VkResult;
pub extern fn vkUnmapMemory2KHR(device: VkDevice, pMemoryUnmapInfo: [*c]const VkMemoryUnmapInfoKHR) VkResult;
pub const VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR = VkPhysicalDeviceShaderIntegerDotProductFeatures;
pub const VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR = VkPhysicalDeviceShaderIntegerDotProductProperties;
pub const struct_VkPipelineLibraryCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    libraryCount: u32 = @import("std").mem.zeroes(u32),
    pLibraries: [*c]const VkPipeline = @import("std").mem.zeroes([*c]const VkPipeline),
};
pub const VkPipelineLibraryCreateInfoKHR = struct_VkPipelineLibraryCreateInfoKHR;
pub const struct_VkPresentIdKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pPresentIds: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
};
pub const VkPresentIdKHR = struct_VkPresentIdKHR;
pub const struct_VkPhysicalDevicePresentIdFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentId: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePresentIdFeaturesKHR = struct_VkPhysicalDevicePresentIdFeaturesKHR;
pub const VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR: c_int = 0;
pub const VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR: c_int = 3;
pub const VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_TUNING_MODE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeTuningModeKHR = c_uint;
pub const VkVideoEncodeTuningModeKHR = enum_VkVideoEncodeTuningModeKHR;
pub const VK_VIDEO_ENCODE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeFlagBitsKHR = c_uint;
pub const VkVideoEncodeFlagBitsKHR = enum_VkVideoEncodeFlagBitsKHR;
pub const VkVideoEncodeFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_CAPABILITY_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_DETECTION_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeCapabilityFlagBitsKHR = c_uint;
pub const VkVideoEncodeCapabilityFlagBitsKHR = enum_VkVideoEncodeCapabilityFlagBitsKHR;
pub const VkVideoEncodeCapabilityFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR: c_int = 0;
pub const VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DISABLED_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_RATE_CONTROL_MODE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeRateControlModeFlagBitsKHR = c_uint;
pub const VkVideoEncodeRateControlModeFlagBitsKHR = enum_VkVideoEncodeRateControlModeFlagBitsKHR;
pub const VkVideoEncodeRateControlModeFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BUFFER_OFFSET_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BYTES_WRITTEN_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_HAS_OVERRIDES_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_FEEDBACK_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeFeedbackFlagBitsKHR = c_uint;
pub const VkVideoEncodeFeedbackFlagBitsKHR = enum_VkVideoEncodeFeedbackFlagBitsKHR;
pub const VkVideoEncodeFeedbackFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR: c_int = 0;
pub const VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_USAGE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeUsageFlagBitsKHR = c_uint;
pub const VkVideoEncodeUsageFlagBitsKHR = enum_VkVideoEncodeUsageFlagBitsKHR;
pub const VkVideoEncodeUsageFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR: c_int = 0;
pub const VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_CONTENT_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeContentFlagBitsKHR = c_uint;
pub const VkVideoEncodeContentFlagBitsKHR = enum_VkVideoEncodeContentFlagBitsKHR;
pub const VkVideoEncodeContentFlagsKHR = VkFlags;
pub const VkVideoEncodeRateControlFlagsKHR = VkFlags;
pub const struct_VkVideoEncodeInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoEncodeFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeFlagsKHR),
    dstBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    dstBufferOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    dstBufferRange: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    srcPictureResource: VkVideoPictureResourceInfoKHR = @import("std").mem.zeroes(VkVideoPictureResourceInfoKHR),
    pSetupReferenceSlot: [*c]const VkVideoReferenceSlotInfoKHR = @import("std").mem.zeroes([*c]const VkVideoReferenceSlotInfoKHR),
    referenceSlotCount: u32 = @import("std").mem.zeroes(u32),
    pReferenceSlots: [*c]const VkVideoReferenceSlotInfoKHR = @import("std").mem.zeroes([*c]const VkVideoReferenceSlotInfoKHR),
    precedingExternallyEncodedBytes: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeInfoKHR = struct_VkVideoEncodeInfoKHR;
pub const struct_VkVideoEncodeCapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkVideoEncodeCapabilityFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeCapabilityFlagsKHR),
    rateControlModes: VkVideoEncodeRateControlModeFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeRateControlModeFlagsKHR),
    maxRateControlLayers: u32 = @import("std").mem.zeroes(u32),
    maxBitrate: u64 = @import("std").mem.zeroes(u64),
    maxQualityLevels: u32 = @import("std").mem.zeroes(u32),
    encodeInputPictureGranularity: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    supportedEncodeFeedbackFlags: VkVideoEncodeFeedbackFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeFeedbackFlagsKHR),
};
pub const VkVideoEncodeCapabilitiesKHR = struct_VkVideoEncodeCapabilitiesKHR;
pub const struct_VkQueryPoolVideoEncodeFeedbackCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    encodeFeedbackFlags: VkVideoEncodeFeedbackFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeFeedbackFlagsKHR),
};
pub const VkQueryPoolVideoEncodeFeedbackCreateInfoKHR = struct_VkQueryPoolVideoEncodeFeedbackCreateInfoKHR;
pub const struct_VkVideoEncodeUsageInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    videoUsageHints: VkVideoEncodeUsageFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeUsageFlagsKHR),
    videoContentHints: VkVideoEncodeContentFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeContentFlagsKHR),
    tuningMode: VkVideoEncodeTuningModeKHR = @import("std").mem.zeroes(VkVideoEncodeTuningModeKHR),
};
pub const VkVideoEncodeUsageInfoKHR = struct_VkVideoEncodeUsageInfoKHR;
pub const struct_VkVideoEncodeRateControlLayerInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    averageBitrate: u64 = @import("std").mem.zeroes(u64),
    maxBitrate: u64 = @import("std").mem.zeroes(u64),
    frameRateNumerator: u32 = @import("std").mem.zeroes(u32),
    frameRateDenominator: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeRateControlLayerInfoKHR = struct_VkVideoEncodeRateControlLayerInfoKHR;
pub const struct_VkVideoEncodeRateControlInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoEncodeRateControlFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeRateControlFlagsKHR),
    rateControlMode: VkVideoEncodeRateControlModeFlagBitsKHR = @import("std").mem.zeroes(VkVideoEncodeRateControlModeFlagBitsKHR),
    layerCount: u32 = @import("std").mem.zeroes(u32),
    pLayers: [*c]const VkVideoEncodeRateControlLayerInfoKHR = @import("std").mem.zeroes([*c]const VkVideoEncodeRateControlLayerInfoKHR),
    virtualBufferSizeInMs: u32 = @import("std").mem.zeroes(u32),
    initialVirtualBufferSizeInMs: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeRateControlInfoKHR = struct_VkVideoEncodeRateControlInfoKHR;
pub const struct_VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pVideoProfile: [*c]const VkVideoProfileInfoKHR = @import("std").mem.zeroes([*c]const VkVideoProfileInfoKHR),
    qualityLevel: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR = struct_VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR;
pub const struct_VkVideoEncodeQualityLevelPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    preferredRateControlMode: VkVideoEncodeRateControlModeFlagBitsKHR = @import("std").mem.zeroes(VkVideoEncodeRateControlModeFlagBitsKHR),
    preferredRateControlLayerCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeQualityLevelPropertiesKHR = struct_VkVideoEncodeQualityLevelPropertiesKHR;
pub const struct_VkVideoEncodeQualityLevelInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    qualityLevel: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeQualityLevelInfoKHR = struct_VkVideoEncodeQualityLevelInfoKHR;
pub const struct_VkVideoEncodeSessionParametersGetInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    videoSessionParameters: VkVideoSessionParametersKHR = @import("std").mem.zeroes(VkVideoSessionParametersKHR),
};
pub const VkVideoEncodeSessionParametersGetInfoKHR = struct_VkVideoEncodeSessionParametersGetInfoKHR;
pub const struct_VkVideoEncodeSessionParametersFeedbackInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    hasOverrides: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkVideoEncodeSessionParametersFeedbackInfoKHR = struct_VkVideoEncodeSessionParametersFeedbackInfoKHR;
pub const PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR, [*c]VkVideoEncodeQualityLevelPropertiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetEncodedVideoSessionParametersKHR = ?*const fn (VkDevice, [*c]const VkVideoEncodeSessionParametersGetInfoKHR, [*c]VkVideoEncodeSessionParametersFeedbackInfoKHR, [*c]usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkCmdEncodeVideoKHR = ?*const fn (VkCommandBuffer, [*c]const VkVideoEncodeInfoKHR) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(physicalDevice: VkPhysicalDevice, pQualityLevelInfo: [*c]const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR, pQualityLevelProperties: [*c]VkVideoEncodeQualityLevelPropertiesKHR) VkResult;
pub extern fn vkGetEncodedVideoSessionParametersKHR(device: VkDevice, pVideoSessionParametersInfo: [*c]const VkVideoEncodeSessionParametersGetInfoKHR, pFeedbackInfo: [*c]VkVideoEncodeSessionParametersFeedbackInfoKHR, pDataSize: [*c]usize, pData: ?*anyopaque) VkResult;
pub extern fn vkCmdEncodeVideoKHR(commandBuffer: VkCommandBuffer, pEncodeInfo: [*c]const VkVideoEncodeInfoKHR) void;
pub const VkPipelineStageFlags2KHR = VkPipelineStageFlags2;
pub const VkPipelineStageFlagBits2KHR = VkPipelineStageFlagBits2;
pub const VkAccessFlags2KHR = VkAccessFlags2;
pub const VkAccessFlagBits2KHR = VkAccessFlagBits2;
pub const VkSubmitFlagBitsKHR = VkSubmitFlagBits;
pub const VkSubmitFlagsKHR = VkSubmitFlags;
pub const VkMemoryBarrier2KHR = VkMemoryBarrier2;
pub const VkBufferMemoryBarrier2KHR = VkBufferMemoryBarrier2;
pub const VkImageMemoryBarrier2KHR = VkImageMemoryBarrier2;
pub const VkDependencyInfoKHR = VkDependencyInfo;
pub const VkSubmitInfo2KHR = VkSubmitInfo2;
pub const VkSemaphoreSubmitInfoKHR = VkSemaphoreSubmitInfo;
pub const VkCommandBufferSubmitInfoKHR = VkCommandBufferSubmitInfo;
pub const VkPhysicalDeviceSynchronization2FeaturesKHR = VkPhysicalDeviceSynchronization2Features;
pub const struct_VkQueueFamilyCheckpointProperties2NV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    checkpointExecutionStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
};
pub const VkQueueFamilyCheckpointProperties2NV = struct_VkQueueFamilyCheckpointProperties2NV;
pub const struct_VkCheckpointData2NV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    stage: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    pCheckpointMarker: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkCheckpointData2NV = struct_VkCheckpointData2NV;
pub const PFN_vkCmdSetEvent2KHR = ?*const fn (VkCommandBuffer, VkEvent, [*c]const VkDependencyInfo) callconv(.C) void;
pub const PFN_vkCmdResetEvent2KHR = ?*const fn (VkCommandBuffer, VkEvent, VkPipelineStageFlags2) callconv(.C) void;
pub const PFN_vkCmdWaitEvents2KHR = ?*const fn (VkCommandBuffer, u32, [*c]const VkEvent, [*c]const VkDependencyInfo) callconv(.C) void;
pub const PFN_vkCmdPipelineBarrier2KHR = ?*const fn (VkCommandBuffer, [*c]const VkDependencyInfo) callconv(.C) void;
pub const PFN_vkCmdWriteTimestamp2KHR = ?*const fn (VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkQueueSubmit2KHR = ?*const fn (VkQueue, u32, [*c]const VkSubmitInfo2, VkFence) callconv(.C) VkResult;
pub const PFN_vkCmdWriteBufferMarker2AMD = ?*const fn (VkCommandBuffer, VkPipelineStageFlags2, VkBuffer, VkDeviceSize, u32) callconv(.C) void;
pub const PFN_vkGetQueueCheckpointData2NV = ?*const fn (VkQueue, [*c]u32, [*c]VkCheckpointData2NV) callconv(.C) void;
pub extern fn vkCmdSetEvent2KHR(commandBuffer: VkCommandBuffer, event: VkEvent, pDependencyInfo: [*c]const VkDependencyInfo) void;
pub extern fn vkCmdResetEvent2KHR(commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags2) void;
pub extern fn vkCmdWaitEvents2KHR(commandBuffer: VkCommandBuffer, eventCount: u32, pEvents: [*c]const VkEvent, pDependencyInfos: [*c]const VkDependencyInfo) void;
pub extern fn vkCmdPipelineBarrier2KHR(commandBuffer: VkCommandBuffer, pDependencyInfo: [*c]const VkDependencyInfo) void;
pub extern fn vkCmdWriteTimestamp2KHR(commandBuffer: VkCommandBuffer, stage: VkPipelineStageFlags2, queryPool: VkQueryPool, query: u32) void;
pub extern fn vkQueueSubmit2KHR(queue: VkQueue, submitCount: u32, pSubmits: [*c]const VkSubmitInfo2, fence: VkFence) VkResult;
pub extern fn vkCmdWriteBufferMarker2AMD(commandBuffer: VkCommandBuffer, stage: VkPipelineStageFlags2, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, marker: u32) void;
pub extern fn vkGetQueueCheckpointData2NV(queue: VkQueue, pCheckpointDataCount: [*c]u32, pCheckpointData: [*c]VkCheckpointData2NV) void;
pub const struct_VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentShaderBarycentric: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR = struct_VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR;
pub const struct_VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    triStripVertexOrderIndependentOfProvokingVertex: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR = struct_VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR;
pub const struct_VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderSubgroupUniformControlFlow: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR = struct_VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR;
pub const VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR = VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;
pub const struct_VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    workgroupMemoryExplicitLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
    workgroupMemoryExplicitLayoutScalarBlockLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
    workgroupMemoryExplicitLayout8BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    workgroupMemoryExplicitLayout16BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR = struct_VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR;
pub const VkCopyBufferInfo2KHR = VkCopyBufferInfo2;
pub const VkCopyImageInfo2KHR = VkCopyImageInfo2;
pub const VkCopyBufferToImageInfo2KHR = VkCopyBufferToImageInfo2;
pub const VkCopyImageToBufferInfo2KHR = VkCopyImageToBufferInfo2;
pub const VkBlitImageInfo2KHR = VkBlitImageInfo2;
pub const VkResolveImageInfo2KHR = VkResolveImageInfo2;
pub const VkBufferCopy2KHR = VkBufferCopy2;
pub const VkImageCopy2KHR = VkImageCopy2;
pub const VkImageBlit2KHR = VkImageBlit2;
pub const VkBufferImageCopy2KHR = VkBufferImageCopy2;
pub const VkImageResolve2KHR = VkImageResolve2;
pub const PFN_vkCmdCopyBuffer2KHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyBufferInfo2) callconv(.C) void;
pub const PFN_vkCmdCopyImage2KHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyImageInfo2) callconv(.C) void;
pub const PFN_vkCmdCopyBufferToImage2KHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyBufferToImageInfo2) callconv(.C) void;
pub const PFN_vkCmdCopyImageToBuffer2KHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyImageToBufferInfo2) callconv(.C) void;
pub const PFN_vkCmdBlitImage2KHR = ?*const fn (VkCommandBuffer, [*c]const VkBlitImageInfo2) callconv(.C) void;
pub const PFN_vkCmdResolveImage2KHR = ?*const fn (VkCommandBuffer, [*c]const VkResolveImageInfo2) callconv(.C) void;
pub extern fn vkCmdCopyBuffer2KHR(commandBuffer: VkCommandBuffer, pCopyBufferInfo: [*c]const VkCopyBufferInfo2) void;
pub extern fn vkCmdCopyImage2KHR(commandBuffer: VkCommandBuffer, pCopyImageInfo: [*c]const VkCopyImageInfo2) void;
pub extern fn vkCmdCopyBufferToImage2KHR(commandBuffer: VkCommandBuffer, pCopyBufferToImageInfo: [*c]const VkCopyBufferToImageInfo2) void;
pub extern fn vkCmdCopyImageToBuffer2KHR(commandBuffer: VkCommandBuffer, pCopyImageToBufferInfo: [*c]const VkCopyImageToBufferInfo2) void;
pub extern fn vkCmdBlitImage2KHR(commandBuffer: VkCommandBuffer, pBlitImageInfo: [*c]const VkBlitImageInfo2) void;
pub extern fn vkCmdResolveImage2KHR(commandBuffer: VkCommandBuffer, pResolveImageInfo: [*c]const VkResolveImageInfo2) void;
pub const VkFormatFeatureFlags2KHR = VkFormatFeatureFlags2;
pub const VkFormatFeatureFlagBits2KHR = VkFormatFeatureFlagBits2;
pub const VkFormatProperties3KHR = VkFormatProperties3;
pub const struct_VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingMaintenance1: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rayTracingPipelineTraceRaysIndirect2: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR = struct_VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR;
pub const struct_VkTraceRaysIndirectCommand2KHR = extern struct {
    raygenShaderRecordAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    raygenShaderRecordSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    missShaderBindingTableAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    missShaderBindingTableSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    missShaderBindingTableStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    hitShaderBindingTableAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    hitShaderBindingTableSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    hitShaderBindingTableStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    callableShaderBindingTableAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    callableShaderBindingTableSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    callableShaderBindingTableStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
    depth: u32 = @import("std").mem.zeroes(u32),
};
pub const VkTraceRaysIndirectCommand2KHR = struct_VkTraceRaysIndirectCommand2KHR;
pub const PFN_vkCmdTraceRaysIndirect2KHR = ?*const fn (VkCommandBuffer, VkDeviceAddress) callconv(.C) void;
pub extern fn vkCmdTraceRaysIndirect2KHR(commandBuffer: VkCommandBuffer, indirectDeviceAddress: VkDeviceAddress) void;
pub const VkPhysicalDeviceMaintenance4FeaturesKHR = VkPhysicalDeviceMaintenance4Features;
pub const VkPhysicalDeviceMaintenance4PropertiesKHR = VkPhysicalDeviceMaintenance4Properties;
pub const VkDeviceBufferMemoryRequirementsKHR = VkDeviceBufferMemoryRequirements;
pub const VkDeviceImageMemoryRequirementsKHR = VkDeviceImageMemoryRequirements;
pub const PFN_vkGetDeviceBufferMemoryRequirementsKHR = ?*const fn (VkDevice, [*c]const VkDeviceBufferMemoryRequirements, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetDeviceImageMemoryRequirementsKHR = ?*const fn (VkDevice, [*c]const VkDeviceImageMemoryRequirements, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetDeviceImageSparseMemoryRequirementsKHR = ?*const fn (VkDevice, [*c]const VkDeviceImageMemoryRequirements, [*c]u32, [*c]VkSparseImageMemoryRequirements2) callconv(.C) void;
pub extern fn vkGetDeviceBufferMemoryRequirementsKHR(device: VkDevice, pInfo: [*c]const VkDeviceBufferMemoryRequirements, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetDeviceImageMemoryRequirementsKHR(device: VkDevice, pInfo: [*c]const VkDeviceImageMemoryRequirements, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetDeviceImageSparseMemoryRequirementsKHR(device: VkDevice, pInfo: [*c]const VkDeviceImageMemoryRequirements, pSparseMemoryRequirementCount: [*c]u32, pSparseMemoryRequirements: [*c]VkSparseImageMemoryRequirements2) void;
pub const struct_VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderSubgroupRotate: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSubgroupRotateClustered: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR = struct_VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR;
pub const struct_VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderMaximalReconvergence: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR = struct_VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR;
pub const VkPipelineCreateFlags2KHR = VkFlags64;
pub const VkPipelineCreateFlagBits2KHR = VkFlags64;
pub const VK_PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT_KHR: VkPipelineCreateFlagBits2KHR = 1;
pub const VK_PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT_KHR: VkPipelineCreateFlagBits2KHR = 2;
pub const VK_PIPELINE_CREATE_2_DERIVATIVE_BIT_KHR: VkPipelineCreateFlagBits2KHR = 4;
pub const VK_PIPELINE_CREATE_2_ENABLE_LEGACY_DITHERING_BIT_EXT: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 17179869184)))));
pub const VK_PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR: VkPipelineCreateFlagBits2KHR = 8;
pub const VK_PIPELINE_CREATE_2_DISPATCH_BASE_BIT_KHR: VkPipelineCreateFlagBits2KHR = 16;
pub const VK_PIPELINE_CREATE_2_DEFER_COMPILE_BIT_NV: VkPipelineCreateFlagBits2KHR = 32;
pub const VK_PIPELINE_CREATE_2_CAPTURE_STATISTICS_BIT_KHR: VkPipelineCreateFlagBits2KHR = 64;
pub const VK_PIPELINE_CREATE_2_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR: VkPipelineCreateFlagBits2KHR = 128;
pub const VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_KHR: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 256)))));
pub const VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT_KHR: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 512)))));
pub const VK_PIPELINE_CREATE_2_LINK_TIME_OPTIMIZATION_BIT_EXT: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1024)))));
pub const VK_PIPELINE_CREATE_2_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8388608)))));
pub const VK_PIPELINE_CREATE_2_LIBRARY_BIT_KHR: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2048)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_AABBS_BIT_KHR: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8192)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16384)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 32768)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 65536)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 131072)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 524288)))));
pub const VK_PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_NV: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 262144)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_ALLOW_MOTION_BIT_NV: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1048576)))));
pub const VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2097152)))));
pub const VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4194304)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16777216)))));
pub const VK_PIPELINE_CREATE_2_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 33554432)))));
pub const VK_PIPELINE_CREATE_2_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 67108864)))));
pub const VK_PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT_EXT: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 134217728)))));
pub const VK_PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT_EXT: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1073741824)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_DISPLACEMENT_MICROMAP_BIT_NV: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 268435456)))));
pub const VK_PIPELINE_CREATE_2_DESCRIPTOR_BUFFER_BIT_EXT: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 536870912)))));
pub const VkBufferUsageFlags2KHR = VkFlags64;
pub const VkBufferUsageFlagBits2KHR = VkFlags64;
pub const VK_BUFFER_USAGE_2_TRANSFER_SRC_BIT_KHR: VkBufferUsageFlagBits2KHR = 1;
pub const VK_BUFFER_USAGE_2_TRANSFER_DST_BIT_KHR: VkBufferUsageFlagBits2KHR = 2;
pub const VK_BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR: VkBufferUsageFlagBits2KHR = 4;
pub const VK_BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT_KHR: VkBufferUsageFlagBits2KHR = 8;
pub const VK_BUFFER_USAGE_2_UNIFORM_BUFFER_BIT_KHR: VkBufferUsageFlagBits2KHR = 16;
pub const VK_BUFFER_USAGE_2_STORAGE_BUFFER_BIT_KHR: VkBufferUsageFlagBits2KHR = 32;
pub const VK_BUFFER_USAGE_2_INDEX_BUFFER_BIT_KHR: VkBufferUsageFlagBits2KHR = 64;
pub const VK_BUFFER_USAGE_2_VERTEX_BUFFER_BIT_KHR: VkBufferUsageFlagBits2KHR = 128;
pub const VK_BUFFER_USAGE_2_INDIRECT_BUFFER_BIT_KHR: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 256)))));
pub const VK_BUFFER_USAGE_2_EXECUTION_GRAPH_SCRATCH_BIT_AMDX: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 33554432)))));
pub const VK_BUFFER_USAGE_2_CONDITIONAL_RENDERING_BIT_EXT: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 512)))));
pub const VK_BUFFER_USAGE_2_SHADER_BINDING_TABLE_BIT_KHR: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1024)))));
pub const VK_BUFFER_USAGE_2_RAY_TRACING_BIT_NV: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1024)))));
pub const VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2048)))));
pub const VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_BUFFER_USAGE_2_VIDEO_DECODE_SRC_BIT_KHR: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8192)))));
pub const VK_BUFFER_USAGE_2_VIDEO_DECODE_DST_BIT_KHR: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16384)))));
pub const VK_BUFFER_USAGE_2_VIDEO_ENCODE_DST_BIT_KHR: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 32768)))));
pub const VK_BUFFER_USAGE_2_VIDEO_ENCODE_SRC_BIT_KHR: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 65536)))));
pub const VK_BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT_KHR: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 131072)))));
pub const VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 524288)))));
pub const VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1048576)))));
pub const VK_BUFFER_USAGE_2_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2097152)))));
pub const VK_BUFFER_USAGE_2_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4194304)))));
pub const VK_BUFFER_USAGE_2_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 67108864)))));
pub const VK_BUFFER_USAGE_2_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8388608)))));
pub const VK_BUFFER_USAGE_2_MICROMAP_STORAGE_BIT_EXT: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16777216)))));
pub const struct_VkPhysicalDeviceMaintenance5FeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maintenance5: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMaintenance5FeaturesKHR = struct_VkPhysicalDeviceMaintenance5FeaturesKHR;
pub const struct_VkPhysicalDeviceMaintenance5PropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    earlyFragmentMultisampleCoverageAfterSampleCounting: VkBool32 = @import("std").mem.zeroes(VkBool32),
    earlyFragmentSampleMaskTestBeforeSampleCounting: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthStencilSwizzleOneSupport: VkBool32 = @import("std").mem.zeroes(VkBool32),
    polygonModePointSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    nonStrictSinglePixelWideLinesUseParallelogram: VkBool32 = @import("std").mem.zeroes(VkBool32),
    nonStrictWideLinesUseParallelogram: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMaintenance5PropertiesKHR = struct_VkPhysicalDeviceMaintenance5PropertiesKHR;
pub const struct_VkRenderingAreaInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    viewMask: u32 = @import("std").mem.zeroes(u32),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachmentFormats: [*c]const VkFormat = @import("std").mem.zeroes([*c]const VkFormat),
    depthAttachmentFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    stencilAttachmentFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
};
pub const VkRenderingAreaInfoKHR = struct_VkRenderingAreaInfoKHR;
pub const struct_VkImageSubresource2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageSubresource: VkImageSubresource = @import("std").mem.zeroes(VkImageSubresource),
};
pub const VkImageSubresource2KHR = struct_VkImageSubresource2KHR;
pub const struct_VkDeviceImageSubresourceInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pCreateInfo: [*c]const VkImageCreateInfo = @import("std").mem.zeroes([*c]const VkImageCreateInfo),
    pSubresource: [*c]const VkImageSubresource2KHR = @import("std").mem.zeroes([*c]const VkImageSubresource2KHR),
};
pub const VkDeviceImageSubresourceInfoKHR = struct_VkDeviceImageSubresourceInfoKHR;
pub const struct_VkSubresourceLayout2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    subresourceLayout: VkSubresourceLayout = @import("std").mem.zeroes(VkSubresourceLayout),
};
pub const VkSubresourceLayout2KHR = struct_VkSubresourceLayout2KHR;
pub const struct_VkPipelineCreateFlags2CreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCreateFlags2KHR = @import("std").mem.zeroes(VkPipelineCreateFlags2KHR),
};
pub const VkPipelineCreateFlags2CreateInfoKHR = struct_VkPipelineCreateFlags2CreateInfoKHR;
pub const struct_VkBufferUsageFlags2CreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    usage: VkBufferUsageFlags2KHR = @import("std").mem.zeroes(VkBufferUsageFlags2KHR),
};
pub const VkBufferUsageFlags2CreateInfoKHR = struct_VkBufferUsageFlags2CreateInfoKHR;
pub const PFN_vkCmdBindIndexBuffer2KHR = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, VkIndexType) callconv(.C) void;
pub const PFN_vkGetRenderingAreaGranularityKHR = ?*const fn (VkDevice, [*c]const VkRenderingAreaInfoKHR, [*c]VkExtent2D) callconv(.C) void;
pub const PFN_vkGetDeviceImageSubresourceLayoutKHR = ?*const fn (VkDevice, [*c]const VkDeviceImageSubresourceInfoKHR, [*c]VkSubresourceLayout2KHR) callconv(.C) void;
pub const PFN_vkGetImageSubresourceLayout2KHR = ?*const fn (VkDevice, VkImage, [*c]const VkImageSubresource2KHR, [*c]VkSubresourceLayout2KHR) callconv(.C) void;
pub extern fn vkCmdBindIndexBuffer2KHR(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, size: VkDeviceSize, indexType: VkIndexType) void;
pub extern fn vkGetRenderingAreaGranularityKHR(device: VkDevice, pRenderingAreaInfo: [*c]const VkRenderingAreaInfoKHR, pGranularity: [*c]VkExtent2D) void;
pub extern fn vkGetDeviceImageSubresourceLayoutKHR(device: VkDevice, pInfo: [*c]const VkDeviceImageSubresourceInfoKHR, pLayout: [*c]VkSubresourceLayout2KHR) void;
pub extern fn vkGetImageSubresourceLayout2KHR(device: VkDevice, image: VkImage, pSubresource: [*c]const VkImageSubresource2KHR, pLayout: [*c]VkSubresourceLayout2KHR) void;
pub const struct_VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingPositionFetch: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR = struct_VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR;
pub const VK_COMPONENT_TYPE_FLOAT16_KHR: c_int = 0;
pub const VK_COMPONENT_TYPE_FLOAT32_KHR: c_int = 1;
pub const VK_COMPONENT_TYPE_FLOAT64_KHR: c_int = 2;
pub const VK_COMPONENT_TYPE_SINT8_KHR: c_int = 3;
pub const VK_COMPONENT_TYPE_SINT16_KHR: c_int = 4;
pub const VK_COMPONENT_TYPE_SINT32_KHR: c_int = 5;
pub const VK_COMPONENT_TYPE_SINT64_KHR: c_int = 6;
pub const VK_COMPONENT_TYPE_UINT8_KHR: c_int = 7;
pub const VK_COMPONENT_TYPE_UINT16_KHR: c_int = 8;
pub const VK_COMPONENT_TYPE_UINT32_KHR: c_int = 9;
pub const VK_COMPONENT_TYPE_UINT64_KHR: c_int = 10;
pub const VK_COMPONENT_TYPE_FLOAT16_NV: c_int = 0;
pub const VK_COMPONENT_TYPE_FLOAT32_NV: c_int = 1;
pub const VK_COMPONENT_TYPE_FLOAT64_NV: c_int = 2;
pub const VK_COMPONENT_TYPE_SINT8_NV: c_int = 3;
pub const VK_COMPONENT_TYPE_SINT16_NV: c_int = 4;
pub const VK_COMPONENT_TYPE_SINT32_NV: c_int = 5;
pub const VK_COMPONENT_TYPE_SINT64_NV: c_int = 6;
pub const VK_COMPONENT_TYPE_UINT8_NV: c_int = 7;
pub const VK_COMPONENT_TYPE_UINT16_NV: c_int = 8;
pub const VK_COMPONENT_TYPE_UINT32_NV: c_int = 9;
pub const VK_COMPONENT_TYPE_UINT64_NV: c_int = 10;
pub const VK_COMPONENT_TYPE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkComponentTypeKHR = c_uint;
pub const VkComponentTypeKHR = enum_VkComponentTypeKHR;
pub const VK_SCOPE_DEVICE_KHR: c_int = 1;
pub const VK_SCOPE_WORKGROUP_KHR: c_int = 2;
pub const VK_SCOPE_SUBGROUP_KHR: c_int = 3;
pub const VK_SCOPE_QUEUE_FAMILY_KHR: c_int = 5;
pub const VK_SCOPE_DEVICE_NV: c_int = 1;
pub const VK_SCOPE_WORKGROUP_NV: c_int = 2;
pub const VK_SCOPE_SUBGROUP_NV: c_int = 3;
pub const VK_SCOPE_QUEUE_FAMILY_NV: c_int = 5;
pub const VK_SCOPE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkScopeKHR = c_uint;
pub const VkScopeKHR = enum_VkScopeKHR;
pub const struct_VkCooperativeMatrixPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    MSize: u32 = @import("std").mem.zeroes(u32),
    NSize: u32 = @import("std").mem.zeroes(u32),
    KSize: u32 = @import("std").mem.zeroes(u32),
    AType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    BType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    CType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    ResultType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    saturatingAccumulation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    scope: VkScopeKHR = @import("std").mem.zeroes(VkScopeKHR),
};
pub const VkCooperativeMatrixPropertiesKHR = struct_VkCooperativeMatrixPropertiesKHR;
pub const struct_VkPhysicalDeviceCooperativeMatrixFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cooperativeMatrix: VkBool32 = @import("std").mem.zeroes(VkBool32),
    cooperativeMatrixRobustBufferAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCooperativeMatrixFeaturesKHR = struct_VkPhysicalDeviceCooperativeMatrixFeaturesKHR;
pub const struct_VkPhysicalDeviceCooperativeMatrixPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cooperativeMatrixSupportedStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
};
pub const VkPhysicalDeviceCooperativeMatrixPropertiesKHR = struct_VkPhysicalDeviceCooperativeMatrixPropertiesKHR;
pub const PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkCooperativeMatrixPropertiesKHR) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(physicalDevice: VkPhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]VkCooperativeMatrixPropertiesKHR) VkResult;
pub const STD_VIDEO_AV1_PROFILE_MAIN: c_int = 0;
pub const STD_VIDEO_AV1_PROFILE_HIGH: c_int = 1;
pub const STD_VIDEO_AV1_PROFILE_PROFESSIONAL: c_int = 2;
pub const STD_VIDEO_AV1_PROFILE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_PROFILE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1Profile = c_uint;
pub const StdVideoAV1Profile = enum_StdVideoAV1Profile;
pub const STD_VIDEO_AV1_LEVEL_2_0: c_int = 0;
pub const STD_VIDEO_AV1_LEVEL_2_1: c_int = 1;
pub const STD_VIDEO_AV1_LEVEL_2_2: c_int = 2;
pub const STD_VIDEO_AV1_LEVEL_2_3: c_int = 3;
pub const STD_VIDEO_AV1_LEVEL_3_0: c_int = 4;
pub const STD_VIDEO_AV1_LEVEL_3_1: c_int = 5;
pub const STD_VIDEO_AV1_LEVEL_3_2: c_int = 6;
pub const STD_VIDEO_AV1_LEVEL_3_3: c_int = 7;
pub const STD_VIDEO_AV1_LEVEL_4_0: c_int = 8;
pub const STD_VIDEO_AV1_LEVEL_4_1: c_int = 9;
pub const STD_VIDEO_AV1_LEVEL_4_2: c_int = 10;
pub const STD_VIDEO_AV1_LEVEL_4_3: c_int = 11;
pub const STD_VIDEO_AV1_LEVEL_5_0: c_int = 12;
pub const STD_VIDEO_AV1_LEVEL_5_1: c_int = 13;
pub const STD_VIDEO_AV1_LEVEL_5_2: c_int = 14;
pub const STD_VIDEO_AV1_LEVEL_5_3: c_int = 15;
pub const STD_VIDEO_AV1_LEVEL_6_0: c_int = 16;
pub const STD_VIDEO_AV1_LEVEL_6_1: c_int = 17;
pub const STD_VIDEO_AV1_LEVEL_6_2: c_int = 18;
pub const STD_VIDEO_AV1_LEVEL_6_3: c_int = 19;
pub const STD_VIDEO_AV1_LEVEL_7_0: c_int = 20;
pub const STD_VIDEO_AV1_LEVEL_7_1: c_int = 21;
pub const STD_VIDEO_AV1_LEVEL_7_2: c_int = 22;
pub const STD_VIDEO_AV1_LEVEL_7_3: c_int = 23;
pub const STD_VIDEO_AV1_LEVEL_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_LEVEL_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1Level = c_uint;
pub const StdVideoAV1Level = enum_StdVideoAV1Level;
pub const STD_VIDEO_AV1_FRAME_TYPE_KEY: c_int = 0;
pub const STD_VIDEO_AV1_FRAME_TYPE_INTER: c_int = 1;
pub const STD_VIDEO_AV1_FRAME_TYPE_INTRA_ONLY: c_int = 2;
pub const STD_VIDEO_AV1_FRAME_TYPE_SWITCH: c_int = 3;
pub const STD_VIDEO_AV1_FRAME_TYPE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_FRAME_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1FrameType = c_uint;
pub const StdVideoAV1FrameType = enum_StdVideoAV1FrameType;
pub const STD_VIDEO_AV1_REFERENCE_NAME_INTRA_FRAME: c_int = 0;
pub const STD_VIDEO_AV1_REFERENCE_NAME_LAST_FRAME: c_int = 1;
pub const STD_VIDEO_AV1_REFERENCE_NAME_LAST2_FRAME: c_int = 2;
pub const STD_VIDEO_AV1_REFERENCE_NAME_LAST3_FRAME: c_int = 3;
pub const STD_VIDEO_AV1_REFERENCE_NAME_GOLDEN_FRAME: c_int = 4;
pub const STD_VIDEO_AV1_REFERENCE_NAME_BWDREF_FRAME: c_int = 5;
pub const STD_VIDEO_AV1_REFERENCE_NAME_ALTREF2_FRAME: c_int = 6;
pub const STD_VIDEO_AV1_REFERENCE_NAME_ALTREF_FRAME: c_int = 7;
pub const STD_VIDEO_AV1_REFERENCE_NAME_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_REFERENCE_NAME_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1ReferenceName = c_uint;
pub const StdVideoAV1ReferenceName = enum_StdVideoAV1ReferenceName;
pub const STD_VIDEO_AV1_INTERPOLATION_FILTER_EIGHTTAP: c_int = 0;
pub const STD_VIDEO_AV1_INTERPOLATION_FILTER_EIGHTTAP_SMOOTH: c_int = 1;
pub const STD_VIDEO_AV1_INTERPOLATION_FILTER_EIGHTTAP_SHARP: c_int = 2;
pub const STD_VIDEO_AV1_INTERPOLATION_FILTER_BILINEAR: c_int = 3;
pub const STD_VIDEO_AV1_INTERPOLATION_FILTER_SWITCHABLE: c_int = 4;
pub const STD_VIDEO_AV1_INTERPOLATION_FILTER_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_INTERPOLATION_FILTER_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1InterpolationFilter = c_uint;
pub const StdVideoAV1InterpolationFilter = enum_StdVideoAV1InterpolationFilter;
pub const STD_VIDEO_AV1_TX_MODE_ONLY_4X4: c_int = 0;
pub const STD_VIDEO_AV1_TX_MODE_LARGEST: c_int = 1;
pub const STD_VIDEO_AV1_TX_MODE_SELECT: c_int = 2;
pub const STD_VIDEO_AV1_TX_MODE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_TX_MODE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1TxMode = c_uint;
pub const StdVideoAV1TxMode = enum_StdVideoAV1TxMode;
pub const STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_NONE: c_int = 0;
pub const STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_WIENER: c_int = 1;
pub const STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_SGRPROJ: c_int = 2;
pub const STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_SWITCHABLE: c_int = 3;
pub const STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1FrameRestorationType = c_uint;
pub const StdVideoAV1FrameRestorationType = enum_StdVideoAV1FrameRestorationType;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_BT_709: c_int = 1;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_BT_UNSPECIFIED: c_int = 2;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_BT_470_M: c_int = 4;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_BT_470_B_G: c_int = 5;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_BT_601: c_int = 6;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_SMPTE_240: c_int = 7;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_GENERIC_FILM: c_int = 8;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_BT_2020: c_int = 9;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_XYZ: c_int = 10;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_SMPTE_431: c_int = 11;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_SMPTE_432: c_int = 12;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_EBU_3213: c_int = 22;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1ColorPrimaries = c_uint;
pub const StdVideoAV1ColorPrimaries = enum_StdVideoAV1ColorPrimaries;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_RESERVED_0: c_int = 0;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_709: c_int = 1;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_UNSPECIFIED: c_int = 2;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_RESERVED_3: c_int = 3;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_470_M: c_int = 4;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_470_B_G: c_int = 5;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_601: c_int = 6;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SMPTE_240: c_int = 7;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_LINEAR: c_int = 8;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_LOG_100: c_int = 9;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_LOG_100_SQRT10: c_int = 10;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_IEC_61966: c_int = 11;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_1361: c_int = 12;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SRGB: c_int = 13;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_2020_10_BIT: c_int = 14;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_2020_12_BIT: c_int = 15;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SMPTE_2084: c_int = 16;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SMPTE_428: c_int = 17;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_HLG: c_int = 18;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1TransferCharacteristics = c_uint;
pub const StdVideoAV1TransferCharacteristics = enum_StdVideoAV1TransferCharacteristics;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_IDENTITY: c_int = 0;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_709: c_int = 1;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_UNSPECIFIED: c_int = 2;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_RESERVED_3: c_int = 3;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_FCC: c_int = 4;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_470_B_G: c_int = 5;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_601: c_int = 6;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_SMPTE_240: c_int = 7;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_SMPTE_YCGCO: c_int = 8;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_2020_NCL: c_int = 9;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_2020_CL: c_int = 10;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_SMPTE_2085: c_int = 11;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_CHROMAT_NCL: c_int = 12;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_CHROMAT_CL: c_int = 13;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_ICTCP: c_int = 14;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1MatrixCoefficients = c_uint;
pub const StdVideoAV1MatrixCoefficients = enum_StdVideoAV1MatrixCoefficients;
pub const STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_UNKNOWN: c_int = 0;
pub const STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_VERTICAL: c_int = 1;
pub const STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_COLOCATED: c_int = 2;
pub const STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_RESERVED: c_int = 3;
pub const STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1ChromaSamplePosition = c_uint;
pub const StdVideoAV1ChromaSamplePosition = enum_StdVideoAV1ChromaSamplePosition;
// /usr/include/vk_video/vulkan_video_codec_av1std.h:203:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoAV1ColorConfigFlags = opaque {};
pub const StdVideoAV1ColorConfigFlags = struct_StdVideoAV1ColorConfigFlags;
pub const struct_StdVideoAV1ColorConfig = extern struct {
    flags: StdVideoAV1ColorConfigFlags = @import("std").mem.zeroes(StdVideoAV1ColorConfigFlags),
    BitDepth: u8 = @import("std").mem.zeroes(u8),
    subsampling_x: u8 = @import("std").mem.zeroes(u8),
    subsampling_y: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    color_primaries: StdVideoAV1ColorPrimaries = @import("std").mem.zeroes(StdVideoAV1ColorPrimaries),
    transfer_characteristics: StdVideoAV1TransferCharacteristics = @import("std").mem.zeroes(StdVideoAV1TransferCharacteristics),
    matrix_coefficients: StdVideoAV1MatrixCoefficients = @import("std").mem.zeroes(StdVideoAV1MatrixCoefficients),
    chroma_sample_position: StdVideoAV1ChromaSamplePosition = @import("std").mem.zeroes(StdVideoAV1ChromaSamplePosition),
};
pub const StdVideoAV1ColorConfig = struct_StdVideoAV1ColorConfig;
// /usr/include/vk_video/vulkan_video_codec_av1std.h:223:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoAV1TimingInfoFlags = opaque {};
pub const StdVideoAV1TimingInfoFlags = struct_StdVideoAV1TimingInfoFlags;
pub const struct_StdVideoAV1TimingInfo = extern struct {
    flags: StdVideoAV1TimingInfoFlags = @import("std").mem.zeroes(StdVideoAV1TimingInfoFlags),
    num_units_in_display_tick: u32 = @import("std").mem.zeroes(u32),
    time_scale: u32 = @import("std").mem.zeroes(u32),
    num_ticks_per_picture_minus_1: u32 = @import("std").mem.zeroes(u32),
};
pub const StdVideoAV1TimingInfo = struct_StdVideoAV1TimingInfo;
// /usr/include/vk_video/vulkan_video_codec_av1std.h:235:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoAV1LoopFilterFlags = opaque {};
pub const StdVideoAV1LoopFilterFlags = struct_StdVideoAV1LoopFilterFlags;
pub const struct_StdVideoAV1LoopFilter = extern struct {
    flags: StdVideoAV1LoopFilterFlags = @import("std").mem.zeroes(StdVideoAV1LoopFilterFlags),
    loop_filter_level: [4]u8 = @import("std").mem.zeroes([4]u8),
    loop_filter_sharpness: u8 = @import("std").mem.zeroes(u8),
    update_ref_delta: u8 = @import("std").mem.zeroes(u8),
    loop_filter_ref_deltas: [8]i8 = @import("std").mem.zeroes([8]i8),
    update_mode_delta: u8 = @import("std").mem.zeroes(u8),
    loop_filter_mode_deltas: [2]i8 = @import("std").mem.zeroes([2]i8),
};
pub const StdVideoAV1LoopFilter = struct_StdVideoAV1LoopFilter;
// /usr/include/vk_video/vulkan_video_codec_av1std.h:251:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoAV1QuantizationFlags = opaque {};
pub const StdVideoAV1QuantizationFlags = struct_StdVideoAV1QuantizationFlags;
pub const struct_StdVideoAV1Quantization = extern struct {
    flags: StdVideoAV1QuantizationFlags = @import("std").mem.zeroes(StdVideoAV1QuantizationFlags),
    base_q_idx: u8 = @import("std").mem.zeroes(u8),
    DeltaQYDc: i8 = @import("std").mem.zeroes(i8),
    DeltaQUDc: i8 = @import("std").mem.zeroes(i8),
    DeltaQUAc: i8 = @import("std").mem.zeroes(i8),
    DeltaQVDc: i8 = @import("std").mem.zeroes(i8),
    DeltaQVAc: i8 = @import("std").mem.zeroes(i8),
    qm_y: u8 = @import("std").mem.zeroes(u8),
    qm_u: u8 = @import("std").mem.zeroes(u8),
    qm_v: u8 = @import("std").mem.zeroes(u8),
};
pub const StdVideoAV1Quantization = struct_StdVideoAV1Quantization;
pub const struct_StdVideoAV1Segmentation = extern struct {
    FeatureEnabled: [8]u8 = @import("std").mem.zeroes([8]u8),
    FeatureData: [8][8]i16 = @import("std").mem.zeroes([8][8]i16),
};
pub const StdVideoAV1Segmentation = struct_StdVideoAV1Segmentation;
// /usr/include/vk_video/vulkan_video_codec_av1std.h:275:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoAV1TileInfoFlags = opaque {};
pub const StdVideoAV1TileInfoFlags = struct_StdVideoAV1TileInfoFlags;
pub const struct_StdVideoAV1TileInfo = extern struct {
    flags: StdVideoAV1TileInfoFlags = @import("std").mem.zeroes(StdVideoAV1TileInfoFlags),
    TileCols: u8 = @import("std").mem.zeroes(u8),
    TileRows: u8 = @import("std").mem.zeroes(u8),
    context_update_tile_id: u16 = @import("std").mem.zeroes(u16),
    tile_size_bytes_minus_1: u8 = @import("std").mem.zeroes(u8),
    reserved1: [7]u8 = @import("std").mem.zeroes([7]u8),
    pMiColStarts: [*c]const u16 = @import("std").mem.zeroes([*c]const u16),
    pMiRowStarts: [*c]const u16 = @import("std").mem.zeroes([*c]const u16),
    pWidthInSbsMinus1: [*c]const u16 = @import("std").mem.zeroes([*c]const u16),
    pHeightInSbsMinus1: [*c]const u16 = @import("std").mem.zeroes([*c]const u16),
};
pub const StdVideoAV1TileInfo = struct_StdVideoAV1TileInfo;
pub const struct_StdVideoAV1CDEF = extern struct {
    cdef_damping_minus_3: u8 = @import("std").mem.zeroes(u8),
    cdef_bits: u8 = @import("std").mem.zeroes(u8),
    cdef_y_pri_strength: [8]u8 = @import("std").mem.zeroes([8]u8),
    cdef_y_sec_strength: [8]u8 = @import("std").mem.zeroes([8]u8),
    cdef_uv_pri_strength: [8]u8 = @import("std").mem.zeroes([8]u8),
    cdef_uv_sec_strength: [8]u8 = @import("std").mem.zeroes([8]u8),
};
pub const StdVideoAV1CDEF = struct_StdVideoAV1CDEF;
pub const struct_StdVideoAV1LoopRestoration = extern struct {
    FrameRestorationType: [3]StdVideoAV1FrameRestorationType = @import("std").mem.zeroes([3]StdVideoAV1FrameRestorationType),
    LoopRestorationSize: [3]u16 = @import("std").mem.zeroes([3]u16),
};
pub const StdVideoAV1LoopRestoration = struct_StdVideoAV1LoopRestoration;
pub const struct_StdVideoAV1GlobalMotion = extern struct {
    GmType: [8]u8 = @import("std").mem.zeroes([8]u8),
    gm_params: [8][6]i32 = @import("std").mem.zeroes([8][6]i32),
};
pub const StdVideoAV1GlobalMotion = struct_StdVideoAV1GlobalMotion;
// /usr/include/vk_video/vulkan_video_codec_av1std.h:312:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoAV1FilmGrainFlags = opaque {};
pub const StdVideoAV1FilmGrainFlags = struct_StdVideoAV1FilmGrainFlags;
pub const struct_StdVideoAV1FilmGrain = extern struct {
    flags: StdVideoAV1FilmGrainFlags = @import("std").mem.zeroes(StdVideoAV1FilmGrainFlags),
    grain_scaling_minus_8: u8 = @import("std").mem.zeroes(u8),
    ar_coeff_lag: u8 = @import("std").mem.zeroes(u8),
    ar_coeff_shift_minus_6: u8 = @import("std").mem.zeroes(u8),
    grain_scale_shift: u8 = @import("std").mem.zeroes(u8),
    grain_seed: u16 = @import("std").mem.zeroes(u16),
    film_grain_params_ref_idx: u8 = @import("std").mem.zeroes(u8),
    num_y_points: u8 = @import("std").mem.zeroes(u8),
    point_y_value: [14]u8 = @import("std").mem.zeroes([14]u8),
    point_y_scaling: [14]u8 = @import("std").mem.zeroes([14]u8),
    num_cb_points: u8 = @import("std").mem.zeroes(u8),
    point_cb_value: [10]u8 = @import("std").mem.zeroes([10]u8),
    point_cb_scaling: [10]u8 = @import("std").mem.zeroes([10]u8),
    num_cr_points: u8 = @import("std").mem.zeroes(u8),
    point_cr_value: [10]u8 = @import("std").mem.zeroes([10]u8),
    point_cr_scaling: [10]u8 = @import("std").mem.zeroes([10]u8),
    ar_coeffs_y_plus_128: [24]i8 = @import("std").mem.zeroes([24]i8),
    ar_coeffs_cb_plus_128: [25]i8 = @import("std").mem.zeroes([25]i8),
    ar_coeffs_cr_plus_128: [25]i8 = @import("std").mem.zeroes([25]i8),
    cb_mult: u8 = @import("std").mem.zeroes(u8),
    cb_luma_mult: u8 = @import("std").mem.zeroes(u8),
    cb_offset: u16 = @import("std").mem.zeroes(u16),
    cr_mult: u8 = @import("std").mem.zeroes(u8),
    cr_luma_mult: u8 = @import("std").mem.zeroes(u8),
    cr_offset: u16 = @import("std").mem.zeroes(u16),
};
pub const StdVideoAV1FilmGrain = struct_StdVideoAV1FilmGrain;
// /usr/include/vk_video/vulkan_video_codec_av1std.h:348:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoAV1SequenceHeaderFlags = opaque {};
pub const StdVideoAV1SequenceHeaderFlags = struct_StdVideoAV1SequenceHeaderFlags;
pub const struct_StdVideoAV1SequenceHeader = extern struct {
    flags: StdVideoAV1SequenceHeaderFlags = @import("std").mem.zeroes(StdVideoAV1SequenceHeaderFlags),
    seq_profile: StdVideoAV1Profile = @import("std").mem.zeroes(StdVideoAV1Profile),
    frame_width_bits_minus_1: u8 = @import("std").mem.zeroes(u8),
    frame_height_bits_minus_1: u8 = @import("std").mem.zeroes(u8),
    max_frame_width_minus_1: u16 = @import("std").mem.zeroes(u16),
    max_frame_height_minus_1: u16 = @import("std").mem.zeroes(u16),
    delta_frame_id_length_minus_2: u8 = @import("std").mem.zeroes(u8),
    additional_frame_id_length_minus_1: u8 = @import("std").mem.zeroes(u8),
    order_hint_bits_minus_1: u8 = @import("std").mem.zeroes(u8),
    seq_force_integer_mv: u8 = @import("std").mem.zeroes(u8),
    seq_force_screen_content_tools: u8 = @import("std").mem.zeroes(u8),
    reserved1: [5]u8 = @import("std").mem.zeroes([5]u8),
    pColorConfig: ?*const StdVideoAV1ColorConfig = @import("std").mem.zeroes(?*const StdVideoAV1ColorConfig),
    pTimingInfo: ?*const StdVideoAV1TimingInfo = @import("std").mem.zeroes(?*const StdVideoAV1TimingInfo),
};
pub const StdVideoAV1SequenceHeader = struct_StdVideoAV1SequenceHeader;
// /usr/include/vk_video/vulkan_video_codec_av1std_decode.h:31:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoDecodeAV1PictureInfoFlags = opaque {};
pub const StdVideoDecodeAV1PictureInfoFlags = struct_StdVideoDecodeAV1PictureInfoFlags;
pub const struct_StdVideoDecodeAV1PictureInfo = extern struct {
    flags: StdVideoDecodeAV1PictureInfoFlags = @import("std").mem.zeroes(StdVideoDecodeAV1PictureInfoFlags),
    frame_type: StdVideoAV1FrameType = @import("std").mem.zeroes(StdVideoAV1FrameType),
    current_frame_id: u32 = @import("std").mem.zeroes(u32),
    OrderHint: u8 = @import("std").mem.zeroes(u8),
    primary_ref_frame: u8 = @import("std").mem.zeroes(u8),
    refresh_frame_flags: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    interpolation_filter: StdVideoAV1InterpolationFilter = @import("std").mem.zeroes(StdVideoAV1InterpolationFilter),
    TxMode: StdVideoAV1TxMode = @import("std").mem.zeroes(StdVideoAV1TxMode),
    delta_q_res: u8 = @import("std").mem.zeroes(u8),
    delta_lf_res: u8 = @import("std").mem.zeroes(u8),
    SkipModeFrame: [2]u8 = @import("std").mem.zeroes([2]u8),
    coded_denom: u8 = @import("std").mem.zeroes(u8),
    reserved2: [3]u8 = @import("std").mem.zeroes([3]u8),
    OrderHints: [8]u8 = @import("std").mem.zeroes([8]u8),
    expectedFrameId: [8]u32 = @import("std").mem.zeroes([8]u32),
    pTileInfo: ?*const StdVideoAV1TileInfo = @import("std").mem.zeroes(?*const StdVideoAV1TileInfo),
    pQuantization: ?*const StdVideoAV1Quantization = @import("std").mem.zeroes(?*const StdVideoAV1Quantization),
    pSegmentation: [*c]const StdVideoAV1Segmentation = @import("std").mem.zeroes([*c]const StdVideoAV1Segmentation),
    pLoopFilter: ?*const StdVideoAV1LoopFilter = @import("std").mem.zeroes(?*const StdVideoAV1LoopFilter),
    pCDEF: [*c]const StdVideoAV1CDEF = @import("std").mem.zeroes([*c]const StdVideoAV1CDEF),
    pLoopRestoration: [*c]const StdVideoAV1LoopRestoration = @import("std").mem.zeroes([*c]const StdVideoAV1LoopRestoration),
    pGlobalMotion: [*c]const StdVideoAV1GlobalMotion = @import("std").mem.zeroes([*c]const StdVideoAV1GlobalMotion),
    pFilmGrain: ?*const StdVideoAV1FilmGrain = @import("std").mem.zeroes(?*const StdVideoAV1FilmGrain),
};
pub const StdVideoDecodeAV1PictureInfo = struct_StdVideoDecodeAV1PictureInfo;
// /usr/include/vk_video/vulkan_video_codec_av1std_decode.h:91:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoDecodeAV1ReferenceInfoFlags = opaque {};
pub const StdVideoDecodeAV1ReferenceInfoFlags = struct_StdVideoDecodeAV1ReferenceInfoFlags;
pub const struct_StdVideoDecodeAV1ReferenceInfo = extern struct {
    flags: StdVideoDecodeAV1ReferenceInfoFlags = @import("std").mem.zeroes(StdVideoDecodeAV1ReferenceInfoFlags),
    frame_type: u8 = @import("std").mem.zeroes(u8),
    RefFrameSignBias: u8 = @import("std").mem.zeroes(u8),
    OrderHint: u8 = @import("std").mem.zeroes(u8),
    SavedOrderHints: [8]u8 = @import("std").mem.zeroes([8]u8),
};
pub const StdVideoDecodeAV1ReferenceInfo = struct_StdVideoDecodeAV1ReferenceInfo;
pub const struct_VkVideoDecodeAV1ProfileInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdProfile: StdVideoAV1Profile = @import("std").mem.zeroes(StdVideoAV1Profile),
    filmGrainSupport: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkVideoDecodeAV1ProfileInfoKHR = struct_VkVideoDecodeAV1ProfileInfoKHR;
pub const struct_VkVideoDecodeAV1CapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxLevel: StdVideoAV1Level = @import("std").mem.zeroes(StdVideoAV1Level),
};
pub const VkVideoDecodeAV1CapabilitiesKHR = struct_VkVideoDecodeAV1CapabilitiesKHR;
pub const struct_VkVideoDecodeAV1SessionParametersCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdSequenceHeader: ?*const StdVideoAV1SequenceHeader = @import("std").mem.zeroes(?*const StdVideoAV1SequenceHeader),
};
pub const VkVideoDecodeAV1SessionParametersCreateInfoKHR = struct_VkVideoDecodeAV1SessionParametersCreateInfoKHR;
pub const struct_VkVideoDecodeAV1PictureInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdPictureInfo: ?*const StdVideoDecodeAV1PictureInfo = @import("std").mem.zeroes(?*const StdVideoDecodeAV1PictureInfo),
    referenceNameSlotIndices: [7]i32 = @import("std").mem.zeroes([7]i32),
    frameHeaderOffset: u32 = @import("std").mem.zeroes(u32),
    tileCount: u32 = @import("std").mem.zeroes(u32),
    pTileOffsets: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    pTileSizes: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkVideoDecodeAV1PictureInfoKHR = struct_VkVideoDecodeAV1PictureInfoKHR;
pub const struct_VkVideoDecodeAV1DpbSlotInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdReferenceInfo: ?*const StdVideoDecodeAV1ReferenceInfo = @import("std").mem.zeroes(?*const StdVideoDecodeAV1ReferenceInfo),
};
pub const VkVideoDecodeAV1DpbSlotInfoKHR = struct_VkVideoDecodeAV1DpbSlotInfoKHR;
pub const struct_VkPhysicalDeviceVideoMaintenance1FeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    videoMaintenance1: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVideoMaintenance1FeaturesKHR = struct_VkPhysicalDeviceVideoMaintenance1FeaturesKHR;
pub const struct_VkVideoInlineQueryInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    queryPool: VkQueryPool = @import("std").mem.zeroes(VkQueryPool),
    firstQuery: u32 = @import("std").mem.zeroes(u32),
    queryCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoInlineQueryInfoKHR = struct_VkVideoInlineQueryInfoKHR;
pub const struct_VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxVertexAttribDivisor: u32 = @import("std").mem.zeroes(u32),
    supportsNonZeroFirstInstance: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR = struct_VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR;
pub const struct_VkVertexInputBindingDivisorDescriptionKHR = extern struct {
    binding: u32 = @import("std").mem.zeroes(u32),
    divisor: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVertexInputBindingDivisorDescriptionKHR = struct_VkVertexInputBindingDivisorDescriptionKHR;
pub const struct_VkPipelineVertexInputDivisorStateCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    vertexBindingDivisorCount: u32 = @import("std").mem.zeroes(u32),
    pVertexBindingDivisors: [*c]const VkVertexInputBindingDivisorDescriptionKHR = @import("std").mem.zeroes([*c]const VkVertexInputBindingDivisorDescriptionKHR),
};
pub const VkPipelineVertexInputDivisorStateCreateInfoKHR = struct_VkPipelineVertexInputDivisorStateCreateInfoKHR;
pub const struct_VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    vertexAttributeInstanceRateDivisor: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vertexAttributeInstanceRateZeroDivisor: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR = struct_VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR;
pub const struct_VkPhysicalDeviceShaderFloatControls2FeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderFloatControls2: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderFloatControls2FeaturesKHR = struct_VkPhysicalDeviceShaderFloatControls2FeaturesKHR;
pub const struct_VkPhysicalDeviceIndexTypeUint8FeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    indexTypeUint8: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceIndexTypeUint8FeaturesKHR = struct_VkPhysicalDeviceIndexTypeUint8FeaturesKHR;
pub const VK_LINE_RASTERIZATION_MODE_DEFAULT_KHR: c_int = 0;
pub const VK_LINE_RASTERIZATION_MODE_RECTANGULAR_KHR: c_int = 1;
pub const VK_LINE_RASTERIZATION_MODE_BRESENHAM_KHR: c_int = 2;
pub const VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_KHR: c_int = 3;
pub const VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT: c_int = 0;
pub const VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT: c_int = 1;
pub const VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT: c_int = 2;
pub const VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT: c_int = 3;
pub const VK_LINE_RASTERIZATION_MODE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkLineRasterizationModeKHR = c_uint;
pub const VkLineRasterizationModeKHR = enum_VkLineRasterizationModeKHR;
pub const struct_VkPhysicalDeviceLineRasterizationFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rectangularLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bresenhamLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    smoothLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stippledRectangularLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stippledBresenhamLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stippledSmoothLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceLineRasterizationFeaturesKHR = struct_VkPhysicalDeviceLineRasterizationFeaturesKHR;
pub const struct_VkPhysicalDeviceLineRasterizationPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    lineSubPixelPrecisionBits: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceLineRasterizationPropertiesKHR = struct_VkPhysicalDeviceLineRasterizationPropertiesKHR;
pub const struct_VkPipelineRasterizationLineStateCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    lineRasterizationMode: VkLineRasterizationModeKHR = @import("std").mem.zeroes(VkLineRasterizationModeKHR),
    stippledLineEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    lineStippleFactor: u32 = @import("std").mem.zeroes(u32),
    lineStipplePattern: u16 = @import("std").mem.zeroes(u16),
};
pub const VkPipelineRasterizationLineStateCreateInfoKHR = struct_VkPipelineRasterizationLineStateCreateInfoKHR;
pub const PFN_vkCmdSetLineStippleKHR = ?*const fn (VkCommandBuffer, u32, u16) callconv(.C) void;
pub extern fn vkCmdSetLineStippleKHR(commandBuffer: VkCommandBuffer, lineStippleFactor: u32, lineStipplePattern: u16) void;
pub const VK_TIME_DOMAIN_DEVICE_KHR: c_int = 0;
pub const VK_TIME_DOMAIN_CLOCK_MONOTONIC_KHR: c_int = 1;
pub const VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_KHR: c_int = 2;
pub const VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_KHR: c_int = 3;
pub const VK_TIME_DOMAIN_DEVICE_EXT: c_int = 0;
pub const VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT: c_int = 1;
pub const VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT: c_int = 2;
pub const VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT: c_int = 3;
pub const VK_TIME_DOMAIN_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkTimeDomainKHR = c_uint;
pub const VkTimeDomainKHR = enum_VkTimeDomainKHR;
pub const struct_VkCalibratedTimestampInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    timeDomain: VkTimeDomainKHR = @import("std").mem.zeroes(VkTimeDomainKHR),
};
pub const VkCalibratedTimestampInfoKHR = struct_VkCalibratedTimestampInfoKHR;
pub const PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkTimeDomainKHR) callconv(.C) VkResult;
pub const PFN_vkGetCalibratedTimestampsKHR = ?*const fn (VkDevice, u32, [*c]const VkCalibratedTimestampInfoKHR, [*c]u64, [*c]u64) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(physicalDevice: VkPhysicalDevice, pTimeDomainCount: [*c]u32, pTimeDomains: [*c]VkTimeDomainKHR) VkResult;
pub extern fn vkGetCalibratedTimestampsKHR(device: VkDevice, timestampCount: u32, pTimestampInfos: [*c]const VkCalibratedTimestampInfoKHR, pTimestamps: [*c]u64, pMaxDeviation: [*c]u64) VkResult;
pub const struct_VkPhysicalDeviceShaderExpectAssumeFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderExpectAssume: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderExpectAssumeFeaturesKHR = struct_VkPhysicalDeviceShaderExpectAssumeFeaturesKHR;
pub const struct_VkPhysicalDeviceMaintenance6FeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maintenance6: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMaintenance6FeaturesKHR = struct_VkPhysicalDeviceMaintenance6FeaturesKHR;
pub const struct_VkPhysicalDeviceMaintenance6PropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    blockTexelViewCompatibleMultipleLayers: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxCombinedImageSamplerDescriptorCount: u32 = @import("std").mem.zeroes(u32),
    fragmentShadingRateClampCombinerInputs: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMaintenance6PropertiesKHR = struct_VkPhysicalDeviceMaintenance6PropertiesKHR;
pub const struct_VkBindMemoryStatusKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pResult: [*c]VkResult = @import("std").mem.zeroes([*c]VkResult),
};
pub const VkBindMemoryStatusKHR = struct_VkBindMemoryStatusKHR;
pub const struct_VkBindDescriptorSetsInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    firstSet: u32 = @import("std").mem.zeroes(u32),
    descriptorSetCount: u32 = @import("std").mem.zeroes(u32),
    pDescriptorSets: [*c]const VkDescriptorSet = @import("std").mem.zeroes([*c]const VkDescriptorSet),
    dynamicOffsetCount: u32 = @import("std").mem.zeroes(u32),
    pDynamicOffsets: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkBindDescriptorSetsInfoKHR = struct_VkBindDescriptorSetsInfoKHR;
pub const struct_VkPushConstantsInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    offset: u32 = @import("std").mem.zeroes(u32),
    size: u32 = @import("std").mem.zeroes(u32),
    pValues: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkPushConstantsInfoKHR = struct_VkPushConstantsInfoKHR;
pub const struct_VkPushDescriptorSetInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    set: u32 = @import("std").mem.zeroes(u32),
    descriptorWriteCount: u32 = @import("std").mem.zeroes(u32),
    pDescriptorWrites: [*c]const VkWriteDescriptorSet = @import("std").mem.zeroes([*c]const VkWriteDescriptorSet),
};
pub const VkPushDescriptorSetInfoKHR = struct_VkPushDescriptorSetInfoKHR;
pub const struct_VkPushDescriptorSetWithTemplateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    descriptorUpdateTemplate: VkDescriptorUpdateTemplate = @import("std").mem.zeroes(VkDescriptorUpdateTemplate),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    set: u32 = @import("std").mem.zeroes(u32),
    pData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkPushDescriptorSetWithTemplateInfoKHR = struct_VkPushDescriptorSetWithTemplateInfoKHR;
pub const struct_VkSetDescriptorBufferOffsetsInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    firstSet: u32 = @import("std").mem.zeroes(u32),
    setCount: u32 = @import("std").mem.zeroes(u32),
    pBufferIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    pOffsets: [*c]const VkDeviceSize = @import("std").mem.zeroes([*c]const VkDeviceSize),
};
pub const VkSetDescriptorBufferOffsetsInfoEXT = struct_VkSetDescriptorBufferOffsetsInfoEXT;
pub const struct_VkBindDescriptorBufferEmbeddedSamplersInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    set: u32 = @import("std").mem.zeroes(u32),
};
pub const VkBindDescriptorBufferEmbeddedSamplersInfoEXT = struct_VkBindDescriptorBufferEmbeddedSamplersInfoEXT;
pub const PFN_vkCmdBindDescriptorSets2KHR = ?*const fn (VkCommandBuffer, [*c]const VkBindDescriptorSetsInfoKHR) callconv(.C) void;
pub const PFN_vkCmdPushConstants2KHR = ?*const fn (VkCommandBuffer, [*c]const VkPushConstantsInfoKHR) callconv(.C) void;
pub const PFN_vkCmdPushDescriptorSet2KHR = ?*const fn (VkCommandBuffer, [*c]const VkPushDescriptorSetInfoKHR) callconv(.C) void;
pub const PFN_vkCmdPushDescriptorSetWithTemplate2KHR = ?*const fn (VkCommandBuffer, [*c]const VkPushDescriptorSetWithTemplateInfoKHR) callconv(.C) void;
pub const PFN_vkCmdSetDescriptorBufferOffsets2EXT = ?*const fn (VkCommandBuffer, [*c]const VkSetDescriptorBufferOffsetsInfoEXT) callconv(.C) void;
pub const PFN_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT = ?*const fn (VkCommandBuffer, [*c]const VkBindDescriptorBufferEmbeddedSamplersInfoEXT) callconv(.C) void;
pub extern fn vkCmdBindDescriptorSets2KHR(commandBuffer: VkCommandBuffer, pBindDescriptorSetsInfo: [*c]const VkBindDescriptorSetsInfoKHR) void;
pub extern fn vkCmdPushConstants2KHR(commandBuffer: VkCommandBuffer, pPushConstantsInfo: [*c]const VkPushConstantsInfoKHR) void;
pub extern fn vkCmdPushDescriptorSet2KHR(commandBuffer: VkCommandBuffer, pPushDescriptorSetInfo: [*c]const VkPushDescriptorSetInfoKHR) void;
pub extern fn vkCmdPushDescriptorSetWithTemplate2KHR(commandBuffer: VkCommandBuffer, pPushDescriptorSetWithTemplateInfo: [*c]const VkPushDescriptorSetWithTemplateInfoKHR) void;
pub extern fn vkCmdSetDescriptorBufferOffsets2EXT(commandBuffer: VkCommandBuffer, pSetDescriptorBufferOffsetsInfo: [*c]const VkSetDescriptorBufferOffsetsInfoEXT) void;
pub extern fn vkCmdBindDescriptorBufferEmbeddedSamplers2EXT(commandBuffer: VkCommandBuffer, pBindDescriptorBufferEmbeddedSamplersInfo: [*c]const VkBindDescriptorBufferEmbeddedSamplersInfoEXT) void;
pub const struct_VkDebugReportCallbackEXT_T = opaque {};
pub const VkDebugReportCallbackEXT = ?*struct_VkDebugReportCallbackEXT_T;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT: c_int = 0;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT: c_int = 1;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT: c_int = 2;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT: c_int = 3;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT: c_int = 4;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT: c_int = 5;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT: c_int = 6;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT: c_int = 7;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT: c_int = 8;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT: c_int = 9;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT: c_int = 10;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT: c_int = 11;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT: c_int = 12;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT: c_int = 13;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT: c_int = 14;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT: c_int = 15;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT: c_int = 16;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT: c_int = 17;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT: c_int = 18;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT: c_int = 19;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT: c_int = 20;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT: c_int = 21;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT: c_int = 22;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT: c_int = 23;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT: c_int = 24;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT: c_int = 25;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT: c_int = 26;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT: c_int = 27;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT: c_int = 28;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT: c_int = 29;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT: c_int = 30;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT: c_int = 33;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT: c_int = 1000156000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT: c_int = 1000085000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT: c_int = 1000029000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT: c_int = 1000029001;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT: c_int = 1000150000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT: c_int = 1000165000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_MODULE_NV_EXT: c_int = 1000307000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_FUNCTION_NV_EXT: c_int = 1000307001;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT: c_int = 1000366000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT: c_int = 28;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT: c_int = 33;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT: c_int = 1000085000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT: c_int = 1000156000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDebugReportObjectTypeEXT = c_uint;
pub const VkDebugReportObjectTypeEXT = enum_VkDebugReportObjectTypeEXT;
pub const VK_DEBUG_REPORT_INFORMATION_BIT_EXT: c_int = 1;
pub const VK_DEBUG_REPORT_WARNING_BIT_EXT: c_int = 2;
pub const VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT: c_int = 4;
pub const VK_DEBUG_REPORT_ERROR_BIT_EXT: c_int = 8;
pub const VK_DEBUG_REPORT_DEBUG_BIT_EXT: c_int = 16;
pub const VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDebugReportFlagBitsEXT = c_uint;
pub const VkDebugReportFlagBitsEXT = enum_VkDebugReportFlagBitsEXT;
pub const VkDebugReportFlagsEXT = VkFlags;
pub const PFN_vkDebugReportCallbackEXT = ?*const fn (VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, u64, usize, i32, [*c]const u8, [*c]const u8, ?*anyopaque) callconv(.C) VkBool32;
pub const struct_VkDebugReportCallbackCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDebugReportFlagsEXT = @import("std").mem.zeroes(VkDebugReportFlagsEXT),
    pfnCallback: PFN_vkDebugReportCallbackEXT = @import("std").mem.zeroes(PFN_vkDebugReportCallbackEXT),
    pUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkDebugReportCallbackCreateInfoEXT = struct_VkDebugReportCallbackCreateInfoEXT;
pub const PFN_vkCreateDebugReportCallbackEXT = ?*const fn (VkInstance, [*c]const VkDebugReportCallbackCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkDebugReportCallbackEXT) callconv(.C) VkResult;
pub const PFN_vkDestroyDebugReportCallbackEXT = ?*const fn (VkInstance, VkDebugReportCallbackEXT, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkDebugReportMessageEXT = ?*const fn (VkInstance, VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, u64, usize, i32, [*c]const u8, [*c]const u8) callconv(.C) void;
pub extern fn vkCreateDebugReportCallbackEXT(instance: VkInstance, pCreateInfo: [*c]const VkDebugReportCallbackCreateInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pCallback: [*c]VkDebugReportCallbackEXT) VkResult;
pub extern fn vkDestroyDebugReportCallbackEXT(instance: VkInstance, callback: VkDebugReportCallbackEXT, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkDebugReportMessageEXT(instance: VkInstance, flags: VkDebugReportFlagsEXT, objectType: VkDebugReportObjectTypeEXT, object: u64, location: usize, messageCode: i32, pLayerPrefix: [*c]const u8, pMessage: [*c]const u8) void;
pub const VK_RASTERIZATION_ORDER_STRICT_AMD: c_int = 0;
pub const VK_RASTERIZATION_ORDER_RELAXED_AMD: c_int = 1;
pub const VK_RASTERIZATION_ORDER_MAX_ENUM_AMD: c_int = 2147483647;
pub const enum_VkRasterizationOrderAMD = c_uint;
pub const VkRasterizationOrderAMD = enum_VkRasterizationOrderAMD;
pub const struct_VkPipelineRasterizationStateRasterizationOrderAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    rasterizationOrder: VkRasterizationOrderAMD = @import("std").mem.zeroes(VkRasterizationOrderAMD),
};
pub const VkPipelineRasterizationStateRasterizationOrderAMD = struct_VkPipelineRasterizationStateRasterizationOrderAMD;
pub const struct_VkDebugMarkerObjectNameInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    objectType: VkDebugReportObjectTypeEXT = @import("std").mem.zeroes(VkDebugReportObjectTypeEXT),
    object: u64 = @import("std").mem.zeroes(u64),
    pObjectName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const VkDebugMarkerObjectNameInfoEXT = struct_VkDebugMarkerObjectNameInfoEXT;
pub const struct_VkDebugMarkerObjectTagInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    objectType: VkDebugReportObjectTypeEXT = @import("std").mem.zeroes(VkDebugReportObjectTypeEXT),
    object: u64 = @import("std").mem.zeroes(u64),
    tagName: u64 = @import("std").mem.zeroes(u64),
    tagSize: usize = @import("std").mem.zeroes(usize),
    pTag: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkDebugMarkerObjectTagInfoEXT = struct_VkDebugMarkerObjectTagInfoEXT;
pub const struct_VkDebugMarkerMarkerInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pMarkerName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    color: [4]f32 = @import("std").mem.zeroes([4]f32),
};
pub const VkDebugMarkerMarkerInfoEXT = struct_VkDebugMarkerMarkerInfoEXT;
pub const PFN_vkDebugMarkerSetObjectTagEXT = ?*const fn (VkDevice, [*c]const VkDebugMarkerObjectTagInfoEXT) callconv(.C) VkResult;
pub const PFN_vkDebugMarkerSetObjectNameEXT = ?*const fn (VkDevice, [*c]const VkDebugMarkerObjectNameInfoEXT) callconv(.C) VkResult;
pub const PFN_vkCmdDebugMarkerBeginEXT = ?*const fn (VkCommandBuffer, [*c]const VkDebugMarkerMarkerInfoEXT) callconv(.C) void;
pub const PFN_vkCmdDebugMarkerEndEXT = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub const PFN_vkCmdDebugMarkerInsertEXT = ?*const fn (VkCommandBuffer, [*c]const VkDebugMarkerMarkerInfoEXT) callconv(.C) void;
pub extern fn vkDebugMarkerSetObjectTagEXT(device: VkDevice, pTagInfo: [*c]const VkDebugMarkerObjectTagInfoEXT) VkResult;
pub extern fn vkDebugMarkerSetObjectNameEXT(device: VkDevice, pNameInfo: [*c]const VkDebugMarkerObjectNameInfoEXT) VkResult;
pub extern fn vkCmdDebugMarkerBeginEXT(commandBuffer: VkCommandBuffer, pMarkerInfo: [*c]const VkDebugMarkerMarkerInfoEXT) void;
pub extern fn vkCmdDebugMarkerEndEXT(commandBuffer: VkCommandBuffer) void;
pub extern fn vkCmdDebugMarkerInsertEXT(commandBuffer: VkCommandBuffer, pMarkerInfo: [*c]const VkDebugMarkerMarkerInfoEXT) void;
pub const struct_VkDedicatedAllocationImageCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dedicatedAllocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkDedicatedAllocationImageCreateInfoNV = struct_VkDedicatedAllocationImageCreateInfoNV;
pub const struct_VkDedicatedAllocationBufferCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dedicatedAllocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkDedicatedAllocationBufferCreateInfoNV = struct_VkDedicatedAllocationBufferCreateInfoNV;
pub const struct_VkDedicatedAllocationMemoryAllocateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
};
pub const VkDedicatedAllocationMemoryAllocateInfoNV = struct_VkDedicatedAllocationMemoryAllocateInfoNV;
pub const VkPipelineRasterizationStateStreamCreateFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceTransformFeedbackFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    transformFeedback: VkBool32 = @import("std").mem.zeroes(VkBool32),
    geometryStreams: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceTransformFeedbackFeaturesEXT = struct_VkPhysicalDeviceTransformFeedbackFeaturesEXT;
pub const struct_VkPhysicalDeviceTransformFeedbackPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxTransformFeedbackStreams: u32 = @import("std").mem.zeroes(u32),
    maxTransformFeedbackBuffers: u32 = @import("std").mem.zeroes(u32),
    maxTransformFeedbackBufferSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    maxTransformFeedbackStreamDataSize: u32 = @import("std").mem.zeroes(u32),
    maxTransformFeedbackBufferDataSize: u32 = @import("std").mem.zeroes(u32),
    maxTransformFeedbackBufferDataStride: u32 = @import("std").mem.zeroes(u32),
    transformFeedbackQueries: VkBool32 = @import("std").mem.zeroes(VkBool32),
    transformFeedbackStreamsLinesTriangles: VkBool32 = @import("std").mem.zeroes(VkBool32),
    transformFeedbackRasterizationStreamSelect: VkBool32 = @import("std").mem.zeroes(VkBool32),
    transformFeedbackDraw: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceTransformFeedbackPropertiesEXT = struct_VkPhysicalDeviceTransformFeedbackPropertiesEXT;
pub const struct_VkPipelineRasterizationStateStreamCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineRasterizationStateStreamCreateFlagsEXT = @import("std").mem.zeroes(VkPipelineRasterizationStateStreamCreateFlagsEXT),
    rasterizationStream: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPipelineRasterizationStateStreamCreateInfoEXT = struct_VkPipelineRasterizationStateStreamCreateInfoEXT;
pub const PFN_vkCmdBindTransformFeedbackBuffersEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdBeginTransformFeedbackEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdEndTransformFeedbackEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdBeginQueryIndexedEXT = ?*const fn (VkCommandBuffer, VkQueryPool, u32, VkQueryControlFlags, u32) callconv(.C) void;
pub const PFN_vkCmdEndQueryIndexedEXT = ?*const fn (VkCommandBuffer, VkQueryPool, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndirectByteCountEXT = ?*const fn (VkCommandBuffer, u32, u32, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub extern fn vkCmdBindTransformFeedbackBuffersEXT(commandBuffer: VkCommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: [*c]const VkBuffer, pOffsets: [*c]const VkDeviceSize, pSizes: [*c]const VkDeviceSize) void;
pub extern fn vkCmdBeginTransformFeedbackEXT(commandBuffer: VkCommandBuffer, firstCounterBuffer: u32, counterBufferCount: u32, pCounterBuffers: [*c]const VkBuffer, pCounterBufferOffsets: [*c]const VkDeviceSize) void;
pub extern fn vkCmdEndTransformFeedbackEXT(commandBuffer: VkCommandBuffer, firstCounterBuffer: u32, counterBufferCount: u32, pCounterBuffers: [*c]const VkBuffer, pCounterBufferOffsets: [*c]const VkDeviceSize) void;
pub extern fn vkCmdBeginQueryIndexedEXT(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32, flags: VkQueryControlFlags, index: u32) void;
pub extern fn vkCmdEndQueryIndexedEXT(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32, index: u32) void;
pub extern fn vkCmdDrawIndirectByteCountEXT(commandBuffer: VkCommandBuffer, instanceCount: u32, firstInstance: u32, counterBuffer: VkBuffer, counterBufferOffset: VkDeviceSize, counterOffset: u32, vertexStride: u32) void;
pub const struct_VkCuModuleNVX_T = opaque {};
pub const VkCuModuleNVX = ?*struct_VkCuModuleNVX_T;
pub const struct_VkCuFunctionNVX_T = opaque {};
pub const VkCuFunctionNVX = ?*struct_VkCuFunctionNVX_T;
pub const struct_VkCuModuleCreateInfoNVX = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dataSize: usize = @import("std").mem.zeroes(usize),
    pData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkCuModuleCreateInfoNVX = struct_VkCuModuleCreateInfoNVX;
pub const struct_VkCuFunctionCreateInfoNVX = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    module: VkCuModuleNVX = @import("std").mem.zeroes(VkCuModuleNVX),
    pName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const VkCuFunctionCreateInfoNVX = struct_VkCuFunctionCreateInfoNVX;
pub const struct_VkCuLaunchInfoNVX = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    function: VkCuFunctionNVX = @import("std").mem.zeroes(VkCuFunctionNVX),
    gridDimX: u32 = @import("std").mem.zeroes(u32),
    gridDimY: u32 = @import("std").mem.zeroes(u32),
    gridDimZ: u32 = @import("std").mem.zeroes(u32),
    blockDimX: u32 = @import("std").mem.zeroes(u32),
    blockDimY: u32 = @import("std").mem.zeroes(u32),
    blockDimZ: u32 = @import("std").mem.zeroes(u32),
    sharedMemBytes: u32 = @import("std").mem.zeroes(u32),
    paramCount: usize = @import("std").mem.zeroes(usize),
    pParams: [*c]const ?*const anyopaque = @import("std").mem.zeroes([*c]const ?*const anyopaque),
    extraCount: usize = @import("std").mem.zeroes(usize),
    pExtras: [*c]const ?*const anyopaque = @import("std").mem.zeroes([*c]const ?*const anyopaque),
};
pub const VkCuLaunchInfoNVX = struct_VkCuLaunchInfoNVX;
pub const PFN_vkCreateCuModuleNVX = ?*const fn (VkDevice, [*c]const VkCuModuleCreateInfoNVX, [*c]const VkAllocationCallbacks, [*c]VkCuModuleNVX) callconv(.C) VkResult;
pub const PFN_vkCreateCuFunctionNVX = ?*const fn (VkDevice, [*c]const VkCuFunctionCreateInfoNVX, [*c]const VkAllocationCallbacks, [*c]VkCuFunctionNVX) callconv(.C) VkResult;
pub const PFN_vkDestroyCuModuleNVX = ?*const fn (VkDevice, VkCuModuleNVX, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkDestroyCuFunctionNVX = ?*const fn (VkDevice, VkCuFunctionNVX, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCmdCuLaunchKernelNVX = ?*const fn (VkCommandBuffer, [*c]const VkCuLaunchInfoNVX) callconv(.C) void;
pub extern fn vkCreateCuModuleNVX(device: VkDevice, pCreateInfo: [*c]const VkCuModuleCreateInfoNVX, pAllocator: [*c]const VkAllocationCallbacks, pModule: [*c]VkCuModuleNVX) VkResult;
pub extern fn vkCreateCuFunctionNVX(device: VkDevice, pCreateInfo: [*c]const VkCuFunctionCreateInfoNVX, pAllocator: [*c]const VkAllocationCallbacks, pFunction: [*c]VkCuFunctionNVX) VkResult;
pub extern fn vkDestroyCuModuleNVX(device: VkDevice, module: VkCuModuleNVX, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkDestroyCuFunctionNVX(device: VkDevice, function: VkCuFunctionNVX, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCmdCuLaunchKernelNVX(commandBuffer: VkCommandBuffer, pLaunchInfo: [*c]const VkCuLaunchInfoNVX) void;
pub const struct_VkImageViewHandleInfoNVX = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    imageView: VkImageView = @import("std").mem.zeroes(VkImageView),
    descriptorType: VkDescriptorType = @import("std").mem.zeroes(VkDescriptorType),
    sampler: VkSampler = @import("std").mem.zeroes(VkSampler),
};
pub const VkImageViewHandleInfoNVX = struct_VkImageViewHandleInfoNVX;
pub const struct_VkImageViewAddressPropertiesNVX = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkImageViewAddressPropertiesNVX = struct_VkImageViewAddressPropertiesNVX;
pub const PFN_vkGetImageViewHandleNVX = ?*const fn (VkDevice, [*c]const VkImageViewHandleInfoNVX) callconv(.C) u32;
pub const PFN_vkGetImageViewAddressNVX = ?*const fn (VkDevice, VkImageView, [*c]VkImageViewAddressPropertiesNVX) callconv(.C) VkResult;
pub extern fn vkGetImageViewHandleNVX(device: VkDevice, pInfo: [*c]const VkImageViewHandleInfoNVX) u32;
pub extern fn vkGetImageViewAddressNVX(device: VkDevice, imageView: VkImageView, pProperties: [*c]VkImageViewAddressPropertiesNVX) VkResult;
pub const PFN_vkCmdDrawIndirectCountAMD = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexedIndirectCountAMD = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub extern fn vkCmdDrawIndirectCountAMD(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub extern fn vkCmdDrawIndexedIndirectCountAMD(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub const struct_VkTextureLODGatherFormatPropertiesAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportsTextureGatherLODBiasAMD: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkTextureLODGatherFormatPropertiesAMD = struct_VkTextureLODGatherFormatPropertiesAMD;
pub const VK_SHADER_INFO_TYPE_STATISTICS_AMD: c_int = 0;
pub const VK_SHADER_INFO_TYPE_BINARY_AMD: c_int = 1;
pub const VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD: c_int = 2;
pub const VK_SHADER_INFO_TYPE_MAX_ENUM_AMD: c_int = 2147483647;
pub const enum_VkShaderInfoTypeAMD = c_uint;
pub const VkShaderInfoTypeAMD = enum_VkShaderInfoTypeAMD;
pub const struct_VkShaderResourceUsageAMD = extern struct {
    numUsedVgprs: u32 = @import("std").mem.zeroes(u32),
    numUsedSgprs: u32 = @import("std").mem.zeroes(u32),
    ldsSizePerLocalWorkGroup: u32 = @import("std").mem.zeroes(u32),
    ldsUsageSizeInBytes: usize = @import("std").mem.zeroes(usize),
    scratchMemUsageInBytes: usize = @import("std").mem.zeroes(usize),
};
pub const VkShaderResourceUsageAMD = struct_VkShaderResourceUsageAMD;
pub const struct_VkShaderStatisticsInfoAMD = extern struct {
    shaderStageMask: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    resourceUsage: VkShaderResourceUsageAMD = @import("std").mem.zeroes(VkShaderResourceUsageAMD),
    numPhysicalVgprs: u32 = @import("std").mem.zeroes(u32),
    numPhysicalSgprs: u32 = @import("std").mem.zeroes(u32),
    numAvailableVgprs: u32 = @import("std").mem.zeroes(u32),
    numAvailableSgprs: u32 = @import("std").mem.zeroes(u32),
    computeWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
};
pub const VkShaderStatisticsInfoAMD = struct_VkShaderStatisticsInfoAMD;
pub const PFN_vkGetShaderInfoAMD = ?*const fn (VkDevice, VkPipeline, VkShaderStageFlagBits, VkShaderInfoTypeAMD, [*c]usize, ?*anyopaque) callconv(.C) VkResult;
pub extern fn vkGetShaderInfoAMD(device: VkDevice, pipeline: VkPipeline, shaderStage: VkShaderStageFlagBits, infoType: VkShaderInfoTypeAMD, pInfoSize: [*c]usize, pInfo: ?*anyopaque) VkResult;
pub const struct_VkPhysicalDeviceCornerSampledImageFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cornerSampledImage: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCornerSampledImageFeaturesNV = struct_VkPhysicalDeviceCornerSampledImageFeaturesNV;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV: c_int = 1;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV: c_int = 2;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV: c_int = 4;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV: c_int = 8;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkExternalMemoryHandleTypeFlagBitsNV = c_uint;
pub const VkExternalMemoryHandleTypeFlagBitsNV = enum_VkExternalMemoryHandleTypeFlagBitsNV;
pub const VkExternalMemoryHandleTypeFlagsNV = VkFlags;
pub const VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV: c_int = 1;
pub const VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV: c_int = 2;
pub const VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV: c_int = 4;
pub const VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkExternalMemoryFeatureFlagBitsNV = c_uint;
pub const VkExternalMemoryFeatureFlagBitsNV = enum_VkExternalMemoryFeatureFlagBitsNV;
pub const VkExternalMemoryFeatureFlagsNV = VkFlags;
pub const struct_VkExternalImageFormatPropertiesNV = extern struct {
    imageFormatProperties: VkImageFormatProperties = @import("std").mem.zeroes(VkImageFormatProperties),
    externalMemoryFeatures: VkExternalMemoryFeatureFlagsNV = @import("std").mem.zeroes(VkExternalMemoryFeatureFlagsNV),
    exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagsNV = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagsNV),
    compatibleHandleTypes: VkExternalMemoryHandleTypeFlagsNV = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagsNV),
};
pub const VkExternalImageFormatPropertiesNV = struct_VkExternalImageFormatPropertiesNV;
pub const PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = ?*const fn (VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkExternalMemoryHandleTypeFlagsNV, [*c]VkExternalImageFormatPropertiesNV) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice: VkPhysicalDevice, format: VkFormat, @"type": VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags, externalHandleType: VkExternalMemoryHandleTypeFlagsNV, pExternalImageFormatProperties: [*c]VkExternalImageFormatPropertiesNV) VkResult;
pub const struct_VkExternalMemoryImageCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalMemoryHandleTypeFlagsNV = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagsNV),
};
pub const VkExternalMemoryImageCreateInfoNV = struct_VkExternalMemoryImageCreateInfoNV;
pub const struct_VkExportMemoryAllocateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalMemoryHandleTypeFlagsNV = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagsNV),
};
pub const VkExportMemoryAllocateInfoNV = struct_VkExportMemoryAllocateInfoNV;
pub const VK_VALIDATION_CHECK_ALL_EXT: c_int = 0;
pub const VK_VALIDATION_CHECK_SHADERS_EXT: c_int = 1;
pub const VK_VALIDATION_CHECK_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkValidationCheckEXT = c_uint;
pub const VkValidationCheckEXT = enum_VkValidationCheckEXT;
pub const struct_VkValidationFlagsEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    disabledValidationCheckCount: u32 = @import("std").mem.zeroes(u32),
    pDisabledValidationChecks: [*c]const VkValidationCheckEXT = @import("std").mem.zeroes([*c]const VkValidationCheckEXT),
};
pub const VkValidationFlagsEXT = struct_VkValidationFlagsEXT;
pub const VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT = VkPhysicalDeviceTextureCompressionASTCHDRFeatures;
pub const struct_VkImageViewASTCDecodeModeEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    decodeMode: VkFormat = @import("std").mem.zeroes(VkFormat),
};
pub const VkImageViewASTCDecodeModeEXT = struct_VkImageViewASTCDecodeModeEXT;
pub const struct_VkPhysicalDeviceASTCDecodeFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    decodeModeSharedExponent: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceASTCDecodeFeaturesEXT = struct_VkPhysicalDeviceASTCDecodeFeaturesEXT;
pub const VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT: c_int = 0;
pub const VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT: c_int = 1;
pub const VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT: c_int = 2;
pub const VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT: c_int = 3;
pub const VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkPipelineRobustnessBufferBehaviorEXT = c_uint;
pub const VkPipelineRobustnessBufferBehaviorEXT = enum_VkPipelineRobustnessBufferBehaviorEXT;
pub const VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT: c_int = 0;
pub const VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT: c_int = 1;
pub const VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT: c_int = 2;
pub const VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT: c_int = 3;
pub const VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkPipelineRobustnessImageBehaviorEXT = c_uint;
pub const VkPipelineRobustnessImageBehaviorEXT = enum_VkPipelineRobustnessImageBehaviorEXT;
pub const struct_VkPhysicalDevicePipelineRobustnessFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineRobustness: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePipelineRobustnessFeaturesEXT = struct_VkPhysicalDevicePipelineRobustnessFeaturesEXT;
pub const struct_VkPhysicalDevicePipelineRobustnessPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    defaultRobustnessStorageBuffers: VkPipelineRobustnessBufferBehaviorEXT = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehaviorEXT),
    defaultRobustnessUniformBuffers: VkPipelineRobustnessBufferBehaviorEXT = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehaviorEXT),
    defaultRobustnessVertexInputs: VkPipelineRobustnessBufferBehaviorEXT = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehaviorEXT),
    defaultRobustnessImages: VkPipelineRobustnessImageBehaviorEXT = @import("std").mem.zeroes(VkPipelineRobustnessImageBehaviorEXT),
};
pub const VkPhysicalDevicePipelineRobustnessPropertiesEXT = struct_VkPhysicalDevicePipelineRobustnessPropertiesEXT;
pub const struct_VkPipelineRobustnessCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    storageBuffers: VkPipelineRobustnessBufferBehaviorEXT = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehaviorEXT),
    uniformBuffers: VkPipelineRobustnessBufferBehaviorEXT = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehaviorEXT),
    vertexInputs: VkPipelineRobustnessBufferBehaviorEXT = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehaviorEXT),
    images: VkPipelineRobustnessImageBehaviorEXT = @import("std").mem.zeroes(VkPipelineRobustnessImageBehaviorEXT),
};
pub const VkPipelineRobustnessCreateInfoEXT = struct_VkPipelineRobustnessCreateInfoEXT;
pub const VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT: c_int = 1;
pub const VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkConditionalRenderingFlagBitsEXT = c_uint;
pub const VkConditionalRenderingFlagBitsEXT = enum_VkConditionalRenderingFlagBitsEXT;
pub const VkConditionalRenderingFlagsEXT = VkFlags;
pub const struct_VkConditionalRenderingBeginInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    flags: VkConditionalRenderingFlagsEXT = @import("std").mem.zeroes(VkConditionalRenderingFlagsEXT),
};
pub const VkConditionalRenderingBeginInfoEXT = struct_VkConditionalRenderingBeginInfoEXT;
pub const struct_VkPhysicalDeviceConditionalRenderingFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    conditionalRendering: VkBool32 = @import("std").mem.zeroes(VkBool32),
    inheritedConditionalRendering: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceConditionalRenderingFeaturesEXT = struct_VkPhysicalDeviceConditionalRenderingFeaturesEXT;
pub const struct_VkCommandBufferInheritanceConditionalRenderingInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    conditionalRenderingEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkCommandBufferInheritanceConditionalRenderingInfoEXT = struct_VkCommandBufferInheritanceConditionalRenderingInfoEXT;
pub const PFN_vkCmdBeginConditionalRenderingEXT = ?*const fn (VkCommandBuffer, [*c]const VkConditionalRenderingBeginInfoEXT) callconv(.C) void;
pub const PFN_vkCmdEndConditionalRenderingEXT = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub extern fn vkCmdBeginConditionalRenderingEXT(commandBuffer: VkCommandBuffer, pConditionalRenderingBegin: [*c]const VkConditionalRenderingBeginInfoEXT) void;
pub extern fn vkCmdEndConditionalRenderingEXT(commandBuffer: VkCommandBuffer) void;
pub const struct_VkViewportWScalingNV = extern struct {
    xcoeff: f32 = @import("std").mem.zeroes(f32),
    ycoeff: f32 = @import("std").mem.zeroes(f32),
};
pub const VkViewportWScalingNV = struct_VkViewportWScalingNV;
pub const struct_VkPipelineViewportWScalingStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    viewportWScalingEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    viewportCount: u32 = @import("std").mem.zeroes(u32),
    pViewportWScalings: [*c]const VkViewportWScalingNV = @import("std").mem.zeroes([*c]const VkViewportWScalingNV),
};
pub const VkPipelineViewportWScalingStateCreateInfoNV = struct_VkPipelineViewportWScalingStateCreateInfoNV;
pub const PFN_vkCmdSetViewportWScalingNV = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkViewportWScalingNV) callconv(.C) void;
pub extern fn vkCmdSetViewportWScalingNV(commandBuffer: VkCommandBuffer, firstViewport: u32, viewportCount: u32, pViewportWScalings: [*c]const VkViewportWScalingNV) void;
pub const PFN_vkReleaseDisplayEXT = ?*const fn (VkPhysicalDevice, VkDisplayKHR) callconv(.C) VkResult;
pub extern fn vkReleaseDisplayEXT(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR) VkResult;
pub const VK_SURFACE_COUNTER_VBLANK_BIT_EXT: c_int = 1;
pub const VK_SURFACE_COUNTER_VBLANK_EXT: c_int = 1;
pub const VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkSurfaceCounterFlagBitsEXT = c_uint;
pub const VkSurfaceCounterFlagBitsEXT = enum_VkSurfaceCounterFlagBitsEXT;
pub const VkSurfaceCounterFlagsEXT = VkFlags;
pub const struct_VkSurfaceCapabilities2EXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minImageCount: u32 = @import("std").mem.zeroes(u32),
    maxImageCount: u32 = @import("std").mem.zeroes(u32),
    currentExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    minImageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxImageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxImageArrayLayers: u32 = @import("std").mem.zeroes(u32),
    supportedTransforms: VkSurfaceTransformFlagsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagsKHR),
    currentTransform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
    supportedCompositeAlpha: VkCompositeAlphaFlagsKHR = @import("std").mem.zeroes(VkCompositeAlphaFlagsKHR),
    supportedUsageFlags: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    supportedSurfaceCounters: VkSurfaceCounterFlagsEXT = @import("std").mem.zeroes(VkSurfaceCounterFlagsEXT),
};
pub const VkSurfaceCapabilities2EXT = struct_VkSurfaceCapabilities2EXT;
pub const PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT = ?*const fn (VkPhysicalDevice, VkSurfaceKHR, [*c]VkSurfaceCapabilities2EXT) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceCapabilities: [*c]VkSurfaceCapabilities2EXT) VkResult;
pub const VK_DISPLAY_POWER_STATE_OFF_EXT: c_int = 0;
pub const VK_DISPLAY_POWER_STATE_SUSPEND_EXT: c_int = 1;
pub const VK_DISPLAY_POWER_STATE_ON_EXT: c_int = 2;
pub const VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDisplayPowerStateEXT = c_uint;
pub const VkDisplayPowerStateEXT = enum_VkDisplayPowerStateEXT;
pub const VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT: c_int = 0;
pub const VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDeviceEventTypeEXT = c_uint;
pub const VkDeviceEventTypeEXT = enum_VkDeviceEventTypeEXT;
pub const VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT: c_int = 0;
pub const VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDisplayEventTypeEXT = c_uint;
pub const VkDisplayEventTypeEXT = enum_VkDisplayEventTypeEXT;
pub const struct_VkDisplayPowerInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    powerState: VkDisplayPowerStateEXT = @import("std").mem.zeroes(VkDisplayPowerStateEXT),
};
pub const VkDisplayPowerInfoEXT = struct_VkDisplayPowerInfoEXT;
pub const struct_VkDeviceEventInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceEvent: VkDeviceEventTypeEXT = @import("std").mem.zeroes(VkDeviceEventTypeEXT),
};
pub const VkDeviceEventInfoEXT = struct_VkDeviceEventInfoEXT;
pub const struct_VkDisplayEventInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    displayEvent: VkDisplayEventTypeEXT = @import("std").mem.zeroes(VkDisplayEventTypeEXT),
};
pub const VkDisplayEventInfoEXT = struct_VkDisplayEventInfoEXT;
pub const struct_VkSwapchainCounterCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    surfaceCounters: VkSurfaceCounterFlagsEXT = @import("std").mem.zeroes(VkSurfaceCounterFlagsEXT),
};
pub const VkSwapchainCounterCreateInfoEXT = struct_VkSwapchainCounterCreateInfoEXT;
pub const PFN_vkDisplayPowerControlEXT = ?*const fn (VkDevice, VkDisplayKHR, [*c]const VkDisplayPowerInfoEXT) callconv(.C) VkResult;
pub const PFN_vkRegisterDeviceEventEXT = ?*const fn (VkDevice, [*c]const VkDeviceEventInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkFence) callconv(.C) VkResult;
pub const PFN_vkRegisterDisplayEventEXT = ?*const fn (VkDevice, VkDisplayKHR, [*c]const VkDisplayEventInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkFence) callconv(.C) VkResult;
pub const PFN_vkGetSwapchainCounterEXT = ?*const fn (VkDevice, VkSwapchainKHR, VkSurfaceCounterFlagBitsEXT, [*c]u64) callconv(.C) VkResult;
pub extern fn vkDisplayPowerControlEXT(device: VkDevice, display: VkDisplayKHR, pDisplayPowerInfo: [*c]const VkDisplayPowerInfoEXT) VkResult;
pub extern fn vkRegisterDeviceEventEXT(device: VkDevice, pDeviceEventInfo: [*c]const VkDeviceEventInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pFence: [*c]VkFence) VkResult;
pub extern fn vkRegisterDisplayEventEXT(device: VkDevice, display: VkDisplayKHR, pDisplayEventInfo: [*c]const VkDisplayEventInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pFence: [*c]VkFence) VkResult;
pub extern fn vkGetSwapchainCounterEXT(device: VkDevice, swapchain: VkSwapchainKHR, counter: VkSurfaceCounterFlagBitsEXT, pCounterValue: [*c]u64) VkResult;
pub const struct_VkRefreshCycleDurationGOOGLE = extern struct {
    refreshDuration: u64 = @import("std").mem.zeroes(u64),
};
pub const VkRefreshCycleDurationGOOGLE = struct_VkRefreshCycleDurationGOOGLE;
pub const struct_VkPastPresentationTimingGOOGLE = extern struct {
    presentID: u32 = @import("std").mem.zeroes(u32),
    desiredPresentTime: u64 = @import("std").mem.zeroes(u64),
    actualPresentTime: u64 = @import("std").mem.zeroes(u64),
    earliestPresentTime: u64 = @import("std").mem.zeroes(u64),
    presentMargin: u64 = @import("std").mem.zeroes(u64),
};
pub const VkPastPresentationTimingGOOGLE = struct_VkPastPresentationTimingGOOGLE;
pub const struct_VkPresentTimeGOOGLE = extern struct {
    presentID: u32 = @import("std").mem.zeroes(u32),
    desiredPresentTime: u64 = @import("std").mem.zeroes(u64),
};
pub const VkPresentTimeGOOGLE = struct_VkPresentTimeGOOGLE;
pub const struct_VkPresentTimesInfoGOOGLE = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pTimes: [*c]const VkPresentTimeGOOGLE = @import("std").mem.zeroes([*c]const VkPresentTimeGOOGLE),
};
pub const VkPresentTimesInfoGOOGLE = struct_VkPresentTimesInfoGOOGLE;
pub const PFN_vkGetRefreshCycleDurationGOOGLE = ?*const fn (VkDevice, VkSwapchainKHR, [*c]VkRefreshCycleDurationGOOGLE) callconv(.C) VkResult;
pub const PFN_vkGetPastPresentationTimingGOOGLE = ?*const fn (VkDevice, VkSwapchainKHR, [*c]u32, [*c]VkPastPresentationTimingGOOGLE) callconv(.C) VkResult;
pub extern fn vkGetRefreshCycleDurationGOOGLE(device: VkDevice, swapchain: VkSwapchainKHR, pDisplayTimingProperties: [*c]VkRefreshCycleDurationGOOGLE) VkResult;
pub extern fn vkGetPastPresentationTimingGOOGLE(device: VkDevice, swapchain: VkSwapchainKHR, pPresentationTimingCount: [*c]u32, pPresentationTimings: [*c]VkPastPresentationTimingGOOGLE) VkResult;
pub const struct_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    perViewPositionAllComponents: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX = struct_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV: c_int = 0;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV: c_int = 1;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV: c_int = 2;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV: c_int = 3;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV: c_int = 4;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV: c_int = 5;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV: c_int = 6;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV: c_int = 7;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkViewportCoordinateSwizzleNV = c_uint;
pub const VkViewportCoordinateSwizzleNV = enum_VkViewportCoordinateSwizzleNV;
pub const VkPipelineViewportSwizzleStateCreateFlagsNV = VkFlags;
pub const struct_VkViewportSwizzleNV = extern struct {
    x: VkViewportCoordinateSwizzleNV = @import("std").mem.zeroes(VkViewportCoordinateSwizzleNV),
    y: VkViewportCoordinateSwizzleNV = @import("std").mem.zeroes(VkViewportCoordinateSwizzleNV),
    z: VkViewportCoordinateSwizzleNV = @import("std").mem.zeroes(VkViewportCoordinateSwizzleNV),
    w: VkViewportCoordinateSwizzleNV = @import("std").mem.zeroes(VkViewportCoordinateSwizzleNV),
};
pub const VkViewportSwizzleNV = struct_VkViewportSwizzleNV;
pub const struct_VkPipelineViewportSwizzleStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineViewportSwizzleStateCreateFlagsNV = @import("std").mem.zeroes(VkPipelineViewportSwizzleStateCreateFlagsNV),
    viewportCount: u32 = @import("std").mem.zeroes(u32),
    pViewportSwizzles: [*c]const VkViewportSwizzleNV = @import("std").mem.zeroes([*c]const VkViewportSwizzleNV),
};
pub const VkPipelineViewportSwizzleStateCreateInfoNV = struct_VkPipelineViewportSwizzleStateCreateInfoNV;
pub const VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT: c_int = 0;
pub const VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT: c_int = 1;
pub const VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDiscardRectangleModeEXT = c_uint;
pub const VkDiscardRectangleModeEXT = enum_VkDiscardRectangleModeEXT;
pub const VkPipelineDiscardRectangleStateCreateFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceDiscardRectanglePropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxDiscardRectangles: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceDiscardRectanglePropertiesEXT = struct_VkPhysicalDeviceDiscardRectanglePropertiesEXT;
pub const struct_VkPipelineDiscardRectangleStateCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineDiscardRectangleStateCreateFlagsEXT = @import("std").mem.zeroes(VkPipelineDiscardRectangleStateCreateFlagsEXT),
    discardRectangleMode: VkDiscardRectangleModeEXT = @import("std").mem.zeroes(VkDiscardRectangleModeEXT),
    discardRectangleCount: u32 = @import("std").mem.zeroes(u32),
    pDiscardRectangles: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
};
pub const VkPipelineDiscardRectangleStateCreateInfoEXT = struct_VkPipelineDiscardRectangleStateCreateInfoEXT;
pub const PFN_vkCmdSetDiscardRectangleEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkRect2D) callconv(.C) void;
pub const PFN_vkCmdSetDiscardRectangleEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDiscardRectangleModeEXT = ?*const fn (VkCommandBuffer, VkDiscardRectangleModeEXT) callconv(.C) void;
pub extern fn vkCmdSetDiscardRectangleEXT(commandBuffer: VkCommandBuffer, firstDiscardRectangle: u32, discardRectangleCount: u32, pDiscardRectangles: [*c]const VkRect2D) void;
pub extern fn vkCmdSetDiscardRectangleEnableEXT(commandBuffer: VkCommandBuffer, discardRectangleEnable: VkBool32) void;
pub extern fn vkCmdSetDiscardRectangleModeEXT(commandBuffer: VkCommandBuffer, discardRectangleMode: VkDiscardRectangleModeEXT) void;
pub const VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT: c_int = 0;
pub const VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT: c_int = 1;
pub const VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT: c_int = 2;
pub const VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkConservativeRasterizationModeEXT = c_uint;
pub const VkConservativeRasterizationModeEXT = enum_VkConservativeRasterizationModeEXT;
pub const VkPipelineRasterizationConservativeStateCreateFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceConservativeRasterizationPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    primitiveOverestimationSize: f32 = @import("std").mem.zeroes(f32),
    maxExtraPrimitiveOverestimationSize: f32 = @import("std").mem.zeroes(f32),
    extraPrimitiveOverestimationSizeGranularity: f32 = @import("std").mem.zeroes(f32),
    primitiveUnderestimation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    conservativePointAndLineRasterization: VkBool32 = @import("std").mem.zeroes(VkBool32),
    degenerateTrianglesRasterized: VkBool32 = @import("std").mem.zeroes(VkBool32),
    degenerateLinesRasterized: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fullyCoveredFragmentShaderInputVariable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    conservativeRasterizationPostDepthCoverage: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceConservativeRasterizationPropertiesEXT = struct_VkPhysicalDeviceConservativeRasterizationPropertiesEXT;
pub const struct_VkPipelineRasterizationConservativeStateCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineRasterizationConservativeStateCreateFlagsEXT = @import("std").mem.zeroes(VkPipelineRasterizationConservativeStateCreateFlagsEXT),
    conservativeRasterizationMode: VkConservativeRasterizationModeEXT = @import("std").mem.zeroes(VkConservativeRasterizationModeEXT),
    extraPrimitiveOverestimationSize: f32 = @import("std").mem.zeroes(f32),
};
pub const VkPipelineRasterizationConservativeStateCreateInfoEXT = struct_VkPipelineRasterizationConservativeStateCreateInfoEXT;
pub const VkPipelineRasterizationDepthClipStateCreateFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceDepthClipEnableFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    depthClipEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDepthClipEnableFeaturesEXT = struct_VkPhysicalDeviceDepthClipEnableFeaturesEXT;
pub const struct_VkPipelineRasterizationDepthClipStateCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineRasterizationDepthClipStateCreateFlagsEXT = @import("std").mem.zeroes(VkPipelineRasterizationDepthClipStateCreateFlagsEXT),
    depthClipEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPipelineRasterizationDepthClipStateCreateInfoEXT = struct_VkPipelineRasterizationDepthClipStateCreateInfoEXT;
pub const struct_VkXYColorEXT = extern struct {
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
};
pub const VkXYColorEXT = struct_VkXYColorEXT;
pub const struct_VkHdrMetadataEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    displayPrimaryRed: VkXYColorEXT = @import("std").mem.zeroes(VkXYColorEXT),
    displayPrimaryGreen: VkXYColorEXT = @import("std").mem.zeroes(VkXYColorEXT),
    displayPrimaryBlue: VkXYColorEXT = @import("std").mem.zeroes(VkXYColorEXT),
    whitePoint: VkXYColorEXT = @import("std").mem.zeroes(VkXYColorEXT),
    maxLuminance: f32 = @import("std").mem.zeroes(f32),
    minLuminance: f32 = @import("std").mem.zeroes(f32),
    maxContentLightLevel: f32 = @import("std").mem.zeroes(f32),
    maxFrameAverageLightLevel: f32 = @import("std").mem.zeroes(f32),
};
pub const VkHdrMetadataEXT = struct_VkHdrMetadataEXT;
pub const PFN_vkSetHdrMetadataEXT = ?*const fn (VkDevice, u32, [*c]const VkSwapchainKHR, [*c]const VkHdrMetadataEXT) callconv(.C) void;
pub extern fn vkSetHdrMetadataEXT(device: VkDevice, swapchainCount: u32, pSwapchains: [*c]const VkSwapchainKHR, pMetadata: [*c]const VkHdrMetadataEXT) void;
pub const struct_VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    relaxedLineRasterization: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG = struct_VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG;
pub const struct_VkDebugUtilsMessengerEXT_T = opaque {};
pub const VkDebugUtilsMessengerEXT = ?*struct_VkDebugUtilsMessengerEXT_T;
pub const VkDebugUtilsMessengerCallbackDataFlagsEXT = VkFlags;
pub const VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT: c_int = 1;
pub const VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT: c_int = 16;
pub const VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT: c_int = 256;
pub const VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT: c_int = 4096;
pub const VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDebugUtilsMessageSeverityFlagBitsEXT = c_uint;
pub const VkDebugUtilsMessageSeverityFlagBitsEXT = enum_VkDebugUtilsMessageSeverityFlagBitsEXT;
pub const VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT: c_int = 1;
pub const VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT: c_int = 2;
pub const VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT: c_int = 4;
pub const VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT: c_int = 8;
pub const VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDebugUtilsMessageTypeFlagBitsEXT = c_uint;
pub const VkDebugUtilsMessageTypeFlagBitsEXT = enum_VkDebugUtilsMessageTypeFlagBitsEXT;
pub const VkDebugUtilsMessageTypeFlagsEXT = VkFlags;
pub const VkDebugUtilsMessageSeverityFlagsEXT = VkFlags;
pub const VkDebugUtilsMessengerCreateFlagsEXT = VkFlags;
pub const struct_VkDebugUtilsLabelEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pLabelName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    color: [4]f32 = @import("std").mem.zeroes([4]f32),
};
pub const VkDebugUtilsLabelEXT = struct_VkDebugUtilsLabelEXT;
pub const struct_VkDebugUtilsObjectNameInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    objectType: VkObjectType = @import("std").mem.zeroes(VkObjectType),
    objectHandle: u64 = @import("std").mem.zeroes(u64),
    pObjectName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const VkDebugUtilsObjectNameInfoEXT = struct_VkDebugUtilsObjectNameInfoEXT;
pub const struct_VkDebugUtilsMessengerCallbackDataEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDebugUtilsMessengerCallbackDataFlagsEXT = @import("std").mem.zeroes(VkDebugUtilsMessengerCallbackDataFlagsEXT),
    pMessageIdName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    messageIdNumber: i32 = @import("std").mem.zeroes(i32),
    pMessage: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    queueLabelCount: u32 = @import("std").mem.zeroes(u32),
    pQueueLabels: [*c]const VkDebugUtilsLabelEXT = @import("std").mem.zeroes([*c]const VkDebugUtilsLabelEXT),
    cmdBufLabelCount: u32 = @import("std").mem.zeroes(u32),
    pCmdBufLabels: [*c]const VkDebugUtilsLabelEXT = @import("std").mem.zeroes([*c]const VkDebugUtilsLabelEXT),
    objectCount: u32 = @import("std").mem.zeroes(u32),
    pObjects: [*c]const VkDebugUtilsObjectNameInfoEXT = @import("std").mem.zeroes([*c]const VkDebugUtilsObjectNameInfoEXT),
};
pub const VkDebugUtilsMessengerCallbackDataEXT = struct_VkDebugUtilsMessengerCallbackDataEXT;
pub const PFN_vkDebugUtilsMessengerCallbackEXT = ?*const fn (VkDebugUtilsMessageSeverityFlagBitsEXT, VkDebugUtilsMessageTypeFlagsEXT, [*c]const VkDebugUtilsMessengerCallbackDataEXT, ?*anyopaque) callconv(.C) VkBool32;
pub const struct_VkDebugUtilsMessengerCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDebugUtilsMessengerCreateFlagsEXT = @import("std").mem.zeroes(VkDebugUtilsMessengerCreateFlagsEXT),
    messageSeverity: VkDebugUtilsMessageSeverityFlagsEXT = @import("std").mem.zeroes(VkDebugUtilsMessageSeverityFlagsEXT),
    messageType: VkDebugUtilsMessageTypeFlagsEXT = @import("std").mem.zeroes(VkDebugUtilsMessageTypeFlagsEXT),
    pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT = @import("std").mem.zeroes(PFN_vkDebugUtilsMessengerCallbackEXT),
    pUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkDebugUtilsMessengerCreateInfoEXT = struct_VkDebugUtilsMessengerCreateInfoEXT;
pub const struct_VkDebugUtilsObjectTagInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    objectType: VkObjectType = @import("std").mem.zeroes(VkObjectType),
    objectHandle: u64 = @import("std").mem.zeroes(u64),
    tagName: u64 = @import("std").mem.zeroes(u64),
    tagSize: usize = @import("std").mem.zeroes(usize),
    pTag: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkDebugUtilsObjectTagInfoEXT = struct_VkDebugUtilsObjectTagInfoEXT;
pub const PFN_vkSetDebugUtilsObjectNameEXT = ?*const fn (VkDevice, [*c]const VkDebugUtilsObjectNameInfoEXT) callconv(.C) VkResult;
pub const PFN_vkSetDebugUtilsObjectTagEXT = ?*const fn (VkDevice, [*c]const VkDebugUtilsObjectTagInfoEXT) callconv(.C) VkResult;
pub const PFN_vkQueueBeginDebugUtilsLabelEXT = ?*const fn (VkQueue, [*c]const VkDebugUtilsLabelEXT) callconv(.C) void;
pub const PFN_vkQueueEndDebugUtilsLabelEXT = ?*const fn (VkQueue) callconv(.C) void;
pub const PFN_vkQueueInsertDebugUtilsLabelEXT = ?*const fn (VkQueue, [*c]const VkDebugUtilsLabelEXT) callconv(.C) void;
pub const PFN_vkCmdBeginDebugUtilsLabelEXT = ?*const fn (VkCommandBuffer, [*c]const VkDebugUtilsLabelEXT) callconv(.C) void;
pub const PFN_vkCmdEndDebugUtilsLabelEXT = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub const PFN_vkCmdInsertDebugUtilsLabelEXT = ?*const fn (VkCommandBuffer, [*c]const VkDebugUtilsLabelEXT) callconv(.C) void;
pub const PFN_vkCreateDebugUtilsMessengerEXT = ?*const fn (VkInstance, [*c]const VkDebugUtilsMessengerCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkDebugUtilsMessengerEXT) callconv(.C) VkResult;
pub const PFN_vkDestroyDebugUtilsMessengerEXT = ?*const fn (VkInstance, VkDebugUtilsMessengerEXT, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkSubmitDebugUtilsMessageEXT = ?*const fn (VkInstance, VkDebugUtilsMessageSeverityFlagBitsEXT, VkDebugUtilsMessageTypeFlagsEXT, [*c]const VkDebugUtilsMessengerCallbackDataEXT) callconv(.C) void;
pub extern fn vkSetDebugUtilsObjectNameEXT(device: VkDevice, pNameInfo: [*c]const VkDebugUtilsObjectNameInfoEXT) VkResult;
pub extern fn vkSetDebugUtilsObjectTagEXT(device: VkDevice, pTagInfo: [*c]const VkDebugUtilsObjectTagInfoEXT) VkResult;
pub extern fn vkQueueBeginDebugUtilsLabelEXT(queue: VkQueue, pLabelInfo: [*c]const VkDebugUtilsLabelEXT) void;
pub extern fn vkQueueEndDebugUtilsLabelEXT(queue: VkQueue) void;
pub extern fn vkQueueInsertDebugUtilsLabelEXT(queue: VkQueue, pLabelInfo: [*c]const VkDebugUtilsLabelEXT) void;
pub extern fn vkCmdBeginDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer, pLabelInfo: [*c]const VkDebugUtilsLabelEXT) void;
pub extern fn vkCmdEndDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer) void;
pub extern fn vkCmdInsertDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer, pLabelInfo: [*c]const VkDebugUtilsLabelEXT) void;
pub extern fn vkCreateDebugUtilsMessengerEXT(instance: VkInstance, pCreateInfo: [*c]const VkDebugUtilsMessengerCreateInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pMessenger: [*c]VkDebugUtilsMessengerEXT) VkResult;
pub extern fn vkDestroyDebugUtilsMessengerEXT(instance: VkInstance, messenger: VkDebugUtilsMessengerEXT, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkSubmitDebugUtilsMessageEXT(instance: VkInstance, messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT, messageTypes: VkDebugUtilsMessageTypeFlagsEXT, pCallbackData: [*c]const VkDebugUtilsMessengerCallbackDataEXT) void;
pub const VkSamplerReductionModeEXT = VkSamplerReductionMode;
pub const VkSamplerReductionModeCreateInfoEXT = VkSamplerReductionModeCreateInfo;
pub const VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT = VkPhysicalDeviceSamplerFilterMinmaxProperties;
pub const VkPhysicalDeviceInlineUniformBlockFeaturesEXT = VkPhysicalDeviceInlineUniformBlockFeatures;
pub const VkPhysicalDeviceInlineUniformBlockPropertiesEXT = VkPhysicalDeviceInlineUniformBlockProperties;
pub const VkWriteDescriptorSetInlineUniformBlockEXT = VkWriteDescriptorSetInlineUniformBlock;
pub const VkDescriptorPoolInlineUniformBlockCreateInfoEXT = VkDescriptorPoolInlineUniformBlockCreateInfo;
pub const struct_VkSampleLocationEXT = extern struct {
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
};
pub const VkSampleLocationEXT = struct_VkSampleLocationEXT;
pub const struct_VkSampleLocationsInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sampleLocationsPerPixel: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    sampleLocationGridSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    sampleLocationsCount: u32 = @import("std").mem.zeroes(u32),
    pSampleLocations: [*c]const VkSampleLocationEXT = @import("std").mem.zeroes([*c]const VkSampleLocationEXT),
};
pub const VkSampleLocationsInfoEXT = struct_VkSampleLocationsInfoEXT;
pub const struct_VkAttachmentSampleLocationsEXT = extern struct {
    attachmentIndex: u32 = @import("std").mem.zeroes(u32),
    sampleLocationsInfo: VkSampleLocationsInfoEXT = @import("std").mem.zeroes(VkSampleLocationsInfoEXT),
};
pub const VkAttachmentSampleLocationsEXT = struct_VkAttachmentSampleLocationsEXT;
pub const struct_VkSubpassSampleLocationsEXT = extern struct {
    subpassIndex: u32 = @import("std").mem.zeroes(u32),
    sampleLocationsInfo: VkSampleLocationsInfoEXT = @import("std").mem.zeroes(VkSampleLocationsInfoEXT),
};
pub const VkSubpassSampleLocationsEXT = struct_VkSubpassSampleLocationsEXT;
pub const struct_VkRenderPassSampleLocationsBeginInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    attachmentInitialSampleLocationsCount: u32 = @import("std").mem.zeroes(u32),
    pAttachmentInitialSampleLocations: [*c]const VkAttachmentSampleLocationsEXT = @import("std").mem.zeroes([*c]const VkAttachmentSampleLocationsEXT),
    postSubpassSampleLocationsCount: u32 = @import("std").mem.zeroes(u32),
    pPostSubpassSampleLocations: [*c]const VkSubpassSampleLocationsEXT = @import("std").mem.zeroes([*c]const VkSubpassSampleLocationsEXT),
};
pub const VkRenderPassSampleLocationsBeginInfoEXT = struct_VkRenderPassSampleLocationsBeginInfoEXT;
pub const struct_VkPipelineSampleLocationsStateCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sampleLocationsEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sampleLocationsInfo: VkSampleLocationsInfoEXT = @import("std").mem.zeroes(VkSampleLocationsInfoEXT),
};
pub const VkPipelineSampleLocationsStateCreateInfoEXT = struct_VkPipelineSampleLocationsStateCreateInfoEXT;
pub const struct_VkPhysicalDeviceSampleLocationsPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sampleLocationSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    maxSampleLocationGridSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    sampleLocationCoordinateRange: [2]f32 = @import("std").mem.zeroes([2]f32),
    sampleLocationSubPixelBits: u32 = @import("std").mem.zeroes(u32),
    variableSampleLocations: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSampleLocationsPropertiesEXT = struct_VkPhysicalDeviceSampleLocationsPropertiesEXT;
pub const struct_VkMultisamplePropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxSampleLocationGridSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkMultisamplePropertiesEXT = struct_VkMultisamplePropertiesEXT;
pub const PFN_vkCmdSetSampleLocationsEXT = ?*const fn (VkCommandBuffer, [*c]const VkSampleLocationsInfoEXT) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT = ?*const fn (VkPhysicalDevice, VkSampleCountFlagBits, [*c]VkMultisamplePropertiesEXT) callconv(.C) void;
pub extern fn vkCmdSetSampleLocationsEXT(commandBuffer: VkCommandBuffer, pSampleLocationsInfo: [*c]const VkSampleLocationsInfoEXT) void;
pub extern fn vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice: VkPhysicalDevice, samples: VkSampleCountFlagBits, pMultisampleProperties: [*c]VkMultisamplePropertiesEXT) void;
pub const VK_BLEND_OVERLAP_UNCORRELATED_EXT: c_int = 0;
pub const VK_BLEND_OVERLAP_DISJOINT_EXT: c_int = 1;
pub const VK_BLEND_OVERLAP_CONJOINT_EXT: c_int = 2;
pub const VK_BLEND_OVERLAP_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkBlendOverlapEXT = c_uint;
pub const VkBlendOverlapEXT = enum_VkBlendOverlapEXT;
pub const struct_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    advancedBlendCoherentOperations: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT = struct_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT;
pub const struct_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    advancedBlendMaxColorAttachments: u32 = @import("std").mem.zeroes(u32),
    advancedBlendIndependentBlend: VkBool32 = @import("std").mem.zeroes(VkBool32),
    advancedBlendNonPremultipliedSrcColor: VkBool32 = @import("std").mem.zeroes(VkBool32),
    advancedBlendNonPremultipliedDstColor: VkBool32 = @import("std").mem.zeroes(VkBool32),
    advancedBlendCorrelatedOverlap: VkBool32 = @import("std").mem.zeroes(VkBool32),
    advancedBlendAllOperations: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT = struct_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT;
pub const struct_VkPipelineColorBlendAdvancedStateCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcPremultiplied: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dstPremultiplied: VkBool32 = @import("std").mem.zeroes(VkBool32),
    blendOverlap: VkBlendOverlapEXT = @import("std").mem.zeroes(VkBlendOverlapEXT),
};
pub const VkPipelineColorBlendAdvancedStateCreateInfoEXT = struct_VkPipelineColorBlendAdvancedStateCreateInfoEXT;
pub const VkPipelineCoverageToColorStateCreateFlagsNV = VkFlags;
pub const struct_VkPipelineCoverageToColorStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCoverageToColorStateCreateFlagsNV = @import("std").mem.zeroes(VkPipelineCoverageToColorStateCreateFlagsNV),
    coverageToColorEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    coverageToColorLocation: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPipelineCoverageToColorStateCreateInfoNV = struct_VkPipelineCoverageToColorStateCreateInfoNV;
pub const VK_COVERAGE_MODULATION_MODE_NONE_NV: c_int = 0;
pub const VK_COVERAGE_MODULATION_MODE_RGB_NV: c_int = 1;
pub const VK_COVERAGE_MODULATION_MODE_ALPHA_NV: c_int = 2;
pub const VK_COVERAGE_MODULATION_MODE_RGBA_NV: c_int = 3;
pub const VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkCoverageModulationModeNV = c_uint;
pub const VkCoverageModulationModeNV = enum_VkCoverageModulationModeNV;
pub const VkPipelineCoverageModulationStateCreateFlagsNV = VkFlags;
pub const struct_VkPipelineCoverageModulationStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCoverageModulationStateCreateFlagsNV = @import("std").mem.zeroes(VkPipelineCoverageModulationStateCreateFlagsNV),
    coverageModulationMode: VkCoverageModulationModeNV = @import("std").mem.zeroes(VkCoverageModulationModeNV),
    coverageModulationTableEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    coverageModulationTableCount: u32 = @import("std").mem.zeroes(u32),
    pCoverageModulationTable: [*c]const f32 = @import("std").mem.zeroes([*c]const f32),
};
pub const VkPipelineCoverageModulationStateCreateInfoNV = struct_VkPipelineCoverageModulationStateCreateInfoNV;
pub const struct_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderSMCount: u32 = @import("std").mem.zeroes(u32),
    shaderWarpsPerSM: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceShaderSMBuiltinsPropertiesNV = struct_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV;
pub const struct_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderSMBuiltins: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderSMBuiltinsFeaturesNV = struct_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV;
pub const struct_VkDrmFormatModifierPropertiesEXT = extern struct {
    drmFormatModifier: u64 = @import("std").mem.zeroes(u64),
    drmFormatModifierPlaneCount: u32 = @import("std").mem.zeroes(u32),
    drmFormatModifierTilingFeatures: VkFormatFeatureFlags = @import("std").mem.zeroes(VkFormatFeatureFlags),
};
pub const VkDrmFormatModifierPropertiesEXT = struct_VkDrmFormatModifierPropertiesEXT;
pub const struct_VkDrmFormatModifierPropertiesListEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    drmFormatModifierCount: u32 = @import("std").mem.zeroes(u32),
    pDrmFormatModifierProperties: [*c]VkDrmFormatModifierPropertiesEXT = @import("std").mem.zeroes([*c]VkDrmFormatModifierPropertiesEXT),
};
pub const VkDrmFormatModifierPropertiesListEXT = struct_VkDrmFormatModifierPropertiesListEXT;
pub const struct_VkPhysicalDeviceImageDrmFormatModifierInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    drmFormatModifier: u64 = @import("std").mem.zeroes(u64),
    sharingMode: VkSharingMode = @import("std").mem.zeroes(VkSharingMode),
    queueFamilyIndexCount: u32 = @import("std").mem.zeroes(u32),
    pQueueFamilyIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkPhysicalDeviceImageDrmFormatModifierInfoEXT = struct_VkPhysicalDeviceImageDrmFormatModifierInfoEXT;
pub const struct_VkImageDrmFormatModifierListCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    drmFormatModifierCount: u32 = @import("std").mem.zeroes(u32),
    pDrmFormatModifiers: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
};
pub const VkImageDrmFormatModifierListCreateInfoEXT = struct_VkImageDrmFormatModifierListCreateInfoEXT;
pub const struct_VkImageDrmFormatModifierExplicitCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    drmFormatModifier: u64 = @import("std").mem.zeroes(u64),
    drmFormatModifierPlaneCount: u32 = @import("std").mem.zeroes(u32),
    pPlaneLayouts: [*c]const VkSubresourceLayout = @import("std").mem.zeroes([*c]const VkSubresourceLayout),
};
pub const VkImageDrmFormatModifierExplicitCreateInfoEXT = struct_VkImageDrmFormatModifierExplicitCreateInfoEXT;
pub const struct_VkImageDrmFormatModifierPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    drmFormatModifier: u64 = @import("std").mem.zeroes(u64),
};
pub const VkImageDrmFormatModifierPropertiesEXT = struct_VkImageDrmFormatModifierPropertiesEXT;
pub const struct_VkDrmFormatModifierProperties2EXT = extern struct {
    drmFormatModifier: u64 = @import("std").mem.zeroes(u64),
    drmFormatModifierPlaneCount: u32 = @import("std").mem.zeroes(u32),
    drmFormatModifierTilingFeatures: VkFormatFeatureFlags2 = @import("std").mem.zeroes(VkFormatFeatureFlags2),
};
pub const VkDrmFormatModifierProperties2EXT = struct_VkDrmFormatModifierProperties2EXT;
pub const struct_VkDrmFormatModifierPropertiesList2EXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    drmFormatModifierCount: u32 = @import("std").mem.zeroes(u32),
    pDrmFormatModifierProperties: [*c]VkDrmFormatModifierProperties2EXT = @import("std").mem.zeroes([*c]VkDrmFormatModifierProperties2EXT),
};
pub const VkDrmFormatModifierPropertiesList2EXT = struct_VkDrmFormatModifierPropertiesList2EXT;
pub const PFN_vkGetImageDrmFormatModifierPropertiesEXT = ?*const fn (VkDevice, VkImage, [*c]VkImageDrmFormatModifierPropertiesEXT) callconv(.C) VkResult;
pub extern fn vkGetImageDrmFormatModifierPropertiesEXT(device: VkDevice, image: VkImage, pProperties: [*c]VkImageDrmFormatModifierPropertiesEXT) VkResult;
pub const struct_VkValidationCacheEXT_T = opaque {};
pub const VkValidationCacheEXT = ?*struct_VkValidationCacheEXT_T;
pub const VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT: c_int = 1;
pub const VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkValidationCacheHeaderVersionEXT = c_uint;
pub const VkValidationCacheHeaderVersionEXT = enum_VkValidationCacheHeaderVersionEXT;
pub const VkValidationCacheCreateFlagsEXT = VkFlags;
pub const struct_VkValidationCacheCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkValidationCacheCreateFlagsEXT = @import("std").mem.zeroes(VkValidationCacheCreateFlagsEXT),
    initialDataSize: usize = @import("std").mem.zeroes(usize),
    pInitialData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkValidationCacheCreateInfoEXT = struct_VkValidationCacheCreateInfoEXT;
pub const struct_VkShaderModuleValidationCacheCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    validationCache: VkValidationCacheEXT = @import("std").mem.zeroes(VkValidationCacheEXT),
};
pub const VkShaderModuleValidationCacheCreateInfoEXT = struct_VkShaderModuleValidationCacheCreateInfoEXT;
pub const PFN_vkCreateValidationCacheEXT = ?*const fn (VkDevice, [*c]const VkValidationCacheCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkValidationCacheEXT) callconv(.C) VkResult;
pub const PFN_vkDestroyValidationCacheEXT = ?*const fn (VkDevice, VkValidationCacheEXT, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkMergeValidationCachesEXT = ?*const fn (VkDevice, VkValidationCacheEXT, u32, [*c]const VkValidationCacheEXT) callconv(.C) VkResult;
pub const PFN_vkGetValidationCacheDataEXT = ?*const fn (VkDevice, VkValidationCacheEXT, [*c]usize, ?*anyopaque) callconv(.C) VkResult;
pub extern fn vkCreateValidationCacheEXT(device: VkDevice, pCreateInfo: [*c]const VkValidationCacheCreateInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pValidationCache: [*c]VkValidationCacheEXT) VkResult;
pub extern fn vkDestroyValidationCacheEXT(device: VkDevice, validationCache: VkValidationCacheEXT, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkMergeValidationCachesEXT(device: VkDevice, dstCache: VkValidationCacheEXT, srcCacheCount: u32, pSrcCaches: [*c]const VkValidationCacheEXT) VkResult;
pub extern fn vkGetValidationCacheDataEXT(device: VkDevice, validationCache: VkValidationCacheEXT, pDataSize: [*c]usize, pData: ?*anyopaque) VkResult;
pub const VkDescriptorBindingFlagBitsEXT = VkDescriptorBindingFlagBits;
pub const VkDescriptorBindingFlagsEXT = VkDescriptorBindingFlags;
pub const VkDescriptorSetLayoutBindingFlagsCreateInfoEXT = VkDescriptorSetLayoutBindingFlagsCreateInfo;
pub const VkPhysicalDeviceDescriptorIndexingFeaturesEXT = VkPhysicalDeviceDescriptorIndexingFeatures;
pub const VkPhysicalDeviceDescriptorIndexingPropertiesEXT = VkPhysicalDeviceDescriptorIndexingProperties;
pub const VkDescriptorSetVariableDescriptorCountAllocateInfoEXT = VkDescriptorSetVariableDescriptorCountAllocateInfo;
pub const VkDescriptorSetVariableDescriptorCountLayoutSupportEXT = VkDescriptorSetVariableDescriptorCountLayoutSupport;
pub const VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV: c_int = 0;
pub const VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV: c_int = 1;
pub const VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV: c_int = 2;
pub const VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV: c_int = 3;
pub const VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV: c_int = 4;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV: c_int = 5;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV: c_int = 6;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV: c_int = 7;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV: c_int = 8;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV: c_int = 9;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV: c_int = 10;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV: c_int = 11;
pub const VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkShadingRatePaletteEntryNV = c_uint;
pub const VkShadingRatePaletteEntryNV = enum_VkShadingRatePaletteEntryNV;
pub const VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV: c_int = 0;
pub const VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV: c_int = 1;
pub const VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV: c_int = 2;
pub const VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV: c_int = 3;
pub const VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkCoarseSampleOrderTypeNV = c_uint;
pub const VkCoarseSampleOrderTypeNV = enum_VkCoarseSampleOrderTypeNV;
pub const struct_VkShadingRatePaletteNV = extern struct {
    shadingRatePaletteEntryCount: u32 = @import("std").mem.zeroes(u32),
    pShadingRatePaletteEntries: [*c]const VkShadingRatePaletteEntryNV = @import("std").mem.zeroes([*c]const VkShadingRatePaletteEntryNV),
};
pub const VkShadingRatePaletteNV = struct_VkShadingRatePaletteNV;
pub const struct_VkPipelineViewportShadingRateImageStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    shadingRateImageEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    viewportCount: u32 = @import("std").mem.zeroes(u32),
    pShadingRatePalettes: [*c]const VkShadingRatePaletteNV = @import("std").mem.zeroes([*c]const VkShadingRatePaletteNV),
};
pub const VkPipelineViewportShadingRateImageStateCreateInfoNV = struct_VkPipelineViewportShadingRateImageStateCreateInfoNV;
pub const struct_VkPhysicalDeviceShadingRateImageFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shadingRateImage: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shadingRateCoarseSampleOrder: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShadingRateImageFeaturesNV = struct_VkPhysicalDeviceShadingRateImageFeaturesNV;
pub const struct_VkPhysicalDeviceShadingRateImagePropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shadingRateTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    shadingRatePaletteSize: u32 = @import("std").mem.zeroes(u32),
    shadingRateMaxCoarseSamples: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceShadingRateImagePropertiesNV = struct_VkPhysicalDeviceShadingRateImagePropertiesNV;
pub const struct_VkCoarseSampleLocationNV = extern struct {
    pixelX: u32 = @import("std").mem.zeroes(u32),
    pixelY: u32 = @import("std").mem.zeroes(u32),
    sample: u32 = @import("std").mem.zeroes(u32),
};
pub const VkCoarseSampleLocationNV = struct_VkCoarseSampleLocationNV;
pub const struct_VkCoarseSampleOrderCustomNV = extern struct {
    shadingRate: VkShadingRatePaletteEntryNV = @import("std").mem.zeroes(VkShadingRatePaletteEntryNV),
    sampleCount: u32 = @import("std").mem.zeroes(u32),
    sampleLocationCount: u32 = @import("std").mem.zeroes(u32),
    pSampleLocations: [*c]const VkCoarseSampleLocationNV = @import("std").mem.zeroes([*c]const VkCoarseSampleLocationNV),
};
pub const VkCoarseSampleOrderCustomNV = struct_VkCoarseSampleOrderCustomNV;
pub const struct_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sampleOrderType: VkCoarseSampleOrderTypeNV = @import("std").mem.zeroes(VkCoarseSampleOrderTypeNV),
    customSampleOrderCount: u32 = @import("std").mem.zeroes(u32),
    pCustomSampleOrders: [*c]const VkCoarseSampleOrderCustomNV = @import("std").mem.zeroes([*c]const VkCoarseSampleOrderCustomNV),
};
pub const VkPipelineViewportCoarseSampleOrderStateCreateInfoNV = struct_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV;
pub const PFN_vkCmdBindShadingRateImageNV = ?*const fn (VkCommandBuffer, VkImageView, VkImageLayout) callconv(.C) void;
pub const PFN_vkCmdSetViewportShadingRatePaletteNV = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkShadingRatePaletteNV) callconv(.C) void;
pub const PFN_vkCmdSetCoarseSampleOrderNV = ?*const fn (VkCommandBuffer, VkCoarseSampleOrderTypeNV, u32, [*c]const VkCoarseSampleOrderCustomNV) callconv(.C) void;
pub extern fn vkCmdBindShadingRateImageNV(commandBuffer: VkCommandBuffer, imageView: VkImageView, imageLayout: VkImageLayout) void;
pub extern fn vkCmdSetViewportShadingRatePaletteNV(commandBuffer: VkCommandBuffer, firstViewport: u32, viewportCount: u32, pShadingRatePalettes: [*c]const VkShadingRatePaletteNV) void;
pub extern fn vkCmdSetCoarseSampleOrderNV(commandBuffer: VkCommandBuffer, sampleOrderType: VkCoarseSampleOrderTypeNV, customSampleOrderCount: u32, pCustomSampleOrders: [*c]const VkCoarseSampleOrderCustomNV) void;
pub const struct_VkAccelerationStructureNV_T = opaque {};
pub const VkAccelerationStructureNV = ?*struct_VkAccelerationStructureNV_T;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR: c_int = 0;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR: c_int = 1;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR: c_int = 2;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV: c_int = 0;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV: c_int = 1;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV: c_int = 2;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkRayTracingShaderGroupTypeKHR = c_uint;
pub const VkRayTracingShaderGroupTypeKHR = enum_VkRayTracingShaderGroupTypeKHR;
pub const VkRayTracingShaderGroupTypeNV = VkRayTracingShaderGroupTypeKHR;
pub const VK_GEOMETRY_TYPE_TRIANGLES_KHR: c_int = 0;
pub const VK_GEOMETRY_TYPE_AABBS_KHR: c_int = 1;
pub const VK_GEOMETRY_TYPE_INSTANCES_KHR: c_int = 2;
pub const VK_GEOMETRY_TYPE_TRIANGLES_NV: c_int = 0;
pub const VK_GEOMETRY_TYPE_AABBS_NV: c_int = 1;
pub const VK_GEOMETRY_TYPE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkGeometryTypeKHR = c_uint;
pub const VkGeometryTypeKHR = enum_VkGeometryTypeKHR;
pub const VkGeometryTypeNV = VkGeometryTypeKHR;
pub const VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR: c_int = 0;
pub const VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR: c_int = 2;
pub const VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV: c_int = 0;
pub const VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkAccelerationStructureTypeKHR = c_uint;
pub const VkAccelerationStructureTypeKHR = enum_VkAccelerationStructureTypeKHR;
pub const VkAccelerationStructureTypeNV = VkAccelerationStructureTypeKHR;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR: c_int = 0;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR: c_int = 1;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR: c_int = 2;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR: c_int = 3;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV: c_int = 0;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV: c_int = 1;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkCopyAccelerationStructureModeKHR = c_uint;
pub const VkCopyAccelerationStructureModeKHR = enum_VkCopyAccelerationStructureModeKHR;
pub const VkCopyAccelerationStructureModeNV = VkCopyAccelerationStructureModeKHR;
pub const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV: c_int = 0;
pub const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV: c_int = 2;
pub const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkAccelerationStructureMemoryRequirementsTypeNV = c_uint;
pub const VkAccelerationStructureMemoryRequirementsTypeNV = enum_VkAccelerationStructureMemoryRequirementsTypeNV;
pub const VK_GEOMETRY_OPAQUE_BIT_KHR: c_int = 1;
pub const VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR: c_int = 2;
pub const VK_GEOMETRY_OPAQUE_BIT_NV: c_int = 1;
pub const VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV: c_int = 2;
pub const VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkGeometryFlagBitsKHR = c_uint;
pub const VkGeometryFlagBitsKHR = enum_VkGeometryFlagBitsKHR;
pub const VkGeometryFlagsKHR = VkFlags;
pub const VkGeometryFlagsNV = VkGeometryFlagsKHR;
pub const VkGeometryFlagBitsNV = VkGeometryFlagBitsKHR;
pub const VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR: c_int = 1;
pub const VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR: c_int = 2;
pub const VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR: c_int = 4;
pub const VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR: c_int = 8;
pub const VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT: c_int = 16;
pub const VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT: c_int = 32;
pub const VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR: c_int = 2;
pub const VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV: c_int = 1;
pub const VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV: c_int = 2;
pub const VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV: c_int = 4;
pub const VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV: c_int = 8;
pub const VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkGeometryInstanceFlagBitsKHR = c_uint;
pub const VkGeometryInstanceFlagBitsKHR = enum_VkGeometryInstanceFlagBitsKHR;
pub const VkGeometryInstanceFlagsKHR = VkFlags;
pub const VkGeometryInstanceFlagsNV = VkGeometryInstanceFlagsKHR;
pub const VkGeometryInstanceFlagBitsNV = VkGeometryInstanceFlagBitsKHR;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR: c_int = 1;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR: c_int = 2;
pub const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR: c_int = 4;
pub const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR: c_int = 8;
pub const VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR: c_int = 16;
pub const VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV: c_int = 32;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT: c_int = 64;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT: c_int = 128;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT: c_int = 256;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR: c_int = 2048;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV: c_int = 1;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV: c_int = 2;
pub const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV: c_int = 4;
pub const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV: c_int = 8;
pub const VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV: c_int = 16;
pub const VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkBuildAccelerationStructureFlagBitsKHR = c_uint;
pub const VkBuildAccelerationStructureFlagBitsKHR = enum_VkBuildAccelerationStructureFlagBitsKHR;
pub const VkBuildAccelerationStructureFlagsKHR = VkFlags;
pub const VkBuildAccelerationStructureFlagsNV = VkBuildAccelerationStructureFlagsKHR;
pub const VkBuildAccelerationStructureFlagBitsNV = VkBuildAccelerationStructureFlagBitsKHR;
pub const struct_VkRayTracingShaderGroupCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkRayTracingShaderGroupTypeKHR = @import("std").mem.zeroes(VkRayTracingShaderGroupTypeKHR),
    generalShader: u32 = @import("std").mem.zeroes(u32),
    closestHitShader: u32 = @import("std").mem.zeroes(u32),
    anyHitShader: u32 = @import("std").mem.zeroes(u32),
    intersectionShader: u32 = @import("std").mem.zeroes(u32),
};
pub const VkRayTracingShaderGroupCreateInfoNV = struct_VkRayTracingShaderGroupCreateInfoNV;
pub const struct_VkRayTracingPipelineCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCreateFlags = @import("std").mem.zeroes(VkPipelineCreateFlags),
    stageCount: u32 = @import("std").mem.zeroes(u32),
    pStages: [*c]const VkPipelineShaderStageCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineShaderStageCreateInfo),
    groupCount: u32 = @import("std").mem.zeroes(u32),
    pGroups: [*c]const VkRayTracingShaderGroupCreateInfoNV = @import("std").mem.zeroes([*c]const VkRayTracingShaderGroupCreateInfoNV),
    maxRecursionDepth: u32 = @import("std").mem.zeroes(u32),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    basePipelineHandle: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    basePipelineIndex: i32 = @import("std").mem.zeroes(i32),
};
pub const VkRayTracingPipelineCreateInfoNV = struct_VkRayTracingPipelineCreateInfoNV;
pub const struct_VkGeometryTrianglesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    vertexData: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    vertexOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    vertexCount: u32 = @import("std").mem.zeroes(u32),
    vertexStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    vertexFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    indexData: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    indexOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    indexCount: u32 = @import("std").mem.zeroes(u32),
    indexType: VkIndexType = @import("std").mem.zeroes(VkIndexType),
    transformData: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    transformOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkGeometryTrianglesNV = struct_VkGeometryTrianglesNV;
pub const struct_VkGeometryAABBNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    aabbData: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    numAABBs: u32 = @import("std").mem.zeroes(u32),
    stride: u32 = @import("std").mem.zeroes(u32),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkGeometryAABBNV = struct_VkGeometryAABBNV;
pub const struct_VkGeometryDataNV = extern struct {
    triangles: VkGeometryTrianglesNV = @import("std").mem.zeroes(VkGeometryTrianglesNV),
    aabbs: VkGeometryAABBNV = @import("std").mem.zeroes(VkGeometryAABBNV),
};
pub const VkGeometryDataNV = struct_VkGeometryDataNV;
pub const struct_VkGeometryNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    geometryType: VkGeometryTypeKHR = @import("std").mem.zeroes(VkGeometryTypeKHR),
    geometry: VkGeometryDataNV = @import("std").mem.zeroes(VkGeometryDataNV),
    flags: VkGeometryFlagsKHR = @import("std").mem.zeroes(VkGeometryFlagsKHR),
};
pub const VkGeometryNV = struct_VkGeometryNV;
pub const struct_VkAccelerationStructureInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkAccelerationStructureTypeNV = @import("std").mem.zeroes(VkAccelerationStructureTypeNV),
    flags: VkBuildAccelerationStructureFlagsNV = @import("std").mem.zeroes(VkBuildAccelerationStructureFlagsNV),
    instanceCount: u32 = @import("std").mem.zeroes(u32),
    geometryCount: u32 = @import("std").mem.zeroes(u32),
    pGeometries: [*c]const VkGeometryNV = @import("std").mem.zeroes([*c]const VkGeometryNV),
};
pub const VkAccelerationStructureInfoNV = struct_VkAccelerationStructureInfoNV;
pub const struct_VkAccelerationStructureCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    compactedSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    info: VkAccelerationStructureInfoNV = @import("std").mem.zeroes(VkAccelerationStructureInfoNV),
};
pub const VkAccelerationStructureCreateInfoNV = struct_VkAccelerationStructureCreateInfoNV;
pub const struct_VkBindAccelerationStructureMemoryInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    accelerationStructure: VkAccelerationStructureNV = @import("std").mem.zeroes(VkAccelerationStructureNV),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    memoryOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    deviceIndexCount: u32 = @import("std").mem.zeroes(u32),
    pDeviceIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkBindAccelerationStructureMemoryInfoNV = struct_VkBindAccelerationStructureMemoryInfoNV;
pub const struct_VkWriteDescriptorSetAccelerationStructureNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    accelerationStructureCount: u32 = @import("std").mem.zeroes(u32),
    pAccelerationStructures: [*c]const VkAccelerationStructureNV = @import("std").mem.zeroes([*c]const VkAccelerationStructureNV),
};
pub const VkWriteDescriptorSetAccelerationStructureNV = struct_VkWriteDescriptorSetAccelerationStructureNV;
pub const struct_VkAccelerationStructureMemoryRequirementsInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkAccelerationStructureMemoryRequirementsTypeNV = @import("std").mem.zeroes(VkAccelerationStructureMemoryRequirementsTypeNV),
    accelerationStructure: VkAccelerationStructureNV = @import("std").mem.zeroes(VkAccelerationStructureNV),
};
pub const VkAccelerationStructureMemoryRequirementsInfoNV = struct_VkAccelerationStructureMemoryRequirementsInfoNV;
pub const struct_VkPhysicalDeviceRayTracingPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderGroupHandleSize: u32 = @import("std").mem.zeroes(u32),
    maxRecursionDepth: u32 = @import("std").mem.zeroes(u32),
    maxShaderGroupStride: u32 = @import("std").mem.zeroes(u32),
    shaderGroupBaseAlignment: u32 = @import("std").mem.zeroes(u32),
    maxGeometryCount: u64 = @import("std").mem.zeroes(u64),
    maxInstanceCount: u64 = @import("std").mem.zeroes(u64),
    maxTriangleCount: u64 = @import("std").mem.zeroes(u64),
    maxDescriptorSetAccelerationStructures: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceRayTracingPropertiesNV = struct_VkPhysicalDeviceRayTracingPropertiesNV;
pub const struct_VkTransformMatrixKHR = extern struct {
    matrix: [3][4]f32 = @import("std").mem.zeroes([3][4]f32),
};
pub const VkTransformMatrixKHR = struct_VkTransformMatrixKHR;
pub const VkTransformMatrixNV = VkTransformMatrixKHR;
pub const struct_VkAabbPositionsKHR = extern struct {
    minX: f32 = @import("std").mem.zeroes(f32),
    minY: f32 = @import("std").mem.zeroes(f32),
    minZ: f32 = @import("std").mem.zeroes(f32),
    maxX: f32 = @import("std").mem.zeroes(f32),
    maxY: f32 = @import("std").mem.zeroes(f32),
    maxZ: f32 = @import("std").mem.zeroes(f32),
};
pub const VkAabbPositionsKHR = struct_VkAabbPositionsKHR;
pub const VkAabbPositionsNV = VkAabbPositionsKHR;
// /usr/include/vulkan/vulkan_core.h:13799:35: warning: struct demoted to opaque type - has bitfield
pub const struct_VkAccelerationStructureInstanceKHR = opaque {};
pub const VkAccelerationStructureInstanceKHR = struct_VkAccelerationStructureInstanceKHR;
pub const VkAccelerationStructureInstanceNV = VkAccelerationStructureInstanceKHR;
pub const PFN_vkCreateAccelerationStructureNV = ?*const fn (VkDevice, [*c]const VkAccelerationStructureCreateInfoNV, [*c]const VkAllocationCallbacks, [*c]VkAccelerationStructureNV) callconv(.C) VkResult;
pub const PFN_vkDestroyAccelerationStructureNV = ?*const fn (VkDevice, VkAccelerationStructureNV, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetAccelerationStructureMemoryRequirementsNV = ?*const fn (VkDevice, [*c]const VkAccelerationStructureMemoryRequirementsInfoNV, [*c]VkMemoryRequirements2KHR) callconv(.C) void;
pub const PFN_vkBindAccelerationStructureMemoryNV = ?*const fn (VkDevice, u32, [*c]const VkBindAccelerationStructureMemoryInfoNV) callconv(.C) VkResult;
pub const PFN_vkCmdBuildAccelerationStructureNV = ?*const fn (VkCommandBuffer, [*c]const VkAccelerationStructureInfoNV, VkBuffer, VkDeviceSize, VkBool32, VkAccelerationStructureNV, VkAccelerationStructureNV, VkBuffer, VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdCopyAccelerationStructureNV = ?*const fn (VkCommandBuffer, VkAccelerationStructureNV, VkAccelerationStructureNV, VkCopyAccelerationStructureModeKHR) callconv(.C) void;
pub const PFN_vkCmdTraceRaysNV = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCreateRayTracingPipelinesNV = ?*const fn (VkDevice, VkPipelineCache, u32, [*c]const VkRayTracingPipelineCreateInfoNV, [*c]const VkAllocationCallbacks, [*c]VkPipeline) callconv(.C) VkResult;
pub const PFN_vkGetRayTracingShaderGroupHandlesKHR = ?*const fn (VkDevice, VkPipeline, u32, u32, usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkGetRayTracingShaderGroupHandlesNV = ?*const fn (VkDevice, VkPipeline, u32, u32, usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkGetAccelerationStructureHandleNV = ?*const fn (VkDevice, VkAccelerationStructureNV, usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkCmdWriteAccelerationStructuresPropertiesNV = ?*const fn (VkCommandBuffer, u32, [*c]const VkAccelerationStructureNV, VkQueryType, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkCompileDeferredNV = ?*const fn (VkDevice, VkPipeline, u32) callconv(.C) VkResult;
pub extern fn vkCreateAccelerationStructureNV(device: VkDevice, pCreateInfo: [*c]const VkAccelerationStructureCreateInfoNV, pAllocator: [*c]const VkAllocationCallbacks, pAccelerationStructure: [*c]VkAccelerationStructureNV) VkResult;
pub extern fn vkDestroyAccelerationStructureNV(device: VkDevice, accelerationStructure: VkAccelerationStructureNV, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetAccelerationStructureMemoryRequirementsNV(device: VkDevice, pInfo: [*c]const VkAccelerationStructureMemoryRequirementsInfoNV, pMemoryRequirements: [*c]VkMemoryRequirements2KHR) void;
pub extern fn vkBindAccelerationStructureMemoryNV(device: VkDevice, bindInfoCount: u32, pBindInfos: [*c]const VkBindAccelerationStructureMemoryInfoNV) VkResult;
pub extern fn vkCmdBuildAccelerationStructureNV(commandBuffer: VkCommandBuffer, pInfo: [*c]const VkAccelerationStructureInfoNV, instanceData: VkBuffer, instanceOffset: VkDeviceSize, update: VkBool32, dst: VkAccelerationStructureNV, src: VkAccelerationStructureNV, scratch: VkBuffer, scratchOffset: VkDeviceSize) void;
pub extern fn vkCmdCopyAccelerationStructureNV(commandBuffer: VkCommandBuffer, dst: VkAccelerationStructureNV, src: VkAccelerationStructureNV, mode: VkCopyAccelerationStructureModeKHR) void;
pub extern fn vkCmdTraceRaysNV(commandBuffer: VkCommandBuffer, raygenShaderBindingTableBuffer: VkBuffer, raygenShaderBindingOffset: VkDeviceSize, missShaderBindingTableBuffer: VkBuffer, missShaderBindingOffset: VkDeviceSize, missShaderBindingStride: VkDeviceSize, hitShaderBindingTableBuffer: VkBuffer, hitShaderBindingOffset: VkDeviceSize, hitShaderBindingStride: VkDeviceSize, callableShaderBindingTableBuffer: VkBuffer, callableShaderBindingOffset: VkDeviceSize, callableShaderBindingStride: VkDeviceSize, width: u32, height: u32, depth: u32) void;
pub extern fn vkCreateRayTracingPipelinesNV(device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: [*c]const VkRayTracingPipelineCreateInfoNV, pAllocator: [*c]const VkAllocationCallbacks, pPipelines: [*c]VkPipeline) VkResult;
pub extern fn vkGetRayTracingShaderGroupHandlesKHR(device: VkDevice, pipeline: VkPipeline, firstGroup: u32, groupCount: u32, dataSize: usize, pData: ?*anyopaque) VkResult;
pub extern fn vkGetRayTracingShaderGroupHandlesNV(device: VkDevice, pipeline: VkPipeline, firstGroup: u32, groupCount: u32, dataSize: usize, pData: ?*anyopaque) VkResult;
pub extern fn vkGetAccelerationStructureHandleNV(device: VkDevice, accelerationStructure: VkAccelerationStructureNV, dataSize: usize, pData: ?*anyopaque) VkResult;
pub extern fn vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer: VkCommandBuffer, accelerationStructureCount: u32, pAccelerationStructures: [*c]const VkAccelerationStructureNV, queryType: VkQueryType, queryPool: VkQueryPool, firstQuery: u32) void;
pub extern fn vkCompileDeferredNV(device: VkDevice, pipeline: VkPipeline, shader: u32) VkResult;
pub const struct_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    representativeFragmentTest: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV = struct_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV;
pub const struct_VkPipelineRepresentativeFragmentTestStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    representativeFragmentTestEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPipelineRepresentativeFragmentTestStateCreateInfoNV = struct_VkPipelineRepresentativeFragmentTestStateCreateInfoNV;
pub const struct_VkPhysicalDeviceImageViewImageFormatInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageViewType: VkImageViewType = @import("std").mem.zeroes(VkImageViewType),
};
pub const VkPhysicalDeviceImageViewImageFormatInfoEXT = struct_VkPhysicalDeviceImageViewImageFormatInfoEXT;
pub const struct_VkFilterCubicImageViewImageFormatPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    filterCubic: VkBool32 = @import("std").mem.zeroes(VkBool32),
    filterCubicMinmax: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkFilterCubicImageViewImageFormatPropertiesEXT = struct_VkFilterCubicImageViewImageFormatPropertiesEXT;
pub const VkQueueGlobalPriorityEXT = VkQueueGlobalPriorityKHR;
pub const VkDeviceQueueGlobalPriorityCreateInfoEXT = VkDeviceQueueGlobalPriorityCreateInfoKHR;
pub const struct_VkImportMemoryHostPointerInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleType: VkExternalMemoryHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagBits),
    pHostPointer: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkImportMemoryHostPointerInfoEXT = struct_VkImportMemoryHostPointerInfoEXT;
pub const struct_VkMemoryHostPointerPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryTypeBits: u32 = @import("std").mem.zeroes(u32),
};
pub const VkMemoryHostPointerPropertiesEXT = struct_VkMemoryHostPointerPropertiesEXT;
pub const struct_VkPhysicalDeviceExternalMemoryHostPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minImportedHostPointerAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceExternalMemoryHostPropertiesEXT = struct_VkPhysicalDeviceExternalMemoryHostPropertiesEXT;
pub const PFN_vkGetMemoryHostPointerPropertiesEXT = ?*const fn (VkDevice, VkExternalMemoryHandleTypeFlagBits, ?*const anyopaque, [*c]VkMemoryHostPointerPropertiesEXT) callconv(.C) VkResult;
pub extern fn vkGetMemoryHostPointerPropertiesEXT(device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, pHostPointer: ?*const anyopaque, pMemoryHostPointerProperties: [*c]VkMemoryHostPointerPropertiesEXT) VkResult;
pub const PFN_vkCmdWriteBufferMarkerAMD = ?*const fn (VkCommandBuffer, VkPipelineStageFlagBits, VkBuffer, VkDeviceSize, u32) callconv(.C) void;
pub extern fn vkCmdWriteBufferMarkerAMD(commandBuffer: VkCommandBuffer, pipelineStage: VkPipelineStageFlagBits, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, marker: u32) void;
pub const VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD: c_int = 2147483647;
pub const enum_VkPipelineCompilerControlFlagBitsAMD = c_uint;
pub const VkPipelineCompilerControlFlagBitsAMD = enum_VkPipelineCompilerControlFlagBitsAMD;
pub const VkPipelineCompilerControlFlagsAMD = VkFlags;
pub const struct_VkPipelineCompilerControlCreateInfoAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    compilerControlFlags: VkPipelineCompilerControlFlagsAMD = @import("std").mem.zeroes(VkPipelineCompilerControlFlagsAMD),
};
pub const VkPipelineCompilerControlCreateInfoAMD = struct_VkPipelineCompilerControlCreateInfoAMD;
pub const VkTimeDomainEXT = VkTimeDomainKHR;
pub const VkCalibratedTimestampInfoEXT = VkCalibratedTimestampInfoKHR;
pub const PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkTimeDomainKHR) callconv(.C) VkResult;
pub const PFN_vkGetCalibratedTimestampsEXT = ?*const fn (VkDevice, u32, [*c]const VkCalibratedTimestampInfoKHR, [*c]u64, [*c]u64) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice: VkPhysicalDevice, pTimeDomainCount: [*c]u32, pTimeDomains: [*c]VkTimeDomainKHR) VkResult;
pub extern fn vkGetCalibratedTimestampsEXT(device: VkDevice, timestampCount: u32, pTimestampInfos: [*c]const VkCalibratedTimestampInfoKHR, pTimestamps: [*c]u64, pMaxDeviation: [*c]u64) VkResult;
pub const struct_VkPhysicalDeviceShaderCorePropertiesAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderEngineCount: u32 = @import("std").mem.zeroes(u32),
    shaderArraysPerEngineCount: u32 = @import("std").mem.zeroes(u32),
    computeUnitsPerShaderArray: u32 = @import("std").mem.zeroes(u32),
    simdPerComputeUnit: u32 = @import("std").mem.zeroes(u32),
    wavefrontsPerSimd: u32 = @import("std").mem.zeroes(u32),
    wavefrontSize: u32 = @import("std").mem.zeroes(u32),
    sgprsPerSimd: u32 = @import("std").mem.zeroes(u32),
    minSgprAllocation: u32 = @import("std").mem.zeroes(u32),
    maxSgprAllocation: u32 = @import("std").mem.zeroes(u32),
    sgprAllocationGranularity: u32 = @import("std").mem.zeroes(u32),
    vgprsPerSimd: u32 = @import("std").mem.zeroes(u32),
    minVgprAllocation: u32 = @import("std").mem.zeroes(u32),
    maxVgprAllocation: u32 = @import("std").mem.zeroes(u32),
    vgprAllocationGranularity: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceShaderCorePropertiesAMD = struct_VkPhysicalDeviceShaderCorePropertiesAMD;
pub const VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD: c_int = 0;
pub const VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD: c_int = 1;
pub const VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD: c_int = 2;
pub const VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD: c_int = 2147483647;
pub const enum_VkMemoryOverallocationBehaviorAMD = c_uint;
pub const VkMemoryOverallocationBehaviorAMD = enum_VkMemoryOverallocationBehaviorAMD;
pub const struct_VkDeviceMemoryOverallocationCreateInfoAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    overallocationBehavior: VkMemoryOverallocationBehaviorAMD = @import("std").mem.zeroes(VkMemoryOverallocationBehaviorAMD),
};
pub const VkDeviceMemoryOverallocationCreateInfoAMD = struct_VkDeviceMemoryOverallocationCreateInfoAMD;
pub const struct_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxVertexAttribDivisor: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT = struct_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT;
pub const VkVertexInputBindingDivisorDescriptionEXT = VkVertexInputBindingDivisorDescriptionKHR;
pub const VkPipelineVertexInputDivisorStateCreateInfoEXT = VkPipelineVertexInputDivisorStateCreateInfoKHR;
pub const VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT = VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR;
pub const VkPipelineCreationFeedbackFlagBitsEXT = VkPipelineCreationFeedbackFlagBits;
pub const VkPipelineCreationFeedbackFlagsEXT = VkPipelineCreationFeedbackFlags;
pub const VkPipelineCreationFeedbackCreateInfoEXT = VkPipelineCreationFeedbackCreateInfo;
pub const VkPipelineCreationFeedbackEXT = VkPipelineCreationFeedback;
pub const struct_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    computeDerivativeGroupQuads: VkBool32 = @import("std").mem.zeroes(VkBool32),
    computeDerivativeGroupLinear: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceComputeShaderDerivativesFeaturesNV = struct_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV;
pub const struct_VkPhysicalDeviceMeshShaderFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    taskShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    meshShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMeshShaderFeaturesNV = struct_VkPhysicalDeviceMeshShaderFeaturesNV;
pub const struct_VkPhysicalDeviceMeshShaderPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxDrawMeshTasksCount: u32 = @import("std").mem.zeroes(u32),
    maxTaskWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    maxTaskWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxTaskTotalMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxTaskOutputCount: u32 = @import("std").mem.zeroes(u32),
    maxMeshWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    maxMeshWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxMeshTotalMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputVertices: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputPrimitives: u32 = @import("std").mem.zeroes(u32),
    maxMeshMultiviewViewCount: u32 = @import("std").mem.zeroes(u32),
    meshOutputPerVertexGranularity: u32 = @import("std").mem.zeroes(u32),
    meshOutputPerPrimitiveGranularity: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceMeshShaderPropertiesNV = struct_VkPhysicalDeviceMeshShaderPropertiesNV;
pub const struct_VkDrawMeshTasksIndirectCommandNV = extern struct {
    taskCount: u32 = @import("std").mem.zeroes(u32),
    firstTask: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDrawMeshTasksIndirectCommandNV = struct_VkDrawMeshTasksIndirectCommandNV;
pub const PFN_vkCmdDrawMeshTasksNV = ?*const fn (VkCommandBuffer, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawMeshTasksIndirectNV = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawMeshTasksIndirectCountNV = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub extern fn vkCmdDrawMeshTasksNV(commandBuffer: VkCommandBuffer, taskCount: u32, firstTask: u32) void;
pub extern fn vkCmdDrawMeshTasksIndirectNV(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32) void;
pub extern fn vkCmdDrawMeshTasksIndirectCountNV(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub const VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV = VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR;
pub const struct_VkPhysicalDeviceShaderImageFootprintFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageFootprint: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderImageFootprintFeaturesNV = struct_VkPhysicalDeviceShaderImageFootprintFeaturesNV;
pub const struct_VkPipelineViewportExclusiveScissorStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    exclusiveScissorCount: u32 = @import("std").mem.zeroes(u32),
    pExclusiveScissors: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
};
pub const VkPipelineViewportExclusiveScissorStateCreateInfoNV = struct_VkPipelineViewportExclusiveScissorStateCreateInfoNV;
pub const struct_VkPhysicalDeviceExclusiveScissorFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    exclusiveScissor: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceExclusiveScissorFeaturesNV = struct_VkPhysicalDeviceExclusiveScissorFeaturesNV;
pub const PFN_vkCmdSetExclusiveScissorEnableNV = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetExclusiveScissorNV = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkRect2D) callconv(.C) void;
pub extern fn vkCmdSetExclusiveScissorEnableNV(commandBuffer: VkCommandBuffer, firstExclusiveScissor: u32, exclusiveScissorCount: u32, pExclusiveScissorEnables: [*c]const VkBool32) void;
pub extern fn vkCmdSetExclusiveScissorNV(commandBuffer: VkCommandBuffer, firstExclusiveScissor: u32, exclusiveScissorCount: u32, pExclusiveScissors: [*c]const VkRect2D) void;
pub const struct_VkQueueFamilyCheckpointPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    checkpointExecutionStageMask: VkPipelineStageFlags = @import("std").mem.zeroes(VkPipelineStageFlags),
};
pub const VkQueueFamilyCheckpointPropertiesNV = struct_VkQueueFamilyCheckpointPropertiesNV;
pub const struct_VkCheckpointDataNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    stage: VkPipelineStageFlagBits = @import("std").mem.zeroes(VkPipelineStageFlagBits),
    pCheckpointMarker: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkCheckpointDataNV = struct_VkCheckpointDataNV;
pub const PFN_vkCmdSetCheckpointNV = ?*const fn (VkCommandBuffer, ?*const anyopaque) callconv(.C) void;
pub const PFN_vkGetQueueCheckpointDataNV = ?*const fn (VkQueue, [*c]u32, [*c]VkCheckpointDataNV) callconv(.C) void;
pub extern fn vkCmdSetCheckpointNV(commandBuffer: VkCommandBuffer, pCheckpointMarker: ?*const anyopaque) void;
pub extern fn vkGetQueueCheckpointDataNV(queue: VkQueue, pCheckpointDataCount: [*c]u32, pCheckpointData: [*c]VkCheckpointDataNV) void;
pub const struct_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderIntegerFunctions2: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL = struct_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL;
pub const struct_VkPerformanceConfigurationINTEL_T = opaque {};
pub const VkPerformanceConfigurationINTEL = ?*struct_VkPerformanceConfigurationINTEL_T;
pub const VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL: c_int = 0;
pub const VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL: c_int = 2147483647;
pub const enum_VkPerformanceConfigurationTypeINTEL = c_uint;
pub const VkPerformanceConfigurationTypeINTEL = enum_VkPerformanceConfigurationTypeINTEL;
pub const VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL: c_int = 0;
pub const VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL: c_int = 2147483647;
pub const enum_VkQueryPoolSamplingModeINTEL = c_uint;
pub const VkQueryPoolSamplingModeINTEL = enum_VkQueryPoolSamplingModeINTEL;
pub const VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL: c_int = 0;
pub const VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL: c_int = 1;
pub const VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL: c_int = 2147483647;
pub const enum_VkPerformanceOverrideTypeINTEL = c_uint;
pub const VkPerformanceOverrideTypeINTEL = enum_VkPerformanceOverrideTypeINTEL;
pub const VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL: c_int = 0;
pub const VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL: c_int = 1;
pub const VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL: c_int = 2147483647;
pub const enum_VkPerformanceParameterTypeINTEL = c_uint;
pub const VkPerformanceParameterTypeINTEL = enum_VkPerformanceParameterTypeINTEL;
pub const VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL: c_int = 0;
pub const VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL: c_int = 1;
pub const VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL: c_int = 2;
pub const VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL: c_int = 3;
pub const VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL: c_int = 4;
pub const VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL: c_int = 2147483647;
pub const enum_VkPerformanceValueTypeINTEL = c_uint;
pub const VkPerformanceValueTypeINTEL = enum_VkPerformanceValueTypeINTEL;
pub const union_VkPerformanceValueDataINTEL = extern union {
    value32: u32,
    value64: u64,
    valueFloat: f32,
    valueBool: VkBool32,
    valueString: [*c]const u8,
};
pub const VkPerformanceValueDataINTEL = union_VkPerformanceValueDataINTEL;
pub const struct_VkPerformanceValueINTEL = extern struct {
    type: VkPerformanceValueTypeINTEL = @import("std").mem.zeroes(VkPerformanceValueTypeINTEL),
    data: VkPerformanceValueDataINTEL = @import("std").mem.zeroes(VkPerformanceValueDataINTEL),
};
pub const VkPerformanceValueINTEL = struct_VkPerformanceValueINTEL;
pub const struct_VkInitializePerformanceApiInfoINTEL = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkInitializePerformanceApiInfoINTEL = struct_VkInitializePerformanceApiInfoINTEL;
pub const struct_VkQueryPoolPerformanceQueryCreateInfoINTEL = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    performanceCountersSampling: VkQueryPoolSamplingModeINTEL = @import("std").mem.zeroes(VkQueryPoolSamplingModeINTEL),
};
pub const VkQueryPoolPerformanceQueryCreateInfoINTEL = struct_VkQueryPoolPerformanceQueryCreateInfoINTEL;
pub const VkQueryPoolCreateInfoINTEL = VkQueryPoolPerformanceQueryCreateInfoINTEL;
pub const struct_VkPerformanceMarkerInfoINTEL = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    marker: u64 = @import("std").mem.zeroes(u64),
};
pub const VkPerformanceMarkerInfoINTEL = struct_VkPerformanceMarkerInfoINTEL;
pub const struct_VkPerformanceStreamMarkerInfoINTEL = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    marker: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPerformanceStreamMarkerInfoINTEL = struct_VkPerformanceStreamMarkerInfoINTEL;
pub const struct_VkPerformanceOverrideInfoINTEL = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkPerformanceOverrideTypeINTEL = @import("std").mem.zeroes(VkPerformanceOverrideTypeINTEL),
    enable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    parameter: u64 = @import("std").mem.zeroes(u64),
};
pub const VkPerformanceOverrideInfoINTEL = struct_VkPerformanceOverrideInfoINTEL;
pub const struct_VkPerformanceConfigurationAcquireInfoINTEL = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkPerformanceConfigurationTypeINTEL = @import("std").mem.zeroes(VkPerformanceConfigurationTypeINTEL),
};
pub const VkPerformanceConfigurationAcquireInfoINTEL = struct_VkPerformanceConfigurationAcquireInfoINTEL;
pub const PFN_vkInitializePerformanceApiINTEL = ?*const fn (VkDevice, [*c]const VkInitializePerformanceApiInfoINTEL) callconv(.C) VkResult;
pub const PFN_vkUninitializePerformanceApiINTEL = ?*const fn (VkDevice) callconv(.C) void;
pub const PFN_vkCmdSetPerformanceMarkerINTEL = ?*const fn (VkCommandBuffer, [*c]const VkPerformanceMarkerInfoINTEL) callconv(.C) VkResult;
pub const PFN_vkCmdSetPerformanceStreamMarkerINTEL = ?*const fn (VkCommandBuffer, [*c]const VkPerformanceStreamMarkerInfoINTEL) callconv(.C) VkResult;
pub const PFN_vkCmdSetPerformanceOverrideINTEL = ?*const fn (VkCommandBuffer, [*c]const VkPerformanceOverrideInfoINTEL) callconv(.C) VkResult;
pub const PFN_vkAcquirePerformanceConfigurationINTEL = ?*const fn (VkDevice, [*c]const VkPerformanceConfigurationAcquireInfoINTEL, [*c]VkPerformanceConfigurationINTEL) callconv(.C) VkResult;
pub const PFN_vkReleasePerformanceConfigurationINTEL = ?*const fn (VkDevice, VkPerformanceConfigurationINTEL) callconv(.C) VkResult;
pub const PFN_vkQueueSetPerformanceConfigurationINTEL = ?*const fn (VkQueue, VkPerformanceConfigurationINTEL) callconv(.C) VkResult;
pub const PFN_vkGetPerformanceParameterINTEL = ?*const fn (VkDevice, VkPerformanceParameterTypeINTEL, [*c]VkPerformanceValueINTEL) callconv(.C) VkResult;
pub extern fn vkInitializePerformanceApiINTEL(device: VkDevice, pInitializeInfo: [*c]const VkInitializePerformanceApiInfoINTEL) VkResult;
pub extern fn vkUninitializePerformanceApiINTEL(device: VkDevice) void;
pub extern fn vkCmdSetPerformanceMarkerINTEL(commandBuffer: VkCommandBuffer, pMarkerInfo: [*c]const VkPerformanceMarkerInfoINTEL) VkResult;
pub extern fn vkCmdSetPerformanceStreamMarkerINTEL(commandBuffer: VkCommandBuffer, pMarkerInfo: [*c]const VkPerformanceStreamMarkerInfoINTEL) VkResult;
pub extern fn vkCmdSetPerformanceOverrideINTEL(commandBuffer: VkCommandBuffer, pOverrideInfo: [*c]const VkPerformanceOverrideInfoINTEL) VkResult;
pub extern fn vkAcquirePerformanceConfigurationINTEL(device: VkDevice, pAcquireInfo: [*c]const VkPerformanceConfigurationAcquireInfoINTEL, pConfiguration: [*c]VkPerformanceConfigurationINTEL) VkResult;
pub extern fn vkReleasePerformanceConfigurationINTEL(device: VkDevice, configuration: VkPerformanceConfigurationINTEL) VkResult;
pub extern fn vkQueueSetPerformanceConfigurationINTEL(queue: VkQueue, configuration: VkPerformanceConfigurationINTEL) VkResult;
pub extern fn vkGetPerformanceParameterINTEL(device: VkDevice, parameter: VkPerformanceParameterTypeINTEL, pValue: [*c]VkPerformanceValueINTEL) VkResult;
pub const struct_VkPhysicalDevicePCIBusInfoPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pciDomain: u32 = @import("std").mem.zeroes(u32),
    pciBus: u32 = @import("std").mem.zeroes(u32),
    pciDevice: u32 = @import("std").mem.zeroes(u32),
    pciFunction: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDevicePCIBusInfoPropertiesEXT = struct_VkPhysicalDevicePCIBusInfoPropertiesEXT;
pub const struct_VkDisplayNativeHdrSurfaceCapabilitiesAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    localDimmingSupport: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkDisplayNativeHdrSurfaceCapabilitiesAMD = struct_VkDisplayNativeHdrSurfaceCapabilitiesAMD;
pub const struct_VkSwapchainDisplayNativeHdrCreateInfoAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    localDimmingEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSwapchainDisplayNativeHdrCreateInfoAMD = struct_VkSwapchainDisplayNativeHdrCreateInfoAMD;
pub const PFN_vkSetLocalDimmingAMD = ?*const fn (VkDevice, VkSwapchainKHR, VkBool32) callconv(.C) void;
pub extern fn vkSetLocalDimmingAMD(device: VkDevice, swapChain: VkSwapchainKHR, localDimmingEnable: VkBool32) void;
pub const struct_VkPhysicalDeviceFragmentDensityMapFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentDensityMap: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentDensityMapDynamic: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentDensityMapNonSubsampledImages: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentDensityMapFeaturesEXT = struct_VkPhysicalDeviceFragmentDensityMapFeaturesEXT;
pub const struct_VkPhysicalDeviceFragmentDensityMapPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minFragmentDensityTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxFragmentDensityTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    fragmentDensityInvocations: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentDensityMapPropertiesEXT = struct_VkPhysicalDeviceFragmentDensityMapPropertiesEXT;
pub const struct_VkRenderPassFragmentDensityMapCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    fragmentDensityMapAttachment: VkAttachmentReference = @import("std").mem.zeroes(VkAttachmentReference),
};
pub const VkRenderPassFragmentDensityMapCreateInfoEXT = struct_VkRenderPassFragmentDensityMapCreateInfoEXT;
pub const VkPhysicalDeviceScalarBlockLayoutFeaturesEXT = VkPhysicalDeviceScalarBlockLayoutFeatures;
pub const VkPhysicalDeviceSubgroupSizeControlFeaturesEXT = VkPhysicalDeviceSubgroupSizeControlFeatures;
pub const VkPhysicalDeviceSubgroupSizeControlPropertiesEXT = VkPhysicalDeviceSubgroupSizeControlProperties;
pub const VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT = VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;
pub const VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD: c_int = 2147483647;
pub const enum_VkShaderCorePropertiesFlagBitsAMD = c_uint;
pub const VkShaderCorePropertiesFlagBitsAMD = enum_VkShaderCorePropertiesFlagBitsAMD;
pub const VkShaderCorePropertiesFlagsAMD = VkFlags;
pub const struct_VkPhysicalDeviceShaderCoreProperties2AMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderCoreFeatures: VkShaderCorePropertiesFlagsAMD = @import("std").mem.zeroes(VkShaderCorePropertiesFlagsAMD),
    activeComputeUnitCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceShaderCoreProperties2AMD = struct_VkPhysicalDeviceShaderCoreProperties2AMD;
pub const struct_VkPhysicalDeviceCoherentMemoryFeaturesAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceCoherentMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCoherentMemoryFeaturesAMD = struct_VkPhysicalDeviceCoherentMemoryFeaturesAMD;
pub const struct_VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderImageInt64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseImageInt64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT = struct_VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT;
pub const struct_VkPhysicalDeviceMemoryBudgetPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    heapBudget: [16]VkDeviceSize = @import("std").mem.zeroes([16]VkDeviceSize),
    heapUsage: [16]VkDeviceSize = @import("std").mem.zeroes([16]VkDeviceSize),
};
pub const VkPhysicalDeviceMemoryBudgetPropertiesEXT = struct_VkPhysicalDeviceMemoryBudgetPropertiesEXT;
pub const struct_VkPhysicalDeviceMemoryPriorityFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryPriority: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMemoryPriorityFeaturesEXT = struct_VkPhysicalDeviceMemoryPriorityFeaturesEXT;
pub const struct_VkMemoryPriorityAllocateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    priority: f32 = @import("std").mem.zeroes(f32),
};
pub const VkMemoryPriorityAllocateInfoEXT = struct_VkMemoryPriorityAllocateInfoEXT;
pub const struct_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    dedicatedAllocationImageAliasing: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV = struct_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;
pub const struct_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    bufferDeviceAddress: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddressCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddressMultiDevice: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceBufferDeviceAddressFeaturesEXT = struct_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;
pub const VkPhysicalDeviceBufferAddressFeaturesEXT = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;
pub const VkBufferDeviceAddressInfoEXT = VkBufferDeviceAddressInfo;
pub const struct_VkBufferDeviceAddressCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
};
pub const VkBufferDeviceAddressCreateInfoEXT = struct_VkBufferDeviceAddressCreateInfoEXT;
pub const PFN_vkGetBufferDeviceAddressEXT = ?*const fn (VkDevice, [*c]const VkBufferDeviceAddressInfo) callconv(.C) VkDeviceAddress;
pub extern fn vkGetBufferDeviceAddressEXT(device: VkDevice, pInfo: [*c]const VkBufferDeviceAddressInfo) VkDeviceAddress;
pub const VkToolPurposeFlagBitsEXT = VkToolPurposeFlagBits;
pub const VkToolPurposeFlagsEXT = VkToolPurposeFlags;
pub const VkPhysicalDeviceToolPropertiesEXT = VkPhysicalDeviceToolProperties;
pub const PFN_vkGetPhysicalDeviceToolPropertiesEXT = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkPhysicalDeviceToolProperties) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceToolPropertiesEXT(physicalDevice: VkPhysicalDevice, pToolCount: [*c]u32, pToolProperties: [*c]VkPhysicalDeviceToolProperties) VkResult;
pub const VkImageStencilUsageCreateInfoEXT = VkImageStencilUsageCreateInfo;
pub const VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT: c_int = 0;
pub const VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT: c_int = 1;
pub const VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT: c_int = 2;
pub const VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT: c_int = 3;
pub const VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT: c_int = 4;
pub const VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkValidationFeatureEnableEXT = c_uint;
pub const VkValidationFeatureEnableEXT = enum_VkValidationFeatureEnableEXT;
pub const VK_VALIDATION_FEATURE_DISABLE_ALL_EXT: c_int = 0;
pub const VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT: c_int = 1;
pub const VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT: c_int = 2;
pub const VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT: c_int = 3;
pub const VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT: c_int = 4;
pub const VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT: c_int = 5;
pub const VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT: c_int = 6;
pub const VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT: c_int = 7;
pub const VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkValidationFeatureDisableEXT = c_uint;
pub const VkValidationFeatureDisableEXT = enum_VkValidationFeatureDisableEXT;
pub const struct_VkValidationFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    enabledValidationFeatureCount: u32 = @import("std").mem.zeroes(u32),
    pEnabledValidationFeatures: [*c]const VkValidationFeatureEnableEXT = @import("std").mem.zeroes([*c]const VkValidationFeatureEnableEXT),
    disabledValidationFeatureCount: u32 = @import("std").mem.zeroes(u32),
    pDisabledValidationFeatures: [*c]const VkValidationFeatureDisableEXT = @import("std").mem.zeroes([*c]const VkValidationFeatureDisableEXT),
};
pub const VkValidationFeaturesEXT = struct_VkValidationFeaturesEXT;
pub const VkComponentTypeNV = VkComponentTypeKHR;
pub const VkScopeNV = VkScopeKHR;
pub const struct_VkCooperativeMatrixPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    MSize: u32 = @import("std").mem.zeroes(u32),
    NSize: u32 = @import("std").mem.zeroes(u32),
    KSize: u32 = @import("std").mem.zeroes(u32),
    AType: VkComponentTypeNV = @import("std").mem.zeroes(VkComponentTypeNV),
    BType: VkComponentTypeNV = @import("std").mem.zeroes(VkComponentTypeNV),
    CType: VkComponentTypeNV = @import("std").mem.zeroes(VkComponentTypeNV),
    DType: VkComponentTypeNV = @import("std").mem.zeroes(VkComponentTypeNV),
    scope: VkScopeNV = @import("std").mem.zeroes(VkScopeNV),
};
pub const VkCooperativeMatrixPropertiesNV = struct_VkCooperativeMatrixPropertiesNV;
pub const struct_VkPhysicalDeviceCooperativeMatrixFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cooperativeMatrix: VkBool32 = @import("std").mem.zeroes(VkBool32),
    cooperativeMatrixRobustBufferAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCooperativeMatrixFeaturesNV = struct_VkPhysicalDeviceCooperativeMatrixFeaturesNV;
pub const struct_VkPhysicalDeviceCooperativeMatrixPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cooperativeMatrixSupportedStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
};
pub const VkPhysicalDeviceCooperativeMatrixPropertiesNV = struct_VkPhysicalDeviceCooperativeMatrixPropertiesNV;
pub const PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkCooperativeMatrixPropertiesNV) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice: VkPhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]VkCooperativeMatrixPropertiesNV) VkResult;
pub const VK_COVERAGE_REDUCTION_MODE_MERGE_NV: c_int = 0;
pub const VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV: c_int = 1;
pub const VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkCoverageReductionModeNV = c_uint;
pub const VkCoverageReductionModeNV = enum_VkCoverageReductionModeNV;
pub const VkPipelineCoverageReductionStateCreateFlagsNV = VkFlags;
pub const struct_VkPhysicalDeviceCoverageReductionModeFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    coverageReductionMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCoverageReductionModeFeaturesNV = struct_VkPhysicalDeviceCoverageReductionModeFeaturesNV;
pub const struct_VkPipelineCoverageReductionStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCoverageReductionStateCreateFlagsNV = @import("std").mem.zeroes(VkPipelineCoverageReductionStateCreateFlagsNV),
    coverageReductionMode: VkCoverageReductionModeNV = @import("std").mem.zeroes(VkCoverageReductionModeNV),
};
pub const VkPipelineCoverageReductionStateCreateInfoNV = struct_VkPipelineCoverageReductionStateCreateInfoNV;
pub const struct_VkFramebufferMixedSamplesCombinationNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    coverageReductionMode: VkCoverageReductionModeNV = @import("std").mem.zeroes(VkCoverageReductionModeNV),
    rasterizationSamples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    depthStencilSamples: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    colorSamples: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
};
pub const VkFramebufferMixedSamplesCombinationNV = struct_VkFramebufferMixedSamplesCombinationNV;
pub const PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkFramebufferMixedSamplesCombinationNV) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice: VkPhysicalDevice, pCombinationCount: [*c]u32, pCombinations: [*c]VkFramebufferMixedSamplesCombinationNV) VkResult;
pub const struct_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentShaderSampleInterlock: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShaderPixelInterlock: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShaderShadingRateInterlock: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT = struct_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT;
pub const struct_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    ycbcrImageArrays: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceYcbcrImageArraysFeaturesEXT = struct_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT;
pub const VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT: c_int = 0;
pub const VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT: c_int = 1;
pub const VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkProvokingVertexModeEXT = c_uint;
pub const VkProvokingVertexModeEXT = enum_VkProvokingVertexModeEXT;
pub const struct_VkPhysicalDeviceProvokingVertexFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    provokingVertexLast: VkBool32 = @import("std").mem.zeroes(VkBool32),
    transformFeedbackPreservesProvokingVertex: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceProvokingVertexFeaturesEXT = struct_VkPhysicalDeviceProvokingVertexFeaturesEXT;
pub const struct_VkPhysicalDeviceProvokingVertexPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    provokingVertexModePerPipeline: VkBool32 = @import("std").mem.zeroes(VkBool32),
    transformFeedbackPreservesTriangleFanProvokingVertex: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceProvokingVertexPropertiesEXT = struct_VkPhysicalDeviceProvokingVertexPropertiesEXT;
pub const struct_VkPipelineRasterizationProvokingVertexStateCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    provokingVertexMode: VkProvokingVertexModeEXT = @import("std").mem.zeroes(VkProvokingVertexModeEXT),
};
pub const VkPipelineRasterizationProvokingVertexStateCreateInfoEXT = struct_VkPipelineRasterizationProvokingVertexStateCreateInfoEXT;
pub const VkHeadlessSurfaceCreateFlagsEXT = VkFlags;
pub const struct_VkHeadlessSurfaceCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkHeadlessSurfaceCreateFlagsEXT = @import("std").mem.zeroes(VkHeadlessSurfaceCreateFlagsEXT),
};
pub const VkHeadlessSurfaceCreateInfoEXT = struct_VkHeadlessSurfaceCreateInfoEXT;
pub const PFN_vkCreateHeadlessSurfaceEXT = ?*const fn (VkInstance, [*c]const VkHeadlessSurfaceCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkSurfaceKHR) callconv(.C) VkResult;
pub extern fn vkCreateHeadlessSurfaceEXT(instance: VkInstance, pCreateInfo: [*c]const VkHeadlessSurfaceCreateInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pSurface: [*c]VkSurfaceKHR) VkResult;
pub const VkLineRasterizationModeEXT = VkLineRasterizationModeKHR;
pub const VkPhysicalDeviceLineRasterizationFeaturesEXT = VkPhysicalDeviceLineRasterizationFeaturesKHR;
pub const VkPhysicalDeviceLineRasterizationPropertiesEXT = VkPhysicalDeviceLineRasterizationPropertiesKHR;
pub const VkPipelineRasterizationLineStateCreateInfoEXT = VkPipelineRasterizationLineStateCreateInfoKHR;
pub const PFN_vkCmdSetLineStippleEXT = ?*const fn (VkCommandBuffer, u32, u16) callconv(.C) void;
pub extern fn vkCmdSetLineStippleEXT(commandBuffer: VkCommandBuffer, lineStippleFactor: u32, lineStipplePattern: u16) void;
pub const struct_VkPhysicalDeviceShaderAtomicFloatFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderBufferFloat32Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat32AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat64AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat32Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat32AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat64AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderImageFloat32Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderImageFloat32AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseImageFloat32Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseImageFloat32AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderAtomicFloatFeaturesEXT = struct_VkPhysicalDeviceShaderAtomicFloatFeaturesEXT;
pub const VkPhysicalDeviceHostQueryResetFeaturesEXT = VkPhysicalDeviceHostQueryResetFeatures;
pub const PFN_vkResetQueryPoolEXT = ?*const fn (VkDevice, VkQueryPool, u32, u32) callconv(.C) void;
pub extern fn vkResetQueryPoolEXT(device: VkDevice, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32) void;
pub const VkPhysicalDeviceIndexTypeUint8FeaturesEXT = VkPhysicalDeviceIndexTypeUint8FeaturesKHR;
pub const struct_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    extendedDynamicState: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceExtendedDynamicStateFeaturesEXT = struct_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT;
pub const PFN_vkCmdSetCullModeEXT = ?*const fn (VkCommandBuffer, VkCullModeFlags) callconv(.C) void;
pub const PFN_vkCmdSetFrontFaceEXT = ?*const fn (VkCommandBuffer, VkFrontFace) callconv(.C) void;
pub const PFN_vkCmdSetPrimitiveTopologyEXT = ?*const fn (VkCommandBuffer, VkPrimitiveTopology) callconv(.C) void;
pub const PFN_vkCmdSetViewportWithCountEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkViewport) callconv(.C) void;
pub const PFN_vkCmdSetScissorWithCountEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkRect2D) callconv(.C) void;
pub const PFN_vkCmdBindVertexBuffers2EXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize, [*c]const VkDeviceSize, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdSetDepthTestEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthWriteEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthCompareOpEXT = ?*const fn (VkCommandBuffer, VkCompareOp) callconv(.C) void;
pub const PFN_vkCmdSetDepthBoundsTestEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetStencilTestEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetStencilOpEXT = ?*const fn (VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp) callconv(.C) void;
pub extern fn vkCmdSetCullModeEXT(commandBuffer: VkCommandBuffer, cullMode: VkCullModeFlags) void;
pub extern fn vkCmdSetFrontFaceEXT(commandBuffer: VkCommandBuffer, frontFace: VkFrontFace) void;
pub extern fn vkCmdSetPrimitiveTopologyEXT(commandBuffer: VkCommandBuffer, primitiveTopology: VkPrimitiveTopology) void;
pub extern fn vkCmdSetViewportWithCountEXT(commandBuffer: VkCommandBuffer, viewportCount: u32, pViewports: [*c]const VkViewport) void;
pub extern fn vkCmdSetScissorWithCountEXT(commandBuffer: VkCommandBuffer, scissorCount: u32, pScissors: [*c]const VkRect2D) void;
pub extern fn vkCmdBindVertexBuffers2EXT(commandBuffer: VkCommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: [*c]const VkBuffer, pOffsets: [*c]const VkDeviceSize, pSizes: [*c]const VkDeviceSize, pStrides: [*c]const VkDeviceSize) void;
pub extern fn vkCmdSetDepthTestEnableEXT(commandBuffer: VkCommandBuffer, depthTestEnable: VkBool32) void;
pub extern fn vkCmdSetDepthWriteEnableEXT(commandBuffer: VkCommandBuffer, depthWriteEnable: VkBool32) void;
pub extern fn vkCmdSetDepthCompareOpEXT(commandBuffer: VkCommandBuffer, depthCompareOp: VkCompareOp) void;
pub extern fn vkCmdSetDepthBoundsTestEnableEXT(commandBuffer: VkCommandBuffer, depthBoundsTestEnable: VkBool32) void;
pub extern fn vkCmdSetStencilTestEnableEXT(commandBuffer: VkCommandBuffer, stencilTestEnable: VkBool32) void;
pub extern fn vkCmdSetStencilOpEXT(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, failOp: VkStencilOp, passOp: VkStencilOp, depthFailOp: VkStencilOp, compareOp: VkCompareOp) void;
pub const VK_HOST_IMAGE_COPY_MEMCPY_EXT: c_int = 1;
pub const VK_HOST_IMAGE_COPY_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkHostImageCopyFlagBitsEXT = c_uint;
pub const VkHostImageCopyFlagBitsEXT = enum_VkHostImageCopyFlagBitsEXT;
pub const VkHostImageCopyFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceHostImageCopyFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    hostImageCopy: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceHostImageCopyFeaturesEXT = struct_VkPhysicalDeviceHostImageCopyFeaturesEXT;
pub const struct_VkPhysicalDeviceHostImageCopyPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    copySrcLayoutCount: u32 = @import("std").mem.zeroes(u32),
    pCopySrcLayouts: [*c]VkImageLayout = @import("std").mem.zeroes([*c]VkImageLayout),
    copyDstLayoutCount: u32 = @import("std").mem.zeroes(u32),
    pCopyDstLayouts: [*c]VkImageLayout = @import("std").mem.zeroes([*c]VkImageLayout),
    optimalTilingLayoutUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    identicalMemoryTypeRequirements: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceHostImageCopyPropertiesEXT = struct_VkPhysicalDeviceHostImageCopyPropertiesEXT;
pub const struct_VkMemoryToImageCopyEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pHostPointer: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    memoryRowLength: u32 = @import("std").mem.zeroes(u32),
    memoryImageHeight: u32 = @import("std").mem.zeroes(u32),
    imageSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    imageOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    imageExtent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkMemoryToImageCopyEXT = struct_VkMemoryToImageCopyEXT;
pub const struct_VkImageToMemoryCopyEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pHostPointer: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryRowLength: u32 = @import("std").mem.zeroes(u32),
    memoryImageHeight: u32 = @import("std").mem.zeroes(u32),
    imageSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    imageOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    imageExtent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkImageToMemoryCopyEXT = struct_VkImageToMemoryCopyEXT;
pub const struct_VkCopyMemoryToImageInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkHostImageCopyFlagsEXT = @import("std").mem.zeroes(VkHostImageCopyFlagsEXT),
    dstImage: VkImage = @import("std").mem.zeroes(VkImage),
    dstImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkMemoryToImageCopyEXT = @import("std").mem.zeroes([*c]const VkMemoryToImageCopyEXT),
};
pub const VkCopyMemoryToImageInfoEXT = struct_VkCopyMemoryToImageInfoEXT;
pub const struct_VkCopyImageToMemoryInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkHostImageCopyFlagsEXT = @import("std").mem.zeroes(VkHostImageCopyFlagsEXT),
    srcImage: VkImage = @import("std").mem.zeroes(VkImage),
    srcImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkImageToMemoryCopyEXT = @import("std").mem.zeroes([*c]const VkImageToMemoryCopyEXT),
};
pub const VkCopyImageToMemoryInfoEXT = struct_VkCopyImageToMemoryInfoEXT;
pub const struct_VkCopyImageToImageInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkHostImageCopyFlagsEXT = @import("std").mem.zeroes(VkHostImageCopyFlagsEXT),
    srcImage: VkImage = @import("std").mem.zeroes(VkImage),
    srcImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    dstImage: VkImage = @import("std").mem.zeroes(VkImage),
    dstImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkImageCopy2 = @import("std").mem.zeroes([*c]const VkImageCopy2),
};
pub const VkCopyImageToImageInfoEXT = struct_VkCopyImageToImageInfoEXT;
pub const struct_VkHostImageLayoutTransitionInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    oldLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    newLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    subresourceRange: VkImageSubresourceRange = @import("std").mem.zeroes(VkImageSubresourceRange),
};
pub const VkHostImageLayoutTransitionInfoEXT = struct_VkHostImageLayoutTransitionInfoEXT;
pub const struct_VkSubresourceHostMemcpySizeEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkSubresourceHostMemcpySizeEXT = struct_VkSubresourceHostMemcpySizeEXT;
pub const struct_VkHostImageCopyDevicePerformanceQueryEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    optimalDeviceAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    identicalMemoryLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkHostImageCopyDevicePerformanceQueryEXT = struct_VkHostImageCopyDevicePerformanceQueryEXT;
pub const VkSubresourceLayout2EXT = VkSubresourceLayout2KHR;
pub const VkImageSubresource2EXT = VkImageSubresource2KHR;
pub const PFN_vkCopyMemoryToImageEXT = ?*const fn (VkDevice, [*c]const VkCopyMemoryToImageInfoEXT) callconv(.C) VkResult;
pub const PFN_vkCopyImageToMemoryEXT = ?*const fn (VkDevice, [*c]const VkCopyImageToMemoryInfoEXT) callconv(.C) VkResult;
pub const PFN_vkCopyImageToImageEXT = ?*const fn (VkDevice, [*c]const VkCopyImageToImageInfoEXT) callconv(.C) VkResult;
pub const PFN_vkTransitionImageLayoutEXT = ?*const fn (VkDevice, u32, [*c]const VkHostImageLayoutTransitionInfoEXT) callconv(.C) VkResult;
pub const PFN_vkGetImageSubresourceLayout2EXT = ?*const fn (VkDevice, VkImage, [*c]const VkImageSubresource2KHR, [*c]VkSubresourceLayout2KHR) callconv(.C) void;
pub extern fn vkCopyMemoryToImageEXT(device: VkDevice, pCopyMemoryToImageInfo: [*c]const VkCopyMemoryToImageInfoEXT) VkResult;
pub extern fn vkCopyImageToMemoryEXT(device: VkDevice, pCopyImageToMemoryInfo: [*c]const VkCopyImageToMemoryInfoEXT) VkResult;
pub extern fn vkCopyImageToImageEXT(device: VkDevice, pCopyImageToImageInfo: [*c]const VkCopyImageToImageInfoEXT) VkResult;
pub extern fn vkTransitionImageLayoutEXT(device: VkDevice, transitionCount: u32, pTransitions: [*c]const VkHostImageLayoutTransitionInfoEXT) VkResult;
pub extern fn vkGetImageSubresourceLayout2EXT(device: VkDevice, image: VkImage, pSubresource: [*c]const VkImageSubresource2KHR, pLayout: [*c]VkSubresourceLayout2KHR) void;
pub const struct_VkPhysicalDeviceMapMemoryPlacedFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryMapPlaced: VkBool32 = @import("std").mem.zeroes(VkBool32),
    memoryMapRangePlaced: VkBool32 = @import("std").mem.zeroes(VkBool32),
    memoryUnmapReserve: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMapMemoryPlacedFeaturesEXT = struct_VkPhysicalDeviceMapMemoryPlacedFeaturesEXT;
pub const struct_VkPhysicalDeviceMapMemoryPlacedPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minPlacedMemoryMapAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceMapMemoryPlacedPropertiesEXT = struct_VkPhysicalDeviceMapMemoryPlacedPropertiesEXT;
pub const struct_VkMemoryMapPlacedInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pPlacedAddress: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkMemoryMapPlacedInfoEXT = struct_VkMemoryMapPlacedInfoEXT;
pub const struct_VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderBufferFloat16Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat16AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat16AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat32AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat64AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat16Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat16AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat16AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat32AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat64AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderImageFloat32AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseImageFloat32AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT = struct_VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT;
pub const VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT: c_int = 1;
pub const VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT: c_int = 2;
pub const VK_PRESENT_SCALING_STRETCH_BIT_EXT: c_int = 4;
pub const VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkPresentScalingFlagBitsEXT = c_uint;
pub const VkPresentScalingFlagBitsEXT = enum_VkPresentScalingFlagBitsEXT;
pub const VkPresentScalingFlagsEXT = VkFlags;
pub const VK_PRESENT_GRAVITY_MIN_BIT_EXT: c_int = 1;
pub const VK_PRESENT_GRAVITY_MAX_BIT_EXT: c_int = 2;
pub const VK_PRESENT_GRAVITY_CENTERED_BIT_EXT: c_int = 4;
pub const VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkPresentGravityFlagBitsEXT = c_uint;
pub const VkPresentGravityFlagBitsEXT = enum_VkPresentGravityFlagBitsEXT;
pub const VkPresentGravityFlagsEXT = VkFlags;
pub const struct_VkSurfacePresentModeEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentMode: VkPresentModeKHR = @import("std").mem.zeroes(VkPresentModeKHR),
};
pub const VkSurfacePresentModeEXT = struct_VkSurfacePresentModeEXT;
pub const struct_VkSurfacePresentScalingCapabilitiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportedPresentScaling: VkPresentScalingFlagsEXT = @import("std").mem.zeroes(VkPresentScalingFlagsEXT),
    supportedPresentGravityX: VkPresentGravityFlagsEXT = @import("std").mem.zeroes(VkPresentGravityFlagsEXT),
    supportedPresentGravityY: VkPresentGravityFlagsEXT = @import("std").mem.zeroes(VkPresentGravityFlagsEXT),
    minScaledImageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxScaledImageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkSurfacePresentScalingCapabilitiesEXT = struct_VkSurfacePresentScalingCapabilitiesEXT;
pub const struct_VkSurfacePresentModeCompatibilityEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentModeCount: u32 = @import("std").mem.zeroes(u32),
    pPresentModes: [*c]VkPresentModeKHR = @import("std").mem.zeroes([*c]VkPresentModeKHR),
};
pub const VkSurfacePresentModeCompatibilityEXT = struct_VkSurfacePresentModeCompatibilityEXT;
pub const struct_VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    swapchainMaintenance1: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT = struct_VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT;
pub const struct_VkSwapchainPresentFenceInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pFences: [*c]const VkFence = @import("std").mem.zeroes([*c]const VkFence),
};
pub const VkSwapchainPresentFenceInfoEXT = struct_VkSwapchainPresentFenceInfoEXT;
pub const struct_VkSwapchainPresentModesCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    presentModeCount: u32 = @import("std").mem.zeroes(u32),
    pPresentModes: [*c]const VkPresentModeKHR = @import("std").mem.zeroes([*c]const VkPresentModeKHR),
};
pub const VkSwapchainPresentModesCreateInfoEXT = struct_VkSwapchainPresentModesCreateInfoEXT;
pub const struct_VkSwapchainPresentModeInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pPresentModes: [*c]const VkPresentModeKHR = @import("std").mem.zeroes([*c]const VkPresentModeKHR),
};
pub const VkSwapchainPresentModeInfoEXT = struct_VkSwapchainPresentModeInfoEXT;
pub const struct_VkSwapchainPresentScalingCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    scalingBehavior: VkPresentScalingFlagsEXT = @import("std").mem.zeroes(VkPresentScalingFlagsEXT),
    presentGravityX: VkPresentGravityFlagsEXT = @import("std").mem.zeroes(VkPresentGravityFlagsEXT),
    presentGravityY: VkPresentGravityFlagsEXT = @import("std").mem.zeroes(VkPresentGravityFlagsEXT),
};
pub const VkSwapchainPresentScalingCreateInfoEXT = struct_VkSwapchainPresentScalingCreateInfoEXT;
pub const struct_VkReleaseSwapchainImagesInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchain: VkSwapchainKHR = @import("std").mem.zeroes(VkSwapchainKHR),
    imageIndexCount: u32 = @import("std").mem.zeroes(u32),
    pImageIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkReleaseSwapchainImagesInfoEXT = struct_VkReleaseSwapchainImagesInfoEXT;
pub const PFN_vkReleaseSwapchainImagesEXT = ?*const fn (VkDevice, [*c]const VkReleaseSwapchainImagesInfoEXT) callconv(.C) VkResult;
pub extern fn vkReleaseSwapchainImagesEXT(device: VkDevice, pReleaseInfo: [*c]const VkReleaseSwapchainImagesInfoEXT) VkResult;
pub const VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT = VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures;
pub const struct_VkIndirectCommandsLayoutNV_T = opaque {};
pub const VkIndirectCommandsLayoutNV = ?*struct_VkIndirectCommandsLayoutNV_T;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV: c_int = 0;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV: c_int = 1;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV: c_int = 2;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV: c_int = 3;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV: c_int = 4;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV: c_int = 5;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV: c_int = 6;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV: c_int = 7;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV: c_int = 1000328000;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV: c_int = 1000428003;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV: c_int = 1000428004;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkIndirectCommandsTokenTypeNV = c_uint;
pub const VkIndirectCommandsTokenTypeNV = enum_VkIndirectCommandsTokenTypeNV;
pub const VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV: c_int = 1;
pub const VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkIndirectStateFlagBitsNV = c_uint;
pub const VkIndirectStateFlagBitsNV = enum_VkIndirectStateFlagBitsNV;
pub const VkIndirectStateFlagsNV = VkFlags;
pub const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV: c_int = 1;
pub const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV: c_int = 2;
pub const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV: c_int = 4;
pub const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkIndirectCommandsLayoutUsageFlagBitsNV = c_uint;
pub const VkIndirectCommandsLayoutUsageFlagBitsNV = enum_VkIndirectCommandsLayoutUsageFlagBitsNV;
pub const VkIndirectCommandsLayoutUsageFlagsNV = VkFlags;
pub const struct_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxGraphicsShaderGroupCount: u32 = @import("std").mem.zeroes(u32),
    maxIndirectSequenceCount: u32 = @import("std").mem.zeroes(u32),
    maxIndirectCommandsTokenCount: u32 = @import("std").mem.zeroes(u32),
    maxIndirectCommandsStreamCount: u32 = @import("std").mem.zeroes(u32),
    maxIndirectCommandsTokenOffset: u32 = @import("std").mem.zeroes(u32),
    maxIndirectCommandsStreamStride: u32 = @import("std").mem.zeroes(u32),
    minSequencesCountBufferOffsetAlignment: u32 = @import("std").mem.zeroes(u32),
    minSequencesIndexBufferOffsetAlignment: u32 = @import("std").mem.zeroes(u32),
    minIndirectCommandsBufferOffsetAlignment: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV = struct_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV;
pub const struct_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceGeneratedCommands: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV = struct_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV;
pub const struct_VkGraphicsShaderGroupCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stageCount: u32 = @import("std").mem.zeroes(u32),
    pStages: [*c]const VkPipelineShaderStageCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineShaderStageCreateInfo),
    pVertexInputState: [*c]const VkPipelineVertexInputStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineVertexInputStateCreateInfo),
    pTessellationState: [*c]const VkPipelineTessellationStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineTessellationStateCreateInfo),
};
pub const VkGraphicsShaderGroupCreateInfoNV = struct_VkGraphicsShaderGroupCreateInfoNV;
pub const struct_VkGraphicsPipelineShaderGroupsCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    groupCount: u32 = @import("std").mem.zeroes(u32),
    pGroups: [*c]const VkGraphicsShaderGroupCreateInfoNV = @import("std").mem.zeroes([*c]const VkGraphicsShaderGroupCreateInfoNV),
    pipelineCount: u32 = @import("std").mem.zeroes(u32),
    pPipelines: [*c]const VkPipeline = @import("std").mem.zeroes([*c]const VkPipeline),
};
pub const VkGraphicsPipelineShaderGroupsCreateInfoNV = struct_VkGraphicsPipelineShaderGroupsCreateInfoNV;
pub const struct_VkBindShaderGroupIndirectCommandNV = extern struct {
    groupIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkBindShaderGroupIndirectCommandNV = struct_VkBindShaderGroupIndirectCommandNV;
pub const struct_VkBindIndexBufferIndirectCommandNV = extern struct {
    bufferAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: u32 = @import("std").mem.zeroes(u32),
    indexType: VkIndexType = @import("std").mem.zeroes(VkIndexType),
};
pub const VkBindIndexBufferIndirectCommandNV = struct_VkBindIndexBufferIndirectCommandNV;
pub const struct_VkBindVertexBufferIndirectCommandNV = extern struct {
    bufferAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: u32 = @import("std").mem.zeroes(u32),
    stride: u32 = @import("std").mem.zeroes(u32),
};
pub const VkBindVertexBufferIndirectCommandNV = struct_VkBindVertexBufferIndirectCommandNV;
pub const struct_VkSetStateFlagsIndirectCommandNV = extern struct {
    data: u32 = @import("std").mem.zeroes(u32),
};
pub const VkSetStateFlagsIndirectCommandNV = struct_VkSetStateFlagsIndirectCommandNV;
pub const struct_VkIndirectCommandsStreamNV = extern struct {
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkIndirectCommandsStreamNV = struct_VkIndirectCommandsStreamNV;
pub const struct_VkIndirectCommandsLayoutTokenNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    tokenType: VkIndirectCommandsTokenTypeNV = @import("std").mem.zeroes(VkIndirectCommandsTokenTypeNV),
    stream: u32 = @import("std").mem.zeroes(u32),
    offset: u32 = @import("std").mem.zeroes(u32),
    vertexBindingUnit: u32 = @import("std").mem.zeroes(u32),
    vertexDynamicStride: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pushconstantPipelineLayout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    pushconstantShaderStageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    pushconstantOffset: u32 = @import("std").mem.zeroes(u32),
    pushconstantSize: u32 = @import("std").mem.zeroes(u32),
    indirectStateFlags: VkIndirectStateFlagsNV = @import("std").mem.zeroes(VkIndirectStateFlagsNV),
    indexTypeCount: u32 = @import("std").mem.zeroes(u32),
    pIndexTypes: [*c]const VkIndexType = @import("std").mem.zeroes([*c]const VkIndexType),
    pIndexTypeValues: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkIndirectCommandsLayoutTokenNV = struct_VkIndirectCommandsLayoutTokenNV;
pub const struct_VkIndirectCommandsLayoutCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkIndirectCommandsLayoutUsageFlagsNV = @import("std").mem.zeroes(VkIndirectCommandsLayoutUsageFlagsNV),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    tokenCount: u32 = @import("std").mem.zeroes(u32),
    pTokens: [*c]const VkIndirectCommandsLayoutTokenNV = @import("std").mem.zeroes([*c]const VkIndirectCommandsLayoutTokenNV),
    streamCount: u32 = @import("std").mem.zeroes(u32),
    pStreamStrides: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkIndirectCommandsLayoutCreateInfoNV = struct_VkIndirectCommandsLayoutCreateInfoNV;
pub const struct_VkGeneratedCommandsInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    indirectCommandsLayout: VkIndirectCommandsLayoutNV = @import("std").mem.zeroes(VkIndirectCommandsLayoutNV),
    streamCount: u32 = @import("std").mem.zeroes(u32),
    pStreams: [*c]const VkIndirectCommandsStreamNV = @import("std").mem.zeroes([*c]const VkIndirectCommandsStreamNV),
    sequencesCount: u32 = @import("std").mem.zeroes(u32),
    preprocessBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    preprocessOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    preprocessSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sequencesCountBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    sequencesCountOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sequencesIndexBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    sequencesIndexOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkGeneratedCommandsInfoNV = struct_VkGeneratedCommandsInfoNV;
pub const struct_VkGeneratedCommandsMemoryRequirementsInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    indirectCommandsLayout: VkIndirectCommandsLayoutNV = @import("std").mem.zeroes(VkIndirectCommandsLayoutNV),
    maxSequencesCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkGeneratedCommandsMemoryRequirementsInfoNV = struct_VkGeneratedCommandsMemoryRequirementsInfoNV;
pub const PFN_vkGetGeneratedCommandsMemoryRequirementsNV = ?*const fn (VkDevice, [*c]const VkGeneratedCommandsMemoryRequirementsInfoNV, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkCmdPreprocessGeneratedCommandsNV = ?*const fn (VkCommandBuffer, [*c]const VkGeneratedCommandsInfoNV) callconv(.C) void;
pub const PFN_vkCmdExecuteGeneratedCommandsNV = ?*const fn (VkCommandBuffer, VkBool32, [*c]const VkGeneratedCommandsInfoNV) callconv(.C) void;
pub const PFN_vkCmdBindPipelineShaderGroupNV = ?*const fn (VkCommandBuffer, VkPipelineBindPoint, VkPipeline, u32) callconv(.C) void;
pub const PFN_vkCreateIndirectCommandsLayoutNV = ?*const fn (VkDevice, [*c]const VkIndirectCommandsLayoutCreateInfoNV, [*c]const VkAllocationCallbacks, [*c]VkIndirectCommandsLayoutNV) callconv(.C) VkResult;
pub const PFN_vkDestroyIndirectCommandsLayoutNV = ?*const fn (VkDevice, VkIndirectCommandsLayoutNV, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub extern fn vkGetGeneratedCommandsMemoryRequirementsNV(device: VkDevice, pInfo: [*c]const VkGeneratedCommandsMemoryRequirementsInfoNV, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkCmdPreprocessGeneratedCommandsNV(commandBuffer: VkCommandBuffer, pGeneratedCommandsInfo: [*c]const VkGeneratedCommandsInfoNV) void;
pub extern fn vkCmdExecuteGeneratedCommandsNV(commandBuffer: VkCommandBuffer, isPreprocessed: VkBool32, pGeneratedCommandsInfo: [*c]const VkGeneratedCommandsInfoNV) void;
pub extern fn vkCmdBindPipelineShaderGroupNV(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline, groupIndex: u32) void;
pub extern fn vkCreateIndirectCommandsLayoutNV(device: VkDevice, pCreateInfo: [*c]const VkIndirectCommandsLayoutCreateInfoNV, pAllocator: [*c]const VkAllocationCallbacks, pIndirectCommandsLayout: [*c]VkIndirectCommandsLayoutNV) VkResult;
pub extern fn vkDestroyIndirectCommandsLayoutNV(device: VkDevice, indirectCommandsLayout: VkIndirectCommandsLayoutNV, pAllocator: [*c]const VkAllocationCallbacks) void;
pub const struct_VkPhysicalDeviceInheritedViewportScissorFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    inheritedViewportScissor2D: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceInheritedViewportScissorFeaturesNV = struct_VkPhysicalDeviceInheritedViewportScissorFeaturesNV;
pub const struct_VkCommandBufferInheritanceViewportScissorInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    viewportScissor2D: VkBool32 = @import("std").mem.zeroes(VkBool32),
    viewportDepthCount: u32 = @import("std").mem.zeroes(u32),
    pViewportDepths: [*c]const VkViewport = @import("std").mem.zeroes([*c]const VkViewport),
};
pub const VkCommandBufferInheritanceViewportScissorInfoNV = struct_VkCommandBufferInheritanceViewportScissorInfoNV;
pub const struct_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    texelBufferAlignment: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT = struct_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT;
pub const VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT = VkPhysicalDeviceTexelBufferAlignmentProperties;
pub const struct_VkRenderPassTransformBeginInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    transform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
};
pub const VkRenderPassTransformBeginInfoQCOM = struct_VkRenderPassTransformBeginInfoQCOM;
pub const struct_VkCommandBufferInheritanceRenderPassTransformInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    transform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
    renderArea: VkRect2D = @import("std").mem.zeroes(VkRect2D),
};
pub const VkCommandBufferInheritanceRenderPassTransformInfoQCOM = struct_VkCommandBufferInheritanceRenderPassTransformInfoQCOM;
pub const VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT: c_int = 0;
pub const VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT: c_int = 1;
pub const VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT: c_int = 2;
pub const VK_DEPTH_BIAS_REPRESENTATION_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDepthBiasRepresentationEXT = c_uint;
pub const VkDepthBiasRepresentationEXT = enum_VkDepthBiasRepresentationEXT;
pub const struct_VkPhysicalDeviceDepthBiasControlFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    depthBiasControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
    leastRepresentableValueForceUnormRepresentation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    floatRepresentation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthBiasExact: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDepthBiasControlFeaturesEXT = struct_VkPhysicalDeviceDepthBiasControlFeaturesEXT;
pub const struct_VkDepthBiasInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    depthBiasConstantFactor: f32 = @import("std").mem.zeroes(f32),
    depthBiasClamp: f32 = @import("std").mem.zeroes(f32),
    depthBiasSlopeFactor: f32 = @import("std").mem.zeroes(f32),
};
pub const VkDepthBiasInfoEXT = struct_VkDepthBiasInfoEXT;
pub const struct_VkDepthBiasRepresentationInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    depthBiasRepresentation: VkDepthBiasRepresentationEXT = @import("std").mem.zeroes(VkDepthBiasRepresentationEXT),
    depthBiasExact: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkDepthBiasRepresentationInfoEXT = struct_VkDepthBiasRepresentationInfoEXT;
pub const PFN_vkCmdSetDepthBias2EXT = ?*const fn (VkCommandBuffer, [*c]const VkDepthBiasInfoEXT) callconv(.C) void;
pub extern fn vkCmdSetDepthBias2EXT(commandBuffer: VkCommandBuffer, pDepthBiasInfo: [*c]const VkDepthBiasInfoEXT) void;
pub const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT: c_int = 0;
pub const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT: c_int = 1;
pub const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT: c_int = 2;
pub const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT: c_int = 3;
pub const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT: c_int = 4;
pub const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDeviceMemoryReportEventTypeEXT = c_uint;
pub const VkDeviceMemoryReportEventTypeEXT = enum_VkDeviceMemoryReportEventTypeEXT;
pub const VkDeviceMemoryReportFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceDeviceMemoryReportFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceMemoryReport: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDeviceMemoryReportFeaturesEXT = struct_VkPhysicalDeviceDeviceMemoryReportFeaturesEXT;
pub const struct_VkDeviceMemoryReportCallbackDataEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkDeviceMemoryReportFlagsEXT = @import("std").mem.zeroes(VkDeviceMemoryReportFlagsEXT),
    type: VkDeviceMemoryReportEventTypeEXT = @import("std").mem.zeroes(VkDeviceMemoryReportEventTypeEXT),
    memoryObjectId: u64 = @import("std").mem.zeroes(u64),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    objectType: VkObjectType = @import("std").mem.zeroes(VkObjectType),
    objectHandle: u64 = @import("std").mem.zeroes(u64),
    heapIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDeviceMemoryReportCallbackDataEXT = struct_VkDeviceMemoryReportCallbackDataEXT;
pub const PFN_vkDeviceMemoryReportCallbackEXT = ?*const fn ([*c]const VkDeviceMemoryReportCallbackDataEXT, ?*anyopaque) callconv(.C) void;
pub const struct_VkDeviceDeviceMemoryReportCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDeviceMemoryReportFlagsEXT = @import("std").mem.zeroes(VkDeviceMemoryReportFlagsEXT),
    pfnUserCallback: PFN_vkDeviceMemoryReportCallbackEXT = @import("std").mem.zeroes(PFN_vkDeviceMemoryReportCallbackEXT),
    pUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkDeviceDeviceMemoryReportCreateInfoEXT = struct_VkDeviceDeviceMemoryReportCreateInfoEXT;
pub const PFN_vkAcquireDrmDisplayEXT = ?*const fn (VkPhysicalDevice, i32, VkDisplayKHR) callconv(.C) VkResult;
pub const PFN_vkGetDrmDisplayEXT = ?*const fn (VkPhysicalDevice, i32, u32, [*c]VkDisplayKHR) callconv(.C) VkResult;
pub extern fn vkAcquireDrmDisplayEXT(physicalDevice: VkPhysicalDevice, drmFd: i32, display: VkDisplayKHR) VkResult;
pub extern fn vkGetDrmDisplayEXT(physicalDevice: VkPhysicalDevice, drmFd: i32, connectorId: u32, display: [*c]VkDisplayKHR) VkResult;
pub const struct_VkPhysicalDeviceRobustness2FeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    robustBufferAccess2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    robustImageAccess2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    nullDescriptor: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRobustness2FeaturesEXT = struct_VkPhysicalDeviceRobustness2FeaturesEXT;
pub const struct_VkPhysicalDeviceRobustness2PropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    robustStorageBufferAccessSizeAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    robustUniformBufferAccessSizeAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceRobustness2PropertiesEXT = struct_VkPhysicalDeviceRobustness2PropertiesEXT;
pub const struct_VkSamplerCustomBorderColorCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    customBorderColor: VkClearColorValue = @import("std").mem.zeroes(VkClearColorValue),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
};
pub const VkSamplerCustomBorderColorCreateInfoEXT = struct_VkSamplerCustomBorderColorCreateInfoEXT;
pub const struct_VkPhysicalDeviceCustomBorderColorPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxCustomBorderColorSamplers: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceCustomBorderColorPropertiesEXT = struct_VkPhysicalDeviceCustomBorderColorPropertiesEXT;
pub const struct_VkPhysicalDeviceCustomBorderColorFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    customBorderColors: VkBool32 = @import("std").mem.zeroes(VkBool32),
    customBorderColorWithoutFormat: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCustomBorderColorFeaturesEXT = struct_VkPhysicalDeviceCustomBorderColorFeaturesEXT;
pub const struct_VkPhysicalDevicePresentBarrierFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentBarrier: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePresentBarrierFeaturesNV = struct_VkPhysicalDevicePresentBarrierFeaturesNV;
pub const struct_VkSurfaceCapabilitiesPresentBarrierNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentBarrierSupported: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSurfaceCapabilitiesPresentBarrierNV = struct_VkSurfaceCapabilitiesPresentBarrierNV;
pub const struct_VkSwapchainPresentBarrierCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentBarrierEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSwapchainPresentBarrierCreateInfoNV = struct_VkSwapchainPresentBarrierCreateInfoNV;
pub const VkPrivateDataSlotEXT = VkPrivateDataSlot;
pub const VkPrivateDataSlotCreateFlagsEXT = VkPrivateDataSlotCreateFlags;
pub const VkPhysicalDevicePrivateDataFeaturesEXT = VkPhysicalDevicePrivateDataFeatures;
pub const VkDevicePrivateDataCreateInfoEXT = VkDevicePrivateDataCreateInfo;
pub const VkPrivateDataSlotCreateInfoEXT = VkPrivateDataSlotCreateInfo;
pub const PFN_vkCreatePrivateDataSlotEXT = ?*const fn (VkDevice, [*c]const VkPrivateDataSlotCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPrivateDataSlot) callconv(.C) VkResult;
pub const PFN_vkDestroyPrivateDataSlotEXT = ?*const fn (VkDevice, VkPrivateDataSlot, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkSetPrivateDataEXT = ?*const fn (VkDevice, VkObjectType, u64, VkPrivateDataSlot, u64) callconv(.C) VkResult;
pub const PFN_vkGetPrivateDataEXT = ?*const fn (VkDevice, VkObjectType, u64, VkPrivateDataSlot, [*c]u64) callconv(.C) void;
pub extern fn vkCreatePrivateDataSlotEXT(device: VkDevice, pCreateInfo: [*c]const VkPrivateDataSlotCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pPrivateDataSlot: [*c]VkPrivateDataSlot) VkResult;
pub extern fn vkDestroyPrivateDataSlotEXT(device: VkDevice, privateDataSlot: VkPrivateDataSlot, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkSetPrivateDataEXT(device: VkDevice, objectType: VkObjectType, objectHandle: u64, privateDataSlot: VkPrivateDataSlot, data: u64) VkResult;
pub extern fn vkGetPrivateDataEXT(device: VkDevice, objectType: VkObjectType, objectHandle: u64, privateDataSlot: VkPrivateDataSlot, pData: [*c]u64) void;
pub const VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT = VkPhysicalDevicePipelineCreationCacheControlFeatures;
pub const VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV: c_int = 1;
pub const VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV: c_int = 2;
pub const VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV: c_int = 4;
pub const VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV: c_int = 8;
pub const VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkDeviceDiagnosticsConfigFlagBitsNV = c_uint;
pub const VkDeviceDiagnosticsConfigFlagBitsNV = enum_VkDeviceDiagnosticsConfigFlagBitsNV;
pub const VkDeviceDiagnosticsConfigFlagsNV = VkFlags;
pub const struct_VkPhysicalDeviceDiagnosticsConfigFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    diagnosticsConfig: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDiagnosticsConfigFeaturesNV = struct_VkPhysicalDeviceDiagnosticsConfigFeaturesNV;
pub const struct_VkDeviceDiagnosticsConfigCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDeviceDiagnosticsConfigFlagsNV = @import("std").mem.zeroes(VkDeviceDiagnosticsConfigFlagsNV),
};
pub const VkDeviceDiagnosticsConfigCreateInfoNV = struct_VkDeviceDiagnosticsConfigCreateInfoNV;
pub const struct_VkCudaModuleNV_T = opaque {};
pub const VkCudaModuleNV = ?*struct_VkCudaModuleNV_T;
pub const struct_VkCudaFunctionNV_T = opaque {};
pub const VkCudaFunctionNV = ?*struct_VkCudaFunctionNV_T;
pub const struct_VkCudaModuleCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dataSize: usize = @import("std").mem.zeroes(usize),
    pData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkCudaModuleCreateInfoNV = struct_VkCudaModuleCreateInfoNV;
pub const struct_VkCudaFunctionCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    module: VkCudaModuleNV = @import("std").mem.zeroes(VkCudaModuleNV),
    pName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const VkCudaFunctionCreateInfoNV = struct_VkCudaFunctionCreateInfoNV;
pub const struct_VkCudaLaunchInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    function: VkCudaFunctionNV = @import("std").mem.zeroes(VkCudaFunctionNV),
    gridDimX: u32 = @import("std").mem.zeroes(u32),
    gridDimY: u32 = @import("std").mem.zeroes(u32),
    gridDimZ: u32 = @import("std").mem.zeroes(u32),
    blockDimX: u32 = @import("std").mem.zeroes(u32),
    blockDimY: u32 = @import("std").mem.zeroes(u32),
    blockDimZ: u32 = @import("std").mem.zeroes(u32),
    sharedMemBytes: u32 = @import("std").mem.zeroes(u32),
    paramCount: usize = @import("std").mem.zeroes(usize),
    pParams: [*c]const ?*const anyopaque = @import("std").mem.zeroes([*c]const ?*const anyopaque),
    extraCount: usize = @import("std").mem.zeroes(usize),
    pExtras: [*c]const ?*const anyopaque = @import("std").mem.zeroes([*c]const ?*const anyopaque),
};
pub const VkCudaLaunchInfoNV = struct_VkCudaLaunchInfoNV;
pub const struct_VkPhysicalDeviceCudaKernelLaunchFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cudaKernelLaunchFeatures: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCudaKernelLaunchFeaturesNV = struct_VkPhysicalDeviceCudaKernelLaunchFeaturesNV;
pub const struct_VkPhysicalDeviceCudaKernelLaunchPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    computeCapabilityMinor: u32 = @import("std").mem.zeroes(u32),
    computeCapabilityMajor: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceCudaKernelLaunchPropertiesNV = struct_VkPhysicalDeviceCudaKernelLaunchPropertiesNV;
pub const PFN_vkCreateCudaModuleNV = ?*const fn (VkDevice, [*c]const VkCudaModuleCreateInfoNV, [*c]const VkAllocationCallbacks, [*c]VkCudaModuleNV) callconv(.C) VkResult;
pub const PFN_vkGetCudaModuleCacheNV = ?*const fn (VkDevice, VkCudaModuleNV, [*c]usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkCreateCudaFunctionNV = ?*const fn (VkDevice, [*c]const VkCudaFunctionCreateInfoNV, [*c]const VkAllocationCallbacks, [*c]VkCudaFunctionNV) callconv(.C) VkResult;
pub const PFN_vkDestroyCudaModuleNV = ?*const fn (VkDevice, VkCudaModuleNV, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkDestroyCudaFunctionNV = ?*const fn (VkDevice, VkCudaFunctionNV, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCmdCudaLaunchKernelNV = ?*const fn (VkCommandBuffer, [*c]const VkCudaLaunchInfoNV) callconv(.C) void;
pub extern fn vkCreateCudaModuleNV(device: VkDevice, pCreateInfo: [*c]const VkCudaModuleCreateInfoNV, pAllocator: [*c]const VkAllocationCallbacks, pModule: [*c]VkCudaModuleNV) VkResult;
pub extern fn vkGetCudaModuleCacheNV(device: VkDevice, module: VkCudaModuleNV, pCacheSize: [*c]usize, pCacheData: ?*anyopaque) VkResult;
pub extern fn vkCreateCudaFunctionNV(device: VkDevice, pCreateInfo: [*c]const VkCudaFunctionCreateInfoNV, pAllocator: [*c]const VkAllocationCallbacks, pFunction: [*c]VkCudaFunctionNV) VkResult;
pub extern fn vkDestroyCudaModuleNV(device: VkDevice, module: VkCudaModuleNV, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkDestroyCudaFunctionNV(device: VkDevice, function: VkCudaFunctionNV, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCmdCudaLaunchKernelNV(commandBuffer: VkCommandBuffer, pLaunchInfo: [*c]const VkCudaLaunchInfoNV) void;
pub const struct_VkQueryLowLatencySupportNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pQueriedLowLatencyData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkQueryLowLatencySupportNV = struct_VkQueryLowLatencySupportNV;
pub const struct_VkAccelerationStructureKHR_T = opaque {};
pub const VkAccelerationStructureKHR = ?*struct_VkAccelerationStructureKHR_T;
pub const struct_VkPhysicalDeviceDescriptorBufferPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    combinedImageSamplerDescriptorSingleArray: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferlessPushDescriptors: VkBool32 = @import("std").mem.zeroes(VkBool32),
    allowSamplerImageViewPostSubmitCreation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBufferOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    maxDescriptorBufferBindings: u32 = @import("std").mem.zeroes(u32),
    maxResourceDescriptorBufferBindings: u32 = @import("std").mem.zeroes(u32),
    maxSamplerDescriptorBufferBindings: u32 = @import("std").mem.zeroes(u32),
    maxEmbeddedImmutableSamplerBindings: u32 = @import("std").mem.zeroes(u32),
    maxEmbeddedImmutableSamplers: u32 = @import("std").mem.zeroes(u32),
    bufferCaptureReplayDescriptorDataSize: usize = @import("std").mem.zeroes(usize),
    imageCaptureReplayDescriptorDataSize: usize = @import("std").mem.zeroes(usize),
    imageViewCaptureReplayDescriptorDataSize: usize = @import("std").mem.zeroes(usize),
    samplerCaptureReplayDescriptorDataSize: usize = @import("std").mem.zeroes(usize),
    accelerationStructureCaptureReplayDescriptorDataSize: usize = @import("std").mem.zeroes(usize),
    samplerDescriptorSize: usize = @import("std").mem.zeroes(usize),
    combinedImageSamplerDescriptorSize: usize = @import("std").mem.zeroes(usize),
    sampledImageDescriptorSize: usize = @import("std").mem.zeroes(usize),
    storageImageDescriptorSize: usize = @import("std").mem.zeroes(usize),
    uniformTexelBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    robustUniformTexelBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    storageTexelBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    robustStorageTexelBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    uniformBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    robustUniformBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    storageBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    robustStorageBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    inputAttachmentDescriptorSize: usize = @import("std").mem.zeroes(usize),
    accelerationStructureDescriptorSize: usize = @import("std").mem.zeroes(usize),
    maxSamplerDescriptorBufferRange: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    maxResourceDescriptorBufferRange: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    samplerDescriptorBufferAddressSpaceSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    resourceDescriptorBufferAddressSpaceSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    descriptorBufferAddressSpaceSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceDescriptorBufferPropertiesEXT = struct_VkPhysicalDeviceDescriptorBufferPropertiesEXT;
pub const struct_VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    combinedImageSamplerDensityMapDescriptorSize: usize = @import("std").mem.zeroes(usize),
};
pub const VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT = struct_VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT;
pub const struct_VkPhysicalDeviceDescriptorBufferFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    descriptorBuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBufferCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBufferImageLayoutIgnored: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBufferPushDescriptors: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDescriptorBufferFeaturesEXT = struct_VkPhysicalDeviceDescriptorBufferFeaturesEXT;
pub const struct_VkDescriptorAddressInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    address: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    range: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
};
pub const VkDescriptorAddressInfoEXT = struct_VkDescriptorAddressInfoEXT;
pub const struct_VkDescriptorBufferBindingInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    address: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    usage: VkBufferUsageFlags = @import("std").mem.zeroes(VkBufferUsageFlags),
};
pub const VkDescriptorBufferBindingInfoEXT = struct_VkDescriptorBufferBindingInfoEXT;
pub const struct_VkDescriptorBufferBindingPushDescriptorBufferHandleEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
};
pub const VkDescriptorBufferBindingPushDescriptorBufferHandleEXT = struct_VkDescriptorBufferBindingPushDescriptorBufferHandleEXT;
pub const union_VkDescriptorDataEXT = extern union {
    pSampler: [*c]const VkSampler,
    pCombinedImageSampler: [*c]const VkDescriptorImageInfo,
    pInputAttachmentImage: [*c]const VkDescriptorImageInfo,
    pSampledImage: [*c]const VkDescriptorImageInfo,
    pStorageImage: [*c]const VkDescriptorImageInfo,
    pUniformTexelBuffer: [*c]const VkDescriptorAddressInfoEXT,
    pStorageTexelBuffer: [*c]const VkDescriptorAddressInfoEXT,
    pUniformBuffer: [*c]const VkDescriptorAddressInfoEXT,
    pStorageBuffer: [*c]const VkDescriptorAddressInfoEXT,
    accelerationStructure: VkDeviceAddress,
};
pub const VkDescriptorDataEXT = union_VkDescriptorDataEXT;
pub const struct_VkDescriptorGetInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkDescriptorType = @import("std").mem.zeroes(VkDescriptorType),
    data: VkDescriptorDataEXT = @import("std").mem.zeroes(VkDescriptorDataEXT),
};
pub const VkDescriptorGetInfoEXT = struct_VkDescriptorGetInfoEXT;
pub const struct_VkBufferCaptureDescriptorDataInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
};
pub const VkBufferCaptureDescriptorDataInfoEXT = struct_VkBufferCaptureDescriptorDataInfoEXT;
pub const struct_VkImageCaptureDescriptorDataInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
};
pub const VkImageCaptureDescriptorDataInfoEXT = struct_VkImageCaptureDescriptorDataInfoEXT;
pub const struct_VkImageViewCaptureDescriptorDataInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    imageView: VkImageView = @import("std").mem.zeroes(VkImageView),
};
pub const VkImageViewCaptureDescriptorDataInfoEXT = struct_VkImageViewCaptureDescriptorDataInfoEXT;
pub const struct_VkSamplerCaptureDescriptorDataInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sampler: VkSampler = @import("std").mem.zeroes(VkSampler),
};
pub const VkSamplerCaptureDescriptorDataInfoEXT = struct_VkSamplerCaptureDescriptorDataInfoEXT;
pub const struct_VkOpaqueCaptureDescriptorDataCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    opaqueCaptureDescriptorData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkOpaqueCaptureDescriptorDataCreateInfoEXT = struct_VkOpaqueCaptureDescriptorDataCreateInfoEXT;
pub const struct_VkAccelerationStructureCaptureDescriptorDataInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    accelerationStructure: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    accelerationStructureNV: VkAccelerationStructureNV = @import("std").mem.zeroes(VkAccelerationStructureNV),
};
pub const VkAccelerationStructureCaptureDescriptorDataInfoEXT = struct_VkAccelerationStructureCaptureDescriptorDataInfoEXT;
pub const PFN_vkGetDescriptorSetLayoutSizeEXT = ?*const fn (VkDevice, VkDescriptorSetLayout, [*c]VkDeviceSize) callconv(.C) void;
pub const PFN_vkGetDescriptorSetLayoutBindingOffsetEXT = ?*const fn (VkDevice, VkDescriptorSetLayout, u32, [*c]VkDeviceSize) callconv(.C) void;
pub const PFN_vkGetDescriptorEXT = ?*const fn (VkDevice, [*c]const VkDescriptorGetInfoEXT, usize, ?*anyopaque) callconv(.C) void;
pub const PFN_vkCmdBindDescriptorBuffersEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkDescriptorBufferBindingInfoEXT) callconv(.C) void;
pub const PFN_vkCmdSetDescriptorBufferOffsetsEXT = ?*const fn (VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, u32, u32, [*c]const u32, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT = ?*const fn (VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, u32) callconv(.C) void;
pub const PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT = ?*const fn (VkDevice, [*c]const VkBufferCaptureDescriptorDataInfoEXT, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkGetImageOpaqueCaptureDescriptorDataEXT = ?*const fn (VkDevice, [*c]const VkImageCaptureDescriptorDataInfoEXT, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT = ?*const fn (VkDevice, [*c]const VkImageViewCaptureDescriptorDataInfoEXT, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT = ?*const fn (VkDevice, [*c]const VkSamplerCaptureDescriptorDataInfoEXT, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = ?*const fn (VkDevice, [*c]const VkAccelerationStructureCaptureDescriptorDataInfoEXT, ?*anyopaque) callconv(.C) VkResult;
pub extern fn vkGetDescriptorSetLayoutSizeEXT(device: VkDevice, layout: VkDescriptorSetLayout, pLayoutSizeInBytes: [*c]VkDeviceSize) void;
pub extern fn vkGetDescriptorSetLayoutBindingOffsetEXT(device: VkDevice, layout: VkDescriptorSetLayout, binding: u32, pOffset: [*c]VkDeviceSize) void;
pub extern fn vkGetDescriptorEXT(device: VkDevice, pDescriptorInfo: [*c]const VkDescriptorGetInfoEXT, dataSize: usize, pDescriptor: ?*anyopaque) void;
pub extern fn vkCmdBindDescriptorBuffersEXT(commandBuffer: VkCommandBuffer, bufferCount: u32, pBindingInfos: [*c]const VkDescriptorBufferBindingInfoEXT) void;
pub extern fn vkCmdSetDescriptorBufferOffsetsEXT(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, firstSet: u32, setCount: u32, pBufferIndices: [*c]const u32, pOffsets: [*c]const VkDeviceSize) void;
pub extern fn vkCmdBindDescriptorBufferEmbeddedSamplersEXT(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, set: u32) void;
pub extern fn vkGetBufferOpaqueCaptureDescriptorDataEXT(device: VkDevice, pInfo: [*c]const VkBufferCaptureDescriptorDataInfoEXT, pData: ?*anyopaque) VkResult;
pub extern fn vkGetImageOpaqueCaptureDescriptorDataEXT(device: VkDevice, pInfo: [*c]const VkImageCaptureDescriptorDataInfoEXT, pData: ?*anyopaque) VkResult;
pub extern fn vkGetImageViewOpaqueCaptureDescriptorDataEXT(device: VkDevice, pInfo: [*c]const VkImageViewCaptureDescriptorDataInfoEXT, pData: ?*anyopaque) VkResult;
pub extern fn vkGetSamplerOpaqueCaptureDescriptorDataEXT(device: VkDevice, pInfo: [*c]const VkSamplerCaptureDescriptorDataInfoEXT, pData: ?*anyopaque) VkResult;
pub extern fn vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(device: VkDevice, pInfo: [*c]const VkAccelerationStructureCaptureDescriptorDataInfoEXT, pData: ?*anyopaque) VkResult;
pub const VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT: c_int = 1;
pub const VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT: c_int = 2;
pub const VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT: c_int = 4;
pub const VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT: c_int = 8;
pub const VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkGraphicsPipelineLibraryFlagBitsEXT = c_uint;
pub const VkGraphicsPipelineLibraryFlagBitsEXT = enum_VkGraphicsPipelineLibraryFlagBitsEXT;
pub const VkGraphicsPipelineLibraryFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    graphicsPipelineLibrary: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT = struct_VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT;
pub const struct_VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    graphicsPipelineLibraryFastLinking: VkBool32 = @import("std").mem.zeroes(VkBool32),
    graphicsPipelineLibraryIndependentInterpolationDecoration: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT = struct_VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT;
pub const struct_VkGraphicsPipelineLibraryCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkGraphicsPipelineLibraryFlagsEXT = @import("std").mem.zeroes(VkGraphicsPipelineLibraryFlagsEXT),
};
pub const VkGraphicsPipelineLibraryCreateInfoEXT = struct_VkGraphicsPipelineLibraryCreateInfoEXT;
pub const struct_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderEarlyAndLateFragmentTests: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD = struct_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD;
pub const VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV: c_int = 0;
pub const VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV: c_int = 1;
pub const VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkFragmentShadingRateTypeNV = c_uint;
pub const VkFragmentShadingRateTypeNV = enum_VkFragmentShadingRateTypeNV;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV: c_int = 0;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV: c_int = 1;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV: c_int = 4;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV: c_int = 5;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV: c_int = 6;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV: c_int = 9;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV: c_int = 10;
pub const VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV: c_int = 11;
pub const VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV: c_int = 12;
pub const VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV: c_int = 13;
pub const VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV: c_int = 14;
pub const VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV: c_int = 15;
pub const VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkFragmentShadingRateNV = c_uint;
pub const VkFragmentShadingRateNV = enum_VkFragmentShadingRateNV;
pub const struct_VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentShadingRateEnums: VkBool32 = @import("std").mem.zeroes(VkBool32),
    supersampleFragmentShadingRates: VkBool32 = @import("std").mem.zeroes(VkBool32),
    noInvocationFragmentShadingRates: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV = struct_VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV;
pub const struct_VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxFragmentShadingRateInvocationCount: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
};
pub const VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV = struct_VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV;
pub const struct_VkPipelineFragmentShadingRateEnumStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    shadingRateType: VkFragmentShadingRateTypeNV = @import("std").mem.zeroes(VkFragmentShadingRateTypeNV),
    shadingRate: VkFragmentShadingRateNV = @import("std").mem.zeroes(VkFragmentShadingRateNV),
    combinerOps: [2]VkFragmentShadingRateCombinerOpKHR = @import("std").mem.zeroes([2]VkFragmentShadingRateCombinerOpKHR),
};
pub const VkPipelineFragmentShadingRateEnumStateCreateInfoNV = struct_VkPipelineFragmentShadingRateEnumStateCreateInfoNV;
pub const PFN_vkCmdSetFragmentShadingRateEnumNV = ?*const fn (VkCommandBuffer, VkFragmentShadingRateNV, [*c]const VkFragmentShadingRateCombinerOpKHR) callconv(.C) void;
pub extern fn vkCmdSetFragmentShadingRateEnumNV(commandBuffer: VkCommandBuffer, shadingRate: VkFragmentShadingRateNV, combinerOps: [*c]const VkFragmentShadingRateCombinerOpKHR) void;
pub const VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV: c_int = 0;
pub const VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV: c_int = 2;
pub const VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkAccelerationStructureMotionInstanceTypeNV = c_uint;
pub const VkAccelerationStructureMotionInstanceTypeNV = enum_VkAccelerationStructureMotionInstanceTypeNV;
pub const VkAccelerationStructureMotionInfoFlagsNV = VkFlags;
pub const VkAccelerationStructureMotionInstanceFlagsNV = VkFlags;
pub const union_VkDeviceOrHostAddressConstKHR = extern union {
    deviceAddress: VkDeviceAddress,
    hostAddress: ?*const anyopaque,
};
pub const VkDeviceOrHostAddressConstKHR = union_VkDeviceOrHostAddressConstKHR;
pub const struct_VkAccelerationStructureGeometryMotionTrianglesDataNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    vertexData: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
};
pub const VkAccelerationStructureGeometryMotionTrianglesDataNV = struct_VkAccelerationStructureGeometryMotionTrianglesDataNV;
pub const struct_VkAccelerationStructureMotionInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxInstances: u32 = @import("std").mem.zeroes(u32),
    flags: VkAccelerationStructureMotionInfoFlagsNV = @import("std").mem.zeroes(VkAccelerationStructureMotionInfoFlagsNV),
};
pub const VkAccelerationStructureMotionInfoNV = struct_VkAccelerationStructureMotionInfoNV;
// /usr/include/vulkan/vulkan_core.h:16345:35: warning: struct demoted to opaque type - has bitfield
pub const struct_VkAccelerationStructureMatrixMotionInstanceNV = opaque {};
pub const VkAccelerationStructureMatrixMotionInstanceNV = struct_VkAccelerationStructureMatrixMotionInstanceNV;
pub const struct_VkSRTDataNV = extern struct {
    sx: f32 = @import("std").mem.zeroes(f32),
    a: f32 = @import("std").mem.zeroes(f32),
    b: f32 = @import("std").mem.zeroes(f32),
    pvx: f32 = @import("std").mem.zeroes(f32),
    sy: f32 = @import("std").mem.zeroes(f32),
    c: f32 = @import("std").mem.zeroes(f32),
    pvy: f32 = @import("std").mem.zeroes(f32),
    sz: f32 = @import("std").mem.zeroes(f32),
    pvz: f32 = @import("std").mem.zeroes(f32),
    qx: f32 = @import("std").mem.zeroes(f32),
    qy: f32 = @import("std").mem.zeroes(f32),
    qz: f32 = @import("std").mem.zeroes(f32),
    qw: f32 = @import("std").mem.zeroes(f32),
    tx: f32 = @import("std").mem.zeroes(f32),
    ty: f32 = @import("std").mem.zeroes(f32),
    tz: f32 = @import("std").mem.zeroes(f32),
};
pub const VkSRTDataNV = struct_VkSRTDataNV;
// /usr/include/vulkan/vulkan_core.h:16374:35: warning: struct demoted to opaque type - has bitfield
pub const struct_VkAccelerationStructureSRTMotionInstanceNV = opaque {};
pub const VkAccelerationStructureSRTMotionInstanceNV = struct_VkAccelerationStructureSRTMotionInstanceNV;
pub const union_VkAccelerationStructureMotionInstanceDataNV = extern union {
    staticInstance: VkAccelerationStructureInstanceKHR,
    matrixMotionInstance: VkAccelerationStructureMatrixMotionInstanceNV,
    srtMotionInstance: VkAccelerationStructureSRTMotionInstanceNV,
};
pub const VkAccelerationStructureMotionInstanceDataNV = union_VkAccelerationStructureMotionInstanceDataNV;
pub const struct_VkAccelerationStructureMotionInstanceNV = extern struct {
    type: VkAccelerationStructureMotionInstanceTypeNV = @import("std").mem.zeroes(VkAccelerationStructureMotionInstanceTypeNV),
    flags: VkAccelerationStructureMotionInstanceFlagsNV = @import("std").mem.zeroes(VkAccelerationStructureMotionInstanceFlagsNV),
    data: VkAccelerationStructureMotionInstanceDataNV = @import("std").mem.zeroes(VkAccelerationStructureMotionInstanceDataNV),
};
pub const VkAccelerationStructureMotionInstanceNV = struct_VkAccelerationStructureMotionInstanceNV;
pub const struct_VkPhysicalDeviceRayTracingMotionBlurFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingMotionBlur: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rayTracingMotionBlurPipelineTraceRaysIndirect: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRayTracingMotionBlurFeaturesNV = struct_VkPhysicalDeviceRayTracingMotionBlurFeaturesNV;
pub const struct_VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    ycbcr2plane444Formats: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT = struct_VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT;
pub const struct_VkPhysicalDeviceFragmentDensityMap2FeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentDensityMapDeferred: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentDensityMap2FeaturesEXT = struct_VkPhysicalDeviceFragmentDensityMap2FeaturesEXT;
pub const struct_VkPhysicalDeviceFragmentDensityMap2PropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    subsampledLoads: VkBool32 = @import("std").mem.zeroes(VkBool32),
    subsampledCoarseReconstructionEarlyAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxSubsampledArrayLayers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetSubsampledSamplers: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceFragmentDensityMap2PropertiesEXT = struct_VkPhysicalDeviceFragmentDensityMap2PropertiesEXT;
pub const struct_VkCopyCommandTransformInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    transform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
};
pub const VkCopyCommandTransformInfoQCOM = struct_VkCopyCommandTransformInfoQCOM;
pub const VkPhysicalDeviceImageRobustnessFeaturesEXT = VkPhysicalDeviceImageRobustnessFeatures;
pub const VK_IMAGE_COMPRESSION_DEFAULT_EXT: c_int = 0;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT: c_int = 1;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT: c_int = 2;
pub const VK_IMAGE_COMPRESSION_DISABLED_EXT: c_int = 4;
pub const VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkImageCompressionFlagBitsEXT = c_uint;
pub const VkImageCompressionFlagBitsEXT = enum_VkImageCompressionFlagBitsEXT;
pub const VkImageCompressionFlagsEXT = VkFlags;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT: c_int = 0;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT: c_int = 1;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT: c_int = 2;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT: c_int = 4;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT: c_int = 8;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT: c_int = 16;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT: c_int = 32;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT: c_int = 64;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT: c_int = 128;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT: c_int = 256;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT: c_int = 512;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT: c_int = 1024;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT: c_int = 2048;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT: c_int = 4096;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT: c_int = 8192;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT: c_int = 16384;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT: c_int = 32768;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT: c_int = 65536;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT: c_int = 131072;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT: c_int = 262144;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT: c_int = 524288;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT: c_int = 1048576;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT: c_int = 2097152;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT: c_int = 4194304;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT: c_int = 8388608;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkImageCompressionFixedRateFlagBitsEXT = c_uint;
pub const VkImageCompressionFixedRateFlagBitsEXT = enum_VkImageCompressionFixedRateFlagBitsEXT;
pub const VkImageCompressionFixedRateFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceImageCompressionControlFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageCompressionControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImageCompressionControlFeaturesEXT = struct_VkPhysicalDeviceImageCompressionControlFeaturesEXT;
pub const struct_VkImageCompressionControlEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkImageCompressionFlagsEXT = @import("std").mem.zeroes(VkImageCompressionFlagsEXT),
    compressionControlPlaneCount: u32 = @import("std").mem.zeroes(u32),
    pFixedRateFlags: [*c]VkImageCompressionFixedRateFlagsEXT = @import("std").mem.zeroes([*c]VkImageCompressionFixedRateFlagsEXT),
};
pub const VkImageCompressionControlEXT = struct_VkImageCompressionControlEXT;
pub const struct_VkImageCompressionPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageCompressionFlags: VkImageCompressionFlagsEXT = @import("std").mem.zeroes(VkImageCompressionFlagsEXT),
    imageCompressionFixedRateFlags: VkImageCompressionFixedRateFlagsEXT = @import("std").mem.zeroes(VkImageCompressionFixedRateFlagsEXT),
};
pub const VkImageCompressionPropertiesEXT = struct_VkImageCompressionPropertiesEXT;
pub const struct_VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    attachmentFeedbackLoopLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT = struct_VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT;
pub const struct_VkPhysicalDevice4444FormatsFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    formatA4R4G4B4: VkBool32 = @import("std").mem.zeroes(VkBool32),
    formatA4B4G4R4: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevice4444FormatsFeaturesEXT = struct_VkPhysicalDevice4444FormatsFeaturesEXT;
pub const VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT: c_int = 0;
pub const VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT: c_int = 1;
pub const VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT: c_int = 2;
pub const VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT: c_int = 3;
pub const VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT: c_int = 4;
pub const VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT: c_int = 5;
pub const VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT: c_int = 6;
pub const VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDeviceFaultAddressTypeEXT = c_uint;
pub const VkDeviceFaultAddressTypeEXT = enum_VkDeviceFaultAddressTypeEXT;
pub const VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT: c_int = 1;
pub const VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDeviceFaultVendorBinaryHeaderVersionEXT = c_uint;
pub const VkDeviceFaultVendorBinaryHeaderVersionEXT = enum_VkDeviceFaultVendorBinaryHeaderVersionEXT;
pub const struct_VkPhysicalDeviceFaultFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceFault: VkBool32 = @import("std").mem.zeroes(VkBool32),
    deviceFaultVendorBinary: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFaultFeaturesEXT = struct_VkPhysicalDeviceFaultFeaturesEXT;
pub const struct_VkDeviceFaultCountsEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    addressInfoCount: u32 = @import("std").mem.zeroes(u32),
    vendorInfoCount: u32 = @import("std").mem.zeroes(u32),
    vendorBinarySize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkDeviceFaultCountsEXT = struct_VkDeviceFaultCountsEXT;
pub const struct_VkDeviceFaultAddressInfoEXT = extern struct {
    addressType: VkDeviceFaultAddressTypeEXT = @import("std").mem.zeroes(VkDeviceFaultAddressTypeEXT),
    reportedAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    addressPrecision: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkDeviceFaultAddressInfoEXT = struct_VkDeviceFaultAddressInfoEXT;
pub const struct_VkDeviceFaultVendorInfoEXT = extern struct {
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    vendorFaultCode: u64 = @import("std").mem.zeroes(u64),
    vendorFaultData: u64 = @import("std").mem.zeroes(u64),
};
pub const VkDeviceFaultVendorInfoEXT = struct_VkDeviceFaultVendorInfoEXT;
pub const struct_VkDeviceFaultInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    pAddressInfos: [*c]VkDeviceFaultAddressInfoEXT = @import("std").mem.zeroes([*c]VkDeviceFaultAddressInfoEXT),
    pVendorInfos: [*c]VkDeviceFaultVendorInfoEXT = @import("std").mem.zeroes([*c]VkDeviceFaultVendorInfoEXT),
    pVendorBinaryData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkDeviceFaultInfoEXT = struct_VkDeviceFaultInfoEXT;
pub const struct_VkDeviceFaultVendorBinaryHeaderVersionOneEXT = extern struct {
    headerSize: u32 = @import("std").mem.zeroes(u32),
    headerVersion: VkDeviceFaultVendorBinaryHeaderVersionEXT = @import("std").mem.zeroes(VkDeviceFaultVendorBinaryHeaderVersionEXT),
    vendorID: u32 = @import("std").mem.zeroes(u32),
    deviceID: u32 = @import("std").mem.zeroes(u32),
    driverVersion: u32 = @import("std").mem.zeroes(u32),
    pipelineCacheUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    applicationNameOffset: u32 = @import("std").mem.zeroes(u32),
    applicationVersion: u32 = @import("std").mem.zeroes(u32),
    engineNameOffset: u32 = @import("std").mem.zeroes(u32),
    engineVersion: u32 = @import("std").mem.zeroes(u32),
    apiVersion: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDeviceFaultVendorBinaryHeaderVersionOneEXT = struct_VkDeviceFaultVendorBinaryHeaderVersionOneEXT;
pub const PFN_vkGetDeviceFaultInfoEXT = ?*const fn (VkDevice, [*c]VkDeviceFaultCountsEXT, [*c]VkDeviceFaultInfoEXT) callconv(.C) VkResult;
pub extern fn vkGetDeviceFaultInfoEXT(device: VkDevice, pFaultCounts: [*c]VkDeviceFaultCountsEXT, pFaultInfo: [*c]VkDeviceFaultInfoEXT) VkResult;
pub const struct_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rasterizationOrderColorAttachmentAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rasterizationOrderDepthAttachmentAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rasterizationOrderStencilAttachmentAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT = struct_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT;
pub const VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM = VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT;
pub const struct_VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    formatRgba10x6WithoutYCbCrSampler: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT = struct_VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT;
pub const struct_VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    mutableDescriptorType: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT = struct_VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT;
pub const VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE = VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT;
pub const struct_VkMutableDescriptorTypeListEXT = extern struct {
    descriptorTypeCount: u32 = @import("std").mem.zeroes(u32),
    pDescriptorTypes: [*c]const VkDescriptorType = @import("std").mem.zeroes([*c]const VkDescriptorType),
};
pub const VkMutableDescriptorTypeListEXT = struct_VkMutableDescriptorTypeListEXT;
pub const VkMutableDescriptorTypeListVALVE = VkMutableDescriptorTypeListEXT;
pub const struct_VkMutableDescriptorTypeCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    mutableDescriptorTypeListCount: u32 = @import("std").mem.zeroes(u32),
    pMutableDescriptorTypeLists: [*c]const VkMutableDescriptorTypeListEXT = @import("std").mem.zeroes([*c]const VkMutableDescriptorTypeListEXT),
};
pub const VkMutableDescriptorTypeCreateInfoEXT = struct_VkMutableDescriptorTypeCreateInfoEXT;
pub const VkMutableDescriptorTypeCreateInfoVALVE = VkMutableDescriptorTypeCreateInfoEXT;
pub const struct_VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    vertexInputDynamicState: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT = struct_VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT;
pub const struct_VkVertexInputBindingDescription2EXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    binding: u32 = @import("std").mem.zeroes(u32),
    stride: u32 = @import("std").mem.zeroes(u32),
    inputRate: VkVertexInputRate = @import("std").mem.zeroes(VkVertexInputRate),
    divisor: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVertexInputBindingDescription2EXT = struct_VkVertexInputBindingDescription2EXT;
pub const struct_VkVertexInputAttributeDescription2EXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    location: u32 = @import("std").mem.zeroes(u32),
    binding: u32 = @import("std").mem.zeroes(u32),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    offset: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVertexInputAttributeDescription2EXT = struct_VkVertexInputAttributeDescription2EXT;
pub const PFN_vkCmdSetVertexInputEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkVertexInputBindingDescription2EXT, u32, [*c]const VkVertexInputAttributeDescription2EXT) callconv(.C) void;
pub extern fn vkCmdSetVertexInputEXT(commandBuffer: VkCommandBuffer, vertexBindingDescriptionCount: u32, pVertexBindingDescriptions: [*c]const VkVertexInputBindingDescription2EXT, vertexAttributeDescriptionCount: u32, pVertexAttributeDescriptions: [*c]const VkVertexInputAttributeDescription2EXT) void;
pub const struct_VkPhysicalDeviceDrmPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    hasPrimary: VkBool32 = @import("std").mem.zeroes(VkBool32),
    hasRender: VkBool32 = @import("std").mem.zeroes(VkBool32),
    primaryMajor: i64 = @import("std").mem.zeroes(i64),
    primaryMinor: i64 = @import("std").mem.zeroes(i64),
    renderMajor: i64 = @import("std").mem.zeroes(i64),
    renderMinor: i64 = @import("std").mem.zeroes(i64),
};
pub const VkPhysicalDeviceDrmPropertiesEXT = struct_VkPhysicalDeviceDrmPropertiesEXT;
pub const VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT: c_int = 0;
pub const VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT: c_int = 1;
pub const VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDeviceAddressBindingTypeEXT = c_uint;
pub const VkDeviceAddressBindingTypeEXT = enum_VkDeviceAddressBindingTypeEXT;
pub const VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT: c_int = 1;
pub const VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDeviceAddressBindingFlagBitsEXT = c_uint;
pub const VkDeviceAddressBindingFlagBitsEXT = enum_VkDeviceAddressBindingFlagBitsEXT;
pub const VkDeviceAddressBindingFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceAddressBindingReportFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    reportAddressBinding: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceAddressBindingReportFeaturesEXT = struct_VkPhysicalDeviceAddressBindingReportFeaturesEXT;
pub const struct_VkDeviceAddressBindingCallbackDataEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkDeviceAddressBindingFlagsEXT = @import("std").mem.zeroes(VkDeviceAddressBindingFlagsEXT),
    baseAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    bindingType: VkDeviceAddressBindingTypeEXT = @import("std").mem.zeroes(VkDeviceAddressBindingTypeEXT),
};
pub const VkDeviceAddressBindingCallbackDataEXT = struct_VkDeviceAddressBindingCallbackDataEXT;
pub const struct_VkPhysicalDeviceDepthClipControlFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    depthClipControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDepthClipControlFeaturesEXT = struct_VkPhysicalDeviceDepthClipControlFeaturesEXT;
pub const struct_VkPipelineViewportDepthClipControlCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    negativeOneToOne: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPipelineViewportDepthClipControlCreateInfoEXT = struct_VkPipelineViewportDepthClipControlCreateInfoEXT;
pub const struct_VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    primitiveTopologyListRestart: VkBool32 = @import("std").mem.zeroes(VkBool32),
    primitiveTopologyPatchListRestart: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT = struct_VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT;
pub const struct_VkSubpassShadingPipelineCreateInfoHUAWEI = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    renderPass: VkRenderPass = @import("std").mem.zeroes(VkRenderPass),
    subpass: u32 = @import("std").mem.zeroes(u32),
};
pub const VkSubpassShadingPipelineCreateInfoHUAWEI = struct_VkSubpassShadingPipelineCreateInfoHUAWEI;
pub const struct_VkPhysicalDeviceSubpassShadingFeaturesHUAWEI = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    subpassShading: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSubpassShadingFeaturesHUAWEI = struct_VkPhysicalDeviceSubpassShadingFeaturesHUAWEI;
pub const struct_VkPhysicalDeviceSubpassShadingPropertiesHUAWEI = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxSubpassShadingWorkgroupSizeAspectRatio: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceSubpassShadingPropertiesHUAWEI = struct_VkPhysicalDeviceSubpassShadingPropertiesHUAWEI;
pub const PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = ?*const fn (VkDevice, VkRenderPass, [*c]VkExtent2D) callconv(.C) VkResult;
pub const PFN_vkCmdSubpassShadingHUAWEI = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub extern fn vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(device: VkDevice, renderpass: VkRenderPass, pMaxWorkgroupSize: [*c]VkExtent2D) VkResult;
pub extern fn vkCmdSubpassShadingHUAWEI(commandBuffer: VkCommandBuffer) void;
pub const struct_VkPhysicalDeviceInvocationMaskFeaturesHUAWEI = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    invocationMask: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceInvocationMaskFeaturesHUAWEI = struct_VkPhysicalDeviceInvocationMaskFeaturesHUAWEI;
pub const PFN_vkCmdBindInvocationMaskHUAWEI = ?*const fn (VkCommandBuffer, VkImageView, VkImageLayout) callconv(.C) void;
pub extern fn vkCmdBindInvocationMaskHUAWEI(commandBuffer: VkCommandBuffer, imageView: VkImageView, imageLayout: VkImageLayout) void;
pub const VkRemoteAddressNV = ?*anyopaque;
pub const struct_VkMemoryGetRemoteAddressInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    handleType: VkExternalMemoryHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagBits),
};
pub const VkMemoryGetRemoteAddressInfoNV = struct_VkMemoryGetRemoteAddressInfoNV;
pub const struct_VkPhysicalDeviceExternalMemoryRDMAFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    externalMemoryRDMA: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceExternalMemoryRDMAFeaturesNV = struct_VkPhysicalDeviceExternalMemoryRDMAFeaturesNV;
pub const PFN_vkGetMemoryRemoteAddressNV = ?*const fn (VkDevice, [*c]const VkMemoryGetRemoteAddressInfoNV, [*c]VkRemoteAddressNV) callconv(.C) VkResult;
pub extern fn vkGetMemoryRemoteAddressNV(device: VkDevice, pMemoryGetRemoteAddressInfo: [*c]const VkMemoryGetRemoteAddressInfoNV, pAddress: [*c]VkRemoteAddressNV) VkResult;
pub const VkPipelineInfoEXT = VkPipelineInfoKHR;
pub const struct_VkPipelinePropertiesIdentifierEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineIdentifier: [16]u8 = @import("std").mem.zeroes([16]u8),
};
pub const VkPipelinePropertiesIdentifierEXT = struct_VkPipelinePropertiesIdentifierEXT;
pub const struct_VkPhysicalDevicePipelinePropertiesFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelinePropertiesIdentifier: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePipelinePropertiesFeaturesEXT = struct_VkPhysicalDevicePipelinePropertiesFeaturesEXT;
pub const PFN_vkGetPipelinePropertiesEXT = ?*const fn (VkDevice, [*c]const VkPipelineInfoEXT, [*c]VkBaseOutStructure) callconv(.C) VkResult;
pub extern fn vkGetPipelinePropertiesEXT(device: VkDevice, pPipelineInfo: [*c]const VkPipelineInfoEXT, pPipelineProperties: [*c]VkBaseOutStructure) VkResult;
pub const VK_FRAME_BOUNDARY_FRAME_END_BIT_EXT: c_int = 1;
pub const VK_FRAME_BOUNDARY_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkFrameBoundaryFlagBitsEXT = c_uint;
pub const VkFrameBoundaryFlagBitsEXT = enum_VkFrameBoundaryFlagBitsEXT;
pub const VkFrameBoundaryFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceFrameBoundaryFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    frameBoundary: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFrameBoundaryFeaturesEXT = struct_VkPhysicalDeviceFrameBoundaryFeaturesEXT;
pub const struct_VkFrameBoundaryEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkFrameBoundaryFlagsEXT = @import("std").mem.zeroes(VkFrameBoundaryFlagsEXT),
    frameID: u64 = @import("std").mem.zeroes(u64),
    imageCount: u32 = @import("std").mem.zeroes(u32),
    pImages: [*c]const VkImage = @import("std").mem.zeroes([*c]const VkImage),
    bufferCount: u32 = @import("std").mem.zeroes(u32),
    pBuffers: [*c]const VkBuffer = @import("std").mem.zeroes([*c]const VkBuffer),
    tagName: u64 = @import("std").mem.zeroes(u64),
    tagSize: usize = @import("std").mem.zeroes(usize),
    pTag: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkFrameBoundaryEXT = struct_VkFrameBoundaryEXT;
pub const struct_VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    multisampledRenderToSingleSampled: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT = struct_VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT;
pub const struct_VkSubpassResolvePerformanceQueryEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    optimal: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSubpassResolvePerformanceQueryEXT = struct_VkSubpassResolvePerformanceQueryEXT;
pub const struct_VkMultisampledRenderToSingleSampledInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    multisampledRenderToSingleSampledEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rasterizationSamples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
};
pub const VkMultisampledRenderToSingleSampledInfoEXT = struct_VkMultisampledRenderToSingleSampledInfoEXT;
pub const struct_VkPhysicalDeviceExtendedDynamicState2FeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    extendedDynamicState2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState2LogicOp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState2PatchControlPoints: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceExtendedDynamicState2FeaturesEXT = struct_VkPhysicalDeviceExtendedDynamicState2FeaturesEXT;
pub const PFN_vkCmdSetPatchControlPointsEXT = ?*const fn (VkCommandBuffer, u32) callconv(.C) void;
pub const PFN_vkCmdSetRasterizerDiscardEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthBiasEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetLogicOpEXT = ?*const fn (VkCommandBuffer, VkLogicOp) callconv(.C) void;
pub const PFN_vkCmdSetPrimitiveRestartEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub extern fn vkCmdSetPatchControlPointsEXT(commandBuffer: VkCommandBuffer, patchControlPoints: u32) void;
pub extern fn vkCmdSetRasterizerDiscardEnableEXT(commandBuffer: VkCommandBuffer, rasterizerDiscardEnable: VkBool32) void;
pub extern fn vkCmdSetDepthBiasEnableEXT(commandBuffer: VkCommandBuffer, depthBiasEnable: VkBool32) void;
pub extern fn vkCmdSetLogicOpEXT(commandBuffer: VkCommandBuffer, logicOp: VkLogicOp) void;
pub extern fn vkCmdSetPrimitiveRestartEnableEXT(commandBuffer: VkCommandBuffer, primitiveRestartEnable: VkBool32) void;
pub const struct_VkPhysicalDeviceColorWriteEnableFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    colorWriteEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceColorWriteEnableFeaturesEXT = struct_VkPhysicalDeviceColorWriteEnableFeaturesEXT;
pub const struct_VkPipelineColorWriteCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    attachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorWriteEnables: [*c]const VkBool32 = @import("std").mem.zeroes([*c]const VkBool32),
};
pub const VkPipelineColorWriteCreateInfoEXT = struct_VkPipelineColorWriteCreateInfoEXT;
pub const PFN_vkCmdSetColorWriteEnableEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkBool32) callconv(.C) void;
pub extern fn vkCmdSetColorWriteEnableEXT(commandBuffer: VkCommandBuffer, attachmentCount: u32, pColorWriteEnables: [*c]const VkBool32) void;
pub const struct_VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    primitivesGeneratedQuery: VkBool32 = @import("std").mem.zeroes(VkBool32),
    primitivesGeneratedQueryWithRasterizerDiscard: VkBool32 = @import("std").mem.zeroes(VkBool32),
    primitivesGeneratedQueryWithNonZeroStreams: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT = struct_VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT;
pub const VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT = VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR;
pub const VkQueueFamilyGlobalPriorityPropertiesEXT = VkQueueFamilyGlobalPriorityPropertiesKHR;
pub const struct_VkPhysicalDeviceImageViewMinLodFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minLod: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImageViewMinLodFeaturesEXT = struct_VkPhysicalDeviceImageViewMinLodFeaturesEXT;
pub const struct_VkImageViewMinLodCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    minLod: f32 = @import("std").mem.zeroes(f32),
};
pub const VkImageViewMinLodCreateInfoEXT = struct_VkImageViewMinLodCreateInfoEXT;
pub const struct_VkPhysicalDeviceMultiDrawFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    multiDraw: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMultiDrawFeaturesEXT = struct_VkPhysicalDeviceMultiDrawFeaturesEXT;
pub const struct_VkPhysicalDeviceMultiDrawPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxMultiDrawCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceMultiDrawPropertiesEXT = struct_VkPhysicalDeviceMultiDrawPropertiesEXT;
pub const struct_VkMultiDrawInfoEXT = extern struct {
    firstVertex: u32 = @import("std").mem.zeroes(u32),
    vertexCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkMultiDrawInfoEXT = struct_VkMultiDrawInfoEXT;
pub const struct_VkMultiDrawIndexedInfoEXT = extern struct {
    firstIndex: u32 = @import("std").mem.zeroes(u32),
    indexCount: u32 = @import("std").mem.zeroes(u32),
    vertexOffset: i32 = @import("std").mem.zeroes(i32),
};
pub const VkMultiDrawIndexedInfoEXT = struct_VkMultiDrawIndexedInfoEXT;
pub const PFN_vkCmdDrawMultiEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkMultiDrawInfoEXT, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawMultiIndexedEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkMultiDrawIndexedInfoEXT, u32, u32, u32, [*c]const i32) callconv(.C) void;
pub extern fn vkCmdDrawMultiEXT(commandBuffer: VkCommandBuffer, drawCount: u32, pVertexInfo: [*c]const VkMultiDrawInfoEXT, instanceCount: u32, firstInstance: u32, stride: u32) void;
pub extern fn vkCmdDrawMultiIndexedEXT(commandBuffer: VkCommandBuffer, drawCount: u32, pIndexInfo: [*c]const VkMultiDrawIndexedInfoEXT, instanceCount: u32, firstInstance: u32, stride: u32, pVertexOffset: [*c]const i32) void;
pub const struct_VkPhysicalDeviceImage2DViewOf3DFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    image2DViewOf3D: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sampler2DViewOf3D: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImage2DViewOf3DFeaturesEXT = struct_VkPhysicalDeviceImage2DViewOf3DFeaturesEXT;
pub const struct_VkPhysicalDeviceShaderTileImageFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderTileImageColorReadAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderTileImageDepthReadAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderTileImageStencilReadAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderTileImageFeaturesEXT = struct_VkPhysicalDeviceShaderTileImageFeaturesEXT;
pub const struct_VkPhysicalDeviceShaderTileImagePropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderTileImageCoherentReadAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderTileImageReadSampleFromPixelRateInvocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderTileImageReadFromHelperInvocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderTileImagePropertiesEXT = struct_VkPhysicalDeviceShaderTileImagePropertiesEXT;
pub const struct_VkMicromapEXT_T = opaque {};
pub const VkMicromapEXT = ?*struct_VkMicromapEXT_T;
pub const VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT: c_int = 0;
pub const VK_MICROMAP_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkMicromapTypeEXT = c_uint;
pub const VkMicromapTypeEXT = enum_VkMicromapTypeEXT;
pub const VK_BUILD_MICROMAP_MODE_BUILD_EXT: c_int = 0;
pub const VK_BUILD_MICROMAP_MODE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkBuildMicromapModeEXT = c_uint;
pub const VkBuildMicromapModeEXT = enum_VkBuildMicromapModeEXT;
pub const VK_COPY_MICROMAP_MODE_CLONE_EXT: c_int = 0;
pub const VK_COPY_MICROMAP_MODE_SERIALIZE_EXT: c_int = 1;
pub const VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT: c_int = 2;
pub const VK_COPY_MICROMAP_MODE_COMPACT_EXT: c_int = 3;
pub const VK_COPY_MICROMAP_MODE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkCopyMicromapModeEXT = c_uint;
pub const VkCopyMicromapModeEXT = enum_VkCopyMicromapModeEXT;
pub const VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT: c_int = 1;
pub const VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT: c_int = 2;
pub const VK_OPACITY_MICROMAP_FORMAT_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkOpacityMicromapFormatEXT = c_uint;
pub const VkOpacityMicromapFormatEXT = enum_VkOpacityMicromapFormatEXT;
pub const VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT: c_int = -1;
pub const VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT: c_int = -2;
pub const VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT: c_int = -3;
pub const VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT: c_int = -4;
pub const VK_OPACITY_MICROMAP_SPECIAL_INDEX_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkOpacityMicromapSpecialIndexEXT = c_int;
pub const VkOpacityMicromapSpecialIndexEXT = enum_VkOpacityMicromapSpecialIndexEXT;
pub const VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR: c_int = 0;
pub const VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkAccelerationStructureCompatibilityKHR = c_uint;
pub const VkAccelerationStructureCompatibilityKHR = enum_VkAccelerationStructureCompatibilityKHR;
pub const VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR: c_int = 0;
pub const VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR: c_int = 2;
pub const VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkAccelerationStructureBuildTypeKHR = c_uint;
pub const VkAccelerationStructureBuildTypeKHR = enum_VkAccelerationStructureBuildTypeKHR;
pub const VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT: c_int = 1;
pub const VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT: c_int = 2;
pub const VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT: c_int = 4;
pub const VK_BUILD_MICROMAP_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkBuildMicromapFlagBitsEXT = c_uint;
pub const VkBuildMicromapFlagBitsEXT = enum_VkBuildMicromapFlagBitsEXT;
pub const VkBuildMicromapFlagsEXT = VkFlags;
pub const VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT: c_int = 1;
pub const VK_MICROMAP_CREATE_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkMicromapCreateFlagBitsEXT = c_uint;
pub const VkMicromapCreateFlagBitsEXT = enum_VkMicromapCreateFlagBitsEXT;
pub const VkMicromapCreateFlagsEXT = VkFlags;
pub const struct_VkMicromapUsageEXT = extern struct {
    count: u32 = @import("std").mem.zeroes(u32),
    subdivisionLevel: u32 = @import("std").mem.zeroes(u32),
    format: u32 = @import("std").mem.zeroes(u32),
};
pub const VkMicromapUsageEXT = struct_VkMicromapUsageEXT;
pub const union_VkDeviceOrHostAddressKHR = extern union {
    deviceAddress: VkDeviceAddress,
    hostAddress: ?*anyopaque,
};
pub const VkDeviceOrHostAddressKHR = union_VkDeviceOrHostAddressKHR;
pub const struct_VkMicromapBuildInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkMicromapTypeEXT = @import("std").mem.zeroes(VkMicromapTypeEXT),
    flags: VkBuildMicromapFlagsEXT = @import("std").mem.zeroes(VkBuildMicromapFlagsEXT),
    mode: VkBuildMicromapModeEXT = @import("std").mem.zeroes(VkBuildMicromapModeEXT),
    dstMicromap: VkMicromapEXT = @import("std").mem.zeroes(VkMicromapEXT),
    usageCountsCount: u32 = @import("std").mem.zeroes(u32),
    pUsageCounts: [*c]const VkMicromapUsageEXT = @import("std").mem.zeroes([*c]const VkMicromapUsageEXT),
    ppUsageCounts: [*c]const [*c]const VkMicromapUsageEXT = @import("std").mem.zeroes([*c]const [*c]const VkMicromapUsageEXT),
    data: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    scratchData: VkDeviceOrHostAddressKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressKHR),
    triangleArray: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    triangleArrayStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkMicromapBuildInfoEXT = struct_VkMicromapBuildInfoEXT;
pub const struct_VkMicromapCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    createFlags: VkMicromapCreateFlagsEXT = @import("std").mem.zeroes(VkMicromapCreateFlagsEXT),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    type: VkMicromapTypeEXT = @import("std").mem.zeroes(VkMicromapTypeEXT),
    deviceAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
};
pub const VkMicromapCreateInfoEXT = struct_VkMicromapCreateInfoEXT;
pub const struct_VkPhysicalDeviceOpacityMicromapFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    micromap: VkBool32 = @import("std").mem.zeroes(VkBool32),
    micromapCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    micromapHostCommands: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceOpacityMicromapFeaturesEXT = struct_VkPhysicalDeviceOpacityMicromapFeaturesEXT;
pub const struct_VkPhysicalDeviceOpacityMicromapPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxOpacity2StateSubdivisionLevel: u32 = @import("std").mem.zeroes(u32),
    maxOpacity4StateSubdivisionLevel: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceOpacityMicromapPropertiesEXT = struct_VkPhysicalDeviceOpacityMicromapPropertiesEXT;
pub const struct_VkMicromapVersionInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pVersionData: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const VkMicromapVersionInfoEXT = struct_VkMicromapVersionInfoEXT;
pub const struct_VkCopyMicromapToMemoryInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    src: VkMicromapEXT = @import("std").mem.zeroes(VkMicromapEXT),
    dst: VkDeviceOrHostAddressKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressKHR),
    mode: VkCopyMicromapModeEXT = @import("std").mem.zeroes(VkCopyMicromapModeEXT),
};
pub const VkCopyMicromapToMemoryInfoEXT = struct_VkCopyMicromapToMemoryInfoEXT;
pub const struct_VkCopyMemoryToMicromapInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    src: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    dst: VkMicromapEXT = @import("std").mem.zeroes(VkMicromapEXT),
    mode: VkCopyMicromapModeEXT = @import("std").mem.zeroes(VkCopyMicromapModeEXT),
};
pub const VkCopyMemoryToMicromapInfoEXT = struct_VkCopyMemoryToMicromapInfoEXT;
pub const struct_VkCopyMicromapInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    src: VkMicromapEXT = @import("std").mem.zeroes(VkMicromapEXT),
    dst: VkMicromapEXT = @import("std").mem.zeroes(VkMicromapEXT),
    mode: VkCopyMicromapModeEXT = @import("std").mem.zeroes(VkCopyMicromapModeEXT),
};
pub const VkCopyMicromapInfoEXT = struct_VkCopyMicromapInfoEXT;
pub const struct_VkMicromapBuildSizesInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    micromapSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    buildScratchSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    discardable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkMicromapBuildSizesInfoEXT = struct_VkMicromapBuildSizesInfoEXT;
pub const struct_VkAccelerationStructureTrianglesOpacityMicromapEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    indexType: VkIndexType = @import("std").mem.zeroes(VkIndexType),
    indexBuffer: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    indexStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    baseTriangle: u32 = @import("std").mem.zeroes(u32),
    usageCountsCount: u32 = @import("std").mem.zeroes(u32),
    pUsageCounts: [*c]const VkMicromapUsageEXT = @import("std").mem.zeroes([*c]const VkMicromapUsageEXT),
    ppUsageCounts: [*c]const [*c]const VkMicromapUsageEXT = @import("std").mem.zeroes([*c]const [*c]const VkMicromapUsageEXT),
    micromap: VkMicromapEXT = @import("std").mem.zeroes(VkMicromapEXT),
};
pub const VkAccelerationStructureTrianglesOpacityMicromapEXT = struct_VkAccelerationStructureTrianglesOpacityMicromapEXT;
pub const struct_VkMicromapTriangleEXT = extern struct {
    dataOffset: u32 = @import("std").mem.zeroes(u32),
    subdivisionLevel: u16 = @import("std").mem.zeroes(u16),
    format: u16 = @import("std").mem.zeroes(u16),
};
pub const VkMicromapTriangleEXT = struct_VkMicromapTriangleEXT;
pub const PFN_vkCreateMicromapEXT = ?*const fn (VkDevice, [*c]const VkMicromapCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkMicromapEXT) callconv(.C) VkResult;
pub const PFN_vkDestroyMicromapEXT = ?*const fn (VkDevice, VkMicromapEXT, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCmdBuildMicromapsEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkMicromapBuildInfoEXT) callconv(.C) void;
pub const PFN_vkBuildMicromapsEXT = ?*const fn (VkDevice, VkDeferredOperationKHR, u32, [*c]const VkMicromapBuildInfoEXT) callconv(.C) VkResult;
pub const PFN_vkCopyMicromapEXT = ?*const fn (VkDevice, VkDeferredOperationKHR, [*c]const VkCopyMicromapInfoEXT) callconv(.C) VkResult;
pub const PFN_vkCopyMicromapToMemoryEXT = ?*const fn (VkDevice, VkDeferredOperationKHR, [*c]const VkCopyMicromapToMemoryInfoEXT) callconv(.C) VkResult;
pub const PFN_vkCopyMemoryToMicromapEXT = ?*const fn (VkDevice, VkDeferredOperationKHR, [*c]const VkCopyMemoryToMicromapInfoEXT) callconv(.C) VkResult;
pub const PFN_vkWriteMicromapsPropertiesEXT = ?*const fn (VkDevice, u32, [*c]const VkMicromapEXT, VkQueryType, usize, ?*anyopaque, usize) callconv(.C) VkResult;
pub const PFN_vkCmdCopyMicromapEXT = ?*const fn (VkCommandBuffer, [*c]const VkCopyMicromapInfoEXT) callconv(.C) void;
pub const PFN_vkCmdCopyMicromapToMemoryEXT = ?*const fn (VkCommandBuffer, [*c]const VkCopyMicromapToMemoryInfoEXT) callconv(.C) void;
pub const PFN_vkCmdCopyMemoryToMicromapEXT = ?*const fn (VkCommandBuffer, [*c]const VkCopyMemoryToMicromapInfoEXT) callconv(.C) void;
pub const PFN_vkCmdWriteMicromapsPropertiesEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkMicromapEXT, VkQueryType, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkGetDeviceMicromapCompatibilityEXT = ?*const fn (VkDevice, [*c]const VkMicromapVersionInfoEXT, [*c]VkAccelerationStructureCompatibilityKHR) callconv(.C) void;
pub const PFN_vkGetMicromapBuildSizesEXT = ?*const fn (VkDevice, VkAccelerationStructureBuildTypeKHR, [*c]const VkMicromapBuildInfoEXT, [*c]VkMicromapBuildSizesInfoEXT) callconv(.C) void;
pub extern fn vkCreateMicromapEXT(device: VkDevice, pCreateInfo: [*c]const VkMicromapCreateInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pMicromap: [*c]VkMicromapEXT) VkResult;
pub extern fn vkDestroyMicromapEXT(device: VkDevice, micromap: VkMicromapEXT, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCmdBuildMicromapsEXT(commandBuffer: VkCommandBuffer, infoCount: u32, pInfos: [*c]const VkMicromapBuildInfoEXT) void;
pub extern fn vkBuildMicromapsEXT(device: VkDevice, deferredOperation: VkDeferredOperationKHR, infoCount: u32, pInfos: [*c]const VkMicromapBuildInfoEXT) VkResult;
pub extern fn vkCopyMicromapEXT(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: [*c]const VkCopyMicromapInfoEXT) VkResult;
pub extern fn vkCopyMicromapToMemoryEXT(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: [*c]const VkCopyMicromapToMemoryInfoEXT) VkResult;
pub extern fn vkCopyMemoryToMicromapEXT(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: [*c]const VkCopyMemoryToMicromapInfoEXT) VkResult;
pub extern fn vkWriteMicromapsPropertiesEXT(device: VkDevice, micromapCount: u32, pMicromaps: [*c]const VkMicromapEXT, queryType: VkQueryType, dataSize: usize, pData: ?*anyopaque, stride: usize) VkResult;
pub extern fn vkCmdCopyMicromapEXT(commandBuffer: VkCommandBuffer, pInfo: [*c]const VkCopyMicromapInfoEXT) void;
pub extern fn vkCmdCopyMicromapToMemoryEXT(commandBuffer: VkCommandBuffer, pInfo: [*c]const VkCopyMicromapToMemoryInfoEXT) void;
pub extern fn vkCmdCopyMemoryToMicromapEXT(commandBuffer: VkCommandBuffer, pInfo: [*c]const VkCopyMemoryToMicromapInfoEXT) void;
pub extern fn vkCmdWriteMicromapsPropertiesEXT(commandBuffer: VkCommandBuffer, micromapCount: u32, pMicromaps: [*c]const VkMicromapEXT, queryType: VkQueryType, queryPool: VkQueryPool, firstQuery: u32) void;
pub extern fn vkGetDeviceMicromapCompatibilityEXT(device: VkDevice, pVersionInfo: [*c]const VkMicromapVersionInfoEXT, pCompatibility: [*c]VkAccelerationStructureCompatibilityKHR) void;
pub extern fn vkGetMicromapBuildSizesEXT(device: VkDevice, buildType: VkAccelerationStructureBuildTypeKHR, pBuildInfo: [*c]const VkMicromapBuildInfoEXT, pSizeInfo: [*c]VkMicromapBuildSizesInfoEXT) void;
pub const struct_VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    clustercullingShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiviewClusterCullingShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI = struct_VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI;
pub const struct_VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxWorkGroupCount: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxOutputClusterCount: u32 = @import("std").mem.zeroes(u32),
    indirectBufferOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI = struct_VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI;
pub const struct_VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    clusterShadingRate: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI = struct_VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI;
pub const PFN_vkCmdDrawClusterHUAWEI = ?*const fn (VkCommandBuffer, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawClusterIndirectHUAWEI = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize) callconv(.C) void;
pub extern fn vkCmdDrawClusterHUAWEI(commandBuffer: VkCommandBuffer, groupCountX: u32, groupCountY: u32, groupCountZ: u32) void;
pub extern fn vkCmdDrawClusterIndirectHUAWEI(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize) void;
pub const struct_VkPhysicalDeviceBorderColorSwizzleFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    borderColorSwizzle: VkBool32 = @import("std").mem.zeroes(VkBool32),
    borderColorSwizzleFromImage: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceBorderColorSwizzleFeaturesEXT = struct_VkPhysicalDeviceBorderColorSwizzleFeaturesEXT;
pub const struct_VkSamplerBorderColorComponentMappingCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    components: VkComponentMapping = @import("std").mem.zeroes(VkComponentMapping),
    srgb: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSamplerBorderColorComponentMappingCreateInfoEXT = struct_VkSamplerBorderColorComponentMappingCreateInfoEXT;
pub const struct_VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pageableDeviceLocalMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT = struct_VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT;
pub const PFN_vkSetDeviceMemoryPriorityEXT = ?*const fn (VkDevice, VkDeviceMemory, f32) callconv(.C) void;
pub extern fn vkSetDeviceMemoryPriorityEXT(device: VkDevice, memory: VkDeviceMemory, priority: f32) void;
pub const struct_VkPhysicalDeviceShaderCorePropertiesARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pixelRate: u32 = @import("std").mem.zeroes(u32),
    texelRate: u32 = @import("std").mem.zeroes(u32),
    fmaRate: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceShaderCorePropertiesARM = struct_VkPhysicalDeviceShaderCorePropertiesARM;
pub const VkPhysicalDeviceSchedulingControlsFlagsARM = VkFlags64;
pub const VkPhysicalDeviceSchedulingControlsFlagBitsARM = VkFlags64;
pub const VK_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_SHADER_CORE_COUNT_ARM: VkPhysicalDeviceSchedulingControlsFlagBitsARM = 1;
pub const struct_VkDeviceQueueShaderCoreControlCreateInfoARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderCoreCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDeviceQueueShaderCoreControlCreateInfoARM = struct_VkDeviceQueueShaderCoreControlCreateInfoARM;
pub const struct_VkPhysicalDeviceSchedulingControlsFeaturesARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    schedulingControls: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSchedulingControlsFeaturesARM = struct_VkPhysicalDeviceSchedulingControlsFeaturesARM;
pub const struct_VkPhysicalDeviceSchedulingControlsPropertiesARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    schedulingControlsFlags: VkPhysicalDeviceSchedulingControlsFlagsARM = @import("std").mem.zeroes(VkPhysicalDeviceSchedulingControlsFlagsARM),
};
pub const VkPhysicalDeviceSchedulingControlsPropertiesARM = struct_VkPhysicalDeviceSchedulingControlsPropertiesARM;
pub const struct_VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageSlicedViewOf3D: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT = struct_VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT;
pub const struct_VkImageViewSlicedCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sliceOffset: u32 = @import("std").mem.zeroes(u32),
    sliceCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkImageViewSlicedCreateInfoEXT = struct_VkImageViewSlicedCreateInfoEXT;
pub const struct_VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    descriptorSetHostMapping: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE = struct_VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE;
pub const struct_VkDescriptorSetBindingReferenceVALVE = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    descriptorSetLayout: VkDescriptorSetLayout = @import("std").mem.zeroes(VkDescriptorSetLayout),
    binding: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDescriptorSetBindingReferenceVALVE = struct_VkDescriptorSetBindingReferenceVALVE;
pub const struct_VkDescriptorSetLayoutHostMappingInfoVALVE = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    descriptorOffset: usize = @import("std").mem.zeroes(usize),
    descriptorSize: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDescriptorSetLayoutHostMappingInfoVALVE = struct_VkDescriptorSetLayoutHostMappingInfoVALVE;
pub const PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE = ?*const fn (VkDevice, [*c]const VkDescriptorSetBindingReferenceVALVE, [*c]VkDescriptorSetLayoutHostMappingInfoVALVE) callconv(.C) void;
pub const PFN_vkGetDescriptorSetHostMappingVALVE = ?*const fn (VkDevice, VkDescriptorSet, [*c]?*anyopaque) callconv(.C) void;
pub extern fn vkGetDescriptorSetLayoutHostMappingInfoVALVE(device: VkDevice, pBindingReference: [*c]const VkDescriptorSetBindingReferenceVALVE, pHostMapping: [*c]VkDescriptorSetLayoutHostMappingInfoVALVE) void;
pub extern fn vkGetDescriptorSetHostMappingVALVE(device: VkDevice, descriptorSet: VkDescriptorSet, ppData: [*c]?*anyopaque) void;
pub const struct_VkPhysicalDeviceDepthClampZeroOneFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    depthClampZeroOne: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDepthClampZeroOneFeaturesEXT = struct_VkPhysicalDeviceDepthClampZeroOneFeaturesEXT;
pub const struct_VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    nonSeamlessCubeMap: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT = struct_VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT;
pub const struct_VkPhysicalDeviceRenderPassStripedFeaturesARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    renderPassStriped: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRenderPassStripedFeaturesARM = struct_VkPhysicalDeviceRenderPassStripedFeaturesARM;
pub const struct_VkPhysicalDeviceRenderPassStripedPropertiesARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    renderPassStripeGranularity: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxRenderPassStripes: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceRenderPassStripedPropertiesARM = struct_VkPhysicalDeviceRenderPassStripedPropertiesARM;
pub const struct_VkRenderPassStripeInfoARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stripeArea: VkRect2D = @import("std").mem.zeroes(VkRect2D),
};
pub const VkRenderPassStripeInfoARM = struct_VkRenderPassStripeInfoARM;
pub const struct_VkRenderPassStripeBeginInfoARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stripeInfoCount: u32 = @import("std").mem.zeroes(u32),
    pStripeInfos: [*c]const VkRenderPassStripeInfoARM = @import("std").mem.zeroes([*c]const VkRenderPassStripeInfoARM),
};
pub const VkRenderPassStripeBeginInfoARM = struct_VkRenderPassStripeBeginInfoARM;
pub const struct_VkRenderPassStripeSubmitInfoARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stripeSemaphoreInfoCount: u32 = @import("std").mem.zeroes(u32),
    pStripeSemaphoreInfos: [*c]const VkSemaphoreSubmitInfo = @import("std").mem.zeroes([*c]const VkSemaphoreSubmitInfo),
};
pub const VkRenderPassStripeSubmitInfoARM = struct_VkRenderPassStripeSubmitInfoARM;
pub const struct_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentDensityMapOffset: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM = struct_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM;
pub const struct_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentDensityOffsetGranularity: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM = struct_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM;
pub const struct_VkSubpassFragmentDensityMapOffsetEndInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    fragmentDensityOffsetCount: u32 = @import("std").mem.zeroes(u32),
    pFragmentDensityOffsets: [*c]const VkOffset2D = @import("std").mem.zeroes([*c]const VkOffset2D),
};
pub const VkSubpassFragmentDensityMapOffsetEndInfoQCOM = struct_VkSubpassFragmentDensityMapOffsetEndInfoQCOM;
pub const struct_VkCopyMemoryIndirectCommandNV = extern struct {
    srcAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    dstAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkCopyMemoryIndirectCommandNV = struct_VkCopyMemoryIndirectCommandNV;
pub const struct_VkCopyMemoryToImageIndirectCommandNV = extern struct {
    srcAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    bufferRowLength: u32 = @import("std").mem.zeroes(u32),
    bufferImageHeight: u32 = @import("std").mem.zeroes(u32),
    imageSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    imageOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    imageExtent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkCopyMemoryToImageIndirectCommandNV = struct_VkCopyMemoryToImageIndirectCommandNV;
pub const struct_VkPhysicalDeviceCopyMemoryIndirectFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    indirectCopy: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCopyMemoryIndirectFeaturesNV = struct_VkPhysicalDeviceCopyMemoryIndirectFeaturesNV;
pub const struct_VkPhysicalDeviceCopyMemoryIndirectPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportedQueues: VkQueueFlags = @import("std").mem.zeroes(VkQueueFlags),
};
pub const VkPhysicalDeviceCopyMemoryIndirectPropertiesNV = struct_VkPhysicalDeviceCopyMemoryIndirectPropertiesNV;
pub const PFN_vkCmdCopyMemoryIndirectNV = ?*const fn (VkCommandBuffer, VkDeviceAddress, u32, u32) callconv(.C) void;
pub const PFN_vkCmdCopyMemoryToImageIndirectNV = ?*const fn (VkCommandBuffer, VkDeviceAddress, u32, u32, VkImage, VkImageLayout, [*c]const VkImageSubresourceLayers) callconv(.C) void;
pub extern fn vkCmdCopyMemoryIndirectNV(commandBuffer: VkCommandBuffer, copyBufferAddress: VkDeviceAddress, copyCount: u32, stride: u32) void;
pub extern fn vkCmdCopyMemoryToImageIndirectNV(commandBuffer: VkCommandBuffer, copyBufferAddress: VkDeviceAddress, copyCount: u32, stride: u32, dstImage: VkImage, dstImageLayout: VkImageLayout, pImageSubresources: [*c]const VkImageSubresourceLayers) void;
pub const VkMemoryDecompressionMethodFlagBitsNV = VkFlags64;
pub const VK_MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV: VkMemoryDecompressionMethodFlagBitsNV = 1;
pub const VkMemoryDecompressionMethodFlagsNV = VkFlags64;
pub const struct_VkDecompressMemoryRegionNV = extern struct {
    srcAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    dstAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    compressedSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    decompressedSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    decompressionMethod: VkMemoryDecompressionMethodFlagsNV = @import("std").mem.zeroes(VkMemoryDecompressionMethodFlagsNV),
};
pub const VkDecompressMemoryRegionNV = struct_VkDecompressMemoryRegionNV;
pub const struct_VkPhysicalDeviceMemoryDecompressionFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryDecompression: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMemoryDecompressionFeaturesNV = struct_VkPhysicalDeviceMemoryDecompressionFeaturesNV;
pub const struct_VkPhysicalDeviceMemoryDecompressionPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    decompressionMethods: VkMemoryDecompressionMethodFlagsNV = @import("std").mem.zeroes(VkMemoryDecompressionMethodFlagsNV),
    maxDecompressionIndirectCount: u64 = @import("std").mem.zeroes(u64),
};
pub const VkPhysicalDeviceMemoryDecompressionPropertiesNV = struct_VkPhysicalDeviceMemoryDecompressionPropertiesNV;
pub const PFN_vkCmdDecompressMemoryNV = ?*const fn (VkCommandBuffer, u32, [*c]const VkDecompressMemoryRegionNV) callconv(.C) void;
pub const PFN_vkCmdDecompressMemoryIndirectCountNV = ?*const fn (VkCommandBuffer, VkDeviceAddress, VkDeviceAddress, u32) callconv(.C) void;
pub extern fn vkCmdDecompressMemoryNV(commandBuffer: VkCommandBuffer, decompressRegionCount: u32, pDecompressMemoryRegions: [*c]const VkDecompressMemoryRegionNV) void;
pub extern fn vkCmdDecompressMemoryIndirectCountNV(commandBuffer: VkCommandBuffer, indirectCommandsAddress: VkDeviceAddress, indirectCommandsCountAddress: VkDeviceAddress, stride: u32) void;
pub const struct_VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceGeneratedCompute: VkBool32 = @import("std").mem.zeroes(VkBool32),
    deviceGeneratedComputePipelines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    deviceGeneratedComputeCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV = struct_VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV;
pub const struct_VkComputePipelineIndirectBufferInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    pipelineDeviceAddressCaptureReplay: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
};
pub const VkComputePipelineIndirectBufferInfoNV = struct_VkComputePipelineIndirectBufferInfoNV;
pub const struct_VkPipelineIndirectDeviceAddressInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
};
pub const VkPipelineIndirectDeviceAddressInfoNV = struct_VkPipelineIndirectDeviceAddressInfoNV;
pub const struct_VkBindPipelineIndirectCommandNV = extern struct {
    pipelineAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
};
pub const VkBindPipelineIndirectCommandNV = struct_VkBindPipelineIndirectCommandNV;
pub const PFN_vkGetPipelineIndirectMemoryRequirementsNV = ?*const fn (VkDevice, [*c]const VkComputePipelineCreateInfo, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkCmdUpdatePipelineIndirectBufferNV = ?*const fn (VkCommandBuffer, VkPipelineBindPoint, VkPipeline) callconv(.C) void;
pub const PFN_vkGetPipelineIndirectDeviceAddressNV = ?*const fn (VkDevice, [*c]const VkPipelineIndirectDeviceAddressInfoNV) callconv(.C) VkDeviceAddress;
pub extern fn vkGetPipelineIndirectMemoryRequirementsNV(device: VkDevice, pCreateInfo: [*c]const VkComputePipelineCreateInfo, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkCmdUpdatePipelineIndirectBufferNV(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline) void;
pub extern fn vkGetPipelineIndirectDeviceAddressNV(device: VkDevice, pInfo: [*c]const VkPipelineIndirectDeviceAddressInfoNV) VkDeviceAddress;
pub const struct_VkPhysicalDeviceLinearColorAttachmentFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    linearColorAttachment: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceLinearColorAttachmentFeaturesNV = struct_VkPhysicalDeviceLinearColorAttachmentFeaturesNV;
pub const struct_VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageCompressionControlSwapchain: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT = struct_VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT;
pub const struct_VkImageViewSampleWeightCreateInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    filterCenter: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    filterSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    numPhases: u32 = @import("std").mem.zeroes(u32),
};
pub const VkImageViewSampleWeightCreateInfoQCOM = struct_VkImageViewSampleWeightCreateInfoQCOM;
pub const struct_VkPhysicalDeviceImageProcessingFeaturesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    textureSampleWeighted: VkBool32 = @import("std").mem.zeroes(VkBool32),
    textureBoxFilter: VkBool32 = @import("std").mem.zeroes(VkBool32),
    textureBlockMatch: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImageProcessingFeaturesQCOM = struct_VkPhysicalDeviceImageProcessingFeaturesQCOM;
pub const struct_VkPhysicalDeviceImageProcessingPropertiesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxWeightFilterPhases: u32 = @import("std").mem.zeroes(u32),
    maxWeightFilterDimension: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxBlockMatchRegion: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxBoxFilterBlockSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkPhysicalDeviceImageProcessingPropertiesQCOM = struct_VkPhysicalDeviceImageProcessingPropertiesQCOM;
pub const struct_VkPhysicalDeviceNestedCommandBufferFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    nestedCommandBuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    nestedCommandBufferRendering: VkBool32 = @import("std").mem.zeroes(VkBool32),
    nestedCommandBufferSimultaneousUse: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceNestedCommandBufferFeaturesEXT = struct_VkPhysicalDeviceNestedCommandBufferFeaturesEXT;
pub const struct_VkPhysicalDeviceNestedCommandBufferPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxCommandBufferNestingLevel: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceNestedCommandBufferPropertiesEXT = struct_VkPhysicalDeviceNestedCommandBufferPropertiesEXT;
pub const struct_VkExternalMemoryAcquireUnmodifiedEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    acquireUnmodifiedMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkExternalMemoryAcquireUnmodifiedEXT = struct_VkExternalMemoryAcquireUnmodifiedEXT;
pub const struct_VkPhysicalDeviceExtendedDynamicState3FeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    extendedDynamicState3TessellationDomainOrigin: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3DepthClampEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3PolygonMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3RasterizationSamples: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3SampleMask: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3AlphaToCoverageEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3AlphaToOneEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3LogicOpEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ColorBlendEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ColorBlendEquation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ColorWriteMask: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3RasterizationStream: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ConservativeRasterizationMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ExtraPrimitiveOverestimationSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3DepthClipEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3SampleLocationsEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ColorBlendAdvanced: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ProvokingVertexMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3LineRasterizationMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3LineStippleEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3DepthClipNegativeOneToOne: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ViewportWScalingEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ViewportSwizzle: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3CoverageToColorEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3CoverageToColorLocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3CoverageModulationMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3CoverageModulationTableEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3CoverageModulationTable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3CoverageReductionMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3RepresentativeFragmentTestEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ShadingRateImageEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceExtendedDynamicState3FeaturesEXT = struct_VkPhysicalDeviceExtendedDynamicState3FeaturesEXT;
pub const struct_VkPhysicalDeviceExtendedDynamicState3PropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    dynamicPrimitiveTopologyUnrestricted: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceExtendedDynamicState3PropertiesEXT = struct_VkPhysicalDeviceExtendedDynamicState3PropertiesEXT;
pub const struct_VkColorBlendEquationEXT = extern struct {
    srcColorBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    dstColorBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    colorBlendOp: VkBlendOp = @import("std").mem.zeroes(VkBlendOp),
    srcAlphaBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    dstAlphaBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    alphaBlendOp: VkBlendOp = @import("std").mem.zeroes(VkBlendOp),
};
pub const VkColorBlendEquationEXT = struct_VkColorBlendEquationEXT;
pub const struct_VkColorBlendAdvancedEXT = extern struct {
    advancedBlendOp: VkBlendOp = @import("std").mem.zeroes(VkBlendOp),
    srcPremultiplied: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dstPremultiplied: VkBool32 = @import("std").mem.zeroes(VkBool32),
    blendOverlap: VkBlendOverlapEXT = @import("std").mem.zeroes(VkBlendOverlapEXT),
    clampResults: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkColorBlendAdvancedEXT = struct_VkColorBlendAdvancedEXT;
pub const PFN_vkCmdSetDepthClampEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetPolygonModeEXT = ?*const fn (VkCommandBuffer, VkPolygonMode) callconv(.C) void;
pub const PFN_vkCmdSetRasterizationSamplesEXT = ?*const fn (VkCommandBuffer, VkSampleCountFlagBits) callconv(.C) void;
pub const PFN_vkCmdSetSampleMaskEXT = ?*const fn (VkCommandBuffer, VkSampleCountFlagBits, [*c]const VkSampleMask) callconv(.C) void;
pub const PFN_vkCmdSetAlphaToCoverageEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetAlphaToOneEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetLogicOpEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetColorBlendEnableEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetColorBlendEquationEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkColorBlendEquationEXT) callconv(.C) void;
pub const PFN_vkCmdSetColorWriteMaskEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkColorComponentFlags) callconv(.C) void;
pub const PFN_vkCmdSetTessellationDomainOriginEXT = ?*const fn (VkCommandBuffer, VkTessellationDomainOrigin) callconv(.C) void;
pub const PFN_vkCmdSetRasterizationStreamEXT = ?*const fn (VkCommandBuffer, u32) callconv(.C) void;
pub const PFN_vkCmdSetConservativeRasterizationModeEXT = ?*const fn (VkCommandBuffer, VkConservativeRasterizationModeEXT) callconv(.C) void;
pub const PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT = ?*const fn (VkCommandBuffer, f32) callconv(.C) void;
pub const PFN_vkCmdSetDepthClipEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetSampleLocationsEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetColorBlendAdvancedEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkColorBlendAdvancedEXT) callconv(.C) void;
pub const PFN_vkCmdSetProvokingVertexModeEXT = ?*const fn (VkCommandBuffer, VkProvokingVertexModeEXT) callconv(.C) void;
pub const PFN_vkCmdSetLineRasterizationModeEXT = ?*const fn (VkCommandBuffer, VkLineRasterizationModeEXT) callconv(.C) void;
pub const PFN_vkCmdSetLineStippleEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthClipNegativeOneToOneEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetViewportWScalingEnableNV = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetViewportSwizzleNV = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkViewportSwizzleNV) callconv(.C) void;
pub const PFN_vkCmdSetCoverageToColorEnableNV = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetCoverageToColorLocationNV = ?*const fn (VkCommandBuffer, u32) callconv(.C) void;
pub const PFN_vkCmdSetCoverageModulationModeNV = ?*const fn (VkCommandBuffer, VkCoverageModulationModeNV) callconv(.C) void;
pub const PFN_vkCmdSetCoverageModulationTableEnableNV = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetCoverageModulationTableNV = ?*const fn (VkCommandBuffer, u32, [*c]const f32) callconv(.C) void;
pub const PFN_vkCmdSetShadingRateImageEnableNV = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetRepresentativeFragmentTestEnableNV = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetCoverageReductionModeNV = ?*const fn (VkCommandBuffer, VkCoverageReductionModeNV) callconv(.C) void;
pub extern fn vkCmdSetDepthClampEnableEXT(commandBuffer: VkCommandBuffer, depthClampEnable: VkBool32) void;
pub extern fn vkCmdSetPolygonModeEXT(commandBuffer: VkCommandBuffer, polygonMode: VkPolygonMode) void;
pub extern fn vkCmdSetRasterizationSamplesEXT(commandBuffer: VkCommandBuffer, rasterizationSamples: VkSampleCountFlagBits) void;
pub extern fn vkCmdSetSampleMaskEXT(commandBuffer: VkCommandBuffer, samples: VkSampleCountFlagBits, pSampleMask: [*c]const VkSampleMask) void;
pub extern fn vkCmdSetAlphaToCoverageEnableEXT(commandBuffer: VkCommandBuffer, alphaToCoverageEnable: VkBool32) void;
pub extern fn vkCmdSetAlphaToOneEnableEXT(commandBuffer: VkCommandBuffer, alphaToOneEnable: VkBool32) void;
pub extern fn vkCmdSetLogicOpEnableEXT(commandBuffer: VkCommandBuffer, logicOpEnable: VkBool32) void;
pub extern fn vkCmdSetColorBlendEnableEXT(commandBuffer: VkCommandBuffer, firstAttachment: u32, attachmentCount: u32, pColorBlendEnables: [*c]const VkBool32) void;
pub extern fn vkCmdSetColorBlendEquationEXT(commandBuffer: VkCommandBuffer, firstAttachment: u32, attachmentCount: u32, pColorBlendEquations: [*c]const VkColorBlendEquationEXT) void;
pub extern fn vkCmdSetColorWriteMaskEXT(commandBuffer: VkCommandBuffer, firstAttachment: u32, attachmentCount: u32, pColorWriteMasks: [*c]const VkColorComponentFlags) void;
pub extern fn vkCmdSetTessellationDomainOriginEXT(commandBuffer: VkCommandBuffer, domainOrigin: VkTessellationDomainOrigin) void;
pub extern fn vkCmdSetRasterizationStreamEXT(commandBuffer: VkCommandBuffer, rasterizationStream: u32) void;
pub extern fn vkCmdSetConservativeRasterizationModeEXT(commandBuffer: VkCommandBuffer, conservativeRasterizationMode: VkConservativeRasterizationModeEXT) void;
pub extern fn vkCmdSetExtraPrimitiveOverestimationSizeEXT(commandBuffer: VkCommandBuffer, extraPrimitiveOverestimationSize: f32) void;
pub extern fn vkCmdSetDepthClipEnableEXT(commandBuffer: VkCommandBuffer, depthClipEnable: VkBool32) void;
pub extern fn vkCmdSetSampleLocationsEnableEXT(commandBuffer: VkCommandBuffer, sampleLocationsEnable: VkBool32) void;
pub extern fn vkCmdSetColorBlendAdvancedEXT(commandBuffer: VkCommandBuffer, firstAttachment: u32, attachmentCount: u32, pColorBlendAdvanced: [*c]const VkColorBlendAdvancedEXT) void;
pub extern fn vkCmdSetProvokingVertexModeEXT(commandBuffer: VkCommandBuffer, provokingVertexMode: VkProvokingVertexModeEXT) void;
pub extern fn vkCmdSetLineRasterizationModeEXT(commandBuffer: VkCommandBuffer, lineRasterizationMode: VkLineRasterizationModeEXT) void;
pub extern fn vkCmdSetLineStippleEnableEXT(commandBuffer: VkCommandBuffer, stippledLineEnable: VkBool32) void;
pub extern fn vkCmdSetDepthClipNegativeOneToOneEXT(commandBuffer: VkCommandBuffer, negativeOneToOne: VkBool32) void;
pub extern fn vkCmdSetViewportWScalingEnableNV(commandBuffer: VkCommandBuffer, viewportWScalingEnable: VkBool32) void;
pub extern fn vkCmdSetViewportSwizzleNV(commandBuffer: VkCommandBuffer, firstViewport: u32, viewportCount: u32, pViewportSwizzles: [*c]const VkViewportSwizzleNV) void;
pub extern fn vkCmdSetCoverageToColorEnableNV(commandBuffer: VkCommandBuffer, coverageToColorEnable: VkBool32) void;
pub extern fn vkCmdSetCoverageToColorLocationNV(commandBuffer: VkCommandBuffer, coverageToColorLocation: u32) void;
pub extern fn vkCmdSetCoverageModulationModeNV(commandBuffer: VkCommandBuffer, coverageModulationMode: VkCoverageModulationModeNV) void;
pub extern fn vkCmdSetCoverageModulationTableEnableNV(commandBuffer: VkCommandBuffer, coverageModulationTableEnable: VkBool32) void;
pub extern fn vkCmdSetCoverageModulationTableNV(commandBuffer: VkCommandBuffer, coverageModulationTableCount: u32, pCoverageModulationTable: [*c]const f32) void;
pub extern fn vkCmdSetShadingRateImageEnableNV(commandBuffer: VkCommandBuffer, shadingRateImageEnable: VkBool32) void;
pub extern fn vkCmdSetRepresentativeFragmentTestEnableNV(commandBuffer: VkCommandBuffer, representativeFragmentTestEnable: VkBool32) void;
pub extern fn vkCmdSetCoverageReductionModeNV(commandBuffer: VkCommandBuffer, coverageReductionMode: VkCoverageReductionModeNV) void;
pub const VK_SUBPASS_MERGE_STATUS_MERGED_EXT: c_int = 0;
pub const VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT: c_int = 1;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT: c_int = 2;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT: c_int = 3;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT: c_int = 4;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT: c_int = 5;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT: c_int = 6;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT: c_int = 7;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT: c_int = 8;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT: c_int = 9;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT: c_int = 10;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT: c_int = 11;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT: c_int = 12;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT: c_int = 13;
pub const VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkSubpassMergeStatusEXT = c_uint;
pub const VkSubpassMergeStatusEXT = enum_VkSubpassMergeStatusEXT;
pub const struct_VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    subpassMergeFeedback: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT = struct_VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT;
pub const struct_VkRenderPassCreationControlEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    disallowMerging: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkRenderPassCreationControlEXT = struct_VkRenderPassCreationControlEXT;
pub const struct_VkRenderPassCreationFeedbackInfoEXT = extern struct {
    postMergeSubpassCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkRenderPassCreationFeedbackInfoEXT = struct_VkRenderPassCreationFeedbackInfoEXT;
pub const struct_VkRenderPassCreationFeedbackCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pRenderPassFeedback: [*c]VkRenderPassCreationFeedbackInfoEXT = @import("std").mem.zeroes([*c]VkRenderPassCreationFeedbackInfoEXT),
};
pub const VkRenderPassCreationFeedbackCreateInfoEXT = struct_VkRenderPassCreationFeedbackCreateInfoEXT;
pub const struct_VkRenderPassSubpassFeedbackInfoEXT = extern struct {
    subpassMergeStatus: VkSubpassMergeStatusEXT = @import("std").mem.zeroes(VkSubpassMergeStatusEXT),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    postMergeIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkRenderPassSubpassFeedbackInfoEXT = struct_VkRenderPassSubpassFeedbackInfoEXT;
pub const struct_VkRenderPassSubpassFeedbackCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pSubpassFeedback: [*c]VkRenderPassSubpassFeedbackInfoEXT = @import("std").mem.zeroes([*c]VkRenderPassSubpassFeedbackInfoEXT),
};
pub const VkRenderPassSubpassFeedbackCreateInfoEXT = struct_VkRenderPassSubpassFeedbackCreateInfoEXT;
pub const VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG: c_int = 0;
pub const VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG: c_int = 1;
pub const VK_DIRECT_DRIVER_LOADING_MODE_MAX_ENUM_LUNARG: c_int = 2147483647;
pub const enum_VkDirectDriverLoadingModeLUNARG = c_uint;
pub const VkDirectDriverLoadingModeLUNARG = enum_VkDirectDriverLoadingModeLUNARG;
pub const VkDirectDriverLoadingFlagsLUNARG = VkFlags;
pub const PFN_vkGetInstanceProcAddrLUNARG = ?*const fn (VkInstance, [*c]const u8) callconv(.C) PFN_vkVoidFunction;
pub const struct_VkDirectDriverLoadingInfoLUNARG = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkDirectDriverLoadingFlagsLUNARG = @import("std").mem.zeroes(VkDirectDriverLoadingFlagsLUNARG),
    pfnGetInstanceProcAddr: PFN_vkGetInstanceProcAddrLUNARG = @import("std").mem.zeroes(PFN_vkGetInstanceProcAddrLUNARG),
};
pub const VkDirectDriverLoadingInfoLUNARG = struct_VkDirectDriverLoadingInfoLUNARG;
pub const struct_VkDirectDriverLoadingListLUNARG = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    mode: VkDirectDriverLoadingModeLUNARG = @import("std").mem.zeroes(VkDirectDriverLoadingModeLUNARG),
    driverCount: u32 = @import("std").mem.zeroes(u32),
    pDrivers: [*c]const VkDirectDriverLoadingInfoLUNARG = @import("std").mem.zeroes([*c]const VkDirectDriverLoadingInfoLUNARG),
};
pub const VkDirectDriverLoadingListLUNARG = struct_VkDirectDriverLoadingListLUNARG;
pub const struct_VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderModuleIdentifier: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT = struct_VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT;
pub const struct_VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderModuleIdentifierAlgorithmUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
};
pub const VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT = struct_VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT;
pub const struct_VkPipelineShaderStageModuleIdentifierCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    identifierSize: u32 = @import("std").mem.zeroes(u32),
    pIdentifier: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const VkPipelineShaderStageModuleIdentifierCreateInfoEXT = struct_VkPipelineShaderStageModuleIdentifierCreateInfoEXT;
pub const struct_VkShaderModuleIdentifierEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    identifierSize: u32 = @import("std").mem.zeroes(u32),
    identifier: [32]u8 = @import("std").mem.zeroes([32]u8),
};
pub const VkShaderModuleIdentifierEXT = struct_VkShaderModuleIdentifierEXT;
pub const PFN_vkGetShaderModuleIdentifierEXT = ?*const fn (VkDevice, VkShaderModule, [*c]VkShaderModuleIdentifierEXT) callconv(.C) void;
pub const PFN_vkGetShaderModuleCreateInfoIdentifierEXT = ?*const fn (VkDevice, [*c]const VkShaderModuleCreateInfo, [*c]VkShaderModuleIdentifierEXT) callconv(.C) void;
pub extern fn vkGetShaderModuleIdentifierEXT(device: VkDevice, shaderModule: VkShaderModule, pIdentifier: [*c]VkShaderModuleIdentifierEXT) void;
pub extern fn vkGetShaderModuleCreateInfoIdentifierEXT(device: VkDevice, pCreateInfo: [*c]const VkShaderModuleCreateInfo, pIdentifier: [*c]VkShaderModuleIdentifierEXT) void;
pub const struct_VkOpticalFlowSessionNV_T = opaque {};
pub const VkOpticalFlowSessionNV = ?*struct_VkOpticalFlowSessionNV_T;
pub const VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV: c_int = 0;
pub const VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV: c_int = 1;
pub const VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV: c_int = 2;
pub const VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV: c_int = 3;
pub const VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkOpticalFlowPerformanceLevelNV = c_uint;
pub const VkOpticalFlowPerformanceLevelNV = enum_VkOpticalFlowPerformanceLevelNV;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV: c_int = 0;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV: c_int = 1;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV: c_int = 2;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV: c_int = 3;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV: c_int = 4;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV: c_int = 5;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV: c_int = 6;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV: c_int = 7;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV: c_int = 8;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkOpticalFlowSessionBindingPointNV = c_uint;
pub const VkOpticalFlowSessionBindingPointNV = enum_VkOpticalFlowSessionBindingPointNV;
pub const VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV: c_int = 0;
pub const VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV: c_int = 1;
pub const VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV: c_int = 2;
pub const VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV: c_int = 4;
pub const VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV: c_int = 8;
pub const VK_OPTICAL_FLOW_GRID_SIZE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkOpticalFlowGridSizeFlagBitsNV = c_uint;
pub const VkOpticalFlowGridSizeFlagBitsNV = enum_VkOpticalFlowGridSizeFlagBitsNV;
pub const VkOpticalFlowGridSizeFlagsNV = VkFlags;
pub const VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV: c_int = 0;
pub const VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV: c_int = 1;
pub const VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV: c_int = 2;
pub const VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV: c_int = 4;
pub const VK_OPTICAL_FLOW_USAGE_COST_BIT_NV: c_int = 8;
pub const VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV: c_int = 16;
pub const VK_OPTICAL_FLOW_USAGE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkOpticalFlowUsageFlagBitsNV = c_uint;
pub const VkOpticalFlowUsageFlagBitsNV = enum_VkOpticalFlowUsageFlagBitsNV;
pub const VkOpticalFlowUsageFlagsNV = VkFlags;
pub const VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV: c_int = 1;
pub const VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV: c_int = 2;
pub const VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV: c_int = 4;
pub const VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV: c_int = 8;
pub const VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV: c_int = 16;
pub const VK_OPTICAL_FLOW_SESSION_CREATE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkOpticalFlowSessionCreateFlagBitsNV = c_uint;
pub const VkOpticalFlowSessionCreateFlagBitsNV = enum_VkOpticalFlowSessionCreateFlagBitsNV;
pub const VkOpticalFlowSessionCreateFlagsNV = VkFlags;
pub const VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV: c_int = 1;
pub const VK_OPTICAL_FLOW_EXECUTE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkOpticalFlowExecuteFlagBitsNV = c_uint;
pub const VkOpticalFlowExecuteFlagBitsNV = enum_VkOpticalFlowExecuteFlagBitsNV;
pub const VkOpticalFlowExecuteFlagsNV = VkFlags;
pub const struct_VkPhysicalDeviceOpticalFlowFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    opticalFlow: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceOpticalFlowFeaturesNV = struct_VkPhysicalDeviceOpticalFlowFeaturesNV;
pub const struct_VkPhysicalDeviceOpticalFlowPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportedOutputGridSizes: VkOpticalFlowGridSizeFlagsNV = @import("std").mem.zeroes(VkOpticalFlowGridSizeFlagsNV),
    supportedHintGridSizes: VkOpticalFlowGridSizeFlagsNV = @import("std").mem.zeroes(VkOpticalFlowGridSizeFlagsNV),
    hintSupported: VkBool32 = @import("std").mem.zeroes(VkBool32),
    costSupported: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bidirectionalFlowSupported: VkBool32 = @import("std").mem.zeroes(VkBool32),
    globalFlowSupported: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minWidth: u32 = @import("std").mem.zeroes(u32),
    minHeight: u32 = @import("std").mem.zeroes(u32),
    maxWidth: u32 = @import("std").mem.zeroes(u32),
    maxHeight: u32 = @import("std").mem.zeroes(u32),
    maxNumRegionsOfInterest: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceOpticalFlowPropertiesNV = struct_VkPhysicalDeviceOpticalFlowPropertiesNV;
pub const struct_VkOpticalFlowImageFormatInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    usage: VkOpticalFlowUsageFlagsNV = @import("std").mem.zeroes(VkOpticalFlowUsageFlagsNV),
};
pub const VkOpticalFlowImageFormatInfoNV = struct_VkOpticalFlowImageFormatInfoNV;
pub const struct_VkOpticalFlowImageFormatPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
};
pub const VkOpticalFlowImageFormatPropertiesNV = struct_VkOpticalFlowImageFormatPropertiesNV;
pub const struct_VkOpticalFlowSessionCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
    imageFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    flowVectorFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    costFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    outputGridSize: VkOpticalFlowGridSizeFlagsNV = @import("std").mem.zeroes(VkOpticalFlowGridSizeFlagsNV),
    hintGridSize: VkOpticalFlowGridSizeFlagsNV = @import("std").mem.zeroes(VkOpticalFlowGridSizeFlagsNV),
    performanceLevel: VkOpticalFlowPerformanceLevelNV = @import("std").mem.zeroes(VkOpticalFlowPerformanceLevelNV),
    flags: VkOpticalFlowSessionCreateFlagsNV = @import("std").mem.zeroes(VkOpticalFlowSessionCreateFlagsNV),
};
pub const VkOpticalFlowSessionCreateInfoNV = struct_VkOpticalFlowSessionCreateInfoNV;
pub const struct_VkOpticalFlowSessionCreatePrivateDataInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    id: u32 = @import("std").mem.zeroes(u32),
    size: u32 = @import("std").mem.zeroes(u32),
    pPrivateData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkOpticalFlowSessionCreatePrivateDataInfoNV = struct_VkOpticalFlowSessionCreatePrivateDataInfoNV;
pub const struct_VkOpticalFlowExecuteInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkOpticalFlowExecuteFlagsNV = @import("std").mem.zeroes(VkOpticalFlowExecuteFlagsNV),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
};
pub const VkOpticalFlowExecuteInfoNV = struct_VkOpticalFlowExecuteInfoNV;
pub const PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV = ?*const fn (VkPhysicalDevice, [*c]const VkOpticalFlowImageFormatInfoNV, [*c]u32, [*c]VkOpticalFlowImageFormatPropertiesNV) callconv(.C) VkResult;
pub const PFN_vkCreateOpticalFlowSessionNV = ?*const fn (VkDevice, [*c]const VkOpticalFlowSessionCreateInfoNV, [*c]const VkAllocationCallbacks, [*c]VkOpticalFlowSessionNV) callconv(.C) VkResult;
pub const PFN_vkDestroyOpticalFlowSessionNV = ?*const fn (VkDevice, VkOpticalFlowSessionNV, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkBindOpticalFlowSessionImageNV = ?*const fn (VkDevice, VkOpticalFlowSessionNV, VkOpticalFlowSessionBindingPointNV, VkImageView, VkImageLayout) callconv(.C) VkResult;
pub const PFN_vkCmdOpticalFlowExecuteNV = ?*const fn (VkCommandBuffer, VkOpticalFlowSessionNV, [*c]const VkOpticalFlowExecuteInfoNV) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceOpticalFlowImageFormatsNV(physicalDevice: VkPhysicalDevice, pOpticalFlowImageFormatInfo: [*c]const VkOpticalFlowImageFormatInfoNV, pFormatCount: [*c]u32, pImageFormatProperties: [*c]VkOpticalFlowImageFormatPropertiesNV) VkResult;
pub extern fn vkCreateOpticalFlowSessionNV(device: VkDevice, pCreateInfo: [*c]const VkOpticalFlowSessionCreateInfoNV, pAllocator: [*c]const VkAllocationCallbacks, pSession: [*c]VkOpticalFlowSessionNV) VkResult;
pub extern fn vkDestroyOpticalFlowSessionNV(device: VkDevice, session: VkOpticalFlowSessionNV, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkBindOpticalFlowSessionImageNV(device: VkDevice, session: VkOpticalFlowSessionNV, bindingPoint: VkOpticalFlowSessionBindingPointNV, view: VkImageView, layout: VkImageLayout) VkResult;
pub extern fn vkCmdOpticalFlowExecuteNV(commandBuffer: VkCommandBuffer, session: VkOpticalFlowSessionNV, pExecuteInfo: [*c]const VkOpticalFlowExecuteInfoNV) void;
pub const struct_VkPhysicalDeviceLegacyDitheringFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    legacyDithering: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceLegacyDitheringFeaturesEXT = struct_VkPhysicalDeviceLegacyDitheringFeaturesEXT;
pub const struct_VkPhysicalDevicePipelineProtectedAccessFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineProtectedAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePipelineProtectedAccessFeaturesEXT = struct_VkPhysicalDevicePipelineProtectedAccessFeaturesEXT;
pub const struct_VkShaderEXT_T = opaque {};
pub const VkShaderEXT = ?*struct_VkShaderEXT_T;
pub const VK_SHADER_CODE_TYPE_BINARY_EXT: c_int = 0;
pub const VK_SHADER_CODE_TYPE_SPIRV_EXT: c_int = 1;
pub const VK_SHADER_CODE_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkShaderCodeTypeEXT = c_uint;
pub const VkShaderCodeTypeEXT = enum_VkShaderCodeTypeEXT;
pub const VK_SHADER_CREATE_LINK_STAGE_BIT_EXT: c_int = 1;
pub const VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT: c_int = 2;
pub const VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT: c_int = 4;
pub const VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT: c_int = 8;
pub const VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT: c_int = 16;
pub const VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT: c_int = 32;
pub const VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT: c_int = 64;
pub const VK_SHADER_CREATE_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkShaderCreateFlagBitsEXT = c_uint;
pub const VkShaderCreateFlagBitsEXT = enum_VkShaderCreateFlagBitsEXT;
pub const VkShaderCreateFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceShaderObjectFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderObject: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderObjectFeaturesEXT = struct_VkPhysicalDeviceShaderObjectFeaturesEXT;
pub const struct_VkPhysicalDeviceShaderObjectPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderBinaryUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    shaderBinaryVersion: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceShaderObjectPropertiesEXT = struct_VkPhysicalDeviceShaderObjectPropertiesEXT;
pub const struct_VkShaderCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkShaderCreateFlagsEXT = @import("std").mem.zeroes(VkShaderCreateFlagsEXT),
    stage: VkShaderStageFlagBits = @import("std").mem.zeroes(VkShaderStageFlagBits),
    nextStage: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    codeType: VkShaderCodeTypeEXT = @import("std").mem.zeroes(VkShaderCodeTypeEXT),
    codeSize: usize = @import("std").mem.zeroes(usize),
    pCode: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    setLayoutCount: u32 = @import("std").mem.zeroes(u32),
    pSetLayouts: [*c]const VkDescriptorSetLayout = @import("std").mem.zeroes([*c]const VkDescriptorSetLayout),
    pushConstantRangeCount: u32 = @import("std").mem.zeroes(u32),
    pPushConstantRanges: [*c]const VkPushConstantRange = @import("std").mem.zeroes([*c]const VkPushConstantRange),
    pSpecializationInfo: [*c]const VkSpecializationInfo = @import("std").mem.zeroes([*c]const VkSpecializationInfo),
};
pub const VkShaderCreateInfoEXT = struct_VkShaderCreateInfoEXT;
pub const VkShaderRequiredSubgroupSizeCreateInfoEXT = VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;
pub const PFN_vkCreateShadersEXT = ?*const fn (VkDevice, u32, [*c]const VkShaderCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkShaderEXT) callconv(.C) VkResult;
pub const PFN_vkDestroyShaderEXT = ?*const fn (VkDevice, VkShaderEXT, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetShaderBinaryDataEXT = ?*const fn (VkDevice, VkShaderEXT, [*c]usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkCmdBindShadersEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkShaderStageFlagBits, [*c]const VkShaderEXT) callconv(.C) void;
pub extern fn vkCreateShadersEXT(device: VkDevice, createInfoCount: u32, pCreateInfos: [*c]const VkShaderCreateInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pShaders: [*c]VkShaderEXT) VkResult;
pub extern fn vkDestroyShaderEXT(device: VkDevice, shader: VkShaderEXT, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetShaderBinaryDataEXT(device: VkDevice, shader: VkShaderEXT, pDataSize: [*c]usize, pData: ?*anyopaque) VkResult;
pub extern fn vkCmdBindShadersEXT(commandBuffer: VkCommandBuffer, stageCount: u32, pStages: [*c]const VkShaderStageFlagBits, pShaders: [*c]const VkShaderEXT) void;
pub const struct_VkPhysicalDeviceTilePropertiesFeaturesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    tileProperties: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceTilePropertiesFeaturesQCOM = struct_VkPhysicalDeviceTilePropertiesFeaturesQCOM;
pub const struct_VkTilePropertiesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    tileSize: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    apronSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    origin: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
};
pub const VkTilePropertiesQCOM = struct_VkTilePropertiesQCOM;
pub const PFN_vkGetFramebufferTilePropertiesQCOM = ?*const fn (VkDevice, VkFramebuffer, [*c]u32, [*c]VkTilePropertiesQCOM) callconv(.C) VkResult;
pub const PFN_vkGetDynamicRenderingTilePropertiesQCOM = ?*const fn (VkDevice, [*c]const VkRenderingInfo, [*c]VkTilePropertiesQCOM) callconv(.C) VkResult;
pub extern fn vkGetFramebufferTilePropertiesQCOM(device: VkDevice, framebuffer: VkFramebuffer, pPropertiesCount: [*c]u32, pProperties: [*c]VkTilePropertiesQCOM) VkResult;
pub extern fn vkGetDynamicRenderingTilePropertiesQCOM(device: VkDevice, pRenderingInfo: [*c]const VkRenderingInfo, pProperties: [*c]VkTilePropertiesQCOM) VkResult;
pub const struct_VkPhysicalDeviceAmigoProfilingFeaturesSEC = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    amigoProfiling: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceAmigoProfilingFeaturesSEC = struct_VkPhysicalDeviceAmigoProfilingFeaturesSEC;
pub const struct_VkAmigoProfilingSubmitInfoSEC = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    firstDrawTimestamp: u64 = @import("std").mem.zeroes(u64),
    swapBufferTimestamp: u64 = @import("std").mem.zeroes(u64),
};
pub const VkAmigoProfilingSubmitInfoSEC = struct_VkAmigoProfilingSubmitInfoSEC;
pub const struct_VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    multiviewPerViewViewports: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM = struct_VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM;
pub const VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV: c_int = 0;
pub const VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV: c_int = 1;
pub const VK_RAY_TRACING_INVOCATION_REORDER_MODE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkRayTracingInvocationReorderModeNV = c_uint;
pub const VkRayTracingInvocationReorderModeNV = enum_VkRayTracingInvocationReorderModeNV;
pub const struct_VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingInvocationReorderReorderingHint: VkRayTracingInvocationReorderModeNV = @import("std").mem.zeroes(VkRayTracingInvocationReorderModeNV),
};
pub const VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV = struct_VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV;
pub const struct_VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingInvocationReorder: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV = struct_VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV;
pub const struct_VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    extendedSparseAddressSpace: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV = struct_VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV;
pub const struct_VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    extendedSparseAddressSpaceSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    extendedSparseImageUsageFlags: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    extendedSparseBufferUsageFlags: VkBufferUsageFlags = @import("std").mem.zeroes(VkBufferUsageFlags),
};
pub const VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV = struct_VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV;
pub const struct_VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    legacyVertexAttributes: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT = struct_VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT;
pub const struct_VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    nativeUnalignedPerformance: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT = struct_VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT;
pub const VK_LAYER_SETTING_TYPE_BOOL32_EXT: c_int = 0;
pub const VK_LAYER_SETTING_TYPE_INT32_EXT: c_int = 1;
pub const VK_LAYER_SETTING_TYPE_INT64_EXT: c_int = 2;
pub const VK_LAYER_SETTING_TYPE_UINT32_EXT: c_int = 3;
pub const VK_LAYER_SETTING_TYPE_UINT64_EXT: c_int = 4;
pub const VK_LAYER_SETTING_TYPE_FLOAT32_EXT: c_int = 5;
pub const VK_LAYER_SETTING_TYPE_FLOAT64_EXT: c_int = 6;
pub const VK_LAYER_SETTING_TYPE_STRING_EXT: c_int = 7;
pub const VK_LAYER_SETTING_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkLayerSettingTypeEXT = c_uint;
pub const VkLayerSettingTypeEXT = enum_VkLayerSettingTypeEXT;
pub const struct_VkLayerSettingEXT = extern struct {
    pLayerName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    pSettingName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    type: VkLayerSettingTypeEXT = @import("std").mem.zeroes(VkLayerSettingTypeEXT),
    valueCount: u32 = @import("std").mem.zeroes(u32),
    pValues: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkLayerSettingEXT = struct_VkLayerSettingEXT;
pub const struct_VkLayerSettingsCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    settingCount: u32 = @import("std").mem.zeroes(u32),
    pSettings: [*c]const VkLayerSettingEXT = @import("std").mem.zeroes([*c]const VkLayerSettingEXT),
};
pub const VkLayerSettingsCreateInfoEXT = struct_VkLayerSettingsCreateInfoEXT;
pub const struct_VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderCoreBuiltins: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM = struct_VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM;
pub const struct_VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderCoreMask: u64 = @import("std").mem.zeroes(u64),
    shaderCoreCount: u32 = @import("std").mem.zeroes(u32),
    shaderWarpsPerCore: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM = struct_VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM;
pub const struct_VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineLibraryGroupHandles: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT = struct_VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT;
pub const struct_VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    dynamicRenderingUnusedAttachments: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT = struct_VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT;
pub const VK_LATENCY_MARKER_SIMULATION_START_NV: c_int = 0;
pub const VK_LATENCY_MARKER_SIMULATION_END_NV: c_int = 1;
pub const VK_LATENCY_MARKER_RENDERSUBMIT_START_NV: c_int = 2;
pub const VK_LATENCY_MARKER_RENDERSUBMIT_END_NV: c_int = 3;
pub const VK_LATENCY_MARKER_PRESENT_START_NV: c_int = 4;
pub const VK_LATENCY_MARKER_PRESENT_END_NV: c_int = 5;
pub const VK_LATENCY_MARKER_INPUT_SAMPLE_NV: c_int = 6;
pub const VK_LATENCY_MARKER_TRIGGER_FLASH_NV: c_int = 7;
pub const VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_START_NV: c_int = 8;
pub const VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_END_NV: c_int = 9;
pub const VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_START_NV: c_int = 10;
pub const VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_END_NV: c_int = 11;
pub const VK_LATENCY_MARKER_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkLatencyMarkerNV = c_uint;
pub const VkLatencyMarkerNV = enum_VkLatencyMarkerNV;
pub const VK_OUT_OF_BAND_QUEUE_TYPE_RENDER_NV: c_int = 0;
pub const VK_OUT_OF_BAND_QUEUE_TYPE_PRESENT_NV: c_int = 1;
pub const VK_OUT_OF_BAND_QUEUE_TYPE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkOutOfBandQueueTypeNV = c_uint;
pub const VkOutOfBandQueueTypeNV = enum_VkOutOfBandQueueTypeNV;
pub const struct_VkLatencySleepModeInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    lowLatencyMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    lowLatencyBoost: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minimumIntervalUs: u32 = @import("std").mem.zeroes(u32),
};
pub const VkLatencySleepModeInfoNV = struct_VkLatencySleepModeInfoNV;
pub const struct_VkLatencySleepInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    signalSemaphore: VkSemaphore = @import("std").mem.zeroes(VkSemaphore),
    value: u64 = @import("std").mem.zeroes(u64),
};
pub const VkLatencySleepInfoNV = struct_VkLatencySleepInfoNV;
pub const struct_VkSetLatencyMarkerInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    presentID: u64 = @import("std").mem.zeroes(u64),
    marker: VkLatencyMarkerNV = @import("std").mem.zeroes(VkLatencyMarkerNV),
};
pub const VkSetLatencyMarkerInfoNV = struct_VkSetLatencyMarkerInfoNV;
pub const struct_VkLatencyTimingsFrameReportNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    presentID: u64 = @import("std").mem.zeroes(u64),
    inputSampleTimeUs: u64 = @import("std").mem.zeroes(u64),
    simStartTimeUs: u64 = @import("std").mem.zeroes(u64),
    simEndTimeUs: u64 = @import("std").mem.zeroes(u64),
    renderSubmitStartTimeUs: u64 = @import("std").mem.zeroes(u64),
    renderSubmitEndTimeUs: u64 = @import("std").mem.zeroes(u64),
    presentStartTimeUs: u64 = @import("std").mem.zeroes(u64),
    presentEndTimeUs: u64 = @import("std").mem.zeroes(u64),
    driverStartTimeUs: u64 = @import("std").mem.zeroes(u64),
    driverEndTimeUs: u64 = @import("std").mem.zeroes(u64),
    osRenderQueueStartTimeUs: u64 = @import("std").mem.zeroes(u64),
    osRenderQueueEndTimeUs: u64 = @import("std").mem.zeroes(u64),
    gpuRenderStartTimeUs: u64 = @import("std").mem.zeroes(u64),
    gpuRenderEndTimeUs: u64 = @import("std").mem.zeroes(u64),
};
pub const VkLatencyTimingsFrameReportNV = struct_VkLatencyTimingsFrameReportNV;
pub const struct_VkGetLatencyMarkerInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    timingCount: u32 = @import("std").mem.zeroes(u32),
    pTimings: [*c]VkLatencyTimingsFrameReportNV = @import("std").mem.zeroes([*c]VkLatencyTimingsFrameReportNV),
};
pub const VkGetLatencyMarkerInfoNV = struct_VkGetLatencyMarkerInfoNV;
pub const struct_VkLatencySubmissionPresentIdNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    presentID: u64 = @import("std").mem.zeroes(u64),
};
pub const VkLatencySubmissionPresentIdNV = struct_VkLatencySubmissionPresentIdNV;
pub const struct_VkSwapchainLatencyCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    latencyModeEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSwapchainLatencyCreateInfoNV = struct_VkSwapchainLatencyCreateInfoNV;
pub const struct_VkOutOfBandQueueTypeInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    queueType: VkOutOfBandQueueTypeNV = @import("std").mem.zeroes(VkOutOfBandQueueTypeNV),
};
pub const VkOutOfBandQueueTypeInfoNV = struct_VkOutOfBandQueueTypeInfoNV;
pub const struct_VkLatencySurfaceCapabilitiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    presentModeCount: u32 = @import("std").mem.zeroes(u32),
    pPresentModes: [*c]VkPresentModeKHR = @import("std").mem.zeroes([*c]VkPresentModeKHR),
};
pub const VkLatencySurfaceCapabilitiesNV = struct_VkLatencySurfaceCapabilitiesNV;
pub const PFN_vkSetLatencySleepModeNV = ?*const fn (VkDevice, VkSwapchainKHR, [*c]const VkLatencySleepModeInfoNV) callconv(.C) VkResult;
pub const PFN_vkLatencySleepNV = ?*const fn (VkDevice, VkSwapchainKHR, [*c]const VkLatencySleepInfoNV) callconv(.C) VkResult;
pub const PFN_vkSetLatencyMarkerNV = ?*const fn (VkDevice, VkSwapchainKHR, [*c]const VkSetLatencyMarkerInfoNV) callconv(.C) void;
pub const PFN_vkGetLatencyTimingsNV = ?*const fn (VkDevice, VkSwapchainKHR, [*c]VkGetLatencyMarkerInfoNV) callconv(.C) void;
pub const PFN_vkQueueNotifyOutOfBandNV = ?*const fn (VkQueue, [*c]const VkOutOfBandQueueTypeInfoNV) callconv(.C) void;
pub extern fn vkSetLatencySleepModeNV(device: VkDevice, swapchain: VkSwapchainKHR, pSleepModeInfo: [*c]const VkLatencySleepModeInfoNV) VkResult;
pub extern fn vkLatencySleepNV(device: VkDevice, swapchain: VkSwapchainKHR, pSleepInfo: [*c]const VkLatencySleepInfoNV) VkResult;
pub extern fn vkSetLatencyMarkerNV(device: VkDevice, swapchain: VkSwapchainKHR, pLatencyMarkerInfo: [*c]const VkSetLatencyMarkerInfoNV) void;
pub extern fn vkGetLatencyTimingsNV(device: VkDevice, swapchain: VkSwapchainKHR, pLatencyMarkerInfo: [*c]VkGetLatencyMarkerInfoNV) void;
pub extern fn vkQueueNotifyOutOfBandNV(queue: VkQueue, pQueueTypeInfo: [*c]const VkOutOfBandQueueTypeInfoNV) void;
pub const struct_VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    multiviewPerViewRenderAreas: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM = struct_VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM;
pub const struct_VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    perViewRenderAreaCount: u32 = @import("std").mem.zeroes(u32),
    pPerViewRenderAreas: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
};
pub const VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM = struct_VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM;
pub const struct_VkPhysicalDevicePerStageDescriptorSetFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    perStageDescriptorSet: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dynamicPipelineLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePerStageDescriptorSetFeaturesNV = struct_VkPhysicalDevicePerStageDescriptorSetFeaturesNV;
pub const VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MIN_QCOM: c_int = 0;
pub const VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_QCOM: c_int = 1;
pub const VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_ENUM_QCOM: c_int = 2147483647;
pub const enum_VkBlockMatchWindowCompareModeQCOM = c_uint;
pub const VkBlockMatchWindowCompareModeQCOM = enum_VkBlockMatchWindowCompareModeQCOM;
pub const struct_VkPhysicalDeviceImageProcessing2FeaturesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    textureBlockMatch2: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImageProcessing2FeaturesQCOM = struct_VkPhysicalDeviceImageProcessing2FeaturesQCOM;
pub const struct_VkPhysicalDeviceImageProcessing2PropertiesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxBlockMatchWindow: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkPhysicalDeviceImageProcessing2PropertiesQCOM = struct_VkPhysicalDeviceImageProcessing2PropertiesQCOM;
pub const struct_VkSamplerBlockMatchWindowCreateInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    windowExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    windowCompareMode: VkBlockMatchWindowCompareModeQCOM = @import("std").mem.zeroes(VkBlockMatchWindowCompareModeQCOM),
};
pub const VkSamplerBlockMatchWindowCreateInfoQCOM = struct_VkSamplerBlockMatchWindowCreateInfoQCOM;
pub const VK_CUBIC_FILTER_WEIGHTS_CATMULL_ROM_QCOM: c_int = 0;
pub const VK_CUBIC_FILTER_WEIGHTS_ZERO_TANGENT_CARDINAL_QCOM: c_int = 1;
pub const VK_CUBIC_FILTER_WEIGHTS_B_SPLINE_QCOM: c_int = 2;
pub const VK_CUBIC_FILTER_WEIGHTS_MITCHELL_NETRAVALI_QCOM: c_int = 3;
pub const VK_CUBIC_FILTER_WEIGHTS_MAX_ENUM_QCOM: c_int = 2147483647;
pub const enum_VkCubicFilterWeightsQCOM = c_uint;
pub const VkCubicFilterWeightsQCOM = enum_VkCubicFilterWeightsQCOM;
pub const struct_VkPhysicalDeviceCubicWeightsFeaturesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    selectableCubicWeights: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCubicWeightsFeaturesQCOM = struct_VkPhysicalDeviceCubicWeightsFeaturesQCOM;
pub const struct_VkSamplerCubicWeightsCreateInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    cubicWeights: VkCubicFilterWeightsQCOM = @import("std").mem.zeroes(VkCubicFilterWeightsQCOM),
};
pub const VkSamplerCubicWeightsCreateInfoQCOM = struct_VkSamplerCubicWeightsCreateInfoQCOM;
pub const struct_VkBlitImageCubicWeightsInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    cubicWeights: VkCubicFilterWeightsQCOM = @import("std").mem.zeroes(VkCubicFilterWeightsQCOM),
};
pub const VkBlitImageCubicWeightsInfoQCOM = struct_VkBlitImageCubicWeightsInfoQCOM;
pub const struct_VkPhysicalDeviceYcbcrDegammaFeaturesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    ycbcrDegamma: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceYcbcrDegammaFeaturesQCOM = struct_VkPhysicalDeviceYcbcrDegammaFeaturesQCOM;
pub const struct_VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    enableYDegamma: VkBool32 = @import("std").mem.zeroes(VkBool32),
    enableCbCrDegamma: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM = struct_VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM;
pub const struct_VkPhysicalDeviceCubicClampFeaturesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cubicRangeClamp: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCubicClampFeaturesQCOM = struct_VkPhysicalDeviceCubicClampFeaturesQCOM;
pub const struct_VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    attachmentFeedbackLoopDynamicState: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT = struct_VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT;
pub const PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT = ?*const fn (VkCommandBuffer, VkImageAspectFlags) callconv(.C) void;
pub extern fn vkCmdSetAttachmentFeedbackLoopEnableEXT(commandBuffer: VkCommandBuffer, aspectMask: VkImageAspectFlags) void;
pub const VK_LAYERED_DRIVER_UNDERLYING_API_NONE_MSFT: c_int = 0;
pub const VK_LAYERED_DRIVER_UNDERLYING_API_D3D12_MSFT: c_int = 1;
pub const VK_LAYERED_DRIVER_UNDERLYING_API_MAX_ENUM_MSFT: c_int = 2147483647;
pub const enum_VkLayeredDriverUnderlyingApiMSFT = c_uint;
pub const VkLayeredDriverUnderlyingApiMSFT = enum_VkLayeredDriverUnderlyingApiMSFT;
pub const struct_VkPhysicalDeviceLayeredDriverPropertiesMSFT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    underlyingAPI: VkLayeredDriverUnderlyingApiMSFT = @import("std").mem.zeroes(VkLayeredDriverUnderlyingApiMSFT),
};
pub const VkPhysicalDeviceLayeredDriverPropertiesMSFT = struct_VkPhysicalDeviceLayeredDriverPropertiesMSFT;
pub const struct_VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    descriptorPoolOverallocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV = struct_VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV;
pub const struct_VkPhysicalDeviceRawAccessChainsFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderRawAccessChains: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRawAccessChainsFeaturesNV = struct_VkPhysicalDeviceRawAccessChainsFeaturesNV;
pub const struct_VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderFloat16VectorAtomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV = struct_VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV;
pub const struct_VkPhysicalDeviceRayTracingValidationFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingValidation: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRayTracingValidationFeaturesNV = struct_VkPhysicalDeviceRayTracingValidationFeaturesNV;
pub const struct_VkPhysicalDeviceImageAlignmentControlFeaturesMESA = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageAlignmentControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImageAlignmentControlFeaturesMESA = struct_VkPhysicalDeviceImageAlignmentControlFeaturesMESA;
pub const struct_VkPhysicalDeviceImageAlignmentControlPropertiesMESA = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportedImageAlignmentMask: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceImageAlignmentControlPropertiesMESA = struct_VkPhysicalDeviceImageAlignmentControlPropertiesMESA;
pub const struct_VkImageAlignmentControlCreateInfoMESA = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maximumRequestedAlignment: u32 = @import("std").mem.zeroes(u32),
};
pub const VkImageAlignmentControlCreateInfoMESA = struct_VkImageAlignmentControlCreateInfoMESA;
pub const VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR: c_int = 0;
pub const VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR: c_int = 1;
pub const VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkBuildAccelerationStructureModeKHR = c_uint;
pub const VkBuildAccelerationStructureModeKHR = enum_VkBuildAccelerationStructureModeKHR;
pub const VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT: c_int = 8;
pub const VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV: c_int = 4;
pub const VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkAccelerationStructureCreateFlagBitsKHR = c_uint;
pub const VkAccelerationStructureCreateFlagBitsKHR = enum_VkAccelerationStructureCreateFlagBitsKHR;
pub const VkAccelerationStructureCreateFlagsKHR = VkFlags;
pub const struct_VkAccelerationStructureBuildRangeInfoKHR = extern struct {
    primitiveCount: u32 = @import("std").mem.zeroes(u32),
    primitiveOffset: u32 = @import("std").mem.zeroes(u32),
    firstVertex: u32 = @import("std").mem.zeroes(u32),
    transformOffset: u32 = @import("std").mem.zeroes(u32),
};
pub const VkAccelerationStructureBuildRangeInfoKHR = struct_VkAccelerationStructureBuildRangeInfoKHR;
pub const struct_VkAccelerationStructureGeometryTrianglesDataKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    vertexFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    vertexData: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    vertexStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    maxVertex: u32 = @import("std").mem.zeroes(u32),
    indexType: VkIndexType = @import("std").mem.zeroes(VkIndexType),
    indexData: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    transformData: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
};
pub const VkAccelerationStructureGeometryTrianglesDataKHR = struct_VkAccelerationStructureGeometryTrianglesDataKHR;
pub const struct_VkAccelerationStructureGeometryAabbsDataKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    data: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    stride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkAccelerationStructureGeometryAabbsDataKHR = struct_VkAccelerationStructureGeometryAabbsDataKHR;
pub const struct_VkAccelerationStructureGeometryInstancesDataKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    arrayOfPointers: VkBool32 = @import("std").mem.zeroes(VkBool32),
    data: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
};
pub const VkAccelerationStructureGeometryInstancesDataKHR = struct_VkAccelerationStructureGeometryInstancesDataKHR;
pub const union_VkAccelerationStructureGeometryDataKHR = extern union {
    triangles: VkAccelerationStructureGeometryTrianglesDataKHR,
    aabbs: VkAccelerationStructureGeometryAabbsDataKHR,
    instances: VkAccelerationStructureGeometryInstancesDataKHR,
};
pub const VkAccelerationStructureGeometryDataKHR = union_VkAccelerationStructureGeometryDataKHR;
pub const struct_VkAccelerationStructureGeometryKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    geometryType: VkGeometryTypeKHR = @import("std").mem.zeroes(VkGeometryTypeKHR),
    geometry: VkAccelerationStructureGeometryDataKHR = @import("std").mem.zeroes(VkAccelerationStructureGeometryDataKHR),
    flags: VkGeometryFlagsKHR = @import("std").mem.zeroes(VkGeometryFlagsKHR),
};
pub const VkAccelerationStructureGeometryKHR = struct_VkAccelerationStructureGeometryKHR;
pub const struct_VkAccelerationStructureBuildGeometryInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkAccelerationStructureTypeKHR = @import("std").mem.zeroes(VkAccelerationStructureTypeKHR),
    flags: VkBuildAccelerationStructureFlagsKHR = @import("std").mem.zeroes(VkBuildAccelerationStructureFlagsKHR),
    mode: VkBuildAccelerationStructureModeKHR = @import("std").mem.zeroes(VkBuildAccelerationStructureModeKHR),
    srcAccelerationStructure: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    dstAccelerationStructure: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    geometryCount: u32 = @import("std").mem.zeroes(u32),
    pGeometries: [*c]const VkAccelerationStructureGeometryKHR = @import("std").mem.zeroes([*c]const VkAccelerationStructureGeometryKHR),
    ppGeometries: [*c]const [*c]const VkAccelerationStructureGeometryKHR = @import("std").mem.zeroes([*c]const [*c]const VkAccelerationStructureGeometryKHR),
    scratchData: VkDeviceOrHostAddressKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressKHR),
};
pub const VkAccelerationStructureBuildGeometryInfoKHR = struct_VkAccelerationStructureBuildGeometryInfoKHR;
pub const struct_VkAccelerationStructureCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    createFlags: VkAccelerationStructureCreateFlagsKHR = @import("std").mem.zeroes(VkAccelerationStructureCreateFlagsKHR),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    type: VkAccelerationStructureTypeKHR = @import("std").mem.zeroes(VkAccelerationStructureTypeKHR),
    deviceAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
};
pub const VkAccelerationStructureCreateInfoKHR = struct_VkAccelerationStructureCreateInfoKHR;
pub const struct_VkWriteDescriptorSetAccelerationStructureKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    accelerationStructureCount: u32 = @import("std").mem.zeroes(u32),
    pAccelerationStructures: [*c]const VkAccelerationStructureKHR = @import("std").mem.zeroes([*c]const VkAccelerationStructureKHR),
};
pub const VkWriteDescriptorSetAccelerationStructureKHR = struct_VkWriteDescriptorSetAccelerationStructureKHR;
pub const struct_VkPhysicalDeviceAccelerationStructureFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    accelerationStructure: VkBool32 = @import("std").mem.zeroes(VkBool32),
    accelerationStructureCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    accelerationStructureIndirectBuild: VkBool32 = @import("std").mem.zeroes(VkBool32),
    accelerationStructureHostCommands: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingAccelerationStructureUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceAccelerationStructureFeaturesKHR = struct_VkPhysicalDeviceAccelerationStructureFeaturesKHR;
pub const struct_VkPhysicalDeviceAccelerationStructurePropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxGeometryCount: u64 = @import("std").mem.zeroes(u64),
    maxInstanceCount: u64 = @import("std").mem.zeroes(u64),
    maxPrimitiveCount: u64 = @import("std").mem.zeroes(u64),
    maxPerStageDescriptorAccelerationStructures: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindAccelerationStructures: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetAccelerationStructures: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindAccelerationStructures: u32 = @import("std").mem.zeroes(u32),
    minAccelerationStructureScratchOffsetAlignment: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceAccelerationStructurePropertiesKHR = struct_VkPhysicalDeviceAccelerationStructurePropertiesKHR;
pub const struct_VkAccelerationStructureDeviceAddressInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    accelerationStructure: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
};
pub const VkAccelerationStructureDeviceAddressInfoKHR = struct_VkAccelerationStructureDeviceAddressInfoKHR;
pub const struct_VkAccelerationStructureVersionInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pVersionData: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const VkAccelerationStructureVersionInfoKHR = struct_VkAccelerationStructureVersionInfoKHR;
pub const struct_VkCopyAccelerationStructureToMemoryInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    src: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    dst: VkDeviceOrHostAddressKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressKHR),
    mode: VkCopyAccelerationStructureModeKHR = @import("std").mem.zeroes(VkCopyAccelerationStructureModeKHR),
};
pub const VkCopyAccelerationStructureToMemoryInfoKHR = struct_VkCopyAccelerationStructureToMemoryInfoKHR;
pub const struct_VkCopyMemoryToAccelerationStructureInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    src: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    dst: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    mode: VkCopyAccelerationStructureModeKHR = @import("std").mem.zeroes(VkCopyAccelerationStructureModeKHR),
};
pub const VkCopyMemoryToAccelerationStructureInfoKHR = struct_VkCopyMemoryToAccelerationStructureInfoKHR;
pub const struct_VkCopyAccelerationStructureInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    src: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    dst: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    mode: VkCopyAccelerationStructureModeKHR = @import("std").mem.zeroes(VkCopyAccelerationStructureModeKHR),
};
pub const VkCopyAccelerationStructureInfoKHR = struct_VkCopyAccelerationStructureInfoKHR;
pub const struct_VkAccelerationStructureBuildSizesInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    accelerationStructureSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    updateScratchSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    buildScratchSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkAccelerationStructureBuildSizesInfoKHR = struct_VkAccelerationStructureBuildSizesInfoKHR;
pub const PFN_vkCreateAccelerationStructureKHR = ?*const fn (VkDevice, [*c]const VkAccelerationStructureCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkAccelerationStructureKHR) callconv(.C) VkResult;
pub const PFN_vkDestroyAccelerationStructureKHR = ?*const fn (VkDevice, VkAccelerationStructureKHR, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCmdBuildAccelerationStructuresKHR = ?*const fn (VkCommandBuffer, u32, [*c]const VkAccelerationStructureBuildGeometryInfoKHR, [*c]const [*c]const VkAccelerationStructureBuildRangeInfoKHR) callconv(.C) void;
pub const PFN_vkCmdBuildAccelerationStructuresIndirectKHR = ?*const fn (VkCommandBuffer, u32, [*c]const VkAccelerationStructureBuildGeometryInfoKHR, [*c]const VkDeviceAddress, [*c]const u32, [*c]const [*c]const u32) callconv(.C) void;
pub const PFN_vkBuildAccelerationStructuresKHR = ?*const fn (VkDevice, VkDeferredOperationKHR, u32, [*c]const VkAccelerationStructureBuildGeometryInfoKHR, [*c]const [*c]const VkAccelerationStructureBuildRangeInfoKHR) callconv(.C) VkResult;
pub const PFN_vkCopyAccelerationStructureKHR = ?*const fn (VkDevice, VkDeferredOperationKHR, [*c]const VkCopyAccelerationStructureInfoKHR) callconv(.C) VkResult;
pub const PFN_vkCopyAccelerationStructureToMemoryKHR = ?*const fn (VkDevice, VkDeferredOperationKHR, [*c]const VkCopyAccelerationStructureToMemoryInfoKHR) callconv(.C) VkResult;
pub const PFN_vkCopyMemoryToAccelerationStructureKHR = ?*const fn (VkDevice, VkDeferredOperationKHR, [*c]const VkCopyMemoryToAccelerationStructureInfoKHR) callconv(.C) VkResult;
pub const PFN_vkWriteAccelerationStructuresPropertiesKHR = ?*const fn (VkDevice, u32, [*c]const VkAccelerationStructureKHR, VkQueryType, usize, ?*anyopaque, usize) callconv(.C) VkResult;
pub const PFN_vkCmdCopyAccelerationStructureKHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyAccelerationStructureInfoKHR) callconv(.C) void;
pub const PFN_vkCmdCopyAccelerationStructureToMemoryKHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyAccelerationStructureToMemoryInfoKHR) callconv(.C) void;
pub const PFN_vkCmdCopyMemoryToAccelerationStructureKHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyMemoryToAccelerationStructureInfoKHR) callconv(.C) void;
pub const PFN_vkGetAccelerationStructureDeviceAddressKHR = ?*const fn (VkDevice, [*c]const VkAccelerationStructureDeviceAddressInfoKHR) callconv(.C) VkDeviceAddress;
pub const PFN_vkCmdWriteAccelerationStructuresPropertiesKHR = ?*const fn (VkCommandBuffer, u32, [*c]const VkAccelerationStructureKHR, VkQueryType, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkGetDeviceAccelerationStructureCompatibilityKHR = ?*const fn (VkDevice, [*c]const VkAccelerationStructureVersionInfoKHR, [*c]VkAccelerationStructureCompatibilityKHR) callconv(.C) void;
pub const PFN_vkGetAccelerationStructureBuildSizesKHR = ?*const fn (VkDevice, VkAccelerationStructureBuildTypeKHR, [*c]const VkAccelerationStructureBuildGeometryInfoKHR, [*c]const u32, [*c]VkAccelerationStructureBuildSizesInfoKHR) callconv(.C) void;
pub extern fn vkCreateAccelerationStructureKHR(device: VkDevice, pCreateInfo: [*c]const VkAccelerationStructureCreateInfoKHR, pAllocator: [*c]const VkAllocationCallbacks, pAccelerationStructure: [*c]VkAccelerationStructureKHR) VkResult;
pub extern fn vkDestroyAccelerationStructureKHR(device: VkDevice, accelerationStructure: VkAccelerationStructureKHR, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCmdBuildAccelerationStructuresKHR(commandBuffer: VkCommandBuffer, infoCount: u32, pInfos: [*c]const VkAccelerationStructureBuildGeometryInfoKHR, ppBuildRangeInfos: [*c]const [*c]const VkAccelerationStructureBuildRangeInfoKHR) void;
pub extern fn vkCmdBuildAccelerationStructuresIndirectKHR(commandBuffer: VkCommandBuffer, infoCount: u32, pInfos: [*c]const VkAccelerationStructureBuildGeometryInfoKHR, pIndirectDeviceAddresses: [*c]const VkDeviceAddress, pIndirectStrides: [*c]const u32, ppMaxPrimitiveCounts: [*c]const [*c]const u32) void;
pub extern fn vkBuildAccelerationStructuresKHR(device: VkDevice, deferredOperation: VkDeferredOperationKHR, infoCount: u32, pInfos: [*c]const VkAccelerationStructureBuildGeometryInfoKHR, ppBuildRangeInfos: [*c]const [*c]const VkAccelerationStructureBuildRangeInfoKHR) VkResult;
pub extern fn vkCopyAccelerationStructureKHR(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: [*c]const VkCopyAccelerationStructureInfoKHR) VkResult;
pub extern fn vkCopyAccelerationStructureToMemoryKHR(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: [*c]const VkCopyAccelerationStructureToMemoryInfoKHR) VkResult;
pub extern fn vkCopyMemoryToAccelerationStructureKHR(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: [*c]const VkCopyMemoryToAccelerationStructureInfoKHR) VkResult;
pub extern fn vkWriteAccelerationStructuresPropertiesKHR(device: VkDevice, accelerationStructureCount: u32, pAccelerationStructures: [*c]const VkAccelerationStructureKHR, queryType: VkQueryType, dataSize: usize, pData: ?*anyopaque, stride: usize) VkResult;
pub extern fn vkCmdCopyAccelerationStructureKHR(commandBuffer: VkCommandBuffer, pInfo: [*c]const VkCopyAccelerationStructureInfoKHR) void;
pub extern fn vkCmdCopyAccelerationStructureToMemoryKHR(commandBuffer: VkCommandBuffer, pInfo: [*c]const VkCopyAccelerationStructureToMemoryInfoKHR) void;
pub extern fn vkCmdCopyMemoryToAccelerationStructureKHR(commandBuffer: VkCommandBuffer, pInfo: [*c]const VkCopyMemoryToAccelerationStructureInfoKHR) void;
pub extern fn vkGetAccelerationStructureDeviceAddressKHR(device: VkDevice, pInfo: [*c]const VkAccelerationStructureDeviceAddressInfoKHR) VkDeviceAddress;
pub extern fn vkCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer: VkCommandBuffer, accelerationStructureCount: u32, pAccelerationStructures: [*c]const VkAccelerationStructureKHR, queryType: VkQueryType, queryPool: VkQueryPool, firstQuery: u32) void;
pub extern fn vkGetDeviceAccelerationStructureCompatibilityKHR(device: VkDevice, pVersionInfo: [*c]const VkAccelerationStructureVersionInfoKHR, pCompatibility: [*c]VkAccelerationStructureCompatibilityKHR) void;
pub extern fn vkGetAccelerationStructureBuildSizesKHR(device: VkDevice, buildType: VkAccelerationStructureBuildTypeKHR, pBuildInfo: [*c]const VkAccelerationStructureBuildGeometryInfoKHR, pMaxPrimitiveCounts: [*c]const u32, pSizeInfo: [*c]VkAccelerationStructureBuildSizesInfoKHR) void;
pub const VK_SHADER_GROUP_SHADER_GENERAL_KHR: c_int = 0;
pub const VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR: c_int = 1;
pub const VK_SHADER_GROUP_SHADER_ANY_HIT_KHR: c_int = 2;
pub const VK_SHADER_GROUP_SHADER_INTERSECTION_KHR: c_int = 3;
pub const VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkShaderGroupShaderKHR = c_uint;
pub const VkShaderGroupShaderKHR = enum_VkShaderGroupShaderKHR;
pub const struct_VkRayTracingShaderGroupCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkRayTracingShaderGroupTypeKHR = @import("std").mem.zeroes(VkRayTracingShaderGroupTypeKHR),
    generalShader: u32 = @import("std").mem.zeroes(u32),
    closestHitShader: u32 = @import("std").mem.zeroes(u32),
    anyHitShader: u32 = @import("std").mem.zeroes(u32),
    intersectionShader: u32 = @import("std").mem.zeroes(u32),
    pShaderGroupCaptureReplayHandle: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkRayTracingShaderGroupCreateInfoKHR = struct_VkRayTracingShaderGroupCreateInfoKHR;
pub const struct_VkRayTracingPipelineInterfaceCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxPipelineRayPayloadSize: u32 = @import("std").mem.zeroes(u32),
    maxPipelineRayHitAttributeSize: u32 = @import("std").mem.zeroes(u32),
};
pub const VkRayTracingPipelineInterfaceCreateInfoKHR = struct_VkRayTracingPipelineInterfaceCreateInfoKHR;
pub const struct_VkRayTracingPipelineCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCreateFlags = @import("std").mem.zeroes(VkPipelineCreateFlags),
    stageCount: u32 = @import("std").mem.zeroes(u32),
    pStages: [*c]const VkPipelineShaderStageCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineShaderStageCreateInfo),
    groupCount: u32 = @import("std").mem.zeroes(u32),
    pGroups: [*c]const VkRayTracingShaderGroupCreateInfoKHR = @import("std").mem.zeroes([*c]const VkRayTracingShaderGroupCreateInfoKHR),
    maxPipelineRayRecursionDepth: u32 = @import("std").mem.zeroes(u32),
    pLibraryInfo: [*c]const VkPipelineLibraryCreateInfoKHR = @import("std").mem.zeroes([*c]const VkPipelineLibraryCreateInfoKHR),
    pLibraryInterface: [*c]const VkRayTracingPipelineInterfaceCreateInfoKHR = @import("std").mem.zeroes([*c]const VkRayTracingPipelineInterfaceCreateInfoKHR),
    pDynamicState: [*c]const VkPipelineDynamicStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineDynamicStateCreateInfo),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    basePipelineHandle: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    basePipelineIndex: i32 = @import("std").mem.zeroes(i32),
};
pub const VkRayTracingPipelineCreateInfoKHR = struct_VkRayTracingPipelineCreateInfoKHR;
pub const struct_VkPhysicalDeviceRayTracingPipelineFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingPipeline: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rayTracingPipelineShaderGroupHandleCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rayTracingPipelineShaderGroupHandleCaptureReplayMixed: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rayTracingPipelineTraceRaysIndirect: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rayTraversalPrimitiveCulling: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRayTracingPipelineFeaturesKHR = struct_VkPhysicalDeviceRayTracingPipelineFeaturesKHR;
pub const struct_VkPhysicalDeviceRayTracingPipelinePropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderGroupHandleSize: u32 = @import("std").mem.zeroes(u32),
    maxRayRecursionDepth: u32 = @import("std").mem.zeroes(u32),
    maxShaderGroupStride: u32 = @import("std").mem.zeroes(u32),
    shaderGroupBaseAlignment: u32 = @import("std").mem.zeroes(u32),
    shaderGroupHandleCaptureReplaySize: u32 = @import("std").mem.zeroes(u32),
    maxRayDispatchInvocationCount: u32 = @import("std").mem.zeroes(u32),
    shaderGroupHandleAlignment: u32 = @import("std").mem.zeroes(u32),
    maxRayHitAttributeSize: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceRayTracingPipelinePropertiesKHR = struct_VkPhysicalDeviceRayTracingPipelinePropertiesKHR;
pub const struct_VkStridedDeviceAddressRegionKHR = extern struct {
    deviceAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    stride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkStridedDeviceAddressRegionKHR = struct_VkStridedDeviceAddressRegionKHR;
pub const struct_VkTraceRaysIndirectCommandKHR = extern struct {
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
    depth: u32 = @import("std").mem.zeroes(u32),
};
pub const VkTraceRaysIndirectCommandKHR = struct_VkTraceRaysIndirectCommandKHR;
pub const PFN_vkCmdTraceRaysKHR = ?*const fn (VkCommandBuffer, [*c]const VkStridedDeviceAddressRegionKHR, [*c]const VkStridedDeviceAddressRegionKHR, [*c]const VkStridedDeviceAddressRegionKHR, [*c]const VkStridedDeviceAddressRegionKHR, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCreateRayTracingPipelinesKHR = ?*const fn (VkDevice, VkDeferredOperationKHR, VkPipelineCache, u32, [*c]const VkRayTracingPipelineCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkPipeline) callconv(.C) VkResult;
pub const PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = ?*const fn (VkDevice, VkPipeline, u32, u32, usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkCmdTraceRaysIndirectKHR = ?*const fn (VkCommandBuffer, [*c]const VkStridedDeviceAddressRegionKHR, [*c]const VkStridedDeviceAddressRegionKHR, [*c]const VkStridedDeviceAddressRegionKHR, [*c]const VkStridedDeviceAddressRegionKHR, VkDeviceAddress) callconv(.C) void;
pub const PFN_vkGetRayTracingShaderGroupStackSizeKHR = ?*const fn (VkDevice, VkPipeline, u32, VkShaderGroupShaderKHR) callconv(.C) VkDeviceSize;
pub const PFN_vkCmdSetRayTracingPipelineStackSizeKHR = ?*const fn (VkCommandBuffer, u32) callconv(.C) void;
pub extern fn vkCmdTraceRaysKHR(commandBuffer: VkCommandBuffer, pRaygenShaderBindingTable: [*c]const VkStridedDeviceAddressRegionKHR, pMissShaderBindingTable: [*c]const VkStridedDeviceAddressRegionKHR, pHitShaderBindingTable: [*c]const VkStridedDeviceAddressRegionKHR, pCallableShaderBindingTable: [*c]const VkStridedDeviceAddressRegionKHR, width: u32, height: u32, depth: u32) void;
pub extern fn vkCreateRayTracingPipelinesKHR(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: [*c]const VkRayTracingPipelineCreateInfoKHR, pAllocator: [*c]const VkAllocationCallbacks, pPipelines: [*c]VkPipeline) VkResult;
pub extern fn vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device: VkDevice, pipeline: VkPipeline, firstGroup: u32, groupCount: u32, dataSize: usize, pData: ?*anyopaque) VkResult;
pub extern fn vkCmdTraceRaysIndirectKHR(commandBuffer: VkCommandBuffer, pRaygenShaderBindingTable: [*c]const VkStridedDeviceAddressRegionKHR, pMissShaderBindingTable: [*c]const VkStridedDeviceAddressRegionKHR, pHitShaderBindingTable: [*c]const VkStridedDeviceAddressRegionKHR, pCallableShaderBindingTable: [*c]const VkStridedDeviceAddressRegionKHR, indirectDeviceAddress: VkDeviceAddress) void;
pub extern fn vkGetRayTracingShaderGroupStackSizeKHR(device: VkDevice, pipeline: VkPipeline, group: u32, groupShader: VkShaderGroupShaderKHR) VkDeviceSize;
pub extern fn vkCmdSetRayTracingPipelineStackSizeKHR(commandBuffer: VkCommandBuffer, pipelineStackSize: u32) void;
pub const struct_VkPhysicalDeviceRayQueryFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayQuery: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRayQueryFeaturesKHR = struct_VkPhysicalDeviceRayQueryFeaturesKHR;
pub const struct_VkPhysicalDeviceMeshShaderFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    taskShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    meshShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiviewMeshShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    primitiveFragmentShadingRateMeshShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    meshShaderQueries: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMeshShaderFeaturesEXT = struct_VkPhysicalDeviceMeshShaderFeaturesEXT;
pub const struct_VkPhysicalDeviceMeshShaderPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxTaskWorkGroupTotalCount: u32 = @import("std").mem.zeroes(u32),
    maxTaskWorkGroupCount: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxTaskWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    maxTaskWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxTaskPayloadSize: u32 = @import("std").mem.zeroes(u32),
    maxTaskSharedMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxTaskPayloadAndSharedMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxMeshWorkGroupTotalCount: u32 = @import("std").mem.zeroes(u32),
    maxMeshWorkGroupCount: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxMeshWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    maxMeshWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxMeshSharedMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxMeshPayloadAndSharedMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxMeshPayloadAndOutputMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputVertices: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputPrimitives: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputLayers: u32 = @import("std").mem.zeroes(u32),
    maxMeshMultiviewViewCount: u32 = @import("std").mem.zeroes(u32),
    meshOutputPerVertexGranularity: u32 = @import("std").mem.zeroes(u32),
    meshOutputPerPrimitiveGranularity: u32 = @import("std").mem.zeroes(u32),
    maxPreferredTaskWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    maxPreferredMeshWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    prefersLocalInvocationVertexOutput: VkBool32 = @import("std").mem.zeroes(VkBool32),
    prefersLocalInvocationPrimitiveOutput: VkBool32 = @import("std").mem.zeroes(VkBool32),
    prefersCompactVertexOutput: VkBool32 = @import("std").mem.zeroes(VkBool32),
    prefersCompactPrimitiveOutput: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMeshShaderPropertiesEXT = struct_VkPhysicalDeviceMeshShaderPropertiesEXT;
pub const struct_VkDrawMeshTasksIndirectCommandEXT = extern struct {
    groupCountX: u32 = @import("std").mem.zeroes(u32),
    groupCountY: u32 = @import("std").mem.zeroes(u32),
    groupCountZ: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDrawMeshTasksIndirectCommandEXT = struct_VkDrawMeshTasksIndirectCommandEXT;
pub const PFN_vkCmdDrawMeshTasksEXT = ?*const fn (VkCommandBuffer, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawMeshTasksIndirectEXT = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawMeshTasksIndirectCountEXT = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub extern fn vkCmdDrawMeshTasksEXT(commandBuffer: VkCommandBuffer, groupCountX: u32, groupCountY: u32, groupCountZ: u32) void;
pub extern fn vkCmdDrawMeshTasksIndirectEXT(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32) void;
pub extern fn vkCmdDrawMeshTasksIndirectCountEXT(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub const VMA_ALLOCATOR_CREATE_EXTERNALLY_SYNCHRONIZED_BIT: c_int = 1;
pub const VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT: c_int = 2;
pub const VMA_ALLOCATOR_CREATE_KHR_BIND_MEMORY2_BIT: c_int = 4;
pub const VMA_ALLOCATOR_CREATE_EXT_MEMORY_BUDGET_BIT: c_int = 8;
pub const VMA_ALLOCATOR_CREATE_AMD_DEVICE_COHERENT_MEMORY_BIT: c_int = 16;
pub const VMA_ALLOCATOR_CREATE_BUFFER_DEVICE_ADDRESS_BIT: c_int = 32;
pub const VMA_ALLOCATOR_CREATE_EXT_MEMORY_PRIORITY_BIT: c_int = 64;
pub const VMA_ALLOCATOR_CREATE_KHR_MAINTENANCE4_BIT: c_int = 128;
pub const VMA_ALLOCATOR_CREATE_KHR_MAINTENANCE5_BIT: c_int = 256;
pub const VMA_ALLOCATOR_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VmaAllocatorCreateFlagBits = c_uint;
pub const VmaAllocatorCreateFlagBits = enum_VmaAllocatorCreateFlagBits;
pub const VmaAllocatorCreateFlags = VkFlags;
pub const VMA_MEMORY_USAGE_UNKNOWN: c_int = 0;
pub const VMA_MEMORY_USAGE_GPU_ONLY: c_int = 1;
pub const VMA_MEMORY_USAGE_CPU_ONLY: c_int = 2;
pub const VMA_MEMORY_USAGE_CPU_TO_GPU: c_int = 3;
pub const VMA_MEMORY_USAGE_GPU_TO_CPU: c_int = 4;
pub const VMA_MEMORY_USAGE_CPU_COPY: c_int = 5;
pub const VMA_MEMORY_USAGE_GPU_LAZILY_ALLOCATED: c_int = 6;
pub const VMA_MEMORY_USAGE_AUTO: c_int = 7;
pub const VMA_MEMORY_USAGE_AUTO_PREFER_DEVICE: c_int = 8;
pub const VMA_MEMORY_USAGE_AUTO_PREFER_HOST: c_int = 9;
pub const VMA_MEMORY_USAGE_MAX_ENUM: c_int = 2147483647;
pub const enum_VmaMemoryUsage = c_uint;
pub const VmaMemoryUsage = enum_VmaMemoryUsage;
pub const VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT: c_int = 1;
pub const VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT: c_int = 2;
pub const VMA_ALLOCATION_CREATE_MAPPED_BIT: c_int = 4;
pub const VMA_ALLOCATION_CREATE_USER_DATA_COPY_STRING_BIT: c_int = 32;
pub const VMA_ALLOCATION_CREATE_UPPER_ADDRESS_BIT: c_int = 64;
pub const VMA_ALLOCATION_CREATE_DONT_BIND_BIT: c_int = 128;
pub const VMA_ALLOCATION_CREATE_WITHIN_BUDGET_BIT: c_int = 256;
pub const VMA_ALLOCATION_CREATE_CAN_ALIAS_BIT: c_int = 512;
pub const VMA_ALLOCATION_CREATE_HOST_ACCESS_SEQUENTIAL_WRITE_BIT: c_int = 1024;
pub const VMA_ALLOCATION_CREATE_HOST_ACCESS_RANDOM_BIT: c_int = 2048;
pub const VMA_ALLOCATION_CREATE_HOST_ACCESS_ALLOW_TRANSFER_INSTEAD_BIT: c_int = 4096;
pub const VMA_ALLOCATION_CREATE_STRATEGY_MIN_MEMORY_BIT: c_int = 65536;
pub const VMA_ALLOCATION_CREATE_STRATEGY_MIN_TIME_BIT: c_int = 131072;
pub const VMA_ALLOCATION_CREATE_STRATEGY_MIN_OFFSET_BIT: c_int = 262144;
pub const VMA_ALLOCATION_CREATE_STRATEGY_BEST_FIT_BIT: c_int = 65536;
pub const VMA_ALLOCATION_CREATE_STRATEGY_FIRST_FIT_BIT: c_int = 131072;
pub const VMA_ALLOCATION_CREATE_STRATEGY_MASK: c_int = 458752;
pub const VMA_ALLOCATION_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VmaAllocationCreateFlagBits = c_uint;
pub const VmaAllocationCreateFlagBits = enum_VmaAllocationCreateFlagBits;
pub const VmaAllocationCreateFlags = VkFlags;
pub const VMA_POOL_CREATE_IGNORE_BUFFER_IMAGE_GRANULARITY_BIT: c_int = 2;
pub const VMA_POOL_CREATE_LINEAR_ALGORITHM_BIT: c_int = 4;
pub const VMA_POOL_CREATE_ALGORITHM_MASK: c_int = 4;
pub const VMA_POOL_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VmaPoolCreateFlagBits = c_uint;
pub const VmaPoolCreateFlagBits = enum_VmaPoolCreateFlagBits;
pub const VmaPoolCreateFlags = VkFlags;
pub const VMA_DEFRAGMENTATION_FLAG_ALGORITHM_FAST_BIT: c_int = 1;
pub const VMA_DEFRAGMENTATION_FLAG_ALGORITHM_BALANCED_BIT: c_int = 2;
pub const VMA_DEFRAGMENTATION_FLAG_ALGORITHM_FULL_BIT: c_int = 4;
pub const VMA_DEFRAGMENTATION_FLAG_ALGORITHM_EXTENSIVE_BIT: c_int = 8;
pub const VMA_DEFRAGMENTATION_FLAG_ALGORITHM_MASK: c_int = 15;
pub const VMA_DEFRAGMENTATION_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VmaDefragmentationFlagBits = c_uint;
pub const VmaDefragmentationFlagBits = enum_VmaDefragmentationFlagBits;
pub const VmaDefragmentationFlags = VkFlags;
pub const VMA_DEFRAGMENTATION_MOVE_OPERATION_COPY: c_int = 0;
pub const VMA_DEFRAGMENTATION_MOVE_OPERATION_IGNORE: c_int = 1;
pub const VMA_DEFRAGMENTATION_MOVE_OPERATION_DESTROY: c_int = 2;
pub const enum_VmaDefragmentationMoveOperation = c_uint;
pub const VmaDefragmentationMoveOperation = enum_VmaDefragmentationMoveOperation;
pub const VMA_VIRTUAL_BLOCK_CREATE_LINEAR_ALGORITHM_BIT: c_int = 1;
pub const VMA_VIRTUAL_BLOCK_CREATE_ALGORITHM_MASK: c_int = 1;
pub const VMA_VIRTUAL_BLOCK_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VmaVirtualBlockCreateFlagBits = c_uint;
pub const VmaVirtualBlockCreateFlagBits = enum_VmaVirtualBlockCreateFlagBits;
pub const VmaVirtualBlockCreateFlags = VkFlags;
pub const VMA_VIRTUAL_ALLOCATION_CREATE_UPPER_ADDRESS_BIT: c_int = 64;
pub const VMA_VIRTUAL_ALLOCATION_CREATE_STRATEGY_MIN_MEMORY_BIT: c_int = 65536;
pub const VMA_VIRTUAL_ALLOCATION_CREATE_STRATEGY_MIN_TIME_BIT: c_int = 131072;
pub const VMA_VIRTUAL_ALLOCATION_CREATE_STRATEGY_MIN_OFFSET_BIT: c_int = 262144;
pub const VMA_VIRTUAL_ALLOCATION_CREATE_STRATEGY_MASK: c_int = 458752;
pub const VMA_VIRTUAL_ALLOCATION_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VmaVirtualAllocationCreateFlagBits = c_uint;
pub const VmaVirtualAllocationCreateFlagBits = enum_VmaVirtualAllocationCreateFlagBits;
pub const VmaVirtualAllocationCreateFlags = VkFlags;
pub const struct_VmaAllocator_T = opaque {};
pub const VmaAllocator = ?*struct_VmaAllocator_T;
pub const struct_VmaPool_T = opaque {};
pub const VmaPool = ?*struct_VmaPool_T;
pub const struct_VmaAllocation_T = opaque {};
pub const VmaAllocation = ?*struct_VmaAllocation_T;
pub const struct_VmaDefragmentationContext_T = opaque {};
pub const VmaDefragmentationContext = ?*struct_VmaDefragmentationContext_T;
pub const struct_VmaVirtualAllocation_T = opaque {};
pub const VmaVirtualAllocation = ?*struct_VmaVirtualAllocation_T;
pub const struct_VmaVirtualBlock_T = opaque {};
pub const VmaVirtualBlock = ?*struct_VmaVirtualBlock_T;
pub const PFN_vmaAllocateDeviceMemoryFunction = ?*const fn (VmaAllocator, u32, VkDeviceMemory, VkDeviceSize, ?*anyopaque) callconv(.C) void;
pub const PFN_vmaFreeDeviceMemoryFunction = ?*const fn (VmaAllocator, u32, VkDeviceMemory, VkDeviceSize, ?*anyopaque) callconv(.C) void;
pub const struct_VmaDeviceMemoryCallbacks = extern struct {
    pfnAllocate: PFN_vmaAllocateDeviceMemoryFunction = @import("std").mem.zeroes(PFN_vmaAllocateDeviceMemoryFunction),
    pfnFree: PFN_vmaFreeDeviceMemoryFunction = @import("std").mem.zeroes(PFN_vmaFreeDeviceMemoryFunction),
    pUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VmaDeviceMemoryCallbacks = struct_VmaDeviceMemoryCallbacks;
pub const struct_VmaVulkanFunctions = extern struct {
    vkGetInstanceProcAddr: PFN_vkGetInstanceProcAddr = @import("std").mem.zeroes(PFN_vkGetInstanceProcAddr),
    vkGetDeviceProcAddr: PFN_vkGetDeviceProcAddr = @import("std").mem.zeroes(PFN_vkGetDeviceProcAddr),
    vkGetPhysicalDeviceProperties: PFN_vkGetPhysicalDeviceProperties = @import("std").mem.zeroes(PFN_vkGetPhysicalDeviceProperties),
    vkGetPhysicalDeviceMemoryProperties: PFN_vkGetPhysicalDeviceMemoryProperties = @import("std").mem.zeroes(PFN_vkGetPhysicalDeviceMemoryProperties),
    vkAllocateMemory: PFN_vkAllocateMemory = @import("std").mem.zeroes(PFN_vkAllocateMemory),
    vkFreeMemory: PFN_vkFreeMemory = @import("std").mem.zeroes(PFN_vkFreeMemory),
    vkMapMemory: PFN_vkMapMemory = @import("std").mem.zeroes(PFN_vkMapMemory),
    vkUnmapMemory: PFN_vkUnmapMemory = @import("std").mem.zeroes(PFN_vkUnmapMemory),
    vkFlushMappedMemoryRanges: PFN_vkFlushMappedMemoryRanges = @import("std").mem.zeroes(PFN_vkFlushMappedMemoryRanges),
    vkInvalidateMappedMemoryRanges: PFN_vkInvalidateMappedMemoryRanges = @import("std").mem.zeroes(PFN_vkInvalidateMappedMemoryRanges),
    vkBindBufferMemory: PFN_vkBindBufferMemory = @import("std").mem.zeroes(PFN_vkBindBufferMemory),
    vkBindImageMemory: PFN_vkBindImageMemory = @import("std").mem.zeroes(PFN_vkBindImageMemory),
    vkGetBufferMemoryRequirements: PFN_vkGetBufferMemoryRequirements = @import("std").mem.zeroes(PFN_vkGetBufferMemoryRequirements),
    vkGetImageMemoryRequirements: PFN_vkGetImageMemoryRequirements = @import("std").mem.zeroes(PFN_vkGetImageMemoryRequirements),
    vkCreateBuffer: PFN_vkCreateBuffer = @import("std").mem.zeroes(PFN_vkCreateBuffer),
    vkDestroyBuffer: PFN_vkDestroyBuffer = @import("std").mem.zeroes(PFN_vkDestroyBuffer),
    vkCreateImage: PFN_vkCreateImage = @import("std").mem.zeroes(PFN_vkCreateImage),
    vkDestroyImage: PFN_vkDestroyImage = @import("std").mem.zeroes(PFN_vkDestroyImage),
    vkCmdCopyBuffer: PFN_vkCmdCopyBuffer = @import("std").mem.zeroes(PFN_vkCmdCopyBuffer),
    vkGetBufferMemoryRequirements2KHR: PFN_vkGetBufferMemoryRequirements2KHR = @import("std").mem.zeroes(PFN_vkGetBufferMemoryRequirements2KHR),
    vkGetImageMemoryRequirements2KHR: PFN_vkGetImageMemoryRequirements2KHR = @import("std").mem.zeroes(PFN_vkGetImageMemoryRequirements2KHR),
    vkBindBufferMemory2KHR: PFN_vkBindBufferMemory2KHR = @import("std").mem.zeroes(PFN_vkBindBufferMemory2KHR),
    vkBindImageMemory2KHR: PFN_vkBindImageMemory2KHR = @import("std").mem.zeroes(PFN_vkBindImageMemory2KHR),
    vkGetPhysicalDeviceMemoryProperties2KHR: PFN_vkGetPhysicalDeviceMemoryProperties2KHR = @import("std").mem.zeroes(PFN_vkGetPhysicalDeviceMemoryProperties2KHR),
    vkGetDeviceBufferMemoryRequirements: PFN_vkGetDeviceBufferMemoryRequirementsKHR = @import("std").mem.zeroes(PFN_vkGetDeviceBufferMemoryRequirementsKHR),
    vkGetDeviceImageMemoryRequirements: PFN_vkGetDeviceImageMemoryRequirementsKHR = @import("std").mem.zeroes(PFN_vkGetDeviceImageMemoryRequirementsKHR),
};
pub const VmaVulkanFunctions = struct_VmaVulkanFunctions;
pub const struct_VmaAllocatorCreateInfo = extern struct {
    flags: VmaAllocatorCreateFlags = @import("std").mem.zeroes(VmaAllocatorCreateFlags),
    physicalDevice: VkPhysicalDevice = @import("std").mem.zeroes(VkPhysicalDevice),
    device: VkDevice = @import("std").mem.zeroes(VkDevice),
    preferredLargeHeapBlockSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    pAllocationCallbacks: [*c]const VkAllocationCallbacks = @import("std").mem.zeroes([*c]const VkAllocationCallbacks),
    pDeviceMemoryCallbacks: [*c]const VmaDeviceMemoryCallbacks = @import("std").mem.zeroes([*c]const VmaDeviceMemoryCallbacks),
    pHeapSizeLimit: [*c]const VkDeviceSize = @import("std").mem.zeroes([*c]const VkDeviceSize),
    pVulkanFunctions: [*c]const VmaVulkanFunctions = @import("std").mem.zeroes([*c]const VmaVulkanFunctions),
    instance: VkInstance = @import("std").mem.zeroes(VkInstance),
    vulkanApiVersion: u32 = @import("std").mem.zeroes(u32),
    pTypeExternalMemoryHandleTypes: [*c]const VkExternalMemoryHandleTypeFlagsKHR = @import("std").mem.zeroes([*c]const VkExternalMemoryHandleTypeFlagsKHR),
};
pub const VmaAllocatorCreateInfo = struct_VmaAllocatorCreateInfo;
pub const struct_VmaAllocatorInfo = extern struct {
    instance: VkInstance = @import("std").mem.zeroes(VkInstance),
    physicalDevice: VkPhysicalDevice = @import("std").mem.zeroes(VkPhysicalDevice),
    device: VkDevice = @import("std").mem.zeroes(VkDevice),
};
pub const VmaAllocatorInfo = struct_VmaAllocatorInfo;
pub const struct_VmaStatistics = extern struct {
    blockCount: u32 = @import("std").mem.zeroes(u32),
    allocationCount: u32 = @import("std").mem.zeroes(u32),
    blockBytes: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    allocationBytes: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VmaStatistics = struct_VmaStatistics;
pub const struct_VmaDetailedStatistics = extern struct {
    statistics: VmaStatistics = @import("std").mem.zeroes(VmaStatistics),
    unusedRangeCount: u32 = @import("std").mem.zeroes(u32),
    allocationSizeMin: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    allocationSizeMax: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    unusedRangeSizeMin: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    unusedRangeSizeMax: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VmaDetailedStatistics = struct_VmaDetailedStatistics;
pub const struct_VmaTotalStatistics = extern struct {
    memoryType: [32]VmaDetailedStatistics = @import("std").mem.zeroes([32]VmaDetailedStatistics),
    memoryHeap: [16]VmaDetailedStatistics = @import("std").mem.zeroes([16]VmaDetailedStatistics),
    total: VmaDetailedStatistics = @import("std").mem.zeroes(VmaDetailedStatistics),
};
pub const VmaTotalStatistics = struct_VmaTotalStatistics;
pub const struct_VmaBudget = extern struct {
    statistics: VmaStatistics = @import("std").mem.zeroes(VmaStatistics),
    usage: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    budget: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VmaBudget = struct_VmaBudget;
pub const struct_VmaAllocationCreateInfo = extern struct {
    flags: VmaAllocationCreateFlags = @import("std").mem.zeroes(VmaAllocationCreateFlags),
    usage: VmaMemoryUsage = @import("std").mem.zeroes(VmaMemoryUsage),
    requiredFlags: VkMemoryPropertyFlags = @import("std").mem.zeroes(VkMemoryPropertyFlags),
    preferredFlags: VkMemoryPropertyFlags = @import("std").mem.zeroes(VkMemoryPropertyFlags),
    memoryTypeBits: u32 = @import("std").mem.zeroes(u32),
    pool: VmaPool = @import("std").mem.zeroes(VmaPool),
    pUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    priority: f32 = @import("std").mem.zeroes(f32),
};
pub const VmaAllocationCreateInfo = struct_VmaAllocationCreateInfo;
pub const struct_VmaPoolCreateInfo = extern struct {
    memoryTypeIndex: u32 = @import("std").mem.zeroes(u32),
    flags: VmaPoolCreateFlags = @import("std").mem.zeroes(VmaPoolCreateFlags),
    blockSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    minBlockCount: usize = @import("std").mem.zeroes(usize),
    maxBlockCount: usize = @import("std").mem.zeroes(usize),
    priority: f32 = @import("std").mem.zeroes(f32),
    minAllocationAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    pMemoryAllocateNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VmaPoolCreateInfo = struct_VmaPoolCreateInfo;
pub const struct_VmaAllocationInfo = extern struct {
    memoryType: u32 = @import("std").mem.zeroes(u32),
    deviceMemory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    pMappedData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const VmaAllocationInfo = struct_VmaAllocationInfo;
pub const struct_VmaAllocationInfo2 = extern struct {
    allocationInfo: VmaAllocationInfo = @import("std").mem.zeroes(VmaAllocationInfo),
    blockSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    dedicatedMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VmaAllocationInfo2 = struct_VmaAllocationInfo2;
pub const PFN_vmaCheckDefragmentationBreakFunction = ?*const fn (?*anyopaque) callconv(.C) VkBool32;
pub const struct_VmaDefragmentationInfo = extern struct {
    flags: VmaDefragmentationFlags = @import("std").mem.zeroes(VmaDefragmentationFlags),
    pool: VmaPool = @import("std").mem.zeroes(VmaPool),
    maxBytesPerPass: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    maxAllocationsPerPass: u32 = @import("std").mem.zeroes(u32),
    pfnBreakCallback: PFN_vmaCheckDefragmentationBreakFunction = @import("std").mem.zeroes(PFN_vmaCheckDefragmentationBreakFunction),
    pBreakCallbackUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VmaDefragmentationInfo = struct_VmaDefragmentationInfo;
pub const struct_VmaDefragmentationMove = extern struct {
    operation: VmaDefragmentationMoveOperation = @import("std").mem.zeroes(VmaDefragmentationMoveOperation),
    srcAllocation: VmaAllocation = @import("std").mem.zeroes(VmaAllocation),
    dstTmpAllocation: VmaAllocation = @import("std").mem.zeroes(VmaAllocation),
};
pub const VmaDefragmentationMove = struct_VmaDefragmentationMove;
pub const struct_VmaDefragmentationPassMoveInfo = extern struct {
    moveCount: u32 = @import("std").mem.zeroes(u32),
    pMoves: [*c]VmaDefragmentationMove = @import("std").mem.zeroes([*c]VmaDefragmentationMove),
};
pub const VmaDefragmentationPassMoveInfo = struct_VmaDefragmentationPassMoveInfo;
pub const struct_VmaDefragmentationStats = extern struct {
    bytesMoved: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    bytesFreed: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    allocationsMoved: u32 = @import("std").mem.zeroes(u32),
    deviceMemoryBlocksFreed: u32 = @import("std").mem.zeroes(u32),
};
pub const VmaDefragmentationStats = struct_VmaDefragmentationStats;
pub const struct_VmaVirtualBlockCreateInfo = extern struct {
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    flags: VmaVirtualBlockCreateFlags = @import("std").mem.zeroes(VmaVirtualBlockCreateFlags),
    pAllocationCallbacks: [*c]const VkAllocationCallbacks = @import("std").mem.zeroes([*c]const VkAllocationCallbacks),
};
pub const VmaVirtualBlockCreateInfo = struct_VmaVirtualBlockCreateInfo;
pub const struct_VmaVirtualAllocationCreateInfo = extern struct {
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    alignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    flags: VmaVirtualAllocationCreateFlags = @import("std").mem.zeroes(VmaVirtualAllocationCreateFlags),
    pUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VmaVirtualAllocationCreateInfo = struct_VmaVirtualAllocationCreateInfo;
pub const struct_VmaVirtualAllocationInfo = extern struct {
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    pUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VmaVirtualAllocationInfo = struct_VmaVirtualAllocationInfo;
pub extern fn vmaCreateAllocator(pCreateInfo: [*c]const VmaAllocatorCreateInfo, pAllocator: [*c]VmaAllocator) VkResult;
pub extern fn vmaDestroyAllocator(allocator: VmaAllocator) void;
pub extern fn vmaGetAllocatorInfo(allocator: VmaAllocator, pAllocatorInfo: [*c]VmaAllocatorInfo) void;
pub extern fn vmaGetPhysicalDeviceProperties(allocator: VmaAllocator, ppPhysicalDeviceProperties: [*c][*c]const VkPhysicalDeviceProperties) void;
pub extern fn vmaGetMemoryProperties(allocator: VmaAllocator, ppPhysicalDeviceMemoryProperties: [*c][*c]const VkPhysicalDeviceMemoryProperties) void;
pub extern fn vmaGetMemoryTypeProperties(allocator: VmaAllocator, memoryTypeIndex: u32, pFlags: [*c]VkMemoryPropertyFlags) void;
pub extern fn vmaSetCurrentFrameIndex(allocator: VmaAllocator, frameIndex: u32) void;
pub extern fn vmaCalculateStatistics(allocator: VmaAllocator, pStats: [*c]VmaTotalStatistics) void;
pub extern fn vmaGetHeapBudgets(allocator: VmaAllocator, pBudgets: [*c]VmaBudget) void;
pub extern fn vmaFindMemoryTypeIndex(allocator: VmaAllocator, memoryTypeBits: u32, pAllocationCreateInfo: [*c]const VmaAllocationCreateInfo, pMemoryTypeIndex: [*c]u32) VkResult;
pub extern fn vmaFindMemoryTypeIndexForBufferInfo(allocator: VmaAllocator, pBufferCreateInfo: [*c]const VkBufferCreateInfo, pAllocationCreateInfo: [*c]const VmaAllocationCreateInfo, pMemoryTypeIndex: [*c]u32) VkResult;
pub extern fn vmaFindMemoryTypeIndexForImageInfo(allocator: VmaAllocator, pImageCreateInfo: [*c]const VkImageCreateInfo, pAllocationCreateInfo: [*c]const VmaAllocationCreateInfo, pMemoryTypeIndex: [*c]u32) VkResult;
pub extern fn vmaCreatePool(allocator: VmaAllocator, pCreateInfo: [*c]const VmaPoolCreateInfo, pPool: [*c]VmaPool) VkResult;
pub extern fn vmaDestroyPool(allocator: VmaAllocator, pool: VmaPool) void;
pub extern fn vmaGetPoolStatistics(allocator: VmaAllocator, pool: VmaPool, pPoolStats: [*c]VmaStatistics) void;
pub extern fn vmaCalculatePoolStatistics(allocator: VmaAllocator, pool: VmaPool, pPoolStats: [*c]VmaDetailedStatistics) void;
pub extern fn vmaCheckPoolCorruption(allocator: VmaAllocator, pool: VmaPool) VkResult;
pub extern fn vmaGetPoolName(allocator: VmaAllocator, pool: VmaPool, ppName: [*c][*c]const u8) void;
pub extern fn vmaSetPoolName(allocator: VmaAllocator, pool: VmaPool, pName: [*c]const u8) void;
pub extern fn vmaAllocateMemory(allocator: VmaAllocator, pVkMemoryRequirements: [*c]const VkMemoryRequirements, pCreateInfo: [*c]const VmaAllocationCreateInfo, pAllocation: [*c]VmaAllocation, pAllocationInfo: [*c]VmaAllocationInfo) VkResult;
pub extern fn vmaAllocateMemoryPages(allocator: VmaAllocator, pVkMemoryRequirements: [*c]const VkMemoryRequirements, pCreateInfo: [*c]const VmaAllocationCreateInfo, allocationCount: usize, pAllocations: [*c]VmaAllocation, pAllocationInfo: [*c]VmaAllocationInfo) VkResult;
pub extern fn vmaAllocateMemoryForBuffer(allocator: VmaAllocator, buffer: VkBuffer, pCreateInfo: [*c]const VmaAllocationCreateInfo, pAllocation: [*c]VmaAllocation, pAllocationInfo: [*c]VmaAllocationInfo) VkResult;
pub extern fn vmaAllocateMemoryForImage(allocator: VmaAllocator, image: VkImage, pCreateInfo: [*c]const VmaAllocationCreateInfo, pAllocation: [*c]VmaAllocation, pAllocationInfo: [*c]VmaAllocationInfo) VkResult;
pub extern fn vmaFreeMemory(allocator: VmaAllocator, allocation: VmaAllocation) void;
pub extern fn vmaFreeMemoryPages(allocator: VmaAllocator, allocationCount: usize, pAllocations: [*c]const VmaAllocation) void;
pub extern fn vmaGetAllocationInfo(allocator: VmaAllocator, allocation: VmaAllocation, pAllocationInfo: [*c]VmaAllocationInfo) void;
pub extern fn vmaGetAllocationInfo2(allocator: VmaAllocator, allocation: VmaAllocation, pAllocationInfo: [*c]VmaAllocationInfo2) void;
pub extern fn vmaSetAllocationUserData(allocator: VmaAllocator, allocation: VmaAllocation, pUserData: ?*anyopaque) void;
pub extern fn vmaSetAllocationName(allocator: VmaAllocator, allocation: VmaAllocation, pName: [*c]const u8) void;
pub extern fn vmaGetAllocationMemoryProperties(allocator: VmaAllocator, allocation: VmaAllocation, pFlags: [*c]VkMemoryPropertyFlags) void;
pub extern fn vmaMapMemory(allocator: VmaAllocator, allocation: VmaAllocation, ppData: [*c]?*anyopaque) VkResult;
pub extern fn vmaUnmapMemory(allocator: VmaAllocator, allocation: VmaAllocation) void;
pub extern fn vmaFlushAllocation(allocator: VmaAllocator, allocation: VmaAllocation, offset: VkDeviceSize, size: VkDeviceSize) VkResult;
pub extern fn vmaInvalidateAllocation(allocator: VmaAllocator, allocation: VmaAllocation, offset: VkDeviceSize, size: VkDeviceSize) VkResult;
pub extern fn vmaFlushAllocations(allocator: VmaAllocator, allocationCount: u32, allocations: [*c]const VmaAllocation, offsets: [*c]const VkDeviceSize, sizes: [*c]const VkDeviceSize) VkResult;
pub extern fn vmaInvalidateAllocations(allocator: VmaAllocator, allocationCount: u32, allocations: [*c]const VmaAllocation, offsets: [*c]const VkDeviceSize, sizes: [*c]const VkDeviceSize) VkResult;
pub extern fn vmaCopyMemoryToAllocation(allocator: VmaAllocator, pSrcHostPointer: ?*const anyopaque, dstAllocation: VmaAllocation, dstAllocationLocalOffset: VkDeviceSize, size: VkDeviceSize) VkResult;
pub extern fn vmaCopyAllocationToMemory(allocator: VmaAllocator, srcAllocation: VmaAllocation, srcAllocationLocalOffset: VkDeviceSize, pDstHostPointer: ?*anyopaque, size: VkDeviceSize) VkResult;
pub extern fn vmaCheckCorruption(allocator: VmaAllocator, memoryTypeBits: u32) VkResult;
pub extern fn vmaBeginDefragmentation(allocator: VmaAllocator, pInfo: [*c]const VmaDefragmentationInfo, pContext: [*c]VmaDefragmentationContext) VkResult;
pub extern fn vmaEndDefragmentation(allocator: VmaAllocator, context: VmaDefragmentationContext, pStats: [*c]VmaDefragmentationStats) void;
pub extern fn vmaBeginDefragmentationPass(allocator: VmaAllocator, context: VmaDefragmentationContext, pPassInfo: [*c]VmaDefragmentationPassMoveInfo) VkResult;
pub extern fn vmaEndDefragmentationPass(allocator: VmaAllocator, context: VmaDefragmentationContext, pPassInfo: [*c]VmaDefragmentationPassMoveInfo) VkResult;
pub extern fn vmaBindBufferMemory(allocator: VmaAllocator, allocation: VmaAllocation, buffer: VkBuffer) VkResult;
pub extern fn vmaBindBufferMemory2(allocator: VmaAllocator, allocation: VmaAllocation, allocationLocalOffset: VkDeviceSize, buffer: VkBuffer, pNext: ?*const anyopaque) VkResult;
pub extern fn vmaBindImageMemory(allocator: VmaAllocator, allocation: VmaAllocation, image: VkImage) VkResult;
pub extern fn vmaBindImageMemory2(allocator: VmaAllocator, allocation: VmaAllocation, allocationLocalOffset: VkDeviceSize, image: VkImage, pNext: ?*const anyopaque) VkResult;
pub extern fn vmaCreateBuffer(allocator: VmaAllocator, pBufferCreateInfo: [*c]const VkBufferCreateInfo, pAllocationCreateInfo: [*c]const VmaAllocationCreateInfo, pBuffer: [*c]VkBuffer, pAllocation: [*c]VmaAllocation, pAllocationInfo: [*c]VmaAllocationInfo) VkResult;
pub extern fn vmaCreateBufferWithAlignment(allocator: VmaAllocator, pBufferCreateInfo: [*c]const VkBufferCreateInfo, pAllocationCreateInfo: [*c]const VmaAllocationCreateInfo, minAlignment: VkDeviceSize, pBuffer: [*c]VkBuffer, pAllocation: [*c]VmaAllocation, pAllocationInfo: [*c]VmaAllocationInfo) VkResult;
pub extern fn vmaCreateAliasingBuffer(allocator: VmaAllocator, allocation: VmaAllocation, pBufferCreateInfo: [*c]const VkBufferCreateInfo, pBuffer: [*c]VkBuffer) VkResult;
pub extern fn vmaCreateAliasingBuffer2(allocator: VmaAllocator, allocation: VmaAllocation, allocationLocalOffset: VkDeviceSize, pBufferCreateInfo: [*c]const VkBufferCreateInfo, pBuffer: [*c]VkBuffer) VkResult;
pub extern fn vmaDestroyBuffer(allocator: VmaAllocator, buffer: VkBuffer, allocation: VmaAllocation) void;
pub extern fn vmaCreateImage(allocator: VmaAllocator, pImageCreateInfo: [*c]const VkImageCreateInfo, pAllocationCreateInfo: [*c]const VmaAllocationCreateInfo, pImage: [*c]VkImage, pAllocation: [*c]VmaAllocation, pAllocationInfo: [*c]VmaAllocationInfo) VkResult;
pub extern fn vmaCreateAliasingImage(allocator: VmaAllocator, allocation: VmaAllocation, pImageCreateInfo: [*c]const VkImageCreateInfo, pImage: [*c]VkImage) VkResult;
pub extern fn vmaCreateAliasingImage2(allocator: VmaAllocator, allocation: VmaAllocation, allocationLocalOffset: VkDeviceSize, pImageCreateInfo: [*c]const VkImageCreateInfo, pImage: [*c]VkImage) VkResult;
pub extern fn vmaDestroyImage(allocator: VmaAllocator, image: VkImage, allocation: VmaAllocation) void;
pub extern fn vmaCreateVirtualBlock(pCreateInfo: [*c]const VmaVirtualBlockCreateInfo, pVirtualBlock: [*c]VmaVirtualBlock) VkResult;
pub extern fn vmaDestroyVirtualBlock(virtualBlock: VmaVirtualBlock) void;
pub extern fn vmaIsVirtualBlockEmpty(virtualBlock: VmaVirtualBlock) VkBool32;
pub extern fn vmaGetVirtualAllocationInfo(virtualBlock: VmaVirtualBlock, allocation: VmaVirtualAllocation, pVirtualAllocInfo: [*c]VmaVirtualAllocationInfo) void;
pub extern fn vmaVirtualAllocate(virtualBlock: VmaVirtualBlock, pCreateInfo: [*c]const VmaVirtualAllocationCreateInfo, pAllocation: [*c]VmaVirtualAllocation, pOffset: [*c]VkDeviceSize) VkResult;
pub extern fn vmaVirtualFree(virtualBlock: VmaVirtualBlock, allocation: VmaVirtualAllocation) void;
pub extern fn vmaClearVirtualBlock(virtualBlock: VmaVirtualBlock) void;
pub extern fn vmaSetVirtualAllocationUserData(virtualBlock: VmaVirtualBlock, allocation: VmaVirtualAllocation, pUserData: ?*anyopaque) void;
pub extern fn vmaGetVirtualBlockStatistics(virtualBlock: VmaVirtualBlock, pStats: [*c]VmaStatistics) void;
pub extern fn vmaCalculateVirtualBlockStatistics(virtualBlock: VmaVirtualBlock, pStats: [*c]VmaDetailedStatistics) void;
pub extern fn vmaBuildVirtualBlockStatsString(virtualBlock: VmaVirtualBlock, ppStatsString: [*c][*c]u8, detailedMap: VkBool32) void;
pub extern fn vmaFreeVirtualBlockStatsString(virtualBlock: VmaVirtualBlock, pStatsString: [*c]u8) void;
pub extern fn vmaBuildStatsString(allocator: VmaAllocator, ppStatsString: [*c][*c]u8, detailedMap: VkBool32) void;
pub extern fn vmaFreeStatsString(allocator: VmaAllocator, pStatsString: [*c]u8) void;
pub const struct__G_fpos_t = extern struct {
    __pos: __off_t = @import("std").mem.zeroes(__off_t),
    __state: __mbstate_t = @import("std").mem.zeroes(__mbstate_t),
};
pub const __fpos_t = struct__G_fpos_t;
pub const struct__G_fpos64_t = extern struct {
    __pos: __off64_t = @import("std").mem.zeroes(__off64_t),
    __state: __mbstate_t = @import("std").mem.zeroes(__mbstate_t),
};
pub const __fpos64_t = struct__G_fpos64_t;
pub const cookie_read_function_t = fn (?*anyopaque, [*c]u8, usize) callconv(.C) __ssize_t;
pub const cookie_write_function_t = fn (?*anyopaque, [*c]const u8, usize) callconv(.C) __ssize_t;
pub const cookie_seek_function_t = fn (?*anyopaque, [*c]__off64_t, c_int) callconv(.C) c_int;
pub const cookie_close_function_t = fn (?*anyopaque) callconv(.C) c_int;
pub const struct__IO_cookie_io_functions_t = extern struct {
    read: ?*const cookie_read_function_t = @import("std").mem.zeroes(?*const cookie_read_function_t),
    write: ?*const cookie_write_function_t = @import("std").mem.zeroes(?*const cookie_write_function_t),
    seek: ?*const cookie_seek_function_t = @import("std").mem.zeroes(?*const cookie_seek_function_t),
    close: ?*const cookie_close_function_t = @import("std").mem.zeroes(?*const cookie_close_function_t),
};
pub const cookie_io_functions_t = struct__IO_cookie_io_functions_t;
pub const off_t = __off_t;
pub const fpos_t = __fpos_t;
pub extern var stdin: [*c]FILE;
pub extern var stdout: [*c]FILE;
pub extern var stderr: [*c]FILE;
pub extern fn remove(__filename: [*c]const u8) c_int;
pub extern fn rename(__old: [*c]const u8, __new: [*c]const u8) c_int;
pub extern fn renameat(__oldfd: c_int, __old: [*c]const u8, __newfd: c_int, __new: [*c]const u8) c_int;
pub extern fn fclose(__stream: [*c]FILE) c_int;
pub extern fn tmpfile() [*c]FILE;
pub extern fn tmpnam([*c]u8) [*c]u8;
pub extern fn tmpnam_r(__s: [*c]u8) [*c]u8;
pub extern fn tempnam(__dir: [*c]const u8, __pfx: [*c]const u8) [*c]u8;
pub extern fn fflush(__stream: [*c]FILE) c_int;
pub extern fn fflush_unlocked(__stream: [*c]FILE) c_int;
pub extern fn fopen(__filename: [*c]const u8, __modes: [*c]const u8) [*c]FILE;
pub extern fn freopen(noalias __filename: [*c]const u8, noalias __modes: [*c]const u8, noalias __stream: [*c]FILE) [*c]FILE;
pub extern fn fdopen(__fd: c_int, __modes: [*c]const u8) [*c]FILE;
pub extern fn fopencookie(noalias __magic_cookie: ?*anyopaque, noalias __modes: [*c]const u8, __io_funcs: cookie_io_functions_t) [*c]FILE;
pub extern fn fmemopen(__s: ?*anyopaque, __len: usize, __modes: [*c]const u8) [*c]FILE;
pub extern fn open_memstream(__bufloc: [*c][*c]u8, __sizeloc: [*c]usize) [*c]FILE;
pub extern fn setbuf(noalias __stream: [*c]FILE, noalias __buf: [*c]u8) void;
pub extern fn setvbuf(noalias __stream: [*c]FILE, noalias __buf: [*c]u8, __modes: c_int, __n: usize) c_int;
pub extern fn setbuffer(noalias __stream: [*c]FILE, noalias __buf: [*c]u8, __size: usize) void;
pub extern fn setlinebuf(__stream: [*c]FILE) void;
pub extern fn fprintf(__stream: [*c]FILE, __format: [*c]const u8, ...) c_int;
pub extern fn printf(__format: [*c]const u8, ...) c_int;
pub extern fn sprintf(__s: [*c]u8, __format: [*c]const u8, ...) c_int;
pub extern fn vfprintf(__s: [*c]FILE, __format: [*c]const u8, __arg: [*c]struct___va_list_tag_1) c_int;
pub extern fn vprintf(__format: [*c]const u8, __arg: [*c]struct___va_list_tag_1) c_int;
pub extern fn vsprintf(__s: [*c]u8, __format: [*c]const u8, __arg: [*c]struct___va_list_tag_1) c_int;
pub extern fn snprintf(__s: [*c]u8, __maxlen: c_ulong, __format: [*c]const u8, ...) c_int;
pub extern fn vsnprintf(__s: [*c]u8, __maxlen: c_ulong, __format: [*c]const u8, __arg: [*c]struct___va_list_tag_1) c_int;
pub extern fn vasprintf(noalias __ptr: [*c][*c]u8, noalias __f: [*c]const u8, __arg: [*c]struct___va_list_tag_1) c_int;
pub extern fn __asprintf(noalias __ptr: [*c][*c]u8, noalias __fmt: [*c]const u8, ...) c_int;
pub extern fn asprintf(noalias __ptr: [*c][*c]u8, noalias __fmt: [*c]const u8, ...) c_int;
pub extern fn vdprintf(__fd: c_int, noalias __fmt: [*c]const u8, __arg: [*c]struct___va_list_tag_1) c_int;
pub extern fn dprintf(__fd: c_int, noalias __fmt: [*c]const u8, ...) c_int;
pub extern fn fscanf(noalias __stream: [*c]FILE, noalias __format: [*c]const u8, ...) c_int;
pub extern fn scanf(noalias __format: [*c]const u8, ...) c_int;
pub extern fn sscanf(noalias __s: [*c]const u8, noalias __format: [*c]const u8, ...) c_int;
pub extern fn vfscanf(noalias __s: [*c]FILE, noalias __format: [*c]const u8, __arg: [*c]struct___va_list_tag_1) c_int;
pub extern fn vscanf(noalias __format: [*c]const u8, __arg: [*c]struct___va_list_tag_1) c_int;
pub extern fn vsscanf(noalias __s: [*c]const u8, noalias __format: [*c]const u8, __arg: [*c]struct___va_list_tag_1) c_int;
pub extern fn fgetc(__stream: [*c]FILE) c_int;
pub extern fn getc(__stream: [*c]FILE) c_int;
pub extern fn getchar() c_int;
pub extern fn getc_unlocked(__stream: [*c]FILE) c_int;
pub extern fn getchar_unlocked() c_int;
pub extern fn fgetc_unlocked(__stream: [*c]FILE) c_int;
pub extern fn fputc(__c: c_int, __stream: [*c]FILE) c_int;
pub extern fn putc(__c: c_int, __stream: [*c]FILE) c_int;
pub extern fn putchar(__c: c_int) c_int;
pub extern fn fputc_unlocked(__c: c_int, __stream: [*c]FILE) c_int;
pub extern fn putc_unlocked(__c: c_int, __stream: [*c]FILE) c_int;
pub extern fn putchar_unlocked(__c: c_int) c_int;
pub extern fn getw(__stream: [*c]FILE) c_int;
pub extern fn putw(__w: c_int, __stream: [*c]FILE) c_int;
pub extern fn fgets(noalias __s: [*c]u8, __n: c_int, noalias __stream: [*c]FILE) [*c]u8;
pub extern fn __getdelim(noalias __lineptr: [*c][*c]u8, noalias __n: [*c]usize, __delimiter: c_int, noalias __stream: [*c]FILE) __ssize_t;
pub extern fn getdelim(noalias __lineptr: [*c][*c]u8, noalias __n: [*c]usize, __delimiter: c_int, noalias __stream: [*c]FILE) __ssize_t;
pub extern fn getline(noalias __lineptr: [*c][*c]u8, noalias __n: [*c]usize, noalias __stream: [*c]FILE) __ssize_t;
pub extern fn fputs(noalias __s: [*c]const u8, noalias __stream: [*c]FILE) c_int;
pub extern fn puts(__s: [*c]const u8) c_int;
pub extern fn ungetc(__c: c_int, __stream: [*c]FILE) c_int;
pub extern fn fread(__ptr: ?*anyopaque, __size: c_ulong, __n: c_ulong, __stream: [*c]FILE) c_ulong;
pub extern fn fwrite(__ptr: ?*const anyopaque, __size: c_ulong, __n: c_ulong, __s: [*c]FILE) c_ulong;
pub extern fn fread_unlocked(noalias __ptr: ?*anyopaque, __size: usize, __n: usize, noalias __stream: [*c]FILE) usize;
pub extern fn fwrite_unlocked(noalias __ptr: ?*const anyopaque, __size: usize, __n: usize, noalias __stream: [*c]FILE) usize;
pub extern fn fseek(__stream: [*c]FILE, __off: c_long, __whence: c_int) c_int;
pub extern fn ftell(__stream: [*c]FILE) c_long;
pub extern fn rewind(__stream: [*c]FILE) void;
pub extern fn fseeko(__stream: [*c]FILE, __off: __off_t, __whence: c_int) c_int;
pub extern fn ftello(__stream: [*c]FILE) __off_t;
pub extern fn fgetpos(noalias __stream: [*c]FILE, noalias __pos: [*c]fpos_t) c_int;
pub extern fn fsetpos(__stream: [*c]FILE, __pos: [*c]const fpos_t) c_int;
pub extern fn clearerr(__stream: [*c]FILE) void;
pub extern fn feof(__stream: [*c]FILE) c_int;
pub extern fn ferror(__stream: [*c]FILE) c_int;
pub extern fn clearerr_unlocked(__stream: [*c]FILE) void;
pub extern fn feof_unlocked(__stream: [*c]FILE) c_int;
pub extern fn ferror_unlocked(__stream: [*c]FILE) c_int;
pub extern fn perror(__s: [*c]const u8) void;
pub extern fn fileno(__stream: [*c]FILE) c_int;
pub extern fn fileno_unlocked(__stream: [*c]FILE) c_int;
pub extern fn pclose(__stream: [*c]FILE) c_int;
pub extern fn popen(__command: [*c]const u8, __modes: [*c]const u8) [*c]FILE;
pub extern fn ctermid(__s: [*c]u8) [*c]u8;
pub extern fn flockfile(__stream: [*c]FILE) void;
pub extern fn ftrylockfile(__stream: [*c]FILE) c_int;
pub extern fn funlockfile(__stream: [*c]FILE) void;
pub extern fn __uflow([*c]FILE) c_int;
pub extern fn __overflow([*c]FILE, c_int) c_int;
pub const STBI_default: c_int = 0;
pub const STBI_grey: c_int = 1;
pub const STBI_grey_alpha: c_int = 2;
pub const STBI_rgb: c_int = 3;
pub const STBI_rgb_alpha: c_int = 4;
const enum_unnamed_10 = c_uint;
pub const div_t = extern struct {
    quot: c_int = @import("std").mem.zeroes(c_int),
    rem: c_int = @import("std").mem.zeroes(c_int),
};
pub const ldiv_t = extern struct {
    quot: c_long = @import("std").mem.zeroes(c_long),
    rem: c_long = @import("std").mem.zeroes(c_long),
};
pub const lldiv_t = extern struct {
    quot: c_longlong = @import("std").mem.zeroes(c_longlong),
    rem: c_longlong = @import("std").mem.zeroes(c_longlong),
};
pub extern fn __ctype_get_mb_cur_max() usize;
pub extern fn atof(__nptr: [*c]const u8) f64;
pub extern fn atoi(__nptr: [*c]const u8) c_int;
pub extern fn atol(__nptr: [*c]const u8) c_long;
pub extern fn atoll(__nptr: [*c]const u8) c_longlong;
pub extern fn strtod(__nptr: [*c]const u8, __endptr: [*c][*c]u8) f64;
pub extern fn strtof(__nptr: [*c]const u8, __endptr: [*c][*c]u8) f32;
pub extern fn strtold(__nptr: [*c]const u8, __endptr: [*c][*c]u8) c_longdouble;
pub extern fn strtol(__nptr: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_long;
pub extern fn strtoul(__nptr: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_ulong;
pub extern fn strtoq(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int) c_longlong;
pub extern fn strtouq(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int) c_ulonglong;
pub extern fn strtoll(__nptr: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_longlong;
pub extern fn strtoull(__nptr: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_ulonglong;
pub extern fn l64a(__n: c_long) [*c]u8;
pub extern fn a64l(__s: [*c]const u8) c_long;
pub const u_char = __u_char;
pub const u_short = __u_short;
pub const u_int = __u_int;
pub const u_long = __u_long;
pub const quad_t = __quad_t;
pub const u_quad_t = __u_quad_t;
pub const fsid_t = __fsid_t;
pub const loff_t = __loff_t;
pub const ino_t = __ino_t;
pub const dev_t = __dev_t;
pub const gid_t = __gid_t;
pub const mode_t = __mode_t;
pub const nlink_t = __nlink_t;
pub const uid_t = __uid_t;
pub const pid_t = __pid_t;
pub const id_t = __id_t;
pub const daddr_t = __daddr_t;
pub const caddr_t = __caddr_t;
pub const key_t = __key_t;
pub const clock_t = __clock_t;
pub const clockid_t = __clockid_t;
pub const time_t = __time_t;
pub const timer_t = __timer_t;
pub const ulong = c_ulong;
pub const ushort = c_ushort;
pub const uint = c_uint;
pub const u_int8_t = __uint8_t;
pub const u_int16_t = __uint16_t;
pub const u_int32_t = __uint32_t;
pub const u_int64_t = __uint64_t;
pub const register_t = c_long;
pub const __sigset_t = extern struct {
    __val: [16]c_ulong = @import("std").mem.zeroes([16]c_ulong),
};
pub const sigset_t = __sigset_t;
pub const struct_timeval = extern struct {
    tv_sec: __time_t = @import("std").mem.zeroes(__time_t),
    tv_usec: __suseconds_t = @import("std").mem.zeroes(__suseconds_t),
};
pub const struct_timespec = extern struct {
    tv_sec: __time_t = @import("std").mem.zeroes(__time_t),
    tv_nsec: __syscall_slong_t = @import("std").mem.zeroes(__syscall_slong_t),
};
pub const suseconds_t = __suseconds_t;
pub const __fd_mask = c_long;
pub const fd_set = extern struct {
    __fds_bits: [16]__fd_mask = @import("std").mem.zeroes([16]__fd_mask),
};
pub const fd_mask = __fd_mask;
pub extern fn select(__nfds: c_int, noalias __readfds: [*c]fd_set, noalias __writefds: [*c]fd_set, noalias __exceptfds: [*c]fd_set, noalias __timeout: [*c]struct_timeval) c_int;
pub extern fn pselect(__nfds: c_int, noalias __readfds: [*c]fd_set, noalias __writefds: [*c]fd_set, noalias __exceptfds: [*c]fd_set, noalias __timeout: [*c]const struct_timespec, noalias __sigmask: [*c]const __sigset_t) c_int;
pub const blksize_t = __blksize_t;
pub const blkcnt_t = __blkcnt_t;
pub const fsblkcnt_t = __fsblkcnt_t;
pub const fsfilcnt_t = __fsfilcnt_t;
const struct_unnamed_11 = extern struct {
    __low: c_uint = @import("std").mem.zeroes(c_uint),
    __high: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const __atomic_wide_counter = extern union {
    __value64: c_ulonglong,
    __value32: struct_unnamed_11,
};
pub const struct___pthread_internal_list = extern struct {
    __prev: [*c]struct___pthread_internal_list = @import("std").mem.zeroes([*c]struct___pthread_internal_list),
    __next: [*c]struct___pthread_internal_list = @import("std").mem.zeroes([*c]struct___pthread_internal_list),
};
pub const __pthread_list_t = struct___pthread_internal_list;
pub const struct___pthread_internal_slist = extern struct {
    __next: [*c]struct___pthread_internal_slist = @import("std").mem.zeroes([*c]struct___pthread_internal_slist),
};
pub const __pthread_slist_t = struct___pthread_internal_slist;
pub const struct___pthread_mutex_s = extern struct {
    __lock: c_int = @import("std").mem.zeroes(c_int),
    __count: c_uint = @import("std").mem.zeroes(c_uint),
    __owner: c_int = @import("std").mem.zeroes(c_int),
    __nusers: c_uint = @import("std").mem.zeroes(c_uint),
    __kind: c_int = @import("std").mem.zeroes(c_int),
    __spins: c_short = @import("std").mem.zeroes(c_short),
    __elision: c_short = @import("std").mem.zeroes(c_short),
    __list: __pthread_list_t = @import("std").mem.zeroes(__pthread_list_t),
};
pub const struct___pthread_rwlock_arch_t = extern struct {
    __readers: c_uint = @import("std").mem.zeroes(c_uint),
    __writers: c_uint = @import("std").mem.zeroes(c_uint),
    __wrphase_futex: c_uint = @import("std").mem.zeroes(c_uint),
    __writers_futex: c_uint = @import("std").mem.zeroes(c_uint),
    __pad3: c_uint = @import("std").mem.zeroes(c_uint),
    __pad4: c_uint = @import("std").mem.zeroes(c_uint),
    __cur_writer: c_int = @import("std").mem.zeroes(c_int),
    __shared: c_int = @import("std").mem.zeroes(c_int),
    __rwelision: i8 = @import("std").mem.zeroes(i8),
    __pad1: [7]u8 = @import("std").mem.zeroes([7]u8),
    __pad2: c_ulong = @import("std").mem.zeroes(c_ulong),
    __flags: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const struct___pthread_cond_s = extern struct {
    __wseq: __atomic_wide_counter = @import("std").mem.zeroes(__atomic_wide_counter),
    __g1_start: __atomic_wide_counter = @import("std").mem.zeroes(__atomic_wide_counter),
    __g_refs: [2]c_uint = @import("std").mem.zeroes([2]c_uint),
    __g_size: [2]c_uint = @import("std").mem.zeroes([2]c_uint),
    __g1_orig_size: c_uint = @import("std").mem.zeroes(c_uint),
    __wrefs: c_uint = @import("std").mem.zeroes(c_uint),
    __g_signals: [2]c_uint = @import("std").mem.zeroes([2]c_uint),
};
pub const __tss_t = c_uint;
pub const __thrd_t = c_ulong;
pub const __once_flag = extern struct {
    __data: c_int = @import("std").mem.zeroes(c_int),
};
pub const pthread_t = c_ulong;
pub const pthread_mutexattr_t = extern union {
    __size: [4]u8,
    __align: c_int,
};
pub const pthread_condattr_t = extern union {
    __size: [4]u8,
    __align: c_int,
};
pub const pthread_key_t = c_uint;
pub const pthread_once_t = c_int;
pub const union_pthread_attr_t = extern union {
    __size: [56]u8,
    __align: c_long,
};
pub const pthread_attr_t = union_pthread_attr_t;
pub const pthread_mutex_t = extern union {
    __data: struct___pthread_mutex_s,
    __size: [40]u8,
    __align: c_long,
};
pub const pthread_cond_t = extern union {
    __data: struct___pthread_cond_s,
    __size: [48]u8,
    __align: c_longlong,
};
pub const pthread_rwlock_t = extern union {
    __data: struct___pthread_rwlock_arch_t,
    __size: [56]u8,
    __align: c_long,
};
pub const pthread_rwlockattr_t = extern union {
    __size: [8]u8,
    __align: c_long,
};
pub const pthread_spinlock_t = c_int;
pub const pthread_barrier_t = extern union {
    __size: [32]u8,
    __align: c_long,
};
pub const pthread_barrierattr_t = extern union {
    __size: [4]u8,
    __align: c_int,
};
pub extern fn random() c_long;
pub extern fn srandom(__seed: c_uint) void;
pub extern fn initstate(__seed: c_uint, __statebuf: [*c]u8, __statelen: usize) [*c]u8;
pub extern fn setstate(__statebuf: [*c]u8) [*c]u8;
pub const struct_random_data = extern struct {
    fptr: [*c]i32 = @import("std").mem.zeroes([*c]i32),
    rptr: [*c]i32 = @import("std").mem.zeroes([*c]i32),
    state: [*c]i32 = @import("std").mem.zeroes([*c]i32),
    rand_type: c_int = @import("std").mem.zeroes(c_int),
    rand_deg: c_int = @import("std").mem.zeroes(c_int),
    rand_sep: c_int = @import("std").mem.zeroes(c_int),
    end_ptr: [*c]i32 = @import("std").mem.zeroes([*c]i32),
};
pub extern fn random_r(noalias __buf: [*c]struct_random_data, noalias __result: [*c]i32) c_int;
pub extern fn srandom_r(__seed: c_uint, __buf: [*c]struct_random_data) c_int;
pub extern fn initstate_r(__seed: c_uint, noalias __statebuf: [*c]u8, __statelen: usize, noalias __buf: [*c]struct_random_data) c_int;
pub extern fn setstate_r(noalias __statebuf: [*c]u8, noalias __buf: [*c]struct_random_data) c_int;
pub extern fn rand() c_int;
pub extern fn srand(__seed: c_uint) void;
pub extern fn rand_r(__seed: [*c]c_uint) c_int;
pub extern fn drand48() f64;
pub extern fn erand48(__xsubi: [*c]c_ushort) f64;
pub extern fn lrand48() c_long;
pub extern fn nrand48(__xsubi: [*c]c_ushort) c_long;
pub extern fn mrand48() c_long;
pub extern fn jrand48(__xsubi: [*c]c_ushort) c_long;
pub extern fn srand48(__seedval: c_long) void;
pub extern fn seed48(__seed16v: [*c]c_ushort) [*c]c_ushort;
pub extern fn lcong48(__param: [*c]c_ushort) void;
pub const struct_drand48_data = extern struct {
    __x: [3]c_ushort = @import("std").mem.zeroes([3]c_ushort),
    __old_x: [3]c_ushort = @import("std").mem.zeroes([3]c_ushort),
    __c: c_ushort = @import("std").mem.zeroes(c_ushort),
    __init: c_ushort = @import("std").mem.zeroes(c_ushort),
    __a: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
};
pub extern fn drand48_r(noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]f64) c_int;
pub extern fn erand48_r(__xsubi: [*c]c_ushort, noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]f64) c_int;
pub extern fn lrand48_r(noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]c_long) c_int;
pub extern fn nrand48_r(__xsubi: [*c]c_ushort, noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]c_long) c_int;
pub extern fn mrand48_r(noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]c_long) c_int;
pub extern fn jrand48_r(__xsubi: [*c]c_ushort, noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]c_long) c_int;
pub extern fn srand48_r(__seedval: c_long, __buffer: [*c]struct_drand48_data) c_int;
pub extern fn seed48_r(__seed16v: [*c]c_ushort, __buffer: [*c]struct_drand48_data) c_int;
pub extern fn lcong48_r(__param: [*c]c_ushort, __buffer: [*c]struct_drand48_data) c_int;
pub extern fn arc4random() __uint32_t;
pub extern fn arc4random_buf(__buf: ?*anyopaque, __size: usize) void;
pub extern fn arc4random_uniform(__upper_bound: __uint32_t) __uint32_t;
pub extern fn malloc(__size: c_ulong) ?*anyopaque;
pub extern fn calloc(__nmemb: c_ulong, __size: c_ulong) ?*anyopaque;
pub extern fn realloc(__ptr: ?*anyopaque, __size: c_ulong) ?*anyopaque;
pub extern fn free(__ptr: ?*anyopaque) void;
pub extern fn reallocarray(__ptr: ?*anyopaque, __nmemb: usize, __size: usize) ?*anyopaque;
pub extern fn alloca(__size: c_ulong) ?*anyopaque;
pub extern fn valloc(__size: usize) ?*anyopaque;
pub extern fn posix_memalign(__memptr: [*c]?*anyopaque, __alignment: usize, __size: usize) c_int;
pub extern fn aligned_alloc(__alignment: c_ulong, __size: c_ulong) ?*anyopaque;
pub extern fn abort() noreturn;
pub extern fn atexit(__func: ?*const fn () callconv(.C) void) c_int;
pub extern fn at_quick_exit(__func: ?*const fn () callconv(.C) void) c_int;
pub extern fn on_exit(__func: ?*const fn (c_int, ?*anyopaque) callconv(.C) void, __arg: ?*anyopaque) c_int;
pub extern fn exit(__status: c_int) noreturn;
pub extern fn quick_exit(__status: c_int) noreturn;
pub extern fn _Exit(__status: c_int) noreturn;
pub extern fn getenv(__name: [*c]const u8) [*c]u8;
pub extern fn putenv(__string: [*c]u8) c_int;
pub extern fn setenv(__name: [*c]const u8, __value: [*c]const u8, __replace: c_int) c_int;
pub extern fn unsetenv(__name: [*c]const u8) c_int;
pub extern fn clearenv() c_int;
pub extern fn mktemp(__template: [*c]u8) [*c]u8;
pub extern fn mkstemp(__template: [*c]u8) c_int;
pub extern fn mkstemps(__template: [*c]u8, __suffixlen: c_int) c_int;
pub extern fn mkdtemp(__template: [*c]u8) [*c]u8;
pub extern fn system(__command: [*c]const u8) c_int;
pub extern fn realpath(noalias __name: [*c]const u8, noalias __resolved: [*c]u8) [*c]u8;
pub const __compar_fn_t = ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.C) c_int;
pub extern fn bsearch(__key: ?*const anyopaque, __base: ?*const anyopaque, __nmemb: usize, __size: usize, __compar: __compar_fn_t) ?*anyopaque;
pub extern fn qsort(__base: ?*anyopaque, __nmemb: usize, __size: usize, __compar: __compar_fn_t) void;
pub extern fn abs(__x: c_int) c_int;
pub extern fn labs(__x: c_long) c_long;
pub extern fn llabs(__x: c_longlong) c_longlong;
pub extern fn div(__numer: c_int, __denom: c_int) div_t;
pub extern fn ldiv(__numer: c_long, __denom: c_long) ldiv_t;
pub extern fn lldiv(__numer: c_longlong, __denom: c_longlong) lldiv_t;
pub extern fn ecvt(__value: f64, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int) [*c]u8;
pub extern fn fcvt(__value: f64, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int) [*c]u8;
pub extern fn gcvt(__value: f64, __ndigit: c_int, __buf: [*c]u8) [*c]u8;
pub extern fn qecvt(__value: c_longdouble, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int) [*c]u8;
pub extern fn qfcvt(__value: c_longdouble, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int) [*c]u8;
pub extern fn qgcvt(__value: c_longdouble, __ndigit: c_int, __buf: [*c]u8) [*c]u8;
pub extern fn ecvt_r(__value: f64, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int, noalias __buf: [*c]u8, __len: usize) c_int;
pub extern fn fcvt_r(__value: f64, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int, noalias __buf: [*c]u8, __len: usize) c_int;
pub extern fn qecvt_r(__value: c_longdouble, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int, noalias __buf: [*c]u8, __len: usize) c_int;
pub extern fn qfcvt_r(__value: c_longdouble, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int, noalias __buf: [*c]u8, __len: usize) c_int;
pub extern fn mblen(__s: [*c]const u8, __n: usize) c_int;
pub extern fn mbtowc(noalias __pwc: [*c]wchar_t, noalias __s: [*c]const u8, __n: usize) c_int;
pub extern fn wctomb(__s: [*c]u8, __wchar: wchar_t) c_int;
pub extern fn mbstowcs(noalias __pwcs: [*c]wchar_t, noalias __s: [*c]const u8, __n: usize) usize;
pub extern fn wcstombs(noalias __s: [*c]u8, noalias __pwcs: [*c]const wchar_t, __n: usize) usize;
pub extern fn rpmatch(__response: [*c]const u8) c_int;
pub extern fn getsubopt(noalias __optionp: [*c][*c]u8, noalias __tokens: [*c]const [*c]u8, noalias __valuep: [*c][*c]u8) c_int;
pub extern fn getloadavg(__loadavg: [*c]f64, __nelem: c_int) c_int;
pub const stbi_uc = u8;
pub const stbi_us = c_ushort;
pub const stbi_io_callbacks = extern struct {
    read: ?*const fn (?*anyopaque, [*c]u8, c_int) callconv(.C) c_int = @import("std").mem.zeroes(?*const fn (?*anyopaque, [*c]u8, c_int) callconv(.C) c_int),
    skip: ?*const fn (?*anyopaque, c_int) callconv(.C) void = @import("std").mem.zeroes(?*const fn (?*anyopaque, c_int) callconv(.C) void),
    eof: ?*const fn (?*anyopaque) callconv(.C) c_int = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.C) c_int),
};
pub extern fn stbi_load_from_memory(buffer: [*c]const stbi_uc, len: c_int, x: [*c]c_int, y: [*c]c_int, channels_in_file: [*c]c_int, desired_channels: c_int) [*c]stbi_uc;
pub extern fn stbi_load_from_callbacks(clbk: [*c]const stbi_io_callbacks, user: ?*anyopaque, x: [*c]c_int, y: [*c]c_int, channels_in_file: [*c]c_int, desired_channels: c_int) [*c]stbi_uc;
pub extern fn stbi_load(filename: [*c]const u8, x: [*c]c_int, y: [*c]c_int, channels_in_file: [*c]c_int, desired_channels: c_int) [*c]stbi_uc;
pub extern fn stbi_load_from_file(f: [*c]FILE, x: [*c]c_int, y: [*c]c_int, channels_in_file: [*c]c_int, desired_channels: c_int) [*c]stbi_uc;
pub extern fn stbi_load_gif_from_memory(buffer: [*c]const stbi_uc, len: c_int, delays: [*c][*c]c_int, x: [*c]c_int, y: [*c]c_int, z: [*c]c_int, comp: [*c]c_int, req_comp: c_int) [*c]stbi_uc;
pub extern fn stbi_load_16_from_memory(buffer: [*c]const stbi_uc, len: c_int, x: [*c]c_int, y: [*c]c_int, channels_in_file: [*c]c_int, desired_channels: c_int) [*c]stbi_us;
pub extern fn stbi_load_16_from_callbacks(clbk: [*c]const stbi_io_callbacks, user: ?*anyopaque, x: [*c]c_int, y: [*c]c_int, channels_in_file: [*c]c_int, desired_channels: c_int) [*c]stbi_us;
pub extern fn stbi_load_16(filename: [*c]const u8, x: [*c]c_int, y: [*c]c_int, channels_in_file: [*c]c_int, desired_channels: c_int) [*c]stbi_us;
pub extern fn stbi_load_from_file_16(f: [*c]FILE, x: [*c]c_int, y: [*c]c_int, channels_in_file: [*c]c_int, desired_channels: c_int) [*c]stbi_us;
pub extern fn stbi_loadf_from_memory(buffer: [*c]const stbi_uc, len: c_int, x: [*c]c_int, y: [*c]c_int, channels_in_file: [*c]c_int, desired_channels: c_int) [*c]f32;
pub extern fn stbi_loadf_from_callbacks(clbk: [*c]const stbi_io_callbacks, user: ?*anyopaque, x: [*c]c_int, y: [*c]c_int, channels_in_file: [*c]c_int, desired_channels: c_int) [*c]f32;
pub extern fn stbi_loadf(filename: [*c]const u8, x: [*c]c_int, y: [*c]c_int, channels_in_file: [*c]c_int, desired_channels: c_int) [*c]f32;
pub extern fn stbi_loadf_from_file(f: [*c]FILE, x: [*c]c_int, y: [*c]c_int, channels_in_file: [*c]c_int, desired_channels: c_int) [*c]f32;
pub extern fn stbi_hdr_to_ldr_gamma(gamma: f32) void;
pub extern fn stbi_hdr_to_ldr_scale(scale: f32) void;
pub extern fn stbi_ldr_to_hdr_gamma(gamma: f32) void;
pub extern fn stbi_ldr_to_hdr_scale(scale: f32) void;
pub extern fn stbi_is_hdr_from_callbacks(clbk: [*c]const stbi_io_callbacks, user: ?*anyopaque) c_int;
pub extern fn stbi_is_hdr_from_memory(buffer: [*c]const stbi_uc, len: c_int) c_int;
pub extern fn stbi_is_hdr(filename: [*c]const u8) c_int;
pub extern fn stbi_is_hdr_from_file(f: [*c]FILE) c_int;
pub extern fn stbi_failure_reason() [*c]const u8;
pub extern fn stbi_image_free(retval_from_stbi_load: ?*anyopaque) void;
pub extern fn stbi_info_from_memory(buffer: [*c]const stbi_uc, len: c_int, x: [*c]c_int, y: [*c]c_int, comp: [*c]c_int) c_int;
pub extern fn stbi_info_from_callbacks(clbk: [*c]const stbi_io_callbacks, user: ?*anyopaque, x: [*c]c_int, y: [*c]c_int, comp: [*c]c_int) c_int;
pub extern fn stbi_is_16_bit_from_memory(buffer: [*c]const stbi_uc, len: c_int) c_int;
pub extern fn stbi_is_16_bit_from_callbacks(clbk: [*c]const stbi_io_callbacks, user: ?*anyopaque) c_int;
pub extern fn stbi_info(filename: [*c]const u8, x: [*c]c_int, y: [*c]c_int, comp: [*c]c_int) c_int;
pub extern fn stbi_info_from_file(f: [*c]FILE, x: [*c]c_int, y: [*c]c_int, comp: [*c]c_int) c_int;
pub extern fn stbi_is_16_bit(filename: [*c]const u8) c_int;
pub extern fn stbi_is_16_bit_from_file(f: [*c]FILE) c_int;
pub extern fn stbi_set_unpremultiply_on_load(flag_true_if_should_unpremultiply: c_int) void;
pub extern fn stbi_convert_iphone_png_to_rgb(flag_true_if_should_convert: c_int) void;
pub extern fn stbi_set_flip_vertically_on_load(flag_true_if_should_flip: c_int) void;
pub extern fn stbi_set_unpremultiply_on_load_thread(flag_true_if_should_unpremultiply: c_int) void;
pub extern fn stbi_convert_iphone_png_to_rgb_thread(flag_true_if_should_convert: c_int) void;
pub extern fn stbi_set_flip_vertically_on_load_thread(flag_true_if_should_flip: c_int) void;
pub extern fn stbi_zlib_decode_malloc_guesssize(buffer: [*c]const u8, len: c_int, initial_size: c_int, outlen: [*c]c_int) [*c]u8;
pub extern fn stbi_zlib_decode_malloc_guesssize_headerflag(buffer: [*c]const u8, len: c_int, initial_size: c_int, outlen: [*c]c_int, parse_header: c_int) [*c]u8;
pub extern fn stbi_zlib_decode_malloc(buffer: [*c]const u8, len: c_int, outlen: [*c]c_int) [*c]u8;
pub extern fn stbi_zlib_decode_buffer(obuffer: [*c]u8, olen: c_int, ibuffer: [*c]const u8, ilen: c_int) c_int;
pub extern fn stbi_zlib_decode_noheader_malloc(buffer: [*c]const u8, len: c_int, outlen: [*c]c_int) [*c]u8;
pub extern fn stbi_zlib_decode_noheader_buffer(obuffer: [*c]u8, olen: c_int, ibuffer: [*c]const u8, ilen: c_int) c_int;
pub const struct_lua_State = opaque {};
pub const lua_State = struct_lua_State;
pub const lua_Number = f64;
pub const lua_Integer = c_longlong;
pub const lua_Unsigned = c_ulonglong;
pub const lua_KContext = isize;
pub const lua_CFunction = ?*const fn (?*lua_State) callconv(.C) c_int;
pub const lua_KFunction = ?*const fn (?*lua_State, c_int, lua_KContext) callconv(.C) c_int;
pub const lua_Reader = ?*const fn (?*lua_State, ?*anyopaque, [*c]usize) callconv(.C) [*c]const u8;
pub const lua_Writer = ?*const fn (?*lua_State, ?*const anyopaque, usize, ?*anyopaque) callconv(.C) c_int;
pub const lua_Alloc = ?*const fn (?*anyopaque, ?*anyopaque, usize, usize) callconv(.C) ?*anyopaque;
pub const lua_WarnFunction = ?*const fn (?*anyopaque, [*c]const u8, c_int) callconv(.C) void;
pub const struct_CallInfo_12 = opaque {};
pub const struct_lua_Debug = extern struct {
    event: c_int = @import("std").mem.zeroes(c_int),
    name: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    namewhat: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    what: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    source: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    srclen: usize = @import("std").mem.zeroes(usize),
    currentline: c_int = @import("std").mem.zeroes(c_int),
    linedefined: c_int = @import("std").mem.zeroes(c_int),
    lastlinedefined: c_int = @import("std").mem.zeroes(c_int),
    nups: u8 = @import("std").mem.zeroes(u8),
    nparams: u8 = @import("std").mem.zeroes(u8),
    isvararg: u8 = @import("std").mem.zeroes(u8),
    istailcall: u8 = @import("std").mem.zeroes(u8),
    ftransfer: c_ushort = @import("std").mem.zeroes(c_ushort),
    ntransfer: c_ushort = @import("std").mem.zeroes(c_ushort),
    short_src: [60]u8 = @import("std").mem.zeroes([60]u8),
    i_ci: ?*struct_CallInfo_12 = @import("std").mem.zeroes(?*struct_CallInfo_12),
};
pub const lua_Debug = struct_lua_Debug;
pub const lua_Hook = ?*const fn (?*lua_State, [*c]lua_Debug) callconv(.C) void;
pub const lua_ident: [*c]const u8 = @extern([*c]const u8, .{
    .name = "lua_ident",
});
pub extern fn lua_newstate(f: lua_Alloc, ud: ?*anyopaque) ?*lua_State;
pub extern fn lua_close(L: ?*lua_State) void;
pub extern fn lua_newthread(L: ?*lua_State) ?*lua_State;
pub extern fn lua_closethread(L: ?*lua_State, from: ?*lua_State) c_int;
pub extern fn lua_resetthread(L: ?*lua_State) c_int;
pub extern fn lua_atpanic(L: ?*lua_State, panicf: lua_CFunction) lua_CFunction;
pub extern fn lua_version(L: ?*lua_State) lua_Number;
pub extern fn lua_absindex(L: ?*lua_State, idx: c_int) c_int;
pub extern fn lua_gettop(L: ?*lua_State) c_int;
pub extern fn lua_settop(L: ?*lua_State, idx: c_int) void;
pub extern fn lua_pushvalue(L: ?*lua_State, idx: c_int) void;
pub extern fn lua_rotate(L: ?*lua_State, idx: c_int, n: c_int) void;
pub extern fn lua_copy(L: ?*lua_State, fromidx: c_int, toidx: c_int) void;
pub extern fn lua_checkstack(L: ?*lua_State, n: c_int) c_int;
pub extern fn lua_xmove(from: ?*lua_State, to: ?*lua_State, n: c_int) void;
pub extern fn lua_isnumber(L: ?*lua_State, idx: c_int) c_int;
pub extern fn lua_isstring(L: ?*lua_State, idx: c_int) c_int;
pub extern fn lua_iscfunction(L: ?*lua_State, idx: c_int) c_int;
pub extern fn lua_isinteger(L: ?*lua_State, idx: c_int) c_int;
pub extern fn lua_isuserdata(L: ?*lua_State, idx: c_int) c_int;
pub extern fn lua_type(L: ?*lua_State, idx: c_int) c_int;
pub extern fn lua_typename(L: ?*lua_State, tp: c_int) [*c]const u8;
pub extern fn lua_tonumberx(L: ?*lua_State, idx: c_int, isnum: [*c]c_int) lua_Number;
pub extern fn lua_tointegerx(L: ?*lua_State, idx: c_int, isnum: [*c]c_int) lua_Integer;
pub extern fn lua_toboolean(L: ?*lua_State, idx: c_int) c_int;
pub extern fn lua_tolstring(L: ?*lua_State, idx: c_int, len: [*c]usize) [*c]const u8;
pub extern fn lua_rawlen(L: ?*lua_State, idx: c_int) lua_Unsigned;
pub extern fn lua_tocfunction(L: ?*lua_State, idx: c_int) lua_CFunction;
pub extern fn lua_touserdata(L: ?*lua_State, idx: c_int) ?*anyopaque;
pub extern fn lua_tothread(L: ?*lua_State, idx: c_int) ?*lua_State;
pub extern fn lua_topointer(L: ?*lua_State, idx: c_int) ?*const anyopaque;
pub extern fn lua_arith(L: ?*lua_State, op: c_int) void;
pub extern fn lua_rawequal(L: ?*lua_State, idx1: c_int, idx2: c_int) c_int;
pub extern fn lua_compare(L: ?*lua_State, idx1: c_int, idx2: c_int, op: c_int) c_int;
pub extern fn lua_pushnil(L: ?*lua_State) void;
pub extern fn lua_pushnumber(L: ?*lua_State, n: lua_Number) void;
pub extern fn lua_pushinteger(L: ?*lua_State, n: lua_Integer) void;
pub extern fn lua_pushlstring(L: ?*lua_State, s: [*c]const u8, len: usize) [*c]const u8;
pub extern fn lua_pushstring(L: ?*lua_State, s: [*c]const u8) [*c]const u8;
pub extern fn lua_pushvfstring(L: ?*lua_State, fmt: [*c]const u8, argp: [*c]struct___va_list_tag_1) [*c]const u8;
pub extern fn lua_pushfstring(L: ?*lua_State, fmt: [*c]const u8, ...) [*c]const u8;
pub extern fn lua_pushcclosure(L: ?*lua_State, @"fn": lua_CFunction, n: c_int) void;
pub extern fn lua_pushboolean(L: ?*lua_State, b: c_int) void;
pub extern fn lua_pushlightuserdata(L: ?*lua_State, p: ?*anyopaque) void;
pub extern fn lua_pushthread(L: ?*lua_State) c_int;
pub extern fn lua_getglobal(L: ?*lua_State, name: [*c]const u8) c_int;
pub extern fn lua_gettable(L: ?*lua_State, idx: c_int) c_int;
pub extern fn lua_getfield(L: ?*lua_State, idx: c_int, k: [*c]const u8) c_int;
pub extern fn lua_geti(L: ?*lua_State, idx: c_int, n: lua_Integer) c_int;
pub extern fn lua_rawget(L: ?*lua_State, idx: c_int) c_int;
pub extern fn lua_rawgeti(L: ?*lua_State, idx: c_int, n: lua_Integer) c_int;
pub extern fn lua_rawgetp(L: ?*lua_State, idx: c_int, p: ?*const anyopaque) c_int;
pub extern fn lua_createtable(L: ?*lua_State, narr: c_int, nrec: c_int) void;
pub extern fn lua_newuserdatauv(L: ?*lua_State, sz: usize, nuvalue: c_int) ?*anyopaque;
pub extern fn lua_getmetatable(L: ?*lua_State, objindex: c_int) c_int;
pub extern fn lua_getiuservalue(L: ?*lua_State, idx: c_int, n: c_int) c_int;
pub extern fn lua_setglobal(L: ?*lua_State, name: [*c]const u8) void;
pub extern fn lua_settable(L: ?*lua_State, idx: c_int) void;
pub extern fn lua_setfield(L: ?*lua_State, idx: c_int, k: [*c]const u8) void;
pub extern fn lua_seti(L: ?*lua_State, idx: c_int, n: lua_Integer) void;
pub extern fn lua_rawset(L: ?*lua_State, idx: c_int) void;
pub extern fn lua_rawseti(L: ?*lua_State, idx: c_int, n: lua_Integer) void;
pub extern fn lua_rawsetp(L: ?*lua_State, idx: c_int, p: ?*const anyopaque) void;
pub extern fn lua_setmetatable(L: ?*lua_State, objindex: c_int) c_int;
pub extern fn lua_setiuservalue(L: ?*lua_State, idx: c_int, n: c_int) c_int;
pub extern fn lua_callk(L: ?*lua_State, nargs: c_int, nresults: c_int, ctx: lua_KContext, k: lua_KFunction) void;
pub extern fn lua_pcallk(L: ?*lua_State, nargs: c_int, nresults: c_int, errfunc: c_int, ctx: lua_KContext, k: lua_KFunction) c_int;
pub extern fn lua_load(L: ?*lua_State, reader: lua_Reader, dt: ?*anyopaque, chunkname: [*c]const u8, mode: [*c]const u8) c_int;
pub extern fn lua_dump(L: ?*lua_State, writer: lua_Writer, data: ?*anyopaque, strip: c_int) c_int;
pub extern fn lua_yieldk(L: ?*lua_State, nresults: c_int, ctx: lua_KContext, k: lua_KFunction) c_int;
pub extern fn lua_resume(L: ?*lua_State, from: ?*lua_State, narg: c_int, nres: [*c]c_int) c_int;
pub extern fn lua_status(L: ?*lua_State) c_int;
pub extern fn lua_isyieldable(L: ?*lua_State) c_int;
pub extern fn lua_setwarnf(L: ?*lua_State, f: lua_WarnFunction, ud: ?*anyopaque) void;
pub extern fn lua_warning(L: ?*lua_State, msg: [*c]const u8, tocont: c_int) void;
pub extern fn lua_gc(L: ?*lua_State, what: c_int, ...) c_int;
pub extern fn lua_error(L: ?*lua_State) c_int;
pub extern fn lua_next(L: ?*lua_State, idx: c_int) c_int;
pub extern fn lua_concat(L: ?*lua_State, n: c_int) void;
pub extern fn lua_len(L: ?*lua_State, idx: c_int) void;
pub extern fn lua_stringtonumber(L: ?*lua_State, s: [*c]const u8) usize;
pub extern fn lua_getallocf(L: ?*lua_State, ud: [*c]?*anyopaque) lua_Alloc;
pub extern fn lua_setallocf(L: ?*lua_State, f: lua_Alloc, ud: ?*anyopaque) void;
pub extern fn lua_toclose(L: ?*lua_State, idx: c_int) void;
pub extern fn lua_closeslot(L: ?*lua_State, idx: c_int) void;
pub extern fn lua_getstack(L: ?*lua_State, level: c_int, ar: [*c]lua_Debug) c_int;
pub extern fn lua_getinfo(L: ?*lua_State, what: [*c]const u8, ar: [*c]lua_Debug) c_int;
pub extern fn lua_getlocal(L: ?*lua_State, ar: [*c]const lua_Debug, n: c_int) [*c]const u8;
pub extern fn lua_setlocal(L: ?*lua_State, ar: [*c]const lua_Debug, n: c_int) [*c]const u8;
pub extern fn lua_getupvalue(L: ?*lua_State, funcindex: c_int, n: c_int) [*c]const u8;
pub extern fn lua_setupvalue(L: ?*lua_State, funcindex: c_int, n: c_int) [*c]const u8;
pub extern fn lua_upvalueid(L: ?*lua_State, fidx: c_int, n: c_int) ?*anyopaque;
pub extern fn lua_upvaluejoin(L: ?*lua_State, fidx1: c_int, n1: c_int, fidx2: c_int, n2: c_int) void;
pub extern fn lua_sethook(L: ?*lua_State, func: lua_Hook, mask: c_int, count: c_int) void;
pub extern fn lua_gethook(L: ?*lua_State) lua_Hook;
pub extern fn lua_gethookmask(L: ?*lua_State) c_int;
pub extern fn lua_gethookcount(L: ?*lua_State) c_int;
pub extern fn lua_setcstacklimit(L: ?*lua_State, limit: c_uint) c_int;
pub extern fn luaopen_base(L: ?*lua_State) c_int;
pub extern fn luaopen_coroutine(L: ?*lua_State) c_int;
pub extern fn luaopen_table(L: ?*lua_State) c_int;
pub extern fn luaopen_io(L: ?*lua_State) c_int;
pub extern fn luaopen_os(L: ?*lua_State) c_int;
pub extern fn luaopen_string(L: ?*lua_State) c_int;
pub extern fn luaopen_utf8(L: ?*lua_State) c_int;
pub extern fn luaopen_math(L: ?*lua_State) c_int;
pub extern fn luaopen_debug(L: ?*lua_State) c_int;
pub extern fn luaopen_package(L: ?*lua_State) c_int;
pub extern fn luaL_openlibs(L: ?*lua_State) void;
const union_unnamed_13 = extern union {
    n: lua_Number,
    u: f64,
    s: ?*anyopaque,
    i: lua_Integer,
    l: c_long,
    b: [1024]u8,
};
pub const struct_luaL_Buffer = extern struct {
    b: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    size: usize = @import("std").mem.zeroes(usize),
    n: usize = @import("std").mem.zeroes(usize),
    L: ?*lua_State = @import("std").mem.zeroes(?*lua_State),
    init: union_unnamed_13 = @import("std").mem.zeroes(union_unnamed_13),
};
pub const luaL_Buffer = struct_luaL_Buffer;
pub const struct_luaL_Reg = extern struct {
    name: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    func: lua_CFunction = @import("std").mem.zeroes(lua_CFunction),
};
pub const luaL_Reg = struct_luaL_Reg;
pub extern fn luaL_checkversion_(L: ?*lua_State, ver: lua_Number, sz: usize) void;
pub extern fn luaL_getmetafield(L: ?*lua_State, obj: c_int, e: [*c]const u8) c_int;
pub extern fn luaL_callmeta(L: ?*lua_State, obj: c_int, e: [*c]const u8) c_int;
pub extern fn luaL_tolstring(L: ?*lua_State, idx: c_int, len: [*c]usize) [*c]const u8;
pub extern fn luaL_argerror(L: ?*lua_State, arg: c_int, extramsg: [*c]const u8) c_int;
pub extern fn luaL_typeerror(L: ?*lua_State, arg: c_int, tname: [*c]const u8) c_int;
pub extern fn luaL_checklstring(L: ?*lua_State, arg: c_int, l: [*c]usize) [*c]const u8;
pub extern fn luaL_optlstring(L: ?*lua_State, arg: c_int, def: [*c]const u8, l: [*c]usize) [*c]const u8;
pub extern fn luaL_checknumber(L: ?*lua_State, arg: c_int) lua_Number;
pub extern fn luaL_optnumber(L: ?*lua_State, arg: c_int, def: lua_Number) lua_Number;
pub extern fn luaL_checkinteger(L: ?*lua_State, arg: c_int) lua_Integer;
pub extern fn luaL_optinteger(L: ?*lua_State, arg: c_int, def: lua_Integer) lua_Integer;
pub extern fn luaL_checkstack(L: ?*lua_State, sz: c_int, msg: [*c]const u8) void;
pub extern fn luaL_checktype(L: ?*lua_State, arg: c_int, t: c_int) void;
pub extern fn luaL_checkany(L: ?*lua_State, arg: c_int) void;
pub extern fn luaL_newmetatable(L: ?*lua_State, tname: [*c]const u8) c_int;
pub extern fn luaL_setmetatable(L: ?*lua_State, tname: [*c]const u8) void;
pub extern fn luaL_testudata(L: ?*lua_State, ud: c_int, tname: [*c]const u8) ?*anyopaque;
pub extern fn luaL_checkudata(L: ?*lua_State, ud: c_int, tname: [*c]const u8) ?*anyopaque;
pub extern fn luaL_where(L: ?*lua_State, lvl: c_int) void;
pub extern fn luaL_error(L: ?*lua_State, fmt: [*c]const u8, ...) c_int;
pub extern fn luaL_checkoption(L: ?*lua_State, arg: c_int, def: [*c]const u8, lst: [*c]const [*c]const u8) c_int;
pub extern fn luaL_fileresult(L: ?*lua_State, stat: c_int, fname: [*c]const u8) c_int;
pub extern fn luaL_execresult(L: ?*lua_State, stat: c_int) c_int;
pub extern fn luaL_ref(L: ?*lua_State, t: c_int) c_int;
pub extern fn luaL_unref(L: ?*lua_State, t: c_int, ref: c_int) void;
pub extern fn luaL_loadfilex(L: ?*lua_State, filename: [*c]const u8, mode: [*c]const u8) c_int;
pub extern fn luaL_loadbufferx(L: ?*lua_State, buff: [*c]const u8, sz: usize, name: [*c]const u8, mode: [*c]const u8) c_int;
pub extern fn luaL_loadstring(L: ?*lua_State, s: [*c]const u8) c_int;
pub extern fn luaL_newstate() ?*lua_State;
pub extern fn luaL_len(L: ?*lua_State, idx: c_int) lua_Integer;
pub extern fn luaL_addgsub(b: [*c]luaL_Buffer, s: [*c]const u8, p: [*c]const u8, r: [*c]const u8) void;
pub extern fn luaL_gsub(L: ?*lua_State, s: [*c]const u8, p: [*c]const u8, r: [*c]const u8) [*c]const u8;
pub extern fn luaL_setfuncs(L: ?*lua_State, l: [*c]const luaL_Reg, nup: c_int) void;
pub extern fn luaL_getsubtable(L: ?*lua_State, idx: c_int, fname: [*c]const u8) c_int;
pub extern fn luaL_traceback(L: ?*lua_State, L1: ?*lua_State, msg: [*c]const u8, level: c_int) void;
pub extern fn luaL_requiref(L: ?*lua_State, modname: [*c]const u8, openf: lua_CFunction, glb: c_int) void;
pub extern fn luaL_buffinit(L: ?*lua_State, B: [*c]luaL_Buffer) void;
pub extern fn luaL_prepbuffsize(B: [*c]luaL_Buffer, sz: usize) [*c]u8;
pub extern fn luaL_addlstring(B: [*c]luaL_Buffer, s: [*c]const u8, l: usize) void;
pub extern fn luaL_addstring(B: [*c]luaL_Buffer, s: [*c]const u8) void;
pub extern fn luaL_addvalue(B: [*c]luaL_Buffer) void;
pub extern fn luaL_pushresult(B: [*c]luaL_Buffer) void;
pub extern fn luaL_pushresultsize(B: [*c]luaL_Buffer, sz: usize) void;
pub extern fn luaL_buffinitsize(L: ?*lua_State, B: [*c]luaL_Buffer, sz: usize) [*c]u8;
pub const struct_luaL_Stream = extern struct {
    f: [*c]FILE = @import("std").mem.zeroes([*c]FILE),
    closef: lua_CFunction = @import("std").mem.zeroes(lua_CFunction),
};
pub const luaL_Stream = struct_luaL_Stream;
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 18);
pub const __clang_minor__ = @as(c_int, 1);
pub const __clang_patchlevel__ = @as(c_int, 8);
pub const __clang_version__ = "18.1.8 ";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __MEMORY_SCOPE_SYSTEM = @as(c_int, 0);
pub const __MEMORY_SCOPE_DEVICE = @as(c_int, 1);
pub const __MEMORY_SCOPE_WRKGRP = @as(c_int, 2);
pub const __MEMORY_SCOPE_WVFRNT = @as(c_int, 3);
pub const __MEMORY_SCOPE_SINGLE = @as(c_int, 4);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __FPCLASS_SNAN = @as(c_int, 0x0001);
pub const __FPCLASS_QNAN = @as(c_int, 0x0002);
pub const __FPCLASS_NEGINF = @as(c_int, 0x0004);
pub const __FPCLASS_NEGNORMAL = @as(c_int, 0x0008);
pub const __FPCLASS_NEGSUBNORMAL = @as(c_int, 0x0010);
pub const __FPCLASS_NEGZERO = @as(c_int, 0x0020);
pub const __FPCLASS_POSZERO = @as(c_int, 0x0040);
pub const __FPCLASS_POSSUBNORMAL = @as(c_int, 0x0080);
pub const __FPCLASS_POSNORMAL = @as(c_int, 0x0100);
pub const __FPCLASS_POSINF = @as(c_int, 0x0200);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 18.1.8";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-32";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const _LP64 = @as(c_int, 1);
pub const __LP64__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 64);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 8388608, .decimal);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 32);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 32);
pub const __INTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __SIZE_WIDTH__ = @as(c_int, 64);
pub const __UINTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);
pub const __INTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTPTR_WIDTH__ = @as(c_int, 64);
pub const __UINTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTPTR_WIDTH__ = @as(c_int, 64);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 8);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 16);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 8);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);
pub const __SIZEOF_WINT_T__ = @as(c_int, 4);
pub const __SIZEOF_INT128__ = @as(c_int, 16);
pub const __INTMAX_TYPE__ = c_long;
pub const __INTMAX_FMTd__ = "ld";
pub const __INTMAX_FMTi__ = "li";
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`");
// (no file):95:9
pub const __UINTMAX_TYPE__ = c_ulong;
pub const __UINTMAX_FMTo__ = "lo";
pub const __UINTMAX_FMTu__ = "lu";
pub const __UINTMAX_FMTx__ = "lx";
pub const __UINTMAX_FMTX__ = "lX";
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`");
// (no file):101:9
pub const __PTRDIFF_TYPE__ = c_long;
pub const __PTRDIFF_FMTd__ = "ld";
pub const __PTRDIFF_FMTi__ = "li";
pub const __INTPTR_TYPE__ = c_long;
pub const __INTPTR_FMTd__ = "ld";
pub const __INTPTR_FMTi__ = "li";
pub const __SIZE_TYPE__ = c_ulong;
pub const __SIZE_FMTo__ = "lo";
pub const __SIZE_FMTu__ = "lu";
pub const __SIZE_FMTx__ = "lx";
pub const __SIZE_FMTX__ = "lX";
pub const __WCHAR_TYPE__ = c_int;
pub const __WINT_TYPE__ = c_uint;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_ulong;
pub const __UINTPTR_FMTo__ = "lo";
pub const __UINTPTR_FMTu__ = "lu";
pub const __UINTPTR_FMTx__ = "lx";
pub const __UINTPTR_FMTX__ = "lX";
pub const __FLT16_DENORM_MIN__ = @as(f16, 5.9604644775390625e-8);
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_EPSILON__ = @as(f16, 9.765625e-4);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT16_MIN__ = @as(f16, 6.103515625e-5);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 18);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 21);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 64);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 4932);
pub const __LDBL_MAX_EXP__ = @as(c_int, 16384);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 4931);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 16381);
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const __POINTER_WIDTH__ = @as(c_int, 64);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 16);
pub const __WINT_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_long;
pub const __INT64_FMTd__ = "ld";
pub const __INT64_FMTi__ = "li";
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`");
// (no file):198:9
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`");
// (no file):220:9
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulong;
pub const __UINT64_FMTo__ = "lo";
pub const __UINT64_FMTu__ = "lu";
pub const __UINT64_FMTx__ = "lx";
pub const __UINT64_FMTX__ = "lX";
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`");
// (no file):228:9
pub const __UINT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __INT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_long;
pub const __INT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "ld";
pub const __INT_LEAST64_FMTi__ = "li";
pub const __UINT_LEAST64_TYPE__ = c_ulong;
pub const __UINT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_LEAST64_FMTo__ = "lo";
pub const __UINT_LEAST64_FMTu__ = "lu";
pub const __UINT_LEAST64_FMTx__ = "lx";
pub const __UINT_LEAST64_FMTX__ = "lX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_long;
pub const __INT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "ld";
pub const __INT_FAST64_FMTi__ = "li";
pub const __UINT_FAST64_TYPE__ = c_ulong;
pub const __UINT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_FAST64_FMTo__ = "lo";
pub const __UINT_FAST64_FMTu__ = "lu";
pub const __UINT_FAST64_FMTx__ = "lx";
pub const __UINT_FAST64_FMTX__ = "lX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __PIC__ = @as(c_int, 2);
pub const __pic__ = @as(c_int, 2);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __SSP_STRONG__ = @as(c_int, 2);
pub const __ELF__ = @as(c_int, 1);
pub const __GCC_ASM_FLAG_OUTPUTS__ = @as(c_int, 1);
pub const __code_model_small__ = @as(c_int, 1);
pub const __amd64__ = @as(c_int, 1);
pub const __amd64 = @as(c_int, 1);
pub const __x86_64 = @as(c_int, 1);
pub const __x86_64__ = @as(c_int, 1);
pub const __SEG_GS = @as(c_int, 1);
pub const __SEG_FS = @as(c_int, 1);
pub const __seg_gs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):358:9
pub const __seg_fs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):359:9
pub const __znver3 = @as(c_int, 1);
pub const __znver3__ = @as(c_int, 1);
pub const __tune_znver3__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __NO_MATH_INLINES = @as(c_int, 1);
pub const __AES__ = @as(c_int, 1);
pub const __VAES__ = @as(c_int, 1);
pub const __PCLMUL__ = @as(c_int, 1);
pub const __VPCLMULQDQ__ = @as(c_int, 1);
pub const __LAHF_SAHF__ = @as(c_int, 1);
pub const __LZCNT__ = @as(c_int, 1);
pub const __RDRND__ = @as(c_int, 1);
pub const __FSGSBASE__ = @as(c_int, 1);
pub const __BMI__ = @as(c_int, 1);
pub const __BMI2__ = @as(c_int, 1);
pub const __POPCNT__ = @as(c_int, 1);
pub const __PRFCHW__ = @as(c_int, 1);
pub const __RDSEED__ = @as(c_int, 1);
pub const __ADX__ = @as(c_int, 1);
pub const __MWAITX__ = @as(c_int, 1);
pub const __MOVBE__ = @as(c_int, 1);
pub const __SSE4A__ = @as(c_int, 1);
pub const __FMA__ = @as(c_int, 1);
pub const __F16C__ = @as(c_int, 1);
pub const __SHA__ = @as(c_int, 1);
pub const __FXSR__ = @as(c_int, 1);
pub const __XSAVE__ = @as(c_int, 1);
pub const __XSAVEOPT__ = @as(c_int, 1);
pub const __XSAVEC__ = @as(c_int, 1);
pub const __XSAVES__ = @as(c_int, 1);
pub const __PKU__ = @as(c_int, 1);
pub const __CLFLUSHOPT__ = @as(c_int, 1);
pub const __CLWB__ = @as(c_int, 1);
pub const __WBNOINVD__ = @as(c_int, 1);
pub const __SHSTK__ = @as(c_int, 1);
pub const __CLZERO__ = @as(c_int, 1);
pub const __RDPID__ = @as(c_int, 1);
pub const __RDPRU__ = @as(c_int, 1);
pub const __INVPCID__ = @as(c_int, 1);
pub const __CRC32__ = @as(c_int, 1);
pub const __AVX2__ = @as(c_int, 1);
pub const __AVX__ = @as(c_int, 1);
pub const __SSE4_2__ = @as(c_int, 1);
pub const __SSE4_1__ = @as(c_int, 1);
pub const __SSSE3__ = @as(c_int, 1);
pub const __SSE3__ = @as(c_int, 1);
pub const __SSE2__ = @as(c_int, 1);
pub const __SSE2_MATH__ = @as(c_int, 1);
pub const __SSE__ = @as(c_int, 1);
pub const __SSE_MATH__ = @as(c_int, 1);
pub const __MMX__ = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = @as(c_int, 1);
pub const __SIZEOF_FLOAT128__ = @as(c_int, 16);
pub const unix = @as(c_int, 1);
pub const __unix = @as(c_int, 1);
pub const __unix__ = @as(c_int, 1);
pub const linux = @as(c_int, 1);
pub const __linux = @as(c_int, 1);
pub const __linux__ = @as(c_int, 1);
pub const __gnu_linux__ = @as(c_int, 1);
pub const __FLOAT128__ = @as(c_int, 1);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const _LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS = @as(c_int, 1);
pub const _LIBCXXABI_DISABLE_VISIBILITY_ANNOTATIONS = @as(c_int, 1);
pub const _LIBCPP_HAS_NO_VENDOR_AVAILABILITY_ANNOTATIONS = @as(c_int, 1);
pub const _LIBCPP_PSTL_CPU_BACKEND_SERIAL = @as(c_int, 1);
pub const _LIBCPP_ABI_VERSION = @as(c_int, 1);
pub const _LIBCPP_ABI_NAMESPACE = @compileError("unable to translate macro: undefined identifier `__1`");
// (no file):436:9
pub const _LIBCPP_HARDENING_MODE = @compileError("unable to translate macro: undefined identifier `_LIBCPP_HARDENING_MODE_DEBUG`");
// (no file):437:9
pub const __GLIBC_MINOR__ = @as(c_int, 39);
pub const _DEBUG = @as(c_int, 1);
pub const __GCC_HAVE_DWARF2_CFI_ASM = @as(c_int, 1);
pub const SDL_h_ = "";
pub const SDL_stdinc_h_ = "";
pub const SDL_platform_defines_h_ = "";
pub const SDL_PLATFORM_LINUX = @as(c_int, 1);
pub const SDL_PLATFORM_UNIX = @as(c_int, 1);
pub const _LIBCPP_INTTYPES_H = "";
pub const _LIBCPP___CONFIG = "";
pub const _LIBCPP_COMPILER_CLANG_BASED = "";
pub const _LIBCPP_CLANG_VER = (__clang_major__ * @as(c_int, 100)) + __clang_minor__;
pub const __CLANG_INTTYPES_H = "";
pub const _INTTYPES_H = @as(c_int, 1);
pub const _FEATURES_H = @as(c_int, 1);
pub const __KERNEL_STRICT_NAMES = "";
pub inline fn __GNUC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GNUC__ << @as(c_int, 16)) + __GNUC_MINOR__) >= ((maj << @as(c_int, 16)) + min)) {
    _ = &maj;
    _ = &min;
    return ((__GNUC__ << @as(c_int, 16)) + __GNUC_MINOR__) >= ((maj << @as(c_int, 16)) + min);
}
pub inline fn __glibc_clang_prereq(maj: anytype, min: anytype) @TypeOf(((__clang_major__ << @as(c_int, 16)) + __clang_minor__) >= ((maj << @as(c_int, 16)) + min)) {
    _ = &maj;
    _ = &min;
    return ((__clang_major__ << @as(c_int, 16)) + __clang_minor__) >= ((maj << @as(c_int, 16)) + min);
}
pub const __GLIBC_USE = @compileError("unable to translate macro: undefined identifier `__GLIBC_USE_`");
// /usr/include/features.h:188:9
pub const _DEFAULT_SOURCE = @as(c_int, 1);
pub const __GLIBC_USE_ISOC2X = @as(c_int, 0);
pub const __USE_ISOC11 = @as(c_int, 1);
pub const __USE_ISOC99 = @as(c_int, 1);
pub const __USE_ISOC95 = @as(c_int, 1);
pub const __USE_POSIX_IMPLICITLY = @as(c_int, 1);
pub const _POSIX_SOURCE = @as(c_int, 1);
pub const _POSIX_C_SOURCE = @as(c_long, 200809);
pub const __USE_POSIX = @as(c_int, 1);
pub const __USE_POSIX2 = @as(c_int, 1);
pub const __USE_POSIX199309 = @as(c_int, 1);
pub const __USE_POSIX199506 = @as(c_int, 1);
pub const __USE_XOPEN2K = @as(c_int, 1);
pub const __USE_XOPEN2K8 = @as(c_int, 1);
pub const _ATFILE_SOURCE = @as(c_int, 1);
pub const __WORDSIZE = @as(c_int, 64);
pub const __WORDSIZE_TIME64_COMPAT32 = @as(c_int, 1);
pub const __SYSCALL_WORDSIZE = @as(c_int, 64);
pub const __TIMESIZE = __WORDSIZE;
pub const __USE_MISC = @as(c_int, 1);
pub const __USE_ATFILE = @as(c_int, 1);
pub const __USE_FORTIFY_LEVEL = @as(c_int, 0);
pub const __GLIBC_USE_DEPRECATED_GETS = @as(c_int, 0);
pub const __GLIBC_USE_DEPRECATED_SCANF = @as(c_int, 0);
pub const __GLIBC_USE_C2X_STRTOL = @as(c_int, 0);
pub const _STDC_PREDEF_H = @as(c_int, 1);
pub const __STDC_IEC_559__ = @as(c_int, 1);
pub const __STDC_IEC_60559_BFP__ = @as(c_long, 201404);
pub const __STDC_IEC_559_COMPLEX__ = @as(c_int, 1);
pub const __STDC_IEC_60559_COMPLEX__ = @as(c_long, 201404);
pub const __STDC_ISO_10646__ = @as(c_long, 201706);
pub const __GNU_LIBRARY__ = @as(c_int, 6);
pub const __GLIBC__ = @as(c_int, 2);
pub inline fn __GLIBC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GLIBC__ << @as(c_int, 16)) + __GLIBC_MINOR__) >= ((maj << @as(c_int, 16)) + min)) {
    _ = &maj;
    _ = &min;
    return ((__GLIBC__ << @as(c_int, 16)) + __GLIBC_MINOR__) >= ((maj << @as(c_int, 16)) + min);
}
pub const _SYS_CDEFS_H = @as(c_int, 1);
pub const __glibc_has_attribute = @compileError("unable to translate macro: undefined identifier `__has_attribute`");
// /usr/include/sys/cdefs.h:45:10
pub inline fn __glibc_has_builtin(name: anytype) @TypeOf(__has_builtin(name)) {
    _ = &name;
    return __has_builtin(name);
}
pub const __glibc_has_extension = @compileError("unable to translate macro: undefined identifier `__has_extension`");
// /usr/include/sys/cdefs.h:55:10
pub const __LEAF = "";
pub const __LEAF_ATTR = "";
pub const __THROW = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/sys/cdefs.h:79:11
pub const __THROWNL = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/sys/cdefs.h:80:11
pub const __NTH = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/sys/cdefs.h:81:11
pub const __NTHNL = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/sys/cdefs.h:82:11
pub const __COLD = @compileError("unable to translate macro: undefined identifier `__cold__`");
// /usr/include/sys/cdefs.h:102:11
pub inline fn __P(args: anytype) @TypeOf(args) {
    _ = &args;
    return args;
}
pub inline fn __PMT(args: anytype) @TypeOf(args) {
    _ = &args;
    return args;
}
pub const __CONCAT = @compileError("unable to translate C expr: unexpected token '##'");
// /usr/include/sys/cdefs.h:131:9
pub const __STRING = @compileError("unable to translate C expr: unexpected token '#'");
// /usr/include/sys/cdefs.h:132:9
pub const __ptr_t = ?*anyopaque;
pub const __BEGIN_DECLS = "";
pub const __END_DECLS = "";
pub inline fn __bos(ptr: anytype) @TypeOf(__builtin_object_size(ptr, __USE_FORTIFY_LEVEL > @as(c_int, 1))) {
    _ = &ptr;
    return __builtin_object_size(ptr, __USE_FORTIFY_LEVEL > @as(c_int, 1));
}
pub inline fn __bos0(ptr: anytype) @TypeOf(__builtin_object_size(ptr, @as(c_int, 0))) {
    _ = &ptr;
    return __builtin_object_size(ptr, @as(c_int, 0));
}
pub inline fn __glibc_objsize0(__o: anytype) @TypeOf(__bos0(__o)) {
    _ = &__o;
    return __bos0(__o);
}
pub inline fn __glibc_objsize(__o: anytype) @TypeOf(__bos(__o)) {
    _ = &__o;
    return __bos(__o);
}
pub const __warnattr = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:216:10
pub const __errordecl = @compileError("unable to translate C expr: unexpected token 'extern'");
// /usr/include/sys/cdefs.h:217:10
pub const __flexarr = @compileError("unable to translate C expr: unexpected token '['");
// /usr/include/sys/cdefs.h:225:10
pub const __glibc_c99_flexarr_available = @as(c_int, 1);
pub const __REDIRECT = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/include/sys/cdefs.h:256:10
pub const __REDIRECT_NTH = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/include/sys/cdefs.h:263:11
pub const __REDIRECT_NTHNL = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/include/sys/cdefs.h:265:11
pub const __ASMNAME = @compileError("unable to translate C expr: unexpected token ','");
// /usr/include/sys/cdefs.h:268:10
pub inline fn __ASMNAME2(prefix: anytype, cname: anytype) @TypeOf(__STRING(prefix) ++ cname) {
    _ = &prefix;
    _ = &cname;
    return __STRING(prefix) ++ cname;
}
pub const __REDIRECT_FORTIFY = __REDIRECT;
pub const __REDIRECT_FORTIFY_NTH = __REDIRECT_NTH;
pub const __attribute_malloc__ = @compileError("unable to translate macro: undefined identifier `__malloc__`");
// /usr/include/sys/cdefs.h:298:10
pub const __attribute_alloc_size__ = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:309:10
pub const __attribute_alloc_align__ = @compileError("unable to translate macro: undefined identifier `__alloc_align__`");
// /usr/include/sys/cdefs.h:315:10
pub const __attribute_pure__ = @compileError("unable to translate macro: undefined identifier `__pure__`");
// /usr/include/sys/cdefs.h:325:10
pub const __attribute_const__ = @compileError("unable to translate C expr: unexpected token '__attribute__'");
// /usr/include/sys/cdefs.h:332:10
pub const __attribute_maybe_unused__ = @compileError("unable to translate macro: undefined identifier `__unused__`");
// /usr/include/sys/cdefs.h:338:10
pub const __attribute_used__ = @compileError("unable to translate macro: undefined identifier `__used__`");
// /usr/include/sys/cdefs.h:347:10
pub const __attribute_noinline__ = @compileError("unable to translate macro: undefined identifier `__noinline__`");
// /usr/include/sys/cdefs.h:348:10
pub const __attribute_deprecated__ = @compileError("unable to translate macro: undefined identifier `__deprecated__`");
// /usr/include/sys/cdefs.h:356:10
pub const __attribute_deprecated_msg__ = @compileError("unable to translate macro: undefined identifier `__deprecated__`");
// /usr/include/sys/cdefs.h:366:10
pub const __attribute_format_arg__ = @compileError("unable to translate macro: undefined identifier `__format_arg__`");
// /usr/include/sys/cdefs.h:379:10
pub const __attribute_format_strfmon__ = @compileError("unable to translate macro: undefined identifier `__format__`");
// /usr/include/sys/cdefs.h:389:10
pub const __attribute_nonnull__ = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /usr/include/sys/cdefs.h:401:11
pub inline fn __nonnull(params: anytype) @TypeOf(__attribute_nonnull__(params)) {
    _ = &params;
    return __attribute_nonnull__(params);
}
pub const __returns_nonnull = @compileError("unable to translate macro: undefined identifier `__returns_nonnull__`");
// /usr/include/sys/cdefs.h:414:10
pub const __attribute_warn_unused_result__ = @compileError("unable to translate macro: undefined identifier `__warn_unused_result__`");
// /usr/include/sys/cdefs.h:423:10
pub const __wur = "";
pub const __always_inline = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /usr/include/sys/cdefs.h:441:10
pub const __attribute_artificial__ = @compileError("unable to translate macro: undefined identifier `__artificial__`");
// /usr/include/sys/cdefs.h:450:10
pub const __extern_inline = @compileError("unable to translate macro: undefined identifier `__gnu_inline__`");
// /usr/include/sys/cdefs.h:468:11
pub const __extern_always_inline = @compileError("unable to translate macro: undefined identifier `__gnu_inline__`");
// /usr/include/sys/cdefs.h:469:11
pub const __fortify_function = __extern_always_inline ++ __attribute_artificial__;
pub const __restrict_arr = @compileError("unable to translate C expr: unexpected token '__restrict'");
// /usr/include/sys/cdefs.h:512:10
pub inline fn __glibc_unlikely(cond: anytype) @TypeOf(__builtin_expect(cond, @as(c_int, 0))) {
    _ = &cond;
    return __builtin_expect(cond, @as(c_int, 0));
}
pub inline fn __glibc_likely(cond: anytype) @TypeOf(__builtin_expect(cond, @as(c_int, 1))) {
    _ = &cond;
    return __builtin_expect(cond, @as(c_int, 1));
}
pub const __attribute_nonstring__ = "";
pub const __attribute_copy__ = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:561:10
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = @as(c_int, 0);
pub inline fn __LDBL_REDIR1(name: anytype, proto: anytype, alias: anytype) @TypeOf(name ++ proto) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return name ++ proto;
}
pub inline fn __LDBL_REDIR(name: anytype, proto: anytype) @TypeOf(name ++ proto) {
    _ = &name;
    _ = &proto;
    return name ++ proto;
}
pub inline fn __LDBL_REDIR1_NTH(name: anytype, proto: anytype, alias: anytype) @TypeOf(name ++ proto ++ __THROW) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return name ++ proto ++ __THROW;
}
pub inline fn __LDBL_REDIR_NTH(name: anytype, proto: anytype) @TypeOf(name ++ proto ++ __THROW) {
    _ = &name;
    _ = &proto;
    return name ++ proto ++ __THROW;
}
pub const __LDBL_REDIR2_DECL = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:638:10
pub const __LDBL_REDIR_DECL = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:639:10
pub inline fn __REDIRECT_LDBL(name: anytype, proto: anytype, alias: anytype) @TypeOf(__REDIRECT(name, proto, alias)) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return __REDIRECT(name, proto, alias);
}
pub inline fn __REDIRECT_NTH_LDBL(name: anytype, proto: anytype, alias: anytype) @TypeOf(__REDIRECT_NTH(name, proto, alias)) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return __REDIRECT_NTH(name, proto, alias);
}
pub const __glibc_macro_warning1 = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /usr/include/sys/cdefs.h:653:10
pub const __glibc_macro_warning = @compileError("unable to translate macro: undefined identifier `GCC`");
// /usr/include/sys/cdefs.h:654:10
pub const __HAVE_GENERIC_SELECTION = @as(c_int, 1);
pub const __fortified_attr_access = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:699:11
pub const __attr_access = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:700:11
pub const __attr_access_none = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:701:11
pub const __attr_dealloc = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:711:10
pub const __attr_dealloc_free = "";
pub const __attribute_returns_twice__ = @compileError("unable to translate macro: undefined identifier `__returns_twice__`");
// /usr/include/sys/cdefs.h:718:10
pub const __stub___compat_bdflush = "";
pub const __stub_chflags = "";
pub const __stub_fchflags = "";
pub const __stub_gtty = "";
pub const __stub_revoke = "";
pub const __stub_setlogin = "";
pub const __stub_sigreturn = "";
pub const __stub_stty = "";
pub const _LIBCPP_STDINT_H = "";
pub const __CLANG_STDINT_H = "";
pub const _STDINT_H = @as(c_int, 1);
pub const __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION = "";
pub const __GLIBC_USE_LIB_EXT2 = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_BFP_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_TYPES_EXT = @as(c_int, 0);
pub const _BITS_TYPES_H = @as(c_int, 1);
pub const __S16_TYPE = c_short;
pub const __U16_TYPE = c_ushort;
pub const __S32_TYPE = c_int;
pub const __U32_TYPE = c_uint;
pub const __SLONGWORD_TYPE = c_long;
pub const __ULONGWORD_TYPE = c_ulong;
pub const __SQUAD_TYPE = c_long;
pub const __UQUAD_TYPE = c_ulong;
pub const __SWORD_TYPE = c_long;
pub const __UWORD_TYPE = c_ulong;
pub const __SLONG32_TYPE = c_int;
pub const __ULONG32_TYPE = c_uint;
pub const __S64_TYPE = c_long;
pub const __U64_TYPE = c_ulong;
pub const __STD_TYPE = @compileError("unable to translate C expr: unexpected token 'typedef'");
// /usr/include/bits/types.h:137:10
pub const _BITS_TYPESIZES_H = @as(c_int, 1);
pub const __SYSCALL_SLONG_TYPE = __SLONGWORD_TYPE;
pub const __SYSCALL_ULONG_TYPE = __ULONGWORD_TYPE;
pub const __DEV_T_TYPE = __UQUAD_TYPE;
pub const __UID_T_TYPE = __U32_TYPE;
pub const __GID_T_TYPE = __U32_TYPE;
pub const __INO_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __INO64_T_TYPE = __UQUAD_TYPE;
pub const __MODE_T_TYPE = __U32_TYPE;
pub const __NLINK_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSWORD_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __OFF_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __OFF64_T_TYPE = __SQUAD_TYPE;
pub const __PID_T_TYPE = __S32_TYPE;
pub const __RLIM_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __RLIM64_T_TYPE = __UQUAD_TYPE;
pub const __BLKCNT_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __BLKCNT64_T_TYPE = __SQUAD_TYPE;
pub const __FSBLKCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSBLKCNT64_T_TYPE = __UQUAD_TYPE;
pub const __FSFILCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSFILCNT64_T_TYPE = __UQUAD_TYPE;
pub const __ID_T_TYPE = __U32_TYPE;
pub const __CLOCK_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __TIME_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __USECONDS_T_TYPE = __U32_TYPE;
pub const __SUSECONDS_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __SUSECONDS64_T_TYPE = __SQUAD_TYPE;
pub const __DADDR_T_TYPE = __S32_TYPE;
pub const __KEY_T_TYPE = __S32_TYPE;
pub const __CLOCKID_T_TYPE = __S32_TYPE;
pub const __TIMER_T_TYPE = ?*anyopaque;
pub const __BLKSIZE_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __FSID_T_TYPE = @compileError("unable to translate macro: undefined identifier `__val`");
// /usr/include/bits/typesizes.h:73:9
pub const __SSIZE_T_TYPE = __SWORD_TYPE;
pub const __CPU_MASK_TYPE = __SYSCALL_ULONG_TYPE;
pub const __OFF_T_MATCHES_OFF64_T = @as(c_int, 1);
pub const __INO_T_MATCHES_INO64_T = @as(c_int, 1);
pub const __RLIM_T_MATCHES_RLIM64_T = @as(c_int, 1);
pub const __STATFS_MATCHES_STATFS64 = @as(c_int, 1);
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = @as(c_int, 1);
pub const __FD_SETSIZE = @as(c_int, 1024);
pub const _BITS_TIME64_H = @as(c_int, 1);
pub const __TIME64_T_TYPE = __TIME_T_TYPE;
pub const _BITS_WCHAR_H = @as(c_int, 1);
pub const __WCHAR_MAX = __WCHAR_MAX__;
pub const __WCHAR_MIN = -__WCHAR_MAX - @as(c_int, 1);
pub const _BITS_STDINT_INTN_H = @as(c_int, 1);
pub const _BITS_STDINT_UINTN_H = @as(c_int, 1);
pub const _BITS_STDINT_LEAST_H = @as(c_int, 1);
pub const __intptr_t_defined = "";
pub const __INT64_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub const __UINT64_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const INT8_MIN = -@as(c_int, 128);
pub const INT16_MIN = -@as(c_int, 32767) - @as(c_int, 1);
pub const INT32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const INT64_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INT8_MAX = @as(c_int, 127);
pub const INT16_MAX = @as(c_int, 32767);
pub const INT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const INT64_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINT8_MAX = @as(c_int, 255);
pub const UINT16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const UINT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const UINT64_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INT_LEAST8_MIN = -@as(c_int, 128);
pub const INT_LEAST16_MIN = -@as(c_int, 32767) - @as(c_int, 1);
pub const INT_LEAST32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const INT_LEAST64_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INT_LEAST8_MAX = @as(c_int, 127);
pub const INT_LEAST16_MAX = @as(c_int, 32767);
pub const INT_LEAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const INT_LEAST64_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINT_LEAST8_MAX = @as(c_int, 255);
pub const UINT_LEAST16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const UINT_LEAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const UINT_LEAST64_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INT_FAST8_MIN = -@as(c_int, 128);
pub const INT_FAST16_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const INT_FAST32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const INT_FAST64_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INT_FAST8_MAX = @as(c_int, 127);
pub const INT_FAST16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const INT_FAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const INT_FAST64_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINT_FAST8_MAX = @as(c_int, 255);
pub const UINT_FAST16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const UINT_FAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const UINT_FAST64_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INTPTR_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const INTPTR_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const UINTPTR_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const INTMAX_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INTMAX_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINTMAX_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const PTRDIFF_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const PTRDIFF_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const SIG_ATOMIC_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const SIG_ATOMIC_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const SIZE_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const WCHAR_MIN = __WCHAR_MIN;
pub const WCHAR_MAX = __WCHAR_MAX;
pub const WINT_MIN = @as(c_uint, 0);
pub const WINT_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub inline fn INT8_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub inline fn INT16_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub inline fn INT32_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const INT64_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub inline fn UINT8_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub inline fn UINT16_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const UINT32_C = @import("std").zig.c_translation.Macros.U_SUFFIX;
pub const UINT64_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const INTMAX_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub const UINTMAX_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const ____gwchar_t_defined = @as(c_int, 1);
pub const __PRI64_PREFIX = "l";
pub const __PRIPTR_PREFIX = "l";
pub const PRId8 = "d";
pub const PRId16 = "d";
pub const PRId32 = "d";
pub const PRId64 = __PRI64_PREFIX ++ "d";
pub const PRIdLEAST8 = "d";
pub const PRIdLEAST16 = "d";
pub const PRIdLEAST32 = "d";
pub const PRIdLEAST64 = __PRI64_PREFIX ++ "d";
pub const PRIdFAST8 = "d";
pub const PRIdFAST16 = __PRIPTR_PREFIX ++ "d";
pub const PRIdFAST32 = __PRIPTR_PREFIX ++ "d";
pub const PRIdFAST64 = __PRI64_PREFIX ++ "d";
pub const PRIi8 = "i";
pub const PRIi16 = "i";
pub const PRIi32 = "i";
pub const PRIi64 = __PRI64_PREFIX ++ "i";
pub const PRIiLEAST8 = "i";
pub const PRIiLEAST16 = "i";
pub const PRIiLEAST32 = "i";
pub const PRIiLEAST64 = __PRI64_PREFIX ++ "i";
pub const PRIiFAST8 = "i";
pub const PRIiFAST16 = __PRIPTR_PREFIX ++ "i";
pub const PRIiFAST32 = __PRIPTR_PREFIX ++ "i";
pub const PRIiFAST64 = __PRI64_PREFIX ++ "i";
pub const PRIo8 = "o";
pub const PRIo16 = "o";
pub const PRIo32 = "o";
pub const PRIo64 = __PRI64_PREFIX ++ "o";
pub const PRIoLEAST8 = "o";
pub const PRIoLEAST16 = "o";
pub const PRIoLEAST32 = "o";
pub const PRIoLEAST64 = __PRI64_PREFIX ++ "o";
pub const PRIoFAST8 = "o";
pub const PRIoFAST16 = __PRIPTR_PREFIX ++ "o";
pub const PRIoFAST32 = __PRIPTR_PREFIX ++ "o";
pub const PRIoFAST64 = __PRI64_PREFIX ++ "o";
pub const PRIu8 = "u";
pub const PRIu16 = "u";
pub const PRIu32 = "u";
pub const PRIu64 = __PRI64_PREFIX ++ "u";
pub const PRIuLEAST8 = "u";
pub const PRIuLEAST16 = "u";
pub const PRIuLEAST32 = "u";
pub const PRIuLEAST64 = __PRI64_PREFIX ++ "u";
pub const PRIuFAST8 = "u";
pub const PRIuFAST16 = __PRIPTR_PREFIX ++ "u";
pub const PRIuFAST32 = __PRIPTR_PREFIX ++ "u";
pub const PRIuFAST64 = __PRI64_PREFIX ++ "u";
pub const PRIx8 = "x";
pub const PRIx16 = "x";
pub const PRIx32 = "x";
pub const PRIx64 = __PRI64_PREFIX ++ "x";
pub const PRIxLEAST8 = "x";
pub const PRIxLEAST16 = "x";
pub const PRIxLEAST32 = "x";
pub const PRIxLEAST64 = __PRI64_PREFIX ++ "x";
pub const PRIxFAST8 = "x";
pub const PRIxFAST16 = __PRIPTR_PREFIX ++ "x";
pub const PRIxFAST32 = __PRIPTR_PREFIX ++ "x";
pub const PRIxFAST64 = __PRI64_PREFIX ++ "x";
pub const PRIX8 = "X";
pub const PRIX16 = "X";
pub const PRIX32 = "X";
pub const PRIX64 = __PRI64_PREFIX ++ "X";
pub const PRIXLEAST8 = "X";
pub const PRIXLEAST16 = "X";
pub const PRIXLEAST32 = "X";
pub const PRIXLEAST64 = __PRI64_PREFIX ++ "X";
pub const PRIXFAST8 = "X";
pub const PRIXFAST16 = __PRIPTR_PREFIX ++ "X";
pub const PRIXFAST32 = __PRIPTR_PREFIX ++ "X";
pub const PRIXFAST64 = __PRI64_PREFIX ++ "X";
pub const PRIdMAX = __PRI64_PREFIX ++ "d";
pub const PRIiMAX = __PRI64_PREFIX ++ "i";
pub const PRIoMAX = __PRI64_PREFIX ++ "o";
pub const PRIuMAX = __PRI64_PREFIX ++ "u";
pub const PRIxMAX = __PRI64_PREFIX ++ "x";
pub const PRIXMAX = __PRI64_PREFIX ++ "X";
pub const PRIdPTR = __PRIPTR_PREFIX ++ "d";
pub const PRIiPTR = __PRIPTR_PREFIX ++ "i";
pub const PRIoPTR = __PRIPTR_PREFIX ++ "o";
pub const PRIuPTR = __PRIPTR_PREFIX ++ "u";
pub const PRIxPTR = __PRIPTR_PREFIX ++ "x";
pub const PRIXPTR = __PRIPTR_PREFIX ++ "X";
pub const SCNd8 = "hhd";
pub const SCNd16 = "hd";
pub const SCNd32 = "d";
pub const SCNd64 = __PRI64_PREFIX ++ "d";
pub const SCNdLEAST8 = "hhd";
pub const SCNdLEAST16 = "hd";
pub const SCNdLEAST32 = "d";
pub const SCNdLEAST64 = __PRI64_PREFIX ++ "d";
pub const SCNdFAST8 = "hhd";
pub const SCNdFAST16 = __PRIPTR_PREFIX ++ "d";
pub const SCNdFAST32 = __PRIPTR_PREFIX ++ "d";
pub const SCNdFAST64 = __PRI64_PREFIX ++ "d";
pub const SCNi8 = "hhi";
pub const SCNi16 = "hi";
pub const SCNi32 = "i";
pub const SCNi64 = __PRI64_PREFIX ++ "i";
pub const SCNiLEAST8 = "hhi";
pub const SCNiLEAST16 = "hi";
pub const SCNiLEAST32 = "i";
pub const SCNiLEAST64 = __PRI64_PREFIX ++ "i";
pub const SCNiFAST8 = "hhi";
pub const SCNiFAST16 = __PRIPTR_PREFIX ++ "i";
pub const SCNiFAST32 = __PRIPTR_PREFIX ++ "i";
pub const SCNiFAST64 = __PRI64_PREFIX ++ "i";
pub const SCNu8 = "hhu";
pub const SCNu16 = "hu";
pub const SCNu32 = "u";
pub const SCNu64 = __PRI64_PREFIX ++ "u";
pub const SCNuLEAST8 = "hhu";
pub const SCNuLEAST16 = "hu";
pub const SCNuLEAST32 = "u";
pub const SCNuLEAST64 = __PRI64_PREFIX ++ "u";
pub const SCNuFAST8 = "hhu";
pub const SCNuFAST16 = __PRIPTR_PREFIX ++ "u";
pub const SCNuFAST32 = __PRIPTR_PREFIX ++ "u";
pub const SCNuFAST64 = __PRI64_PREFIX ++ "u";
pub const SCNo8 = "hho";
pub const SCNo16 = "ho";
pub const SCNo32 = "o";
pub const SCNo64 = __PRI64_PREFIX ++ "o";
pub const SCNoLEAST8 = "hho";
pub const SCNoLEAST16 = "ho";
pub const SCNoLEAST32 = "o";
pub const SCNoLEAST64 = __PRI64_PREFIX ++ "o";
pub const SCNoFAST8 = "hho";
pub const SCNoFAST16 = __PRIPTR_PREFIX ++ "o";
pub const SCNoFAST32 = __PRIPTR_PREFIX ++ "o";
pub const SCNoFAST64 = __PRI64_PREFIX ++ "o";
pub const SCNx8 = "hhx";
pub const SCNx16 = "hx";
pub const SCNx32 = "x";
pub const SCNx64 = __PRI64_PREFIX ++ "x";
pub const SCNxLEAST8 = "hhx";
pub const SCNxLEAST16 = "hx";
pub const SCNxLEAST32 = "x";
pub const SCNxLEAST64 = __PRI64_PREFIX ++ "x";
pub const SCNxFAST8 = "hhx";
pub const SCNxFAST16 = __PRIPTR_PREFIX ++ "x";
pub const SCNxFAST32 = __PRIPTR_PREFIX ++ "x";
pub const SCNxFAST64 = __PRI64_PREFIX ++ "x";
pub const SCNdMAX = __PRI64_PREFIX ++ "d";
pub const SCNiMAX = __PRI64_PREFIX ++ "i";
pub const SCNoMAX = __PRI64_PREFIX ++ "o";
pub const SCNuMAX = __PRI64_PREFIX ++ "u";
pub const SCNxMAX = __PRI64_PREFIX ++ "x";
pub const SCNdPTR = __PRIPTR_PREFIX ++ "d";
pub const SCNiPTR = __PRIPTR_PREFIX ++ "i";
pub const SCNoPTR = __PRIPTR_PREFIX ++ "o";
pub const SCNuPTR = __PRIPTR_PREFIX ++ "u";
pub const SCNxPTR = __PRIPTR_PREFIX ++ "x";
pub const __STDARG_H = "";
pub const __need___va_list = "";
pub const __need_va_list = "";
pub const __need_va_arg = "";
pub const __need___va_copy = "";
pub const __need_va_copy = "";
pub const __GNUC_VA_LIST = "";
pub const _VA_LIST = "";
pub const va_start = @compileError("unable to translate macro: undefined identifier `__builtin_va_start`");
// /usr/lib/zig/include/__stdarg_va_arg.h:17:9
pub const va_end = @compileError("unable to translate macro: undefined identifier `__builtin_va_end`");
// /usr/lib/zig/include/__stdarg_va_arg.h:19:9
pub const va_arg = @compileError("unable to translate C expr: unexpected token 'an identifier'");
// /usr/lib/zig/include/__stdarg_va_arg.h:20:9
pub const __va_copy = @compileError("unable to translate macro: undefined identifier `__builtin_va_copy`");
// /usr/lib/zig/include/__stdarg___va_copy.h:11:9
pub const va_copy = @compileError("unable to translate macro: undefined identifier `__builtin_va_copy`");
// /usr/lib/zig/include/__stdarg_va_copy.h:11:9
pub const _LIBCPP_STRING_H = "";
pub const _STRING_H = @as(c_int, 1);
pub const __need_size_t = "";
pub const __need_NULL = "";
pub const _SIZE_T = "";
pub const NULL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const _LIBCPP_STDDEF_H = "";
pub const _BITS_TYPES_LOCALE_T_H = @as(c_int, 1);
pub const _BITS_TYPES___LOCALE_T_H = @as(c_int, 1);
pub const _STRINGS_H = @as(c_int, 1);
pub const _LIBCPP_WCHAR_H = "";
pub const __STDDEF_H = "";
pub const __need_ptrdiff_t = "";
pub const __need_wchar_t = "";
pub const __need_max_align_t = "";
pub const __need_offsetof = "";
pub const _PTRDIFF_T = "";
pub const _WCHAR_T = "";
pub const __CLANG_MAX_ALIGN_T_DEFINED = "";
pub const offsetof = @compileError("unable to translate C expr: unexpected token 'an identifier'");
// /usr/lib/zig/include/__stddef_offsetof.h:16:9
pub const _WCHAR_H = @as(c_int, 1);
pub const _BITS_FLOATN_H = "";
pub const __HAVE_FLOAT128 = @as(c_int, 0);
pub const __HAVE_DISTINCT_FLOAT128 = @as(c_int, 0);
pub const __HAVE_FLOAT64X = @as(c_int, 1);
pub const __HAVE_FLOAT64X_LONG_DOUBLE = @as(c_int, 1);
pub const _BITS_FLOATN_COMMON_H = "";
pub const __HAVE_FLOAT16 = @as(c_int, 0);
pub const __HAVE_FLOAT32 = @as(c_int, 1);
pub const __HAVE_FLOAT64 = @as(c_int, 1);
pub const __HAVE_FLOAT32X = @as(c_int, 1);
pub const __HAVE_FLOAT128X = @as(c_int, 0);
pub const __HAVE_DISTINCT_FLOAT16 = __HAVE_FLOAT16;
pub const __HAVE_DISTINCT_FLOAT32 = @as(c_int, 0);
pub const __HAVE_DISTINCT_FLOAT64 = @as(c_int, 0);
pub const __HAVE_DISTINCT_FLOAT32X = @as(c_int, 0);
pub const __HAVE_DISTINCT_FLOAT64X = @as(c_int, 0);
pub const __HAVE_DISTINCT_FLOAT128X = __HAVE_FLOAT128X;
pub const __HAVE_FLOAT128_UNLIKE_LDBL = (__HAVE_DISTINCT_FLOAT128 != 0) and (__LDBL_MANT_DIG__ != @as(c_int, 113));
pub const __HAVE_FLOATN_NOT_TYPEDEF = @as(c_int, 0);
pub const __f32 = @import("std").zig.c_translation.Macros.F_SUFFIX;
pub inline fn __f64(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __f32x(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub const __f64x = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub const __CFLOAT32 = @compileError("unable to translate: TODO _Complex");
// /usr/include/bits/floatn-common.h:149:12
pub const __CFLOAT64 = @compileError("unable to translate: TODO _Complex");
// /usr/include/bits/floatn-common.h:160:13
pub const __CFLOAT32X = @compileError("unable to translate: TODO _Complex");
// /usr/include/bits/floatn-common.h:169:12
pub const __CFLOAT64X = @compileError("unable to translate: TODO _Complex");
// /usr/include/bits/floatn-common.h:178:13
pub inline fn __builtin_huge_valf32() @TypeOf(__builtin_huge_valf()) {
    return __builtin_huge_valf();
}
pub inline fn __builtin_inff32() @TypeOf(__builtin_inff()) {
    return __builtin_inff();
}
pub inline fn __builtin_nanf32(x: anytype) @TypeOf(__builtin_nanf(x)) {
    _ = &x;
    return __builtin_nanf(x);
}
pub const __builtin_nansf32 = @compileError("unable to translate macro: undefined identifier `__builtin_nansf`");
// /usr/include/bits/floatn-common.h:221:12
pub const __builtin_huge_valf64 = @compileError("unable to translate macro: undefined identifier `__builtin_huge_val`");
// /usr/include/bits/floatn-common.h:255:13
pub const __builtin_inff64 = @compileError("unable to translate macro: undefined identifier `__builtin_inf`");
// /usr/include/bits/floatn-common.h:256:13
pub const __builtin_nanf64 = @compileError("unable to translate macro: undefined identifier `__builtin_nan`");
// /usr/include/bits/floatn-common.h:257:13
pub const __builtin_nansf64 = @compileError("unable to translate macro: undefined identifier `__builtin_nans`");
// /usr/include/bits/floatn-common.h:258:13
pub const __builtin_huge_valf32x = @compileError("unable to translate macro: undefined identifier `__builtin_huge_val`");
// /usr/include/bits/floatn-common.h:272:12
pub const __builtin_inff32x = @compileError("unable to translate macro: undefined identifier `__builtin_inf`");
// /usr/include/bits/floatn-common.h:273:12
pub const __builtin_nanf32x = @compileError("unable to translate macro: undefined identifier `__builtin_nan`");
// /usr/include/bits/floatn-common.h:274:12
pub const __builtin_nansf32x = @compileError("unable to translate macro: undefined identifier `__builtin_nans`");
// /usr/include/bits/floatn-common.h:275:12
pub const __builtin_huge_valf64x = @compileError("unable to translate macro: undefined identifier `__builtin_huge_vall`");
// /usr/include/bits/floatn-common.h:289:13
pub const __builtin_inff64x = @compileError("unable to translate macro: undefined identifier `__builtin_infl`");
// /usr/include/bits/floatn-common.h:290:13
pub const __builtin_nanf64x = @compileError("unable to translate macro: undefined identifier `__builtin_nanl`");
// /usr/include/bits/floatn-common.h:291:13
pub const __builtin_nansf64x = @compileError("unable to translate macro: undefined identifier `__builtin_nansl`");
// /usr/include/bits/floatn-common.h:292:13
pub const _VA_LIST_DEFINED = "";
pub const __wint_t_defined = @as(c_int, 1);
pub const _WINT_T = @as(c_int, 1);
pub const __mbstate_t_defined = @as(c_int, 1);
pub const ____mbstate_t_defined = @as(c_int, 1);
pub const ____FILE_defined = @as(c_int, 1);
pub const __FILE_defined = @as(c_int, 1);
pub const WEOF = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xffffffff, .hex);
pub const __attr_dealloc_fclose = "";
pub const _LIBCPP_WCHAR_H_HAS_CONST_OVERLOADS = @as(c_int, 1);
pub const SDL_SIZE_MAX = SIZE_MAX;
pub inline fn SDL_HAS_BUILTIN(x: anytype) @TypeOf(__has_builtin(x)) {
    _ = &x;
    return __has_builtin(x);
}
pub const SDL_arraysize = @compileError("unable to translate C expr: expected ')' instead got '['");
// /usr/include/SDL3/SDL_stdinc.h:99:9
pub const SDL_STRINGIFY_ARG = @compileError("unable to translate C expr: unexpected token '#'");
// /usr/include/SDL3/SDL_stdinc.h:112:9
pub const SDL_reinterpret_cast = @import("std").zig.c_translation.Macros.CAST_OR_CALL;
pub const SDL_static_cast = @import("std").zig.c_translation.Macros.CAST_OR_CALL;
pub const SDL_const_cast = @import("std").zig.c_translation.Macros.CAST_OR_CALL;
pub inline fn SDL_FOURCC(A: anytype, B: anytype, C: anytype, D: anytype) @TypeOf((((SDL_static_cast(Uint32, SDL_static_cast(Uint8, A)) << @as(c_int, 0)) | (SDL_static_cast(Uint32, SDL_static_cast(Uint8, B)) << @as(c_int, 8))) | (SDL_static_cast(Uint32, SDL_static_cast(Uint8, C)) << @as(c_int, 16))) | (SDL_static_cast(Uint32, SDL_static_cast(Uint8, D)) << @as(c_int, 24))) {
    _ = &A;
    _ = &B;
    _ = &C;
    _ = &D;
    return (((SDL_static_cast(Uint32, SDL_static_cast(Uint8, A)) << @as(c_int, 0)) | (SDL_static_cast(Uint32, SDL_static_cast(Uint8, B)) << @as(c_int, 8))) | (SDL_static_cast(Uint32, SDL_static_cast(Uint8, C)) << @as(c_int, 16))) | (SDL_static_cast(Uint32, SDL_static_cast(Uint8, D)) << @as(c_int, 24));
}
pub inline fn SDL_SINT64_C(c: anytype) @TypeOf(INT64_C(c)) {
    _ = &c;
    return INT64_C(c);
}
pub inline fn SDL_UINT64_C(c: anytype) @TypeOf(UINT64_C(c)) {
    _ = &c;
    return UINT64_C(c);
}
pub const SDL_FALSE = @as(c_int, 0);
pub const SDL_TRUE = @as(c_int, 1);
pub const SDL_MAX_SINT8 = @import("std").zig.c_translation.cast(Sint8, @as(c_int, 0x7F));
pub const SDL_MIN_SINT8 = @import("std").zig.c_translation.cast(Sint8, ~@as(c_int, 0x7F));
pub const SDL_MAX_UINT8 = @import("std").zig.c_translation.cast(Uint8, @as(c_int, 0xFF));
pub const SDL_MIN_UINT8 = @import("std").zig.c_translation.cast(Uint8, @as(c_int, 0x00));
pub const SDL_MAX_SINT16 = @import("std").zig.c_translation.cast(Sint16, @as(c_int, 0x7FFF));
pub const SDL_MIN_SINT16 = @import("std").zig.c_translation.cast(Sint16, ~@as(c_int, 0x7FFF));
pub const SDL_MAX_UINT16 = @import("std").zig.c_translation.cast(Uint16, @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFF, .hex));
pub const SDL_MIN_UINT16 = @import("std").zig.c_translation.cast(Uint16, @as(c_int, 0x0000));
pub const SDL_MAX_SINT32 = @import("std").zig.c_translation.cast(Sint32, @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7FFFFFFF, .hex));
pub const SDL_MIN_SINT32 = @import("std").zig.c_translation.cast(Sint32, ~@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7FFFFFFF, .hex));
pub const SDL_MAX_UINT32 = @import("std").zig.c_translation.cast(Uint32, @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex));
pub const SDL_MIN_UINT32 = @import("std").zig.c_translation.cast(Uint32, @as(c_int, 0x00000000));
pub const SDL_MAX_SINT64 = SDL_SINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7FFFFFFFFFFFFFFF, .hex));
pub const SDL_MIN_SINT64 = ~SDL_SINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7FFFFFFFFFFFFFFF, .hex));
pub const SDL_MAX_UINT64 = SDL_UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFFFFFFFFFF, .hex));
pub const SDL_MIN_UINT64 = SDL_UINT64_C(@as(c_int, 0x0000000000000000));
pub const SDL_MAX_TIME = SDL_MAX_SINT64;
pub const SDL_MIN_TIME = SDL_MIN_SINT64;
pub const SDL_FLT_EPSILON = @as(f32, 1.1920928955078125e-07);
pub const SDL_PRIs64 = "ld";
pub const SDL_PRIu64 = PRIu64;
pub const SDL_PRIx64 = PRIx64;
pub const SDL_PRIX64 = PRIX64;
pub const SDL_PRIs32 = PRId32;
pub const SDL_PRIu32 = PRIu32;
pub const SDL_PRIx32 = PRIx32;
pub const SDL_PRIX32 = PRIX32;
pub const SDL_IN_BYTECAP = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/SDL3/SDL_stdinc.h:396:9
pub const SDL_INOUT_Z_CAP = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/SDL3/SDL_stdinc.h:397:9
pub const SDL_OUT_Z_CAP = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/SDL3/SDL_stdinc.h:398:9
pub const SDL_OUT_CAP = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/SDL3/SDL_stdinc.h:399:9
pub const SDL_OUT_BYTECAP = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/SDL3/SDL_stdinc.h:400:9
pub const SDL_OUT_Z_BYTECAP = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/SDL3/SDL_stdinc.h:401:9
pub const SDL_PRINTF_FORMAT_STRING = "";
pub const SDL_SCANF_FORMAT_STRING = "";
pub const SDL_PRINTF_VARARG_FUNC = @compileError("unable to translate macro: undefined identifier `format`");
// /usr/include/SDL3/SDL_stdinc.h:406:9
pub const SDL_PRINTF_VARARG_FUNCV = @compileError("unable to translate macro: undefined identifier `format`");
// /usr/include/SDL3/SDL_stdinc.h:407:9
pub const SDL_SCANF_VARARG_FUNC = @compileError("unable to translate macro: undefined identifier `format`");
// /usr/include/SDL3/SDL_stdinc.h:408:9
pub const SDL_SCANF_VARARG_FUNCV = @compileError("unable to translate macro: undefined identifier `format`");
// /usr/include/SDL3/SDL_stdinc.h:409:9
pub const SDL_WPRINTF_VARARG_FUNC = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/SDL3/SDL_stdinc.h:410:9
pub const SDL_WSCANF_VARARG_FUNC = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/SDL3/SDL_stdinc.h:411:9
pub const SDL_COMPILE_TIME_ASSERT = @compileError("unable to translate C expr: unexpected token '_Static_assert'");
// /usr/include/SDL3/SDL_stdinc.h:428:9
pub const SDL_begin_code_h = "";
pub const SDL_DEPRECATED = @compileError("unable to translate macro: undefined identifier `deprecated`");
// /usr/include/SDL3/SDL_begin_code.h:38:13
pub const SDL_UNUSED = @compileError("unable to translate macro: undefined identifier `unused`");
// /usr/include/SDL3/SDL_begin_code.h:48:13
pub const SDL_DECLSPEC = @compileError("unable to translate macro: undefined identifier `visibility`");
// /usr/include/SDL3/SDL_begin_code.h:64:12
pub const SDLCALL = "";
pub const SDL_INLINE = @compileError("unable to translate C expr: unexpected token '__inline__'");
// /usr/include/SDL3/SDL_begin_code.h:105:9
pub const SDL_FORCE_INLINE = @compileError("unable to translate macro: undefined identifier `always_inline`");
// /usr/include/SDL3/SDL_begin_code.h:126:9
pub const SDL_NORETURN = @compileError("unable to translate macro: undefined identifier `noreturn`");
// /usr/include/SDL3/SDL_begin_code.h:134:9
pub const SDL_HAS_FALLTHROUGH = @compileError("unable to translate macro: undefined identifier `__has_attribute`");
// /usr/include/SDL3/SDL_begin_code.h:159:9
pub const SDL_FALLTHROUGH = @compileError("unable to translate macro: undefined identifier `__fallthrough__`");
// /usr/include/SDL3/SDL_begin_code.h:166:9
pub const SDL_NODISCARD = @compileError("unable to translate macro: undefined identifier `warn_unused_result`");
// /usr/include/SDL3/SDL_begin_code.h:179:9
pub const SDL_MALLOC = @compileError("unable to translate C expr: unexpected token '__attribute__'");
// /usr/include/SDL3/SDL_begin_code.h:189:9
pub const SDL_ALLOC_SIZE = @compileError("unable to translate macro: undefined identifier `alloc_size`");
// /usr/include/SDL3/SDL_begin_code.h:201:9
pub const SDL_ALLOC_SIZE2 = @compileError("unable to translate macro: undefined identifier `alloc_size`");
// /usr/include/SDL3/SDL_begin_code.h:211:9
pub const SDL_stack_alloc = @compileError("unable to translate C expr: unexpected token ')'");
// /usr/include/SDL3/SDL_stdinc.h:478:9
pub const SDL_stack_free = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/SDL3/SDL_stdinc.h:479:9
pub inline fn SDL_min(x: anytype, y: anytype) @TypeOf(if (x < y) x else y) {
    _ = &x;
    _ = &y;
    return if (x < y) x else y;
}
pub inline fn SDL_max(x: anytype, y: anytype) @TypeOf(if (x > y) x else y) {
    _ = &x;
    _ = &y;
    return if (x > y) x else y;
}
pub inline fn SDL_clamp(x: anytype, a: anytype, b: anytype) @TypeOf(if (x < a) a else if (x > b) b else x) {
    _ = &x;
    _ = &a;
    _ = &b;
    return if (x < a) a else if (x > b) b else x;
}
pub const SDL_copyp = @compileError("unable to translate C expr: unexpected token '{'");
// /usr/include/SDL3/SDL_stdinc.h:846:9
pub const SDL_zero = @compileError("unable to translate C expr: unexpected token '('");
// /usr/include/SDL3/SDL_stdinc.h:871:9
pub const SDL_zerop = @compileError("unable to translate C expr: unexpected token '*'");
// /usr/include/SDL3/SDL_stdinc.h:872:9
pub const SDL_zeroa = @compileError("unable to translate C expr: unexpected token '('");
// /usr/include/SDL3/SDL_stdinc.h:873:9
pub const SDL_PI_D = @as(f64, 3.141592653589793238462643383279502884);
pub const SDL_PI_F = @as(f32, 3.141592653589793238462643383279502884);
pub const SDL_ICONV_ERROR = @import("std").zig.c_translation.cast(usize, -@as(c_int, 1));
pub const SDL_ICONV_E2BIG = @import("std").zig.c_translation.cast(usize, -@as(c_int, 2));
pub const SDL_ICONV_EILSEQ = @import("std").zig.c_translation.cast(usize, -@as(c_int, 3));
pub const SDL_ICONV_EINVAL = @import("std").zig.c_translation.cast(usize, -@as(c_int, 4));
pub inline fn SDL_iconv_utf8_locale(S: anytype) @TypeOf(SDL_iconv_string("", "UTF-8", S, SDL_strlen(S) + @as(c_int, 1))) {
    _ = &S;
    return SDL_iconv_string("", "UTF-8", S, SDL_strlen(S) + @as(c_int, 1));
}
pub inline fn SDL_iconv_utf8_ucs2(S: anytype) [*c]Uint16 {
    _ = &S;
    return @import("std").zig.c_translation.cast([*c]Uint16, SDL_iconv_string("UCS-2", "UTF-8", S, SDL_strlen(S) + @as(c_int, 1)));
}
pub inline fn SDL_iconv_utf8_ucs4(S: anytype) [*c]Uint32 {
    _ = &S;
    return @import("std").zig.c_translation.cast([*c]Uint32, SDL_iconv_string("UCS-4", "UTF-8", S, SDL_strlen(S) + @as(c_int, 1)));
}
pub inline fn SDL_iconv_wchar_utf8(S: anytype) @TypeOf(SDL_iconv_string("UTF-8", "WCHAR_T", @import("std").zig.c_translation.cast([*c]u8, S), (SDL_wcslen(S) + @as(c_int, 1)) * @import("std").zig.c_translation.sizeof(wchar_t))) {
    _ = &S;
    return SDL_iconv_string("UTF-8", "WCHAR_T", @import("std").zig.c_translation.cast([*c]u8, S), (SDL_wcslen(S) + @as(c_int, 1)) * @import("std").zig.c_translation.sizeof(wchar_t));
}
pub const SDL_assert_h_ = "";
pub const SDL_ASSERT_LEVEL = @as(c_int, 2);
pub const SDL_TriggerBreakpoint = @compileError("unable to translate macro: undefined identifier `__builtin_debugtrap`");
// /usr/include/SDL3/SDL_assert.h:133:13
pub const SDL_FUNCTION = @compileError("unable to translate C expr: unexpected token 'an identifier'");
// /usr/include/SDL3/SDL_assert.h:155:12
pub const SDL_FILE = @compileError("unable to translate macro: undefined identifier `__FILE__`");
// /usr/include/SDL3/SDL_assert.h:161:9
pub const SDL_LINE = @compileError("unable to translate macro: undefined identifier `__LINE__`");
// /usr/include/SDL3/SDL_assert.h:162:9
pub const SDL_NULL_WHILE_LOOP_CONDITION = @as(c_int, 0);
pub const SDL_disabled_assert = @compileError("unable to translate C expr: unexpected token 'do'");
// /usr/include/SDL3/SDL_assert.h:187:9
pub inline fn SDL_AssertBreakpoint() @TypeOf(SDL_TriggerBreakpoint()) {
    return SDL_TriggerBreakpoint();
}
pub const SDL_enabled_assert = @compileError("unable to translate macro: undefined identifier `sdl_assert_data`");
// /usr/include/SDL3/SDL_assert.h:276:9
pub inline fn SDL_assert(condition: anytype) @TypeOf(SDL_enabled_assert(condition)) {
    _ = &condition;
    return SDL_enabled_assert(condition);
}
pub inline fn SDL_assert_release(condition: anytype) @TypeOf(SDL_enabled_assert(condition)) {
    _ = &condition;
    return SDL_enabled_assert(condition);
}
pub inline fn SDL_assert_paranoid(condition: anytype) @TypeOf(SDL_disabled_assert(condition)) {
    _ = &condition;
    return SDL_disabled_assert(condition);
}
pub inline fn SDL_assert_always(condition: anytype) @TypeOf(SDL_enabled_assert(condition)) {
    _ = &condition;
    return SDL_enabled_assert(condition);
}
pub const SDL_atomic_h_ = "";
pub const SDL_CompilerBarrier = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/include/SDL3/SDL_atomic.h:159:9
pub inline fn SDL_MemoryBarrierRelease() @TypeOf(SDL_CompilerBarrier()) {
    return SDL_CompilerBarrier();
}
pub inline fn SDL_MemoryBarrierAcquire() @TypeOf(SDL_CompilerBarrier()) {
    return SDL_CompilerBarrier();
}
pub const SDL_CPUPauseInstruction = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/include/SDL3/SDL_atomic.h:283:13
pub inline fn SDL_AtomicIncRef(a: anytype) @TypeOf(SDL_AtomicAdd(a, @as(c_int, 1))) {
    _ = &a;
    return SDL_AtomicAdd(a, @as(c_int, 1));
}
pub inline fn SDL_AtomicDecRef(a: anytype) @TypeOf(SDL_AtomicAdd(a, -@as(c_int, 1)) == @as(c_int, 1)) {
    _ = &a;
    return SDL_AtomicAdd(a, -@as(c_int, 1)) == @as(c_int, 1);
}
pub const SDL_audio_h_ = "";
pub const SDL_endian_h_ = "";
pub const SDL_LIL_ENDIAN = @as(c_int, 1234);
pub const SDL_BIG_ENDIAN = @as(c_int, 4321);
pub const _ENDIAN_H = @as(c_int, 1);
pub const _BITS_ENDIAN_H = @as(c_int, 1);
pub const __LITTLE_ENDIAN = @as(c_int, 1234);
pub const __BIG_ENDIAN = @as(c_int, 4321);
pub const __PDP_ENDIAN = @as(c_int, 3412);
pub const _BITS_ENDIANNESS_H = @as(c_int, 1);
pub const __BYTE_ORDER = __LITTLE_ENDIAN;
pub const __FLOAT_WORD_ORDER = __BYTE_ORDER;
pub inline fn __LONG_LONG_PAIR(HI: anytype, LO: anytype) @TypeOf(HI) {
    _ = &HI;
    _ = &LO;
    return blk: {
        _ = &LO;
        break :blk HI;
    };
}
pub const LITTLE_ENDIAN = __LITTLE_ENDIAN;
pub const BIG_ENDIAN = __BIG_ENDIAN;
pub const PDP_ENDIAN = __PDP_ENDIAN;
pub const BYTE_ORDER = __BYTE_ORDER;
pub const _BITS_BYTESWAP_H = @as(c_int, 1);
pub inline fn __bswap_constant_16(x: anytype) __uint16_t {
    _ = &x;
    return @import("std").zig.c_translation.cast(__uint16_t, ((x >> @as(c_int, 8)) & @as(c_int, 0xff)) | ((x & @as(c_int, 0xff)) << @as(c_int, 8)));
}
pub inline fn __bswap_constant_32(x: anytype) @TypeOf(((((x & @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xff000000, .hex)) >> @as(c_int, 24)) | ((x & @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00ff0000, .hex)) >> @as(c_int, 8))) | ((x & @as(c_uint, 0x0000ff00)) << @as(c_int, 8))) | ((x & @as(c_uint, 0x000000ff)) << @as(c_int, 24))) {
    _ = &x;
    return ((((x & @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xff000000, .hex)) >> @as(c_int, 24)) | ((x & @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00ff0000, .hex)) >> @as(c_int, 8))) | ((x & @as(c_uint, 0x0000ff00)) << @as(c_int, 8))) | ((x & @as(c_uint, 0x000000ff)) << @as(c_int, 24));
}
pub inline fn __bswap_constant_64(x: anytype) @TypeOf(((((((((x & @as(c_ulonglong, 0xff00000000000000)) >> @as(c_int, 56)) | ((x & @as(c_ulonglong, 0x00ff000000000000)) >> @as(c_int, 40))) | ((x & @as(c_ulonglong, 0x0000ff0000000000)) >> @as(c_int, 24))) | ((x & @as(c_ulonglong, 0x000000ff00000000)) >> @as(c_int, 8))) | ((x & @as(c_ulonglong, 0x00000000ff000000)) << @as(c_int, 8))) | ((x & @as(c_ulonglong, 0x0000000000ff0000)) << @as(c_int, 24))) | ((x & @as(c_ulonglong, 0x000000000000ff00)) << @as(c_int, 40))) | ((x & @as(c_ulonglong, 0x00000000000000ff)) << @as(c_int, 56))) {
    _ = &x;
    return ((((((((x & @as(c_ulonglong, 0xff00000000000000)) >> @as(c_int, 56)) | ((x & @as(c_ulonglong, 0x00ff000000000000)) >> @as(c_int, 40))) | ((x & @as(c_ulonglong, 0x0000ff0000000000)) >> @as(c_int, 24))) | ((x & @as(c_ulonglong, 0x000000ff00000000)) >> @as(c_int, 8))) | ((x & @as(c_ulonglong, 0x00000000ff000000)) << @as(c_int, 8))) | ((x & @as(c_ulonglong, 0x0000000000ff0000)) << @as(c_int, 24))) | ((x & @as(c_ulonglong, 0x000000000000ff00)) << @as(c_int, 40))) | ((x & @as(c_ulonglong, 0x00000000000000ff)) << @as(c_int, 56));
}
pub const _BITS_UINTN_IDENTITY_H = @as(c_int, 1);
pub inline fn htobe16(x: anytype) @TypeOf(__bswap_16(x)) {
    _ = &x;
    return __bswap_16(x);
}
pub inline fn htole16(x: anytype) @TypeOf(__uint16_identity(x)) {
    _ = &x;
    return __uint16_identity(x);
}
pub inline fn be16toh(x: anytype) @TypeOf(__bswap_16(x)) {
    _ = &x;
    return __bswap_16(x);
}
pub inline fn le16toh(x: anytype) @TypeOf(__uint16_identity(x)) {
    _ = &x;
    return __uint16_identity(x);
}
pub inline fn htobe32(x: anytype) @TypeOf(__bswap_32(x)) {
    _ = &x;
    return __bswap_32(x);
}
pub inline fn htole32(x: anytype) @TypeOf(__uint32_identity(x)) {
    _ = &x;
    return __uint32_identity(x);
}
pub inline fn be32toh(x: anytype) @TypeOf(__bswap_32(x)) {
    _ = &x;
    return __bswap_32(x);
}
pub inline fn le32toh(x: anytype) @TypeOf(__uint32_identity(x)) {
    _ = &x;
    return __uint32_identity(x);
}
pub inline fn htobe64(x: anytype) @TypeOf(__bswap_64(x)) {
    _ = &x;
    return __bswap_64(x);
}
pub inline fn htole64(x: anytype) @TypeOf(__uint64_identity(x)) {
    _ = &x;
    return __uint64_identity(x);
}
pub inline fn be64toh(x: anytype) @TypeOf(__bswap_64(x)) {
    _ = &x;
    return __bswap_64(x);
}
pub inline fn le64toh(x: anytype) @TypeOf(__uint64_identity(x)) {
    _ = &x;
    return __uint64_identity(x);
}
pub const SDL_BYTEORDER = __BYTE_ORDER;
pub const SDL_FLOATWORDORDER = SDL_BYTEORDER;
pub const HAS_BUILTIN_BSWAP16 = (SDL_HAS_BUILTIN(__builtin_bswap16) != 0) or ((__GNUC__ > @as(c_int, 4)) or ((__GNUC__ == @as(c_int, 4)) and (__GNUC_MINOR__ >= @as(c_int, 8))));
pub const HAS_BUILTIN_BSWAP32 = (SDL_HAS_BUILTIN(__builtin_bswap32) != 0) or ((__GNUC__ > @as(c_int, 4)) or ((__GNUC__ == @as(c_int, 4)) and (__GNUC_MINOR__ >= @as(c_int, 3))));
pub const HAS_BUILTIN_BSWAP64 = (SDL_HAS_BUILTIN(__builtin_bswap64) != 0) or ((__GNUC__ > @as(c_int, 4)) or ((__GNUC__ == @as(c_int, 4)) and (__GNUC_MINOR__ >= @as(c_int, 3))));
pub const HAS_BROKEN_BSWAP = (__GNUC__ == @as(c_int, 2)) and (__GNUC_MINOR__ <= @as(c_int, 95));
pub inline fn SDL_Swap16(x: anytype) @TypeOf(__builtin_bswap16(x)) {
    _ = &x;
    return __builtin_bswap16(x);
}
pub inline fn SDL_Swap32(x: anytype) @TypeOf(__builtin_bswap32(x)) {
    _ = &x;
    return __builtin_bswap32(x);
}
pub inline fn SDL_Swap64(x: anytype) @TypeOf(__builtin_bswap64(x)) {
    _ = &x;
    return __builtin_bswap64(x);
}
pub inline fn SDL_SwapLE16(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn SDL_SwapLE32(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn SDL_SwapLE64(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn SDL_SwapFloatLE(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn SDL_SwapBE16(x: anytype) @TypeOf(SDL_Swap16(x)) {
    _ = &x;
    return SDL_Swap16(x);
}
pub inline fn SDL_SwapBE32(x: anytype) @TypeOf(SDL_Swap32(x)) {
    _ = &x;
    return SDL_Swap32(x);
}
pub inline fn SDL_SwapBE64(x: anytype) @TypeOf(SDL_Swap64(x)) {
    _ = &x;
    return SDL_Swap64(x);
}
pub inline fn SDL_SwapFloatBE(x: anytype) @TypeOf(SDL_SwapFloat(x)) {
    _ = &x;
    return SDL_SwapFloat(x);
}
pub const SDL_error_h_ = "";
pub inline fn SDL_Unsupported() @TypeOf(SDL_SetError("That operation is not supported")) {
    return SDL_SetError("That operation is not supported");
}
pub inline fn SDL_InvalidParamError(param: anytype) @TypeOf(SDL_SetError("Parameter '%s' is invalid", param)) {
    _ = &param;
    return SDL_SetError("Parameter '%s' is invalid", param);
}
pub const SDL_mutex_h_ = "";
pub const SDL_THREAD_ANNOTATION_ATTRIBUTE__ = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/SDL3/SDL_mutex.h:46:9
pub const SDL_CAPABILITY = @compileError("unable to translate macro: undefined identifier `capability`");
// /usr/include/SDL3/SDL_mutex.h:49:9
pub const SDL_SCOPED_CAPABILITY = @compileError("unable to translate macro: undefined identifier `scoped_lockable`");
// /usr/include/SDL3/SDL_mutex.h:52:9
pub const SDL_GUARDED_BY = @compileError("unable to translate macro: undefined identifier `guarded_by`");
// /usr/include/SDL3/SDL_mutex.h:55:9
pub const SDL_PT_GUARDED_BY = @compileError("unable to translate macro: undefined identifier `pt_guarded_by`");
// /usr/include/SDL3/SDL_mutex.h:58:9
pub const SDL_ACQUIRED_BEFORE = @compileError("unable to translate macro: undefined identifier `acquired_before`");
// /usr/include/SDL3/SDL_mutex.h:61:9
pub const SDL_ACQUIRED_AFTER = @compileError("unable to translate macro: undefined identifier `acquired_after`");
// /usr/include/SDL3/SDL_mutex.h:64:9
pub const SDL_REQUIRES = @compileError("unable to translate macro: undefined identifier `requires_capability`");
// /usr/include/SDL3/SDL_mutex.h:67:9
pub const SDL_REQUIRES_SHARED = @compileError("unable to translate macro: undefined identifier `requires_shared_capability`");
// /usr/include/SDL3/SDL_mutex.h:70:9
pub const SDL_ACQUIRE = @compileError("unable to translate macro: undefined identifier `acquire_capability`");
// /usr/include/SDL3/SDL_mutex.h:73:9
pub const SDL_ACQUIRE_SHARED = @compileError("unable to translate macro: undefined identifier `acquire_shared_capability`");
// /usr/include/SDL3/SDL_mutex.h:76:9
pub const SDL_RELEASE = @compileError("unable to translate macro: undefined identifier `release_capability`");
// /usr/include/SDL3/SDL_mutex.h:79:9
pub const SDL_RELEASE_SHARED = @compileError("unable to translate macro: undefined identifier `release_shared_capability`");
// /usr/include/SDL3/SDL_mutex.h:82:9
pub const SDL_RELEASE_GENERIC = @compileError("unable to translate macro: undefined identifier `release_generic_capability`");
// /usr/include/SDL3/SDL_mutex.h:85:9
pub const SDL_TRY_ACQUIRE = @compileError("unable to translate macro: undefined identifier `try_acquire_capability`");
// /usr/include/SDL3/SDL_mutex.h:88:9
pub const SDL_TRY_ACQUIRE_SHARED = @compileError("unable to translate macro: undefined identifier `try_acquire_shared_capability`");
// /usr/include/SDL3/SDL_mutex.h:91:9
pub const SDL_EXCLUDES = @compileError("unable to translate macro: undefined identifier `locks_excluded`");
// /usr/include/SDL3/SDL_mutex.h:94:9
pub const SDL_ASSERT_CAPABILITY = @compileError("unable to translate macro: undefined identifier `assert_capability`");
// /usr/include/SDL3/SDL_mutex.h:97:9
pub const SDL_ASSERT_SHARED_CAPABILITY = @compileError("unable to translate macro: undefined identifier `assert_shared_capability`");
// /usr/include/SDL3/SDL_mutex.h:100:9
pub const SDL_RETURN_CAPABILITY = @compileError("unable to translate macro: undefined identifier `lock_returned`");
// /usr/include/SDL3/SDL_mutex.h:103:9
pub const SDL_NO_THREAD_SAFETY_ANALYSIS = @compileError("unable to translate macro: undefined identifier `no_thread_safety_analysis`");
// /usr/include/SDL3/SDL_mutex.h:106:9
pub const SDL_MUTEX_TIMEDOUT = @as(c_int, 1);
pub const SDL_RWLOCK_TIMEDOUT = SDL_MUTEX_TIMEDOUT;
pub const SDL_properties_h_ = "";
pub const SDL_iostream_h_ = "";
pub const SDL_PROP_IOSTREAM_WINDOWS_HANDLE_POINTER = "SDL.iostream.windows.handle";
pub const SDL_PROP_IOSTREAM_STDIO_FILE_POINTER = "SDL.iostream.stdio.file";
pub const SDL_PROP_IOSTREAM_ANDROID_AASSET_POINTER = "SDL.iostream.android.aasset";
pub const SDL_PROP_IOSTREAM_DYNAMIC_MEMORY_POINTER = "SDL.iostream.dynamic.memory";
pub const SDL_PROP_IOSTREAM_DYNAMIC_CHUNKSIZE_NUMBER = "SDL.iostream.dynamic.chunksize";
pub const SDL_IO_SEEK_SET = @as(c_int, 0);
pub const SDL_IO_SEEK_CUR = @as(c_int, 1);
pub const SDL_IO_SEEK_END = @as(c_int, 2);
pub const SDL_thread_h_ = "";
pub const SDL_BeginThreadFunction = NULL;
pub const SDL_EndThreadFunction = NULL;
pub inline fn SDL_CreateThread(@"fn": anytype, name: anytype, data: anytype) @TypeOf(SDL_CreateThreadRuntime(@"fn", name, data, @import("std").zig.c_translation.cast(SDL_FunctionPointer, SDL_BeginThreadFunction), @import("std").zig.c_translation.cast(SDL_FunctionPointer, SDL_EndThreadFunction))) {
    _ = &@"fn";
    _ = &name;
    _ = &data;
    return SDL_CreateThreadRuntime(@"fn", name, data, @import("std").zig.c_translation.cast(SDL_FunctionPointer, SDL_BeginThreadFunction), @import("std").zig.c_translation.cast(SDL_FunctionPointer, SDL_EndThreadFunction));
}
pub inline fn SDL_CreateThreadWithProperties(props: anytype) @TypeOf(SDL_CreateThreadWithPropertiesRuntime(props, @import("std").zig.c_translation.cast(SDL_FunctionPointer, SDL_BeginThreadFunction), @import("std").zig.c_translation.cast(SDL_FunctionPointer, SDL_EndThreadFunction))) {
    _ = &props;
    return SDL_CreateThreadWithPropertiesRuntime(props, @import("std").zig.c_translation.cast(SDL_FunctionPointer, SDL_BeginThreadFunction), @import("std").zig.c_translation.cast(SDL_FunctionPointer, SDL_EndThreadFunction));
}
pub const SDL_PROP_THREAD_CREATE_ENTRY_FUNCTION_POINTER = "entry_function";
pub const SDL_PROP_THREAD_CREATE_NAME_STRING = "name";
pub const SDL_PROP_THREAD_CREATE_USERDATA_POINTER = "userdata";
pub const SDL_PROP_THREAD_CREATE_STACKSIZE_NUMBER = "stacksize";
pub const SDL_AUDIO_U8 = @as(c_uint, 0x0008);
pub const SDL_AUDIO_S8 = @as(c_uint, 0x8008);
pub const SDL_AUDIO_S16LE = @as(c_uint, 0x8010);
pub const SDL_AUDIO_S16BE = @as(c_uint, 0x9010);
pub const SDL_AUDIO_S32LE = @as(c_uint, 0x8020);
pub const SDL_AUDIO_S32BE = @as(c_uint, 0x9020);
pub const SDL_AUDIO_F32LE = @as(c_uint, 0x8120);
pub const SDL_AUDIO_F32BE = @as(c_uint, 0x9120);
pub const SDL_AUDIO_S16 = SDL_AUDIO_S16LE;
pub const SDL_AUDIO_S32 = SDL_AUDIO_S32LE;
pub const SDL_AUDIO_F32 = SDL_AUDIO_F32LE;
pub const SDL_AUDIO_MASK_BITSIZE = @as(c_uint, 0xFF);
pub const SDL_AUDIO_MASK_FLOAT = @as(c_uint, 1) << @as(c_int, 8);
pub const SDL_AUDIO_MASK_BIG_ENDIAN = @as(c_uint, 1) << @as(c_int, 12);
pub const SDL_AUDIO_MASK_SIGNED = @as(c_uint, 1) << @as(c_int, 15);
pub inline fn SDL_AUDIO_BITSIZE(x: anytype) @TypeOf(x & SDL_AUDIO_MASK_BITSIZE) {
    _ = &x;
    return x & SDL_AUDIO_MASK_BITSIZE;
}
pub inline fn SDL_AUDIO_BYTESIZE(x: anytype) @TypeOf(@import("std").zig.c_translation.MacroArithmetic.div(SDL_AUDIO_BITSIZE(x), @as(c_int, 8))) {
    _ = &x;
    return @import("std").zig.c_translation.MacroArithmetic.div(SDL_AUDIO_BITSIZE(x), @as(c_int, 8));
}
pub inline fn SDL_AUDIO_ISFLOAT(x: anytype) @TypeOf(x & SDL_AUDIO_MASK_FLOAT) {
    _ = &x;
    return x & SDL_AUDIO_MASK_FLOAT;
}
pub inline fn SDL_AUDIO_ISBIGENDIAN(x: anytype) @TypeOf(x & SDL_AUDIO_MASK_BIG_ENDIAN) {
    _ = &x;
    return x & SDL_AUDIO_MASK_BIG_ENDIAN;
}
pub inline fn SDL_AUDIO_ISLITTLEENDIAN(x: anytype) @TypeOf(!(SDL_AUDIO_ISBIGENDIAN(x) != 0)) {
    _ = &x;
    return !(SDL_AUDIO_ISBIGENDIAN(x) != 0);
}
pub inline fn SDL_AUDIO_ISSIGNED(x: anytype) @TypeOf(x & SDL_AUDIO_MASK_SIGNED) {
    _ = &x;
    return x & SDL_AUDIO_MASK_SIGNED;
}
pub inline fn SDL_AUDIO_ISINT(x: anytype) @TypeOf(!(SDL_AUDIO_ISFLOAT(x) != 0)) {
    _ = &x;
    return !(SDL_AUDIO_ISFLOAT(x) != 0);
}
pub inline fn SDL_AUDIO_ISUNSIGNED(x: anytype) @TypeOf(!(SDL_AUDIO_ISSIGNED(x) != 0)) {
    _ = &x;
    return !(SDL_AUDIO_ISSIGNED(x) != 0);
}
pub const SDL_AUDIO_DEVICE_DEFAULT_OUTPUT = @import("std").zig.c_translation.cast(SDL_AudioDeviceID, @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hex));
pub const SDL_AUDIO_DEVICE_DEFAULT_CAPTURE = @import("std").zig.c_translation.cast(SDL_AudioDeviceID, @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFE, .hex));
pub inline fn SDL_AUDIO_FRAMESIZE(x: anytype) @TypeOf(SDL_AUDIO_BYTESIZE(x.format) * x.channels) {
    _ = &x;
    return SDL_AUDIO_BYTESIZE(x.format) * x.channels;
}
pub const SDL_bits_h_ = "";
pub const SDL_blendmode_h_ = "";
pub const SDL_BLENDMODE_NONE = @as(c_uint, 0x00000000);
pub const SDL_BLENDMODE_BLEND = @as(c_uint, 0x00000001);
pub const SDL_BLENDMODE_ADD = @as(c_uint, 0x00000002);
pub const SDL_BLENDMODE_MOD = @as(c_uint, 0x00000004);
pub const SDL_BLENDMODE_MUL = @as(c_uint, 0x00000008);
pub const SDL_BLENDMODE_INVALID = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x7FFFFFFF, .hex);
pub const SDL_camera_h_ = "";
pub const SDL_video_h_ = "";
pub const SDL_pixels_h_ = "";
pub const SDL_ALPHA_OPAQUE = @as(c_int, 255);
pub const SDL_ALPHA_TRANSPARENT = @as(c_int, 0);
pub inline fn SDL_DEFINE_PIXELFOURCC(A: anytype, B: anytype, C: anytype, D: anytype) @TypeOf(SDL_FOURCC(A, B, C, D)) {
    _ = &A;
    _ = &B;
    _ = &C;
    _ = &D;
    return SDL_FOURCC(A, B, C, D);
}
pub inline fn SDL_DEFINE_PIXELFORMAT(@"type": anytype, order: anytype, layout: anytype, bits: anytype, bytes: anytype) @TypeOf((((((@as(c_int, 1) << @as(c_int, 28)) | (@"type" << @as(c_int, 24))) | (order << @as(c_int, 20))) | (layout << @as(c_int, 16))) | (bits << @as(c_int, 8))) | (bytes << @as(c_int, 0))) {
    _ = &@"type";
    _ = &order;
    _ = &layout;
    _ = &bits;
    _ = &bytes;
    return (((((@as(c_int, 1) << @as(c_int, 28)) | (@"type" << @as(c_int, 24))) | (order << @as(c_int, 20))) | (layout << @as(c_int, 16))) | (bits << @as(c_int, 8))) | (bytes << @as(c_int, 0));
}
pub inline fn SDL_PIXELFLAG(X: anytype) @TypeOf((X >> @as(c_int, 28)) & @as(c_int, 0x0F)) {
    _ = &X;
    return (X >> @as(c_int, 28)) & @as(c_int, 0x0F);
}
pub inline fn SDL_PIXELTYPE(X: anytype) @TypeOf((X >> @as(c_int, 24)) & @as(c_int, 0x0F)) {
    _ = &X;
    return (X >> @as(c_int, 24)) & @as(c_int, 0x0F);
}
pub inline fn SDL_PIXELORDER(X: anytype) @TypeOf((X >> @as(c_int, 20)) & @as(c_int, 0x0F)) {
    _ = &X;
    return (X >> @as(c_int, 20)) & @as(c_int, 0x0F);
}
pub inline fn SDL_PIXELLAYOUT(X: anytype) @TypeOf((X >> @as(c_int, 16)) & @as(c_int, 0x0F)) {
    _ = &X;
    return (X >> @as(c_int, 16)) & @as(c_int, 0x0F);
}
pub inline fn SDL_BITSPERPIXEL(X: anytype) @TypeOf((X >> @as(c_int, 8)) & @as(c_int, 0xFF)) {
    _ = &X;
    return (X >> @as(c_int, 8)) & @as(c_int, 0xFF);
}
pub inline fn SDL_BYTESPERPIXEL(X: anytype) @TypeOf(if (SDL_ISPIXELFORMAT_FOURCC(X)) if ((((X == SDL_PIXELFORMAT_YUY2) or (X == SDL_PIXELFORMAT_UYVY)) or (X == SDL_PIXELFORMAT_YVYU)) or (X == SDL_PIXELFORMAT_P010)) @as(c_int, 2) else @as(c_int, 1) else (X >> @as(c_int, 0)) & @as(c_int, 0xFF)) {
    _ = &X;
    return if (SDL_ISPIXELFORMAT_FOURCC(X)) if ((((X == SDL_PIXELFORMAT_YUY2) or (X == SDL_PIXELFORMAT_UYVY)) or (X == SDL_PIXELFORMAT_YVYU)) or (X == SDL_PIXELFORMAT_P010)) @as(c_int, 2) else @as(c_int, 1) else (X >> @as(c_int, 0)) & @as(c_int, 0xFF);
}
pub inline fn SDL_ISPIXELFORMAT_INDEXED(format: anytype) @TypeOf(!(SDL_ISPIXELFORMAT_FOURCC(format) != 0) and ((((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX1) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX2)) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX4)) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX8))) {
    _ = &format;
    return !(SDL_ISPIXELFORMAT_FOURCC(format) != 0) and ((((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX1) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX2)) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX4)) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX8));
}
pub inline fn SDL_ISPIXELFORMAT_PACKED(format: anytype) @TypeOf(!(SDL_ISPIXELFORMAT_FOURCC(format) != 0) and (((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED8) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED16)) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED32))) {
    _ = &format;
    return !(SDL_ISPIXELFORMAT_FOURCC(format) != 0) and (((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED8) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED16)) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED32));
}
pub inline fn SDL_ISPIXELFORMAT_ARRAY(format: anytype) @TypeOf(!(SDL_ISPIXELFORMAT_FOURCC(format) != 0) and (((((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYU8) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYU16)) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYU32)) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF16)) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF32))) {
    _ = &format;
    return !(SDL_ISPIXELFORMAT_FOURCC(format) != 0) and (((((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYU8) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYU16)) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYU32)) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF16)) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF32));
}
pub inline fn SDL_ISPIXELFORMAT_ALPHA(format: anytype) @TypeOf((SDL_ISPIXELFORMAT_PACKED(format) != 0) and ((((SDL_PIXELORDER(format) == SDL_PACKEDORDER_ARGB) or (SDL_PIXELORDER(format) == SDL_PACKEDORDER_RGBA)) or (SDL_PIXELORDER(format) == SDL_PACKEDORDER_ABGR)) or (SDL_PIXELORDER(format) == SDL_PACKEDORDER_BGRA))) {
    _ = &format;
    return (SDL_ISPIXELFORMAT_PACKED(format) != 0) and ((((SDL_PIXELORDER(format) == SDL_PACKEDORDER_ARGB) or (SDL_PIXELORDER(format) == SDL_PACKEDORDER_RGBA)) or (SDL_PIXELORDER(format) == SDL_PACKEDORDER_ABGR)) or (SDL_PIXELORDER(format) == SDL_PACKEDORDER_BGRA));
}
pub inline fn SDL_ISPIXELFORMAT_10BIT(format: anytype) @TypeOf(!(SDL_ISPIXELFORMAT_FOURCC(format) != 0) and ((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED32) and (SDL_PIXELLAYOUT(format) == SDL_PACKEDLAYOUT_2101010))) {
    _ = &format;
    return !(SDL_ISPIXELFORMAT_FOURCC(format) != 0) and ((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED32) and (SDL_PIXELLAYOUT(format) == SDL_PACKEDLAYOUT_2101010));
}
pub inline fn SDL_ISPIXELFORMAT_FLOAT(format: anytype) @TypeOf(!(SDL_ISPIXELFORMAT_FOURCC(format) != 0) and ((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF16) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF32))) {
    _ = &format;
    return !(SDL_ISPIXELFORMAT_FOURCC(format) != 0) and ((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF16) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF32));
}
pub inline fn SDL_ISPIXELFORMAT_FOURCC(format: anytype) @TypeOf((format != 0) and (SDL_PIXELFLAG(format) != @as(c_int, 1))) {
    _ = &format;
    return (format != 0) and (SDL_PIXELFLAG(format) != @as(c_int, 1));
}
pub inline fn SDL_DEFINE_COLORSPACE(@"type": anytype, range: anytype, primaries: anytype, transfer: anytype, matrix: anytype, chroma: anytype) @TypeOf((((((@import("std").zig.c_translation.cast(Uint32, @"type") << @as(c_int, 28)) | (@import("std").zig.c_translation.cast(Uint32, range) << @as(c_int, 24))) | (@import("std").zig.c_translation.cast(Uint32, chroma) << @as(c_int, 20))) | (@import("std").zig.c_translation.cast(Uint32, primaries) << @as(c_int, 10))) | (@import("std").zig.c_translation.cast(Uint32, transfer) << @as(c_int, 5))) | (@import("std").zig.c_translation.cast(Uint32, matrix) << @as(c_int, 0))) {
    _ = &@"type";
    _ = &range;
    _ = &primaries;
    _ = &transfer;
    _ = &matrix;
    _ = &chroma;
    return (((((@import("std").zig.c_translation.cast(Uint32, @"type") << @as(c_int, 28)) | (@import("std").zig.c_translation.cast(Uint32, range) << @as(c_int, 24))) | (@import("std").zig.c_translation.cast(Uint32, chroma) << @as(c_int, 20))) | (@import("std").zig.c_translation.cast(Uint32, primaries) << @as(c_int, 10))) | (@import("std").zig.c_translation.cast(Uint32, transfer) << @as(c_int, 5))) | (@import("std").zig.c_translation.cast(Uint32, matrix) << @as(c_int, 0));
}
pub inline fn SDL_COLORSPACETYPE(X: anytype) SDL_ColorType {
    _ = &X;
    return @import("std").zig.c_translation.cast(SDL_ColorType, (X >> @as(c_int, 28)) & @as(c_int, 0x0F));
}
pub inline fn SDL_COLORSPACERANGE(X: anytype) SDL_ColorRange {
    _ = &X;
    return @import("std").zig.c_translation.cast(SDL_ColorRange, (X >> @as(c_int, 24)) & @as(c_int, 0x0F));
}
pub inline fn SDL_COLORSPACECHROMA(X: anytype) SDL_ChromaLocation {
    _ = &X;
    return @import("std").zig.c_translation.cast(SDL_ChromaLocation, (X >> @as(c_int, 20)) & @as(c_int, 0x0F));
}
pub inline fn SDL_COLORSPACEPRIMARIES(X: anytype) SDL_ColorPrimaries {
    _ = &X;
    return @import("std").zig.c_translation.cast(SDL_ColorPrimaries, (X >> @as(c_int, 10)) & @as(c_int, 0x1F));
}
pub inline fn SDL_COLORSPACETRANSFER(X: anytype) SDL_TransferCharacteristics {
    _ = &X;
    return @import("std").zig.c_translation.cast(SDL_TransferCharacteristics, (X >> @as(c_int, 5)) & @as(c_int, 0x1F));
}
pub inline fn SDL_COLORSPACEMATRIX(X: anytype) SDL_MatrixCoefficients {
    _ = &X;
    return @import("std").zig.c_translation.cast(SDL_MatrixCoefficients, X & @as(c_int, 0x1F));
}
pub inline fn SDL_ISCOLORSPACE_MATRIX_BT601(X: anytype) @TypeOf((SDL_COLORSPACEMATRIX(X) == SDL_MATRIX_COEFFICIENTS_BT601) or (SDL_COLORSPACEMATRIX(X) == SDL_MATRIX_COEFFICIENTS_BT470BG)) {
    _ = &X;
    return (SDL_COLORSPACEMATRIX(X) == SDL_MATRIX_COEFFICIENTS_BT601) or (SDL_COLORSPACEMATRIX(X) == SDL_MATRIX_COEFFICIENTS_BT470BG);
}
pub inline fn SDL_ISCOLORSPACE_MATRIX_BT709(X: anytype) @TypeOf(SDL_COLORSPACEMATRIX(X) == SDL_MATRIX_COEFFICIENTS_BT709) {
    _ = &X;
    return SDL_COLORSPACEMATRIX(X) == SDL_MATRIX_COEFFICIENTS_BT709;
}
pub inline fn SDL_ISCOLORSPACE_MATRIX_BT2020_NCL(X: anytype) @TypeOf(SDL_COLORSPACEMATRIX(X) == SDL_MATRIX_COEFFICIENTS_BT2020_NCL) {
    _ = &X;
    return SDL_COLORSPACEMATRIX(X) == SDL_MATRIX_COEFFICIENTS_BT2020_NCL;
}
pub inline fn SDL_ISCOLORSPACE_LIMITED_RANGE(X: anytype) @TypeOf(SDL_COLORSPACERANGE(X) != SDL_COLOR_RANGE_FULL) {
    _ = &X;
    return SDL_COLORSPACERANGE(X) != SDL_COLOR_RANGE_FULL;
}
pub inline fn SDL_ISCOLORSPACE_FULL_RANGE(X: anytype) @TypeOf(SDL_COLORSPACERANGE(X) == SDL_COLOR_RANGE_FULL) {
    _ = &X;
    return SDL_COLORSPACERANGE(X) == SDL_COLOR_RANGE_FULL;
}
pub const SDL_rect_h_ = "";
pub const SDL_surface_h_ = "";
pub const SDL_PREALLOC = @as(c_uint, 0x00000001);
pub const SDL_RLEACCEL = @as(c_uint, 0x00000002);
pub const SDL_DONTFREE = @as(c_uint, 0x00000004);
pub const SDL_SIMD_ALIGNED = @as(c_uint, 0x00000008);
pub const SDL_SURFACE_USES_PROPERTIES = @as(c_uint, 0x00000010);
pub inline fn SDL_MUSTLOCK(S: anytype) @TypeOf((S.*.flags & SDL_RLEACCEL) != @as(c_int, 0)) {
    _ = &S;
    return (S.*.flags & SDL_RLEACCEL) != @as(c_int, 0);
}
pub const SDL_PROP_SURFACE_COLORSPACE_NUMBER = "SDL.surface.colorspace";
pub const SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT = "SDL.surface.SDR_white_point";
pub const SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT = "SDL.surface.HDR_headroom";
pub const SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING = "SDL.surface.tonemap";
pub const SDL_PROP_GLOBAL_VIDEO_WAYLAND_WL_DISPLAY_POINTER = "SDL.video.wayland.wl_display";
pub const SDL_WINDOW_FULLSCREEN = SDL_UINT64_C(@as(c_int, 0x0000000000000001));
pub const SDL_WINDOW_OPENGL = SDL_UINT64_C(@as(c_int, 0x0000000000000002));
pub const SDL_WINDOW_OCCLUDED = SDL_UINT64_C(@as(c_int, 0x0000000000000004));
pub const SDL_WINDOW_HIDDEN = SDL_UINT64_C(@as(c_int, 0x0000000000000008));
pub const SDL_WINDOW_BORDERLESS = SDL_UINT64_C(@as(c_int, 0x0000000000000010));
pub const SDL_WINDOW_RESIZABLE = SDL_UINT64_C(@as(c_int, 0x0000000000000020));
pub const SDL_WINDOW_MINIMIZED = SDL_UINT64_C(@as(c_int, 0x0000000000000040));
pub const SDL_WINDOW_MAXIMIZED = SDL_UINT64_C(@as(c_int, 0x0000000000000080));
pub const SDL_WINDOW_MOUSE_GRABBED = SDL_UINT64_C(@as(c_int, 0x0000000000000100));
pub const SDL_WINDOW_INPUT_FOCUS = SDL_UINT64_C(@as(c_int, 0x0000000000000200));
pub const SDL_WINDOW_MOUSE_FOCUS = SDL_UINT64_C(@as(c_int, 0x0000000000000400));
pub const SDL_WINDOW_EXTERNAL = SDL_UINT64_C(@as(c_int, 0x0000000000000800));
pub const SDL_WINDOW_MODAL = SDL_UINT64_C(@as(c_int, 0x0000000000001000));
pub const SDL_WINDOW_HIGH_PIXEL_DENSITY = SDL_UINT64_C(@as(c_int, 0x0000000000002000));
pub const SDL_WINDOW_MOUSE_CAPTURE = SDL_UINT64_C(@as(c_int, 0x0000000000004000));
pub const SDL_WINDOW_ALWAYS_ON_TOP = SDL_UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000000000008000, .hex));
pub const SDL_WINDOW_UTILITY = SDL_UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000000000020000, .hex));
pub const SDL_WINDOW_TOOLTIP = SDL_UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000000000040000, .hex));
pub const SDL_WINDOW_POPUP_MENU = SDL_UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000000000080000, .hex));
pub const SDL_WINDOW_KEYBOARD_GRABBED = SDL_UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000000000100000, .hex));
pub const SDL_WINDOW_VULKAN = SDL_UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000000010000000, .hex));
pub const SDL_WINDOW_METAL = SDL_UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000000020000000, .hex));
pub const SDL_WINDOW_TRANSPARENT = SDL_UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000000040000000, .hex));
pub const SDL_WINDOW_NOT_FOCUSABLE = SDL_UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000000080000000, .hex));
pub const SDL_WINDOWPOS_UNDEFINED_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x1FFF0000, .hex);
pub inline fn SDL_WINDOWPOS_UNDEFINED_DISPLAY(X: anytype) @TypeOf(SDL_WINDOWPOS_UNDEFINED_MASK | X) {
    _ = &X;
    return SDL_WINDOWPOS_UNDEFINED_MASK | X;
}
pub const SDL_WINDOWPOS_UNDEFINED = SDL_WINDOWPOS_UNDEFINED_DISPLAY(@as(c_int, 0));
pub inline fn SDL_WINDOWPOS_ISUNDEFINED(X: anytype) @TypeOf((X & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFF0000, .hex)) == SDL_WINDOWPOS_UNDEFINED_MASK) {
    _ = &X;
    return (X & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFF0000, .hex)) == SDL_WINDOWPOS_UNDEFINED_MASK;
}
pub const SDL_WINDOWPOS_CENTERED_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x2FFF0000, .hex);
pub inline fn SDL_WINDOWPOS_CENTERED_DISPLAY(X: anytype) @TypeOf(SDL_WINDOWPOS_CENTERED_MASK | X) {
    _ = &X;
    return SDL_WINDOWPOS_CENTERED_MASK | X;
}
pub const SDL_WINDOWPOS_CENTERED = SDL_WINDOWPOS_CENTERED_DISPLAY(@as(c_int, 0));
pub inline fn SDL_WINDOWPOS_ISCENTERED(X: anytype) @TypeOf((X & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFF0000, .hex)) == SDL_WINDOWPOS_CENTERED_MASK) {
    _ = &X;
    return (X & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFF0000, .hex)) == SDL_WINDOWPOS_CENTERED_MASK;
}
pub const SDL_PROP_DISPLAY_HDR_ENABLED_BOOLEAN = "SDL.display.HDR_enabled";
pub const SDL_PROP_DISPLAY_SDR_WHITE_POINT_FLOAT = "SDL.display.SDR_white_point";
pub const SDL_PROP_DISPLAY_HDR_HEADROOM_FLOAT = "SDL.display.HDR_headroom";
pub const SDL_PROP_DISPLAY_KMSDRM_PANEL_ORIENTATION_NUMBER = "SDL.display.KMSDRM.panel_orientation";
pub const SDL_PROP_WINDOW_CREATE_ALWAYS_ON_TOP_BOOLEAN = "always_on_top";
pub const SDL_PROP_WINDOW_CREATE_BORDERLESS_BOOLEAN = "borderless";
pub const SDL_PROP_WINDOW_CREATE_FOCUSABLE_BOOLEAN = "focusable";
pub const SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN = "external_graphics_context";
pub const SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN = "fullscreen";
pub const SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER = "height";
pub const SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN = "hidden";
pub const SDL_PROP_WINDOW_CREATE_HIGH_PIXEL_DENSITY_BOOLEAN = "high_pixel_density";
pub const SDL_PROP_WINDOW_CREATE_MAXIMIZED_BOOLEAN = "maximized";
pub const SDL_PROP_WINDOW_CREATE_MENU_BOOLEAN = "menu";
pub const SDL_PROP_WINDOW_CREATE_METAL_BOOLEAN = "metal";
pub const SDL_PROP_WINDOW_CREATE_MINIMIZED_BOOLEAN = "minimized";
pub const SDL_PROP_WINDOW_CREATE_MODAL_BOOLEAN = "modal";
pub const SDL_PROP_WINDOW_CREATE_MOUSE_GRABBED_BOOLEAN = "mouse_grabbed";
pub const SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN = "opengl";
pub const SDL_PROP_WINDOW_CREATE_PARENT_POINTER = "parent";
pub const SDL_PROP_WINDOW_CREATE_RESIZABLE_BOOLEAN = "resizable";
pub const SDL_PROP_WINDOW_CREATE_TITLE_STRING = "title";
pub const SDL_PROP_WINDOW_CREATE_TRANSPARENT_BOOLEAN = "transparent";
pub const SDL_PROP_WINDOW_CREATE_TOOLTIP_BOOLEAN = "tooltip";
pub const SDL_PROP_WINDOW_CREATE_UTILITY_BOOLEAN = "utility";
pub const SDL_PROP_WINDOW_CREATE_VULKAN_BOOLEAN = "vulkan";
pub const SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER = "width";
pub const SDL_PROP_WINDOW_CREATE_X_NUMBER = "x";
pub const SDL_PROP_WINDOW_CREATE_Y_NUMBER = "y";
pub const SDL_PROP_WINDOW_CREATE_COCOA_WINDOW_POINTER = "cocoa.window";
pub const SDL_PROP_WINDOW_CREATE_COCOA_VIEW_POINTER = "cocoa.view";
pub const SDL_PROP_WINDOW_CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN = "wayland.surface_role_custom";
pub const SDL_PROP_WINDOW_CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN = "wayland.create_egl_window";
pub const SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER = "wayland.wl_surface";
pub const SDL_PROP_WINDOW_CREATE_WIN32_HWND_POINTER = "win32.hwnd";
pub const SDL_PROP_WINDOW_CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER = "win32.pixel_format_hwnd";
pub const SDL_PROP_WINDOW_CREATE_X11_WINDOW_NUMBER = "x11.window";
pub const SDL_PROP_WINDOW_SHAPE_POINTER = "SDL.window.shape";
pub const SDL_PROP_WINDOW_ANDROID_WINDOW_POINTER = "SDL.window.android.window";
pub const SDL_PROP_WINDOW_ANDROID_SURFACE_POINTER = "SDL.window.android.surface";
pub const SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER = "SDL.window.uikit.window";
pub const SDL_PROP_WINDOW_UIKIT_METAL_VIEW_TAG_NUMBER = "SDL.window.uikit.metal_view_tag";
pub const SDL_PROP_WINDOW_KMSDRM_DEVICE_INDEX_NUMBER = "SDL.window.kmsdrm.dev_index";
pub const SDL_PROP_WINDOW_KMSDRM_DRM_FD_NUMBER = "SDL.window.kmsdrm.drm_fd";
pub const SDL_PROP_WINDOW_KMSDRM_GBM_DEVICE_POINTER = "SDL.window.kmsdrm.gbm_dev";
pub const SDL_PROP_WINDOW_COCOA_WINDOW_POINTER = "SDL.window.cocoa.window";
pub const SDL_PROP_WINDOW_COCOA_METAL_VIEW_TAG_NUMBER = "SDL.window.cocoa.metal_view_tag";
pub const SDL_PROP_WINDOW_VIVANTE_DISPLAY_POINTER = "SDL.window.vivante.display";
pub const SDL_PROP_WINDOW_VIVANTE_WINDOW_POINTER = "SDL.window.vivante.window";
pub const SDL_PROP_WINDOW_VIVANTE_SURFACE_POINTER = "SDL.window.vivante.surface";
pub const SDL_PROP_WINDOW_WINRT_WINDOW_POINTER = "SDL.window.winrt.window";
pub const SDL_PROP_WINDOW_WIN32_HWND_POINTER = "SDL.window.win32.hwnd";
pub const SDL_PROP_WINDOW_WIN32_HDC_POINTER = "SDL.window.win32.hdc";
pub const SDL_PROP_WINDOW_WIN32_INSTANCE_POINTER = "SDL.window.win32.instance";
pub const SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER = "SDL.window.wayland.display";
pub const SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER = "SDL.window.wayland.surface";
pub const SDL_PROP_WINDOW_WAYLAND_EGL_WINDOW_POINTER = "SDL.window.wayland.egl_window";
pub const SDL_PROP_WINDOW_WAYLAND_XDG_SURFACE_POINTER = "SDL.window.wayland.xdg_surface";
pub const SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_POINTER = "SDL.window.wayland.xdg_toplevel";
pub const SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING = "SDL.window.wayland.xdg_toplevel_export_handle";
pub const SDL_PROP_WINDOW_WAYLAND_XDG_POPUP_POINTER = "SDL.window.wayland.xdg_popup";
pub const SDL_PROP_WINDOW_WAYLAND_XDG_POSITIONER_POINTER = "SDL.window.wayland.xdg_positioner";
pub const SDL_PROP_WINDOW_X11_DISPLAY_POINTER = "SDL.window.x11.display";
pub const SDL_PROP_WINDOW_X11_SCREEN_NUMBER = "SDL.window.x11.screen";
pub const SDL_PROP_WINDOW_X11_WINDOW_NUMBER = "SDL.window.x11.window";
pub const SDL_WINDOW_SURFACE_VSYNC_DISABLED = @as(c_int, 0);
pub const SDL_WINDOW_SURFACE_VSYNC_ADAPTIVE = -@as(c_int, 1);
pub const SDL_clipboard_h_ = "";
pub const SDL_cpuinfo_h_ = "";
pub const SDL_CACHELINE_SIZE = @as(c_int, 128);
pub const SDL_dialog_h_ = "";
pub const SDL_events_h_ = "";
pub const SDL_gamepad_h_ = "";
pub const SDL_joystick_h_ = "";
pub const SDL_guid_h_ = "";
pub const SDL_power_h_ = "";
pub const SDL_sensor_h_ = "";
pub const SDL_STANDARD_GRAVITY = @as(f32, 9.80665);
pub const SDL_JOYSTICK_AXIS_MAX = @as(c_int, 32767);
pub const SDL_JOYSTICK_AXIS_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 32768, .decimal);
pub const SDL_IPHONE_MAX_GFORCE = @as(f64, 5.0);
pub const SDL_PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN = "SDL.joystick.cap.mono_led";
pub const SDL_PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN = "SDL.joystick.cap.rgb_led";
pub const SDL_PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN = "SDL.joystick.cap.player_led";
pub const SDL_PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN = "SDL.joystick.cap.rumble";
pub const SDL_PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN = "SDL.joystick.cap.trigger_rumble";
pub const SDL_HAT_CENTERED = @as(c_uint, 0x00);
pub const SDL_HAT_UP = @as(c_uint, 0x01);
pub const SDL_HAT_RIGHT = @as(c_uint, 0x02);
pub const SDL_HAT_DOWN = @as(c_uint, 0x04);
pub const SDL_HAT_LEFT = @as(c_uint, 0x08);
pub const SDL_HAT_RIGHTUP = SDL_HAT_RIGHT | SDL_HAT_UP;
pub const SDL_HAT_RIGHTDOWN = SDL_HAT_RIGHT | SDL_HAT_DOWN;
pub const SDL_HAT_LEFTUP = SDL_HAT_LEFT | SDL_HAT_UP;
pub const SDL_HAT_LEFTDOWN = SDL_HAT_LEFT | SDL_HAT_DOWN;
pub const SDL_PROP_GAMEPAD_CAP_MONO_LED_BOOLEAN = SDL_PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN;
pub const SDL_PROP_GAMEPAD_CAP_RGB_LED_BOOLEAN = SDL_PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN;
pub const SDL_PROP_GAMEPAD_CAP_PLAYER_LED_BOOLEAN = SDL_PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN;
pub const SDL_PROP_GAMEPAD_CAP_RUMBLE_BOOLEAN = SDL_PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN;
pub const SDL_PROP_GAMEPAD_CAP_TRIGGER_RUMBLE_BOOLEAN = SDL_PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN;
pub const SDL_keyboard_h_ = "";
pub const SDL_keycode_h_ = "";
pub const SDL_scancode_h_ = "";
pub const SDLK_SCANCODE_MASK = @as(c_uint, 1) << @as(c_int, 30);
pub inline fn SDL_SCANCODE_TO_KEYCODE(X: anytype) @TypeOf(X | SDLK_SCANCODE_MASK) {
    _ = &X;
    return X | SDLK_SCANCODE_MASK;
}
pub const SDLK_UNKNOWN = @as(c_int, 0);
pub const SDLK_RETURN = '\r';
pub const SDLK_ESCAPE = '\x1b';
pub const SDLK_BACKSPACE = '\x08';
pub const SDLK_TAB = '\t';
pub const SDLK_SPACE = ' ';
pub const SDLK_EXCLAIM = '!';
pub const SDLK_DBLAPOSTROPHE = '"';
pub const SDLK_HASH = '#';
pub const SDLK_PERCENT = '%';
pub const SDLK_DOLLAR = '$';
pub const SDLK_AMPERSAND = '&';
pub const SDLK_APOSTROPHE = '\'';
pub const SDLK_LEFTPAREN = '(';
pub const SDLK_RIGHTPAREN = ')';
pub const SDLK_ASTERISK = '*';
pub const SDLK_PLUS = '+';
pub const SDLK_COMMA = ',';
pub const SDLK_MINUS = '-';
pub const SDLK_PERIOD = '.';
pub const SDLK_SLASH = '/';
pub const SDLK_0 = '0';
pub const SDLK_1 = '1';
pub const SDLK_2 = '2';
pub const SDLK_3 = '3';
pub const SDLK_4 = '4';
pub const SDLK_5 = '5';
pub const SDLK_6 = '6';
pub const SDLK_7 = '7';
pub const SDLK_8 = '8';
pub const SDLK_9 = '9';
pub const SDLK_COLON = ':';
pub const SDLK_SEMICOLON = ';';
pub const SDLK_LESS = '<';
pub const SDLK_EQUALS = '=';
pub const SDLK_GREATER = '>';
pub const SDLK_QUESTION = '?';
pub const SDLK_AT = '@';
pub const SDLK_LEFTBRACKET = '[';
pub const SDLK_BACKSLASH = '\\';
pub const SDLK_RIGHTBRACKET = ']';
pub const SDLK_CARET = '^';
pub const SDLK_UNDERSCORE = '_';
pub const SDLK_GRAVE = '`';
pub const SDLK_a = 'a';
pub const SDLK_b = 'b';
pub const SDLK_c = 'c';
pub const SDLK_d = 'd';
pub const SDLK_e = 'e';
pub const SDLK_f = 'f';
pub const SDLK_g = 'g';
pub const SDLK_h = 'h';
pub const SDLK_i = 'i';
pub const SDLK_j = 'j';
pub const SDLK_k = 'k';
pub const SDLK_l = 'l';
pub const SDLK_m = 'm';
pub const SDLK_n = 'n';
pub const SDLK_o = 'o';
pub const SDLK_p = 'p';
pub const SDLK_q = 'q';
pub const SDLK_r = 'r';
pub const SDLK_s = 's';
pub const SDLK_t = 't';
pub const SDLK_u = 'u';
pub const SDLK_v = 'v';
pub const SDLK_w = 'w';
pub const SDLK_x = 'x';
pub const SDLK_y = 'y';
pub const SDLK_z = 'z';
pub const SDLK_CAPSLOCK = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CAPSLOCK);
pub const SDLK_F1 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F1);
pub const SDLK_F2 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F2);
pub const SDLK_F3 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F3);
pub const SDLK_F4 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F4);
pub const SDLK_F5 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F5);
pub const SDLK_F6 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F6);
pub const SDLK_F7 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F7);
pub const SDLK_F8 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F8);
pub const SDLK_F9 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F9);
pub const SDLK_F10 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F10);
pub const SDLK_F11 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F11);
pub const SDLK_F12 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F12);
pub const SDLK_PRINTSCREEN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PRINTSCREEN);
pub const SDLK_SCROLLLOCK = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SCROLLLOCK);
pub const SDLK_PAUSE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAUSE);
pub const SDLK_INSERT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_INSERT);
pub const SDLK_HOME = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_HOME);
pub const SDLK_PAGEUP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAGEUP);
pub const SDLK_DELETE = '\x7f';
pub const SDLK_END = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_END);
pub const SDLK_PAGEDOWN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAGEDOWN);
pub const SDLK_RIGHT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RIGHT);
pub const SDLK_LEFT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LEFT);
pub const SDLK_DOWN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DOWN);
pub const SDLK_UP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_UP);
pub const SDLK_NUMLOCKCLEAR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_NUMLOCKCLEAR);
pub const SDLK_KP_DIVIDE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DIVIDE);
pub const SDLK_KP_MULTIPLY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MULTIPLY);
pub const SDLK_KP_MINUS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MINUS);
pub const SDLK_KP_PLUS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PLUS);
pub const SDLK_KP_ENTER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_ENTER);
pub const SDLK_KP_1 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_1);
pub const SDLK_KP_2 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_2);
pub const SDLK_KP_3 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_3);
pub const SDLK_KP_4 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_4);
pub const SDLK_KP_5 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_5);
pub const SDLK_KP_6 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_6);
pub const SDLK_KP_7 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_7);
pub const SDLK_KP_8 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_8);
pub const SDLK_KP_9 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_9);
pub const SDLK_KP_0 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_0);
pub const SDLK_KP_PERIOD = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PERIOD);
pub const SDLK_APPLICATION = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_APPLICATION);
pub const SDLK_POWER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_POWER);
pub const SDLK_KP_EQUALS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EQUALS);
pub const SDLK_F13 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F13);
pub const SDLK_F14 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F14);
pub const SDLK_F15 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F15);
pub const SDLK_F16 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F16);
pub const SDLK_F17 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F17);
pub const SDLK_F18 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F18);
pub const SDLK_F19 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F19);
pub const SDLK_F20 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F20);
pub const SDLK_F21 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F21);
pub const SDLK_F22 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F22);
pub const SDLK_F23 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F23);
pub const SDLK_F24 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F24);
pub const SDLK_EXECUTE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EXECUTE);
pub const SDLK_HELP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_HELP);
pub const SDLK_MENU = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MENU);
pub const SDLK_SELECT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SELECT);
pub const SDLK_STOP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_STOP);
pub const SDLK_AGAIN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AGAIN);
pub const SDLK_UNDO = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_UNDO);
pub const SDLK_CUT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CUT);
pub const SDLK_COPY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_COPY);
pub const SDLK_PASTE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PASTE);
pub const SDLK_FIND = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_FIND);
pub const SDLK_MUTE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MUTE);
pub const SDLK_VOLUMEUP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_VOLUMEUP);
pub const SDLK_VOLUMEDOWN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_VOLUMEDOWN);
pub const SDLK_KP_COMMA = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_COMMA);
pub const SDLK_KP_EQUALSAS400 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EQUALSAS400);
pub const SDLK_ALTERASE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_ALTERASE);
pub const SDLK_SYSREQ = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SYSREQ);
pub const SDLK_CANCEL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CANCEL);
pub const SDLK_CLEAR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CLEAR);
pub const SDLK_PRIOR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PRIOR);
pub const SDLK_RETURN2 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RETURN2);
pub const SDLK_SEPARATOR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SEPARATOR);
pub const SDLK_OUT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_OUT);
pub const SDLK_OPER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_OPER);
pub const SDLK_CLEARAGAIN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CLEARAGAIN);
pub const SDLK_CRSEL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CRSEL);
pub const SDLK_EXSEL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EXSEL);
pub const SDLK_KP_00 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_00);
pub const SDLK_KP_000 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_000);
pub const SDLK_THOUSANDSSEPARATOR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_THOUSANDSSEPARATOR);
pub const SDLK_DECIMALSEPARATOR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DECIMALSEPARATOR);
pub const SDLK_CURRENCYUNIT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CURRENCYUNIT);
pub const SDLK_CURRENCYSUBUNIT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CURRENCYSUBUNIT);
pub const SDLK_KP_LEFTPAREN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LEFTPAREN);
pub const SDLK_KP_RIGHTPAREN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_RIGHTPAREN);
pub const SDLK_KP_LEFTBRACE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LEFTBRACE);
pub const SDLK_KP_RIGHTBRACE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_RIGHTBRACE);
pub const SDLK_KP_TAB = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_TAB);
pub const SDLK_KP_BACKSPACE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_BACKSPACE);
pub const SDLK_KP_A = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_A);
pub const SDLK_KP_B = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_B);
pub const SDLK_KP_C = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_C);
pub const SDLK_KP_D = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_D);
pub const SDLK_KP_E = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_E);
pub const SDLK_KP_F = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_F);
pub const SDLK_KP_XOR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_XOR);
pub const SDLK_KP_POWER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_POWER);
pub const SDLK_KP_PERCENT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PERCENT);
pub const SDLK_KP_LESS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LESS);
pub const SDLK_KP_GREATER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_GREATER);
pub const SDLK_KP_AMPERSAND = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_AMPERSAND);
pub const SDLK_KP_DBLAMPERSAND = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DBLAMPERSAND);
pub const SDLK_KP_VERTICALBAR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_VERTICALBAR);
pub const SDLK_KP_DBLVERTICALBAR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DBLVERTICALBAR);
pub const SDLK_KP_COLON = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_COLON);
pub const SDLK_KP_HASH = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_HASH);
pub const SDLK_KP_SPACE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_SPACE);
pub const SDLK_KP_AT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_AT);
pub const SDLK_KP_EXCLAM = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EXCLAM);
pub const SDLK_KP_MEMSTORE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMSTORE);
pub const SDLK_KP_MEMRECALL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMRECALL);
pub const SDLK_KP_MEMCLEAR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMCLEAR);
pub const SDLK_KP_MEMADD = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMADD);
pub const SDLK_KP_MEMSUBTRACT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMSUBTRACT);
pub const SDLK_KP_MEMMULTIPLY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMMULTIPLY);
pub const SDLK_KP_MEMDIVIDE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMDIVIDE);
pub const SDLK_KP_PLUSMINUS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PLUSMINUS);
pub const SDLK_KP_CLEAR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_CLEAR);
pub const SDLK_KP_CLEARENTRY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_CLEARENTRY);
pub const SDLK_KP_BINARY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_BINARY);
pub const SDLK_KP_OCTAL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_OCTAL);
pub const SDLK_KP_DECIMAL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DECIMAL);
pub const SDLK_KP_HEXADECIMAL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_HEXADECIMAL);
pub const SDLK_LCTRL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LCTRL);
pub const SDLK_LSHIFT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LSHIFT);
pub const SDLK_LALT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LALT);
pub const SDLK_LGUI = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LGUI);
pub const SDLK_RCTRL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RCTRL);
pub const SDLK_RSHIFT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RSHIFT);
pub const SDLK_RALT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RALT);
pub const SDLK_RGUI = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RGUI);
pub const SDLK_MODE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MODE);
pub const SDLK_AUDIONEXT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIONEXT);
pub const SDLK_AUDIOPREV = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOPREV);
pub const SDLK_AUDIOSTOP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOSTOP);
pub const SDLK_AUDIOPLAY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOPLAY);
pub const SDLK_AUDIOMUTE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOMUTE);
pub const SDLK_MEDIASELECT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIASELECT);
pub const SDLK_WWW = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_WWW);
pub const SDLK_MAIL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MAIL);
pub const SDLK_CALCULATOR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CALCULATOR);
pub const SDLK_COMPUTER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_COMPUTER);
pub const SDLK_AC_SEARCH = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_SEARCH);
pub const SDLK_AC_HOME = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_HOME);
pub const SDLK_AC_BACK = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_BACK);
pub const SDLK_AC_FORWARD = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_FORWARD);
pub const SDLK_AC_STOP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_STOP);
pub const SDLK_AC_REFRESH = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_REFRESH);
pub const SDLK_AC_BOOKMARKS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_BOOKMARKS);
pub const SDLK_BRIGHTNESSDOWN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_BRIGHTNESSDOWN);
pub const SDLK_BRIGHTNESSUP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_BRIGHTNESSUP);
pub const SDLK_DISPLAYSWITCH = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DISPLAYSWITCH);
pub const SDLK_KBDILLUMTOGGLE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KBDILLUMTOGGLE);
pub const SDLK_KBDILLUMDOWN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KBDILLUMDOWN);
pub const SDLK_KBDILLUMUP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KBDILLUMUP);
pub const SDLK_EJECT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EJECT);
pub const SDLK_SLEEP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SLEEP);
pub const SDLK_APP1 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_APP1);
pub const SDLK_APP2 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_APP2);
pub const SDLK_AUDIOREWIND = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOREWIND);
pub const SDLK_AUDIOFASTFORWARD = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOFASTFORWARD);
pub const SDLK_SOFTLEFT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SOFTLEFT);
pub const SDLK_SOFTRIGHT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SOFTRIGHT);
pub const SDLK_CALL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CALL);
pub const SDLK_ENDCALL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_ENDCALL);
pub const SDL_KMOD_NONE = @as(c_uint, 0x0000);
pub const SDL_KMOD_LSHIFT = @as(c_uint, 0x0001);
pub const SDL_KMOD_RSHIFT = @as(c_uint, 0x0002);
pub const SDL_KMOD_LCTRL = @as(c_uint, 0x0040);
pub const SDL_KMOD_RCTRL = @as(c_uint, 0x0080);
pub const SDL_KMOD_LALT = @as(c_uint, 0x0100);
pub const SDL_KMOD_RALT = @as(c_uint, 0x0200);
pub const SDL_KMOD_LGUI = @as(c_uint, 0x0400);
pub const SDL_KMOD_RGUI = @as(c_uint, 0x0800);
pub const SDL_KMOD_NUM = @as(c_uint, 0x1000);
pub const SDL_KMOD_CAPS = @as(c_uint, 0x2000);
pub const SDL_KMOD_MODE = @as(c_uint, 0x4000);
pub const SDL_KMOD_SCROLL = @as(c_uint, 0x8000);
pub const SDL_KMOD_CTRL = SDL_KMOD_LCTRL | SDL_KMOD_RCTRL;
pub const SDL_KMOD_SHIFT = SDL_KMOD_LSHIFT | SDL_KMOD_RSHIFT;
pub const SDL_KMOD_ALT = SDL_KMOD_LALT | SDL_KMOD_RALT;
pub const SDL_KMOD_GUI = SDL_KMOD_LGUI | SDL_KMOD_RGUI;
pub const SDL_mouse_h_ = "";
pub const SDL_BUTTON_LEFT = @as(c_int, 1);
pub const SDL_BUTTON_MIDDLE = @as(c_int, 2);
pub const SDL_BUTTON_RIGHT = @as(c_int, 3);
pub const SDL_BUTTON_X1 = @as(c_int, 4);
pub const SDL_BUTTON_X2 = @as(c_int, 5);
pub inline fn SDL_BUTTON(X: anytype) @TypeOf(@as(c_uint, 1) << (X - @as(c_int, 1))) {
    _ = &X;
    return @as(c_uint, 1) << (X - @as(c_int, 1));
}
pub const SDL_BUTTON_LMASK = SDL_BUTTON(SDL_BUTTON_LEFT);
pub const SDL_BUTTON_MMASK = SDL_BUTTON(SDL_BUTTON_MIDDLE);
pub const SDL_BUTTON_RMASK = SDL_BUTTON(SDL_BUTTON_RIGHT);
pub const SDL_BUTTON_X1MASK = SDL_BUTTON(SDL_BUTTON_X1);
pub const SDL_BUTTON_X2MASK = SDL_BUTTON(SDL_BUTTON_X2);
pub const SDL_pen_h_ = "";
pub const SDL_PEN_INVALID = @import("std").zig.c_translation.cast(SDL_PenID, @as(c_int, 0));
pub const SDL_PEN_MOUSEID = @import("std").zig.c_translation.cast(SDL_MouseID, -@as(c_int, 2));
pub const SDL_PEN_INFO_UNKNOWN = -@as(c_int, 1);
pub const SDL_PEN_FLAG_DOWN_BIT_INDEX = @as(c_int, 13);
pub const SDL_PEN_FLAG_INK_BIT_INDEX = @as(c_int, 14);
pub const SDL_PEN_FLAG_ERASER_BIT_INDEX = @as(c_int, 15);
pub const SDL_PEN_FLAG_AXIS_BIT_OFFSET = @as(c_int, 16);
pub inline fn SDL_PEN_CAPABILITY(capbit: anytype) @TypeOf(@as(c_ulong, 1) << capbit) {
    _ = &capbit;
    return @as(c_ulong, 1) << capbit;
}
pub inline fn SDL_PEN_AXIS_CAPABILITY(axis: anytype) @TypeOf(SDL_PEN_CAPABILITY(axis + SDL_PEN_FLAG_AXIS_BIT_OFFSET)) {
    _ = &axis;
    return SDL_PEN_CAPABILITY(axis + SDL_PEN_FLAG_AXIS_BIT_OFFSET);
}
pub const SDL_PEN_TIP_INK = SDL_PEN_FLAG_INK_BIT_INDEX;
pub const SDL_PEN_TIP_ERASER = SDL_PEN_FLAG_ERASER_BIT_INDEX;
pub const SDL_PEN_DOWN_MASK = SDL_PEN_CAPABILITY(SDL_PEN_FLAG_DOWN_BIT_INDEX);
pub const SDL_PEN_INK_MASK = SDL_PEN_CAPABILITY(SDL_PEN_FLAG_INK_BIT_INDEX);
pub const SDL_PEN_ERASER_MASK = SDL_PEN_CAPABILITY(SDL_PEN_FLAG_ERASER_BIT_INDEX);
pub const SDL_PEN_AXIS_PRESSURE_MASK = SDL_PEN_AXIS_CAPABILITY(SDL_PEN_AXIS_PRESSURE);
pub const SDL_PEN_AXIS_XTILT_MASK = SDL_PEN_AXIS_CAPABILITY(SDL_PEN_AXIS_XTILT);
pub const SDL_PEN_AXIS_YTILT_MASK = SDL_PEN_AXIS_CAPABILITY(SDL_PEN_AXIS_YTILT);
pub const SDL_PEN_AXIS_DISTANCE_MASK = SDL_PEN_AXIS_CAPABILITY(SDL_PEN_AXIS_DISTANCE);
pub const SDL_PEN_AXIS_ROTATION_MASK = SDL_PEN_AXIS_CAPABILITY(SDL_PEN_AXIS_ROTATION);
pub const SDL_PEN_AXIS_SLIDER_MASK = SDL_PEN_AXIS_CAPABILITY(SDL_PEN_AXIS_SLIDER);
pub const SDL_PEN_AXIS_BIDIRECTIONAL_MASKS = SDL_PEN_AXIS_XTILT_MASK | SDL_PEN_AXIS_YTILT_MASK;
pub const SDL_touch_h_ = "";
pub const SDL_TOUCH_MOUSEID = @import("std").zig.c_translation.cast(SDL_MouseID, -@as(c_int, 1));
pub const SDL_MOUSE_TOUCHID = @import("std").zig.c_translation.cast(SDL_TouchID, -@as(c_int, 1));
pub const SDL_RELEASED = @as(c_int, 0);
pub const SDL_PRESSED = @as(c_int, 1);
pub const SDL_filesystem_h_ = "";
pub const SDL_GLOB_CASEINSENSITIVE = @as(c_uint, 1) << @as(c_int, 0);
pub const SDL_haptic_h_ = "";
pub const SDL_HAPTIC_CONSTANT = @as(c_uint, 1) << @as(c_int, 0);
pub const SDL_HAPTIC_SINE = @as(c_uint, 1) << @as(c_int, 1);
pub const SDL_HAPTIC_SQUARE = @as(c_uint, 1) << @as(c_int, 2);
pub const SDL_HAPTIC_TRIANGLE = @as(c_uint, 1) << @as(c_int, 3);
pub const SDL_HAPTIC_SAWTOOTHUP = @as(c_uint, 1) << @as(c_int, 4);
pub const SDL_HAPTIC_SAWTOOTHDOWN = @as(c_uint, 1) << @as(c_int, 5);
pub const SDL_HAPTIC_RAMP = @as(c_uint, 1) << @as(c_int, 6);
pub const SDL_HAPTIC_SPRING = @as(c_uint, 1) << @as(c_int, 7);
pub const SDL_HAPTIC_DAMPER = @as(c_uint, 1) << @as(c_int, 8);
pub const SDL_HAPTIC_INERTIA = @as(c_uint, 1) << @as(c_int, 9);
pub const SDL_HAPTIC_FRICTION = @as(c_uint, 1) << @as(c_int, 10);
pub const SDL_HAPTIC_LEFTRIGHT = @as(c_uint, 1) << @as(c_int, 11);
pub const SDL_HAPTIC_RESERVED1 = @as(c_uint, 1) << @as(c_int, 12);
pub const SDL_HAPTIC_RESERVED2 = @as(c_uint, 1) << @as(c_int, 13);
pub const SDL_HAPTIC_RESERVED3 = @as(c_uint, 1) << @as(c_int, 14);
pub const SDL_HAPTIC_CUSTOM = @as(c_uint, 1) << @as(c_int, 15);
pub const SDL_HAPTIC_GAIN = @as(c_uint, 1) << @as(c_int, 16);
pub const SDL_HAPTIC_AUTOCENTER = @as(c_uint, 1) << @as(c_int, 17);
pub const SDL_HAPTIC_STATUS = @as(c_uint, 1) << @as(c_int, 18);
pub const SDL_HAPTIC_PAUSE = @as(c_uint, 1) << @as(c_int, 19);
pub const SDL_HAPTIC_POLAR = @as(c_int, 0);
pub const SDL_HAPTIC_CARTESIAN = @as(c_int, 1);
pub const SDL_HAPTIC_SPHERICAL = @as(c_int, 2);
pub const SDL_HAPTIC_STEERING_AXIS = @as(c_int, 3);
pub const SDL_HAPTIC_INFINITY = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const SDL_hidapi_h_ = "";
pub const SDL_hints_h_ = "";
pub const SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED = "SDL_ALLOW_ALT_TAB_WHILE_GRABBED";
pub const SDL_HINT_ANDROID_ALLOW_RECREATE_ACTIVITY = "SDL_ANDROID_ALLOW_RECREATE_ACTIVITY";
pub const SDL_HINT_ANDROID_BLOCK_ON_PAUSE = "SDL_ANDROID_BLOCK_ON_PAUSE";
pub const SDL_HINT_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO = "SDL_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO";
pub const SDL_HINT_ANDROID_TRAP_BACK_BUTTON = "SDL_ANDROID_TRAP_BACK_BUTTON";
pub const SDL_HINT_APP_ID = "SDL_APP_ID";
pub const SDL_HINT_APP_NAME = "SDL_APP_NAME";
pub const SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS = "SDL_APPLE_TV_CONTROLLER_UI_EVENTS";
pub const SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION = "SDL_APPLE_TV_REMOTE_ALLOW_ROTATION";
pub const SDL_HINT_AUDIO_CATEGORY = "SDL_AUDIO_CATEGORY";
pub const SDL_HINT_AUDIO_DEVICE_APP_NAME = "SDL_AUDIO_DEVICE_APP_NAME";
pub const SDL_HINT_AUDIO_DEVICE_APP_ICON_NAME = "SDL_AUDIO_DEVICE_APP_ICON_NAME";
pub const SDL_HINT_AUDIO_DEVICE_SAMPLE_FRAMES = "SDL_AUDIO_DEVICE_SAMPLE_FRAMES";
pub const SDL_HINT_AUDIO_DEVICE_STREAM_NAME = "SDL_AUDIO_DEVICE_STREAM_NAME";
pub const SDL_HINT_AUDIO_DEVICE_STREAM_ROLE = "SDL_AUDIO_DEVICE_STREAM_ROLE";
pub const SDL_HINT_AUDIO_DRIVER = "SDL_AUDIO_DRIVER";
pub const SDL_HINT_AUDIO_INCLUDE_MONITORS = "SDL_AUDIO_INCLUDE_MONITORS";
pub const SDL_HINT_AUTO_UPDATE_JOYSTICKS = "SDL_AUTO_UPDATE_JOYSTICKS";
pub const SDL_HINT_AUTO_UPDATE_SENSORS = "SDL_AUTO_UPDATE_SENSORS";
pub const SDL_HINT_BMP_SAVE_LEGACY_FORMAT = "SDL_BMP_SAVE_LEGACY_FORMAT";
pub const SDL_HINT_CAMERA_DRIVER = "SDL_CAMERA_DRIVER";
pub const SDL_HINT_CPU_FEATURE_MASK = "SDL_CPU_FEATURE_MASK";
pub const SDL_HINT_JOYSTICK_DIRECTINPUT = "SDL_JOYSTICK_DIRECTINPUT";
pub const SDL_HINT_FILE_DIALOG_DRIVER = "SDL_FILE_DIALOG_DRIVER";
pub const SDL_HINT_DISPLAY_USABLE_BOUNDS = "SDL_DISPLAY_USABLE_BOUNDS";
pub const SDL_HINT_EMSCRIPTEN_ASYNCIFY = "SDL_EMSCRIPTEN_ASYNCIFY";
pub const SDL_HINT_EMSCRIPTEN_CANVAS_SELECTOR = "SDL_EMSCRIPTEN_CANVAS_SELECTOR";
pub const SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT = "SDL_EMSCRIPTEN_KEYBOARD_ELEMENT";
pub const SDL_HINT_ENABLE_SCREEN_KEYBOARD = "SDL_ENABLE_SCREEN_KEYBOARD";
pub const SDL_HINT_EVENT_LOGGING = "SDL_EVENT_LOGGING";
pub const SDL_HINT_FORCE_RAISEWINDOW = "SDL_FORCE_RAISEWINDOW";
pub const SDL_HINT_FRAMEBUFFER_ACCELERATION = "SDL_FRAMEBUFFER_ACCELERATION";
pub const SDL_HINT_GAMECONTROLLERCONFIG = "SDL_GAMECONTROLLERCONFIG";
pub const SDL_HINT_GAMECONTROLLERCONFIG_FILE = "SDL_GAMECONTROLLERCONFIG_FILE";
pub const SDL_HINT_GAMECONTROLLERTYPE = "SDL_GAMECONTROLLERTYPE";
pub const SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES = "SDL_GAMECONTROLLER_IGNORE_DEVICES";
pub const SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT = "SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT";
pub const SDL_HINT_GAMECONTROLLER_SENSOR_FUSION = "SDL_GAMECONTROLLER_SENSOR_FUSION";
pub const SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT = "SDL_GDK_TEXTINPUT_DEFAULT_TEXT";
pub const SDL_HINT_GDK_TEXTINPUT_DESCRIPTION = "SDL_GDK_TEXTINPUT_DESCRIPTION";
pub const SDL_HINT_GDK_TEXTINPUT_MAX_LENGTH = "SDL_GDK_TEXTINPUT_MAX_LENGTH";
pub const SDL_HINT_GDK_TEXTINPUT_SCOPE = "SDL_GDK_TEXTINPUT_SCOPE";
pub const SDL_HINT_GDK_TEXTINPUT_TITLE = "SDL_GDK_TEXTINPUT_TITLE";
pub const SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS = "SDL_HIDAPI_ENUMERATE_ONLY_CONTROLLERS";
pub const SDL_HINT_HIDAPI_IGNORE_DEVICES = "SDL_HIDAPI_IGNORE_DEVICES";
pub const SDL_HINT_IME_INTERNAL_EDITING = "SDL_IME_INTERNAL_EDITING";
pub const SDL_HINT_IME_SHOW_UI = "SDL_IME_SHOW_UI";
pub const SDL_HINT_IOS_HIDE_HOME_INDICATOR = "SDL_IOS_HIDE_HOME_INDICATOR";
pub const SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS = "SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS";
pub const SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES = "SDL_JOYSTICK_ARCADESTICK_DEVICES";
pub const SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED = "SDL_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED";
pub const SDL_HINT_JOYSTICK_BLACKLIST_DEVICES = "SDL_JOYSTICK_BLACKLIST_DEVICES";
pub const SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED = "SDL_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED";
pub const SDL_HINT_JOYSTICK_DEVICE = "SDL_JOYSTICK_DEVICE";
pub const SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES = "SDL_JOYSTICK_FLIGHTSTICK_DEVICES";
pub const SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED = "SDL_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED";
pub const SDL_HINT_JOYSTICK_GAMECUBE_DEVICES = "SDL_JOYSTICK_GAMECUBE_DEVICES";
pub const SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED = "SDL_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED";
pub const SDL_HINT_JOYSTICK_HIDAPI = "SDL_JOYSTICK_HIDAPI";
pub const SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS = "SDL_JOYSTICK_HIDAPI_COMBINE_JOY_CONS";
pub const SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE = "SDL_JOYSTICK_HIDAPI_GAMECUBE";
pub const SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE = "SDL_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE";
pub const SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS = "SDL_JOYSTICK_HIDAPI_JOY_CONS";
pub const SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED = "SDL_JOYSTICK_HIDAPI_JOYCON_HOME_LED";
pub const SDL_HINT_JOYSTICK_HIDAPI_LUNA = "SDL_JOYSTICK_HIDAPI_LUNA";
pub const SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC = "SDL_JOYSTICK_HIDAPI_NINTENDO_CLASSIC";
pub const SDL_HINT_JOYSTICK_HIDAPI_PS3 = "SDL_JOYSTICK_HIDAPI_PS3";
pub const SDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER = "SDL_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER";
pub const SDL_HINT_JOYSTICK_HIDAPI_PS4 = "SDL_JOYSTICK_HIDAPI_PS4";
pub const SDL_HINT_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL = "SDL_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL";
pub const SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE = "SDL_JOYSTICK_HIDAPI_PS4_RUMBLE";
pub const SDL_HINT_JOYSTICK_HIDAPI_PS5 = "SDL_JOYSTICK_HIDAPI_PS5";
pub const SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED = "SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED";
pub const SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE = "SDL_JOYSTICK_HIDAPI_PS5_RUMBLE";
pub const SDL_HINT_JOYSTICK_HIDAPI_SHIELD = "SDL_JOYSTICK_HIDAPI_SHIELD";
pub const SDL_HINT_JOYSTICK_HIDAPI_STADIA = "SDL_JOYSTICK_HIDAPI_STADIA";
pub const SDL_HINT_JOYSTICK_HIDAPI_STEAM = "SDL_JOYSTICK_HIDAPI_STEAM";
pub const SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK = "SDL_JOYSTICK_HIDAPI_STEAMDECK";
pub const SDL_HINT_JOYSTICK_HIDAPI_SWITCH = "SDL_JOYSTICK_HIDAPI_SWITCH";
pub const SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED = "SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED";
pub const SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED = "SDL_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED";
pub const SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS = "SDL_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS";
pub const SDL_HINT_JOYSTICK_HIDAPI_WII = "SDL_JOYSTICK_HIDAPI_WII";
pub const SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED = "SDL_JOYSTICK_HIDAPI_WII_PLAYER_LED";
pub const SDL_HINT_JOYSTICK_HIDAPI_XBOX = "SDL_JOYSTICK_HIDAPI_XBOX";
pub const SDL_HINT_JOYSTICK_HIDAPI_XBOX_360 = "SDL_JOYSTICK_HIDAPI_XBOX_360";
pub const SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED = "SDL_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED";
pub const SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS = "SDL_JOYSTICK_HIDAPI_XBOX_360_WIRELESS";
pub const SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE = "SDL_JOYSTICK_HIDAPI_XBOX_ONE";
pub const SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED = "SDL_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED";
pub const SDL_HINT_JOYSTICK_IOKIT = "SDL_JOYSTICK_IOKIT";
pub const SDL_HINT_JOYSTICK_LINUX_CLASSIC = "SDL_JOYSTICK_LINUX_CLASSIC";
pub const SDL_HINT_JOYSTICK_LINUX_DEADZONES = "SDL_JOYSTICK_LINUX_DEADZONES";
pub const SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS = "SDL_JOYSTICK_LINUX_DIGITAL_HATS";
pub const SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES = "SDL_JOYSTICK_LINUX_HAT_DEADZONES";
pub const SDL_HINT_JOYSTICK_MFI = "SDL_JOYSTICK_MFI";
pub const SDL_HINT_JOYSTICK_RAWINPUT = "SDL_JOYSTICK_RAWINPUT";
pub const SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT = "SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT";
pub const SDL_HINT_JOYSTICK_ROG_CHAKRAM = "SDL_JOYSTICK_ROG_CHAKRAM";
pub const SDL_HINT_JOYSTICK_THREAD = "SDL_JOYSTICK_THREAD";
pub const SDL_HINT_JOYSTICK_THROTTLE_DEVICES = "SDL_JOYSTICK_THROTTLE_DEVICES";
pub const SDL_HINT_JOYSTICK_THROTTLE_DEVICES_EXCLUDED = "SDL_JOYSTICK_THROTTLE_DEVICES_EXCLUDED";
pub const SDL_HINT_JOYSTICK_WGI = "SDL_JOYSTICK_WGI";
pub const SDL_HINT_JOYSTICK_WHEEL_DEVICES = "SDL_JOYSTICK_WHEEL_DEVICES";
pub const SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED = "SDL_JOYSTICK_WHEEL_DEVICES_EXCLUDED";
pub const SDL_HINT_JOYSTICK_ZERO_CENTERED_DEVICES = "SDL_JOYSTICK_ZERO_CENTERED_DEVICES";
pub const SDL_HINT_KMSDRM_DEVICE_INDEX = "SDL_KMSDRM_DEVICE_INDEX";
pub const SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER = "SDL_KMSDRM_REQUIRE_DRM_MASTER";
pub const SDL_HINT_LOGGING = "SDL_LOGGING";
pub const SDL_HINT_MAC_BACKGROUND_APP = "SDL_MAC_BACKGROUND_APP";
pub const SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK = "SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK";
pub const SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH = "SDL_MAC_OPENGL_ASYNC_DISPATCH";
pub const SDL_HINT_MAIN_CALLBACK_RATE = "SDL_MAIN_CALLBACK_RATE";
pub const SDL_HINT_MOUSE_AUTO_CAPTURE = "SDL_MOUSE_AUTO_CAPTURE";
pub const SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS = "SDL_MOUSE_DOUBLE_CLICK_RADIUS";
pub const SDL_HINT_MOUSE_DOUBLE_CLICK_TIME = "SDL_MOUSE_DOUBLE_CLICK_TIME";
pub const SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH = "SDL_MOUSE_FOCUS_CLICKTHROUGH";
pub const SDL_HINT_MOUSE_NORMAL_SPEED_SCALE = "SDL_MOUSE_NORMAL_SPEED_SCALE";
pub const SDL_HINT_MOUSE_RELATIVE_MODE_CENTER = "SDL_MOUSE_RELATIVE_MODE_CENTER";
pub const SDL_HINT_MOUSE_RELATIVE_MODE_WARP = "SDL_MOUSE_RELATIVE_MODE_WARP";
pub const SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE = "SDL_MOUSE_RELATIVE_SPEED_SCALE";
pub const SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE = "SDL_MOUSE_RELATIVE_SYSTEM_SCALE";
pub const SDL_HINT_MOUSE_RELATIVE_WARP_MOTION = "SDL_MOUSE_RELATIVE_WARP_MOTION";
pub const SDL_HINT_MOUSE_TOUCH_EVENTS = "SDL_MOUSE_TOUCH_EVENTS";
pub const SDL_HINT_NO_SIGNAL_HANDLERS = "SDL_NO_SIGNAL_HANDLERS";
pub const SDL_HINT_OPENGL_ES_DRIVER = "SDL_OPENGL_ES_DRIVER";
pub const SDL_HINT_ORIENTATIONS = "SDL_ORIENTATIONS";
pub const SDL_HINT_PEN_DELAY_MOUSE_BUTTON = "SDL_PEN_DELAY_MOUSE_BUTTON";
pub const SDL_HINT_PEN_NOT_MOUSE = "SDL_PEN_NOT_MOUSE";
pub const SDL_HINT_POLL_SENTINEL = "SDL_POLL_SENTINEL";
pub const SDL_HINT_PREFERRED_LOCALES = "SDL_PREFERRED_LOCALES";
pub const SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE = "SDL_QUIT_ON_LAST_WINDOW_CLOSE";
pub const SDL_HINT_RENDER_DIRECT3D_THREADSAFE = "SDL_RENDER_DIRECT3D_THREADSAFE";
pub const SDL_HINT_RENDER_DIRECT3D11_DEBUG = "SDL_RENDER_DIRECT3D11_DEBUG";
pub const SDL_HINT_RENDER_VULKAN_DEBUG = "SDL_RENDER_VULKAN_DEBUG";
pub const SDL_HINT_RENDER_DRIVER = "SDL_RENDER_DRIVER";
pub const SDL_HINT_RENDER_LINE_METHOD = "SDL_RENDER_LINE_METHOD";
pub const SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE = "SDL_RENDER_METAL_PREFER_LOW_POWER_DEVICE";
pub const SDL_HINT_RENDER_VSYNC = "SDL_RENDER_VSYNC";
pub const SDL_HINT_RETURN_KEY_HIDES_IME = "SDL_RETURN_KEY_HIDES_IME";
pub const SDL_HINT_ROG_GAMEPAD_MICE = "SDL_ROG_GAMEPAD_MICE";
pub const SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED = "SDL_ROG_GAMEPAD_MICE_EXCLUDED";
pub const SDL_HINT_RPI_VIDEO_LAYER = "SDL_RPI_VIDEO_LAYER";
pub const SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME = "SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME";
pub const SDL_HINT_SHUTDOWN_DBUS_ON_QUIT = "SDL_SHUTDOWN_DBUS_ON_QUIT";
pub const SDL_HINT_STORAGE_TITLE_DRIVER = "SDL_STORAGE_TITLE_DRIVER";
pub const SDL_HINT_STORAGE_USER_DRIVER = "SDL_STORAGE_USER_DRIVER";
pub const SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL = "SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL";
pub const SDL_HINT_THREAD_PRIORITY_POLICY = "SDL_THREAD_PRIORITY_POLICY";
pub const SDL_HINT_TIMER_RESOLUTION = "SDL_TIMER_RESOLUTION";
pub const SDL_HINT_TOUCH_MOUSE_EVENTS = "SDL_TOUCH_MOUSE_EVENTS";
pub const SDL_HINT_TRACKPAD_IS_TOUCH_ONLY = "SDL_TRACKPAD_IS_TOUCH_ONLY";
pub const SDL_HINT_TV_REMOTE_AS_JOYSTICK = "SDL_TV_REMOTE_AS_JOYSTICK";
pub const SDL_HINT_VIDEO_ALLOW_SCREENSAVER = "SDL_VIDEO_ALLOW_SCREENSAVER";
pub const SDL_HINT_VIDEO_DOUBLE_BUFFER = "SDL_VIDEO_DOUBLE_BUFFER";
pub const SDL_HINT_VIDEO_DRIVER = "SDL_VIDEO_DRIVER";
pub const SDL_HINT_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK = "SDL_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK";
pub const SDL_HINT_VIDEO_FORCE_EGL = "SDL_VIDEO_FORCE_EGL";
pub const SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES = "SDL_VIDEO_MAC_FULLSCREEN_SPACES";
pub const SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS = "SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS";
pub const SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS = "SDL_VIDEO_SYNC_WINDOW_OPERATIONS";
pub const SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR = "SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR";
pub const SDL_HINT_VIDEO_WAYLAND_EMULATE_MOUSE_WARP = "SDL_VIDEO_WAYLAND_EMULATE_MOUSE_WARP";
pub const SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION = "SDL_VIDEO_WAYLAND_MODE_EMULATION";
pub const SDL_HINT_VIDEO_WAYLAND_MODE_SCALING = "SDL_VIDEO_WAYLAND_MODE_SCALING";
pub const SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR = "SDL_VIDEO_WAYLAND_PREFER_LIBDECOR";
pub const SDL_HINT_VIDEO_WAYLAND_SCALE_TO_DISPLAY = "SDL_VIDEO_WAYLAND_SCALE_TO_DISPLAY";
pub const SDL_HINT_VIDEO_WIN_D3DCOMPILER = "SDL_VIDEO_WIN_D3DCOMPILER";
pub const SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR = "SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR";
pub const SDL_HINT_VIDEO_X11_NET_WM_PING = "SDL_VIDEO_X11_NET_WM_PING";
pub const SDL_HINT_VIDEO_X11_SCALING_FACTOR = "SDL_VIDEO_X11_SCALING_FACTOR";
pub const SDL_HINT_VIDEO_X11_WINDOW_VISUALID = "SDL_VIDEO_X11_WINDOW_VISUALID";
pub const SDL_HINT_VIDEO_X11_XRANDR = "SDL_VIDEO_X11_XRANDR";
pub const SDL_HINT_VITA_TOUCH_MOUSE_DEVICE = "SDL_VITA_TOUCH_MOUSE_DEVICE";
pub const SDL_HINT_WAVE_FACT_CHUNK = "SDL_WAVE_FACT_CHUNK";
pub const SDL_HINT_WAVE_RIFF_CHUNK_SIZE = "SDL_WAVE_RIFF_CHUNK_SIZE";
pub const SDL_HINT_WAVE_TRUNCATION = "SDL_WAVE_TRUNCATION";
pub const SDL_HINT_WINDOW_ACTIVATE_WHEN_RAISED = "SDL_WINDOW_ACTIVATE_WHEN_RAISED";
pub const SDL_HINT_WINDOW_ACTIVATE_WHEN_SHOWN = "SDL_WINDOW_ACTIVATE_WHEN_SHOWN";
pub const SDL_HINT_WINDOW_ALLOW_TOPMOST = "SDL_WINDOW_ALLOW_TOPMOST";
pub const SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN = "SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN";
pub const SDL_HINT_WINDOWS_CLOSE_ON_ALT_F4 = "SDL_WINDOWS_CLOSE_ON_ALT_F4";
pub const SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS = "SDL_WINDOWS_ENABLE_MENU_MNEMONICS";
pub const SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP = "SDL_WINDOWS_ENABLE_MESSAGELOOP";
pub const SDL_HINT_WINDOWS_RAW_KEYBOARD = "SDL_WINDOWS_RAW_KEYBOARD";
pub const SDL_HINT_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS = "SDL_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS";
pub const SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL = "SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL";
pub const SDL_HINT_WINDOWS_INTRESOURCE_ICON = "SDL_WINDOWS_INTRESOURCE_ICON";
pub const SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL = "SDL_WINDOWS_INTRESOURCE_ICON_SMALL";
pub const SDL_HINT_WINDOWS_USE_D3D9EX = "SDL_WINDOWS_USE_D3D9EX";
pub const SDL_HINT_WINRT_HANDLE_BACK_BUTTON = "SDL_WINRT_HANDLE_BACK_BUTTON";
pub const SDL_HINT_WINRT_PRIVACY_POLICY_LABEL = "SDL_WINRT_PRIVACY_POLICY_LABEL";
pub const SDL_HINT_WINRT_PRIVACY_POLICY_URL = "SDL_WINRT_PRIVACY_POLICY_URL";
pub const SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT = "SDL_X11_FORCE_OVERRIDE_REDIRECT";
pub const SDL_HINT_X11_WINDOW_TYPE = "SDL_X11_WINDOW_TYPE";
pub const SDL_HINT_XINPUT_ENABLED = "SDL_XINPUT_ENABLED";
pub const SDL_init_h_ = "";
pub const SDL_INIT_TIMER = @as(c_uint, 0x00000001);
pub const SDL_INIT_AUDIO = @as(c_uint, 0x00000010);
pub const SDL_INIT_VIDEO = @as(c_uint, 0x00000020);
pub const SDL_INIT_JOYSTICK = @as(c_uint, 0x00000200);
pub const SDL_INIT_HAPTIC = @as(c_uint, 0x00001000);
pub const SDL_INIT_GAMEPAD = @as(c_uint, 0x00002000);
pub const SDL_INIT_EVENTS = @as(c_uint, 0x00004000);
pub const SDL_INIT_SENSOR = @as(c_uint, 0x00008000);
pub const SDL_INIT_CAMERA = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const SDL_loadso_h_ = "";
pub const SDL_locale_h = "";
pub const SDL_log_h_ = "";
pub const SDL_messagebox_h_ = "";
pub const SDL_MESSAGEBOX_ERROR = @as(c_uint, 0x00000010);
pub const SDL_MESSAGEBOX_WARNING = @as(c_uint, 0x00000020);
pub const SDL_MESSAGEBOX_INFORMATION = @as(c_uint, 0x00000040);
pub const SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT = @as(c_uint, 0x00000080);
pub const SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT = @as(c_uint, 0x00000100);
pub const SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = @as(c_uint, 0x00000001);
pub const SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = @as(c_uint, 0x00000002);
pub const SDL_metal_h_ = "";
pub const SDL_misc_h_ = "";
pub const SDL_platform_h_ = "";
pub const SDL_render_h_ = "";
pub const SDL_SOFTWARE_RENDERER = "software";
pub const SDL_PROP_RENDERER_CREATE_NAME_STRING = "name";
pub const SDL_PROP_RENDERER_CREATE_WINDOW_POINTER = "window";
pub const SDL_PROP_RENDERER_CREATE_SURFACE_POINTER = "surface";
pub const SDL_PROP_RENDERER_CREATE_OUTPUT_COLORSPACE_NUMBER = "output_colorspace";
pub const SDL_PROP_RENDERER_CREATE_PRESENT_VSYNC_NUMBER = "present_vsync";
pub const SDL_PROP_RENDERER_CREATE_VULKAN_INSTANCE_POINTER = "vulkan.instance";
pub const SDL_PROP_RENDERER_CREATE_VULKAN_SURFACE_NUMBER = "vulkan.surface";
pub const SDL_PROP_RENDERER_CREATE_VULKAN_PHYSICAL_DEVICE_POINTER = "vulkan.physical_device";
pub const SDL_PROP_RENDERER_CREATE_VULKAN_DEVICE_POINTER = "vulkan.device";
pub const SDL_PROP_RENDERER_CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER = "vulkan.graphics_queue_family_index";
pub const SDL_PROP_RENDERER_CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER = "vulkan.present_queue_family_index";
pub const SDL_PROP_RENDERER_NAME_STRING = "SDL.renderer.name";
pub const SDL_PROP_RENDERER_WINDOW_POINTER = "SDL.renderer.window";
pub const SDL_PROP_RENDERER_SURFACE_POINTER = "SDL.renderer.surface";
pub const SDL_PROP_RENDERER_VSYNC_NUMBER = "SDL.renderer.vsync";
pub const SDL_PROP_RENDERER_MAX_TEXTURE_SIZE_NUMBER = "SDL.renderer.max_texture_size";
pub const SDL_PROP_RENDERER_TEXTURE_FORMATS_POINTER = "SDL.renderer.texture_formats";
pub const SDL_PROP_RENDERER_OUTPUT_COLORSPACE_NUMBER = "SDL.renderer.output_colorspace";
pub const SDL_PROP_RENDERER_HDR_ENABLED_BOOLEAN = "SDL.renderer.HDR_enabled";
pub const SDL_PROP_RENDERER_SDR_WHITE_POINT_FLOAT = "SDL.renderer.SDR_white_point";
pub const SDL_PROP_RENDERER_HDR_HEADROOM_FLOAT = "SDL.renderer.HDR_headroom";
pub const SDL_PROP_RENDERER_D3D9_DEVICE_POINTER = "SDL.renderer.d3d9.device";
pub const SDL_PROP_RENDERER_D3D11_DEVICE_POINTER = "SDL.renderer.d3d11.device";
pub const SDL_PROP_RENDERER_D3D11_SWAPCHAIN_POINTER = "SDL.renderer.d3d11.swap_chain";
pub const SDL_PROP_RENDERER_D3D12_DEVICE_POINTER = "SDL.renderer.d3d12.device";
pub const SDL_PROP_RENDERER_D3D12_SWAPCHAIN_POINTER = "SDL.renderer.d3d12.swap_chain";
pub const SDL_PROP_RENDERER_D3D12_COMMAND_QUEUE_POINTER = "SDL.renderer.d3d12.command_queue";
pub const SDL_PROP_RENDERER_VULKAN_INSTANCE_POINTER = "SDL.renderer.vulkan.instance";
pub const SDL_PROP_RENDERER_VULKAN_SURFACE_NUMBER = "SDL.renderer.vulkan.surface";
pub const SDL_PROP_RENDERER_VULKAN_PHYSICAL_DEVICE_POINTER = "SDL.renderer.vulkan.physical_device";
pub const SDL_PROP_RENDERER_VULKAN_DEVICE_POINTER = "SDL.renderer.vulkan.device";
pub const SDL_PROP_RENDERER_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER = "SDL.renderer.vulkan.graphics_queue_family_index";
pub const SDL_PROP_RENDERER_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER = "SDL.renderer.vulkan.present_queue_family_index";
pub const SDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER = "SDL.renderer.vulkan.swapchain_image_count";
pub const SDL_PROP_TEXTURE_CREATE_COLORSPACE_NUMBER = "colorspace";
pub const SDL_PROP_TEXTURE_CREATE_FORMAT_NUMBER = "format";
pub const SDL_PROP_TEXTURE_CREATE_ACCESS_NUMBER = "access";
pub const SDL_PROP_TEXTURE_CREATE_WIDTH_NUMBER = "width";
pub const SDL_PROP_TEXTURE_CREATE_HEIGHT_NUMBER = "height";
pub const SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT = "SDR_white_point";
pub const SDL_PROP_TEXTURE_CREATE_HDR_HEADROOM_FLOAT = "HDR_headroom";
pub const SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_POINTER = "d3d11.texture";
pub const SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_U_POINTER = "d3d11.texture_u";
pub const SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_V_POINTER = "d3d11.texture_v";
pub const SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_POINTER = "d3d12.texture";
pub const SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_U_POINTER = "d3d12.texture_u";
pub const SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_V_POINTER = "d3d12.texture_v";
pub const SDL_PROP_TEXTURE_CREATE_METAL_PIXELBUFFER_POINTER = "metal.pixelbuffer";
pub const SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_NUMBER = "opengl.texture";
pub const SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_UV_NUMBER = "opengl.texture_uv";
pub const SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_U_NUMBER = "opengl.texture_u";
pub const SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_V_NUMBER = "opengl.texture_v";
pub const SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER = "opengles2.texture";
pub const SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_UV_NUMBER = "opengles2.texture_uv";
pub const SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_U_NUMBER = "opengles2.texture_u";
pub const SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_V_NUMBER = "opengles2.texture_v";
pub const SDL_PROP_TEXTURE_CREATE_VULKAN_TEXTURE_NUMBER = "vulkan.texture";
pub const SDL_PROP_TEXTURE_COLORSPACE_NUMBER = "SDL.texture.colorspace";
pub const SDL_PROP_TEXTURE_SDR_WHITE_POINT_FLOAT = "SDL.texture.SDR_white_point";
pub const SDL_PROP_TEXTURE_HDR_HEADROOM_FLOAT = "SDL.texture.HDR_headroom";
pub const SDL_PROP_TEXTURE_D3D11_TEXTURE_POINTER = "SDL.texture.d3d11.texture";
pub const SDL_PROP_TEXTURE_D3D11_TEXTURE_U_POINTER = "SDL.texture.d3d11.texture_u";
pub const SDL_PROP_TEXTURE_D3D11_TEXTURE_V_POINTER = "SDL.texture.d3d11.texture_v";
pub const SDL_PROP_TEXTURE_D3D12_TEXTURE_POINTER = "SDL.texture.d3d12.texture";
pub const SDL_PROP_TEXTURE_D3D12_TEXTURE_U_POINTER = "SDL.texture.d3d12.texture_u";
pub const SDL_PROP_TEXTURE_D3D12_TEXTURE_V_POINTER = "SDL.texture.d3d12.texture_v";
pub const SDL_PROP_TEXTURE_OPENGL_TEXTURE_NUMBER = "SDL.texture.opengl.texture";
pub const SDL_PROP_TEXTURE_OPENGL_TEXTURE_UV_NUMBER = "SDL.texture.opengl.texture_uv";
pub const SDL_PROP_TEXTURE_OPENGL_TEXTURE_U_NUMBER = "SDL.texture.opengl.texture_u";
pub const SDL_PROP_TEXTURE_OPENGL_TEXTURE_V_NUMBER = "SDL.texture.opengl.texture_v";
pub const SDL_PROP_TEXTURE_OPENGL_TEXTURE_TARGET_NUMBER = "SDL.texture.opengl.target";
pub const SDL_PROP_TEXTURE_OPENGL_TEX_W_FLOAT = "SDL.texture.opengl.tex_w";
pub const SDL_PROP_TEXTURE_OPENGL_TEX_H_FLOAT = "SDL.texture.opengl.tex_h";
pub const SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_NUMBER = "SDL.texture.opengles2.texture";
pub const SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_UV_NUMBER = "SDL.texture.opengles2.texture_uv";
pub const SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_U_NUMBER = "SDL.texture.opengles2.texture_u";
pub const SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_V_NUMBER = "SDL.texture.opengles2.texture_v";
pub const SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_TARGET_NUMBER = "SDL.texture.opengles2.target";
pub const SDL_PROP_TEXTURE_VULKAN_TEXTURE_NUMBER = "SDL.texture.vulkan.texture";
pub const SDL_RENDERER_VSYNC_DISABLED = @as(c_int, 0);
pub const SDL_RENDERER_VSYNC_ADAPTIVE = -@as(c_int, 1);
pub const SDL_storage_h_ = "";
pub const SDL_system_h_ = "";
pub const SDL_time_h_ = "";
pub const SDL_timer_h_ = "";
pub const SDL_MS_PER_SECOND = @as(c_int, 1000);
pub const SDL_US_PER_SECOND = @import("std").zig.c_translation.promoteIntLiteral(c_int, 1000000, .decimal);
pub const SDL_NS_PER_SECOND = @as(c_longlong, 1000000000);
pub const SDL_NS_PER_MS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 1000000, .decimal);
pub const SDL_NS_PER_US = @as(c_int, 1000);
pub inline fn SDL_SECONDS_TO_NS(S: anytype) @TypeOf(@import("std").zig.c_translation.cast(Uint64, S) * SDL_NS_PER_SECOND) {
    _ = &S;
    return @import("std").zig.c_translation.cast(Uint64, S) * SDL_NS_PER_SECOND;
}
pub inline fn SDL_NS_TO_SECONDS(NS: anytype) @TypeOf(@import("std").zig.c_translation.MacroArithmetic.div(NS, SDL_NS_PER_SECOND)) {
    _ = &NS;
    return @import("std").zig.c_translation.MacroArithmetic.div(NS, SDL_NS_PER_SECOND);
}
pub inline fn SDL_MS_TO_NS(MS: anytype) @TypeOf(@import("std").zig.c_translation.cast(Uint64, MS) * SDL_NS_PER_MS) {
    _ = &MS;
    return @import("std").zig.c_translation.cast(Uint64, MS) * SDL_NS_PER_MS;
}
pub inline fn SDL_NS_TO_MS(NS: anytype) @TypeOf(@import("std").zig.c_translation.MacroArithmetic.div(NS, SDL_NS_PER_MS)) {
    _ = &NS;
    return @import("std").zig.c_translation.MacroArithmetic.div(NS, SDL_NS_PER_MS);
}
pub inline fn SDL_US_TO_NS(US: anytype) @TypeOf(@import("std").zig.c_translation.cast(Uint64, US) * SDL_NS_PER_US) {
    _ = &US;
    return @import("std").zig.c_translation.cast(Uint64, US) * SDL_NS_PER_US;
}
pub inline fn SDL_NS_TO_US(NS: anytype) @TypeOf(@import("std").zig.c_translation.MacroArithmetic.div(NS, SDL_NS_PER_US)) {
    _ = &NS;
    return @import("std").zig.c_translation.MacroArithmetic.div(NS, SDL_NS_PER_US);
}
pub const SDL_version_h_ = "";
pub const SDL_MAJOR_VERSION = @as(c_int, 3);
pub const SDL_MINOR_VERSION = @as(c_int, 1);
pub const SDL_MICRO_VERSION = @as(c_int, 2);
pub inline fn SDL_VERSIONNUM(major: anytype, minor: anytype, patch: anytype) @TypeOf(((major * @import("std").zig.c_translation.promoteIntLiteral(c_int, 1000000, .decimal)) + (minor * @as(c_int, 1000))) + patch) {
    _ = &major;
    _ = &minor;
    _ = &patch;
    return ((major * @import("std").zig.c_translation.promoteIntLiteral(c_int, 1000000, .decimal)) + (minor * @as(c_int, 1000))) + patch;
}
pub inline fn SDL_VERSIONNUM_MAJOR(version: anytype) @TypeOf(@import("std").zig.c_translation.MacroArithmetic.div(version, @import("std").zig.c_translation.promoteIntLiteral(c_int, 1000000, .decimal))) {
    _ = &version;
    return @import("std").zig.c_translation.MacroArithmetic.div(version, @import("std").zig.c_translation.promoteIntLiteral(c_int, 1000000, .decimal));
}
pub inline fn SDL_VERSIONNUM_MINOR(version: anytype) @TypeOf(@import("std").zig.c_translation.MacroArithmetic.rem(@import("std").zig.c_translation.MacroArithmetic.div(version, @as(c_int, 1000)), @as(c_int, 1000))) {
    _ = &version;
    return @import("std").zig.c_translation.MacroArithmetic.rem(@import("std").zig.c_translation.MacroArithmetic.div(version, @as(c_int, 1000)), @as(c_int, 1000));
}
pub inline fn SDL_VERSIONNUM_MICRO(version: anytype) @TypeOf(@import("std").zig.c_translation.MacroArithmetic.rem(version, @as(c_int, 1000))) {
    _ = &version;
    return @import("std").zig.c_translation.MacroArithmetic.rem(version, @as(c_int, 1000));
}
pub const SDL_VERSION = SDL_VERSIONNUM(SDL_MAJOR_VERSION, SDL_MINOR_VERSION, SDL_MICRO_VERSION);
pub inline fn SDL_VERSION_ATLEAST(X: anytype, Y: anytype, Z: anytype) @TypeOf(SDL_VERSION >= SDL_VERSIONNUM(X, Y, Z)) {
    _ = &X;
    _ = &Y;
    _ = &Z;
    return SDL_VERSION >= SDL_VERSIONNUM(X, Y, Z);
}
pub const SDL_oldnames_h_ = "";
pub const SDL_AtomicCAS = @compileError("unable to translate macro: undefined identifier `SDL_AtomicCAS_renamed_SDL_AtomicCompareAndSwap`");
// /usr/include/SDL3/SDL_oldnames.h:581:9
pub const SDL_AtomicCASPtr = @compileError("unable to translate macro: undefined identifier `SDL_AtomicCASPtr_renamed_SDL_AtomicCompareAndSwapPointer`");
// /usr/include/SDL3/SDL_oldnames.h:582:9
pub const SDL_AtomicLock = @compileError("unable to translate macro: undefined identifier `SDL_AtomicLock_renamed_SDL_LockSpinlock`");
// /usr/include/SDL3/SDL_oldnames.h:583:9
pub const SDL_AtomicTryLock = @compileError("unable to translate macro: undefined identifier `SDL_AtomicTryLock_renamed_SDL_TryLockSpinlock`");
// /usr/include/SDL3/SDL_oldnames.h:584:9
pub const SDL_AtomicUnlock = @compileError("unable to translate macro: undefined identifier `SDL_AtomicUnlock_renamed_SDL_UnlockSpinlock`");
// /usr/include/SDL3/SDL_oldnames.h:585:9
pub const SDL_atomic_t = @compileError("unable to translate macro: undefined identifier `SDL_atomic_t_renamed_SDL_AtomicInt`");
// /usr/include/SDL3/SDL_oldnames.h:586:9
pub const AUDIO_F32 = @compileError("unable to translate macro: undefined identifier `AUDIO_F32_renamed_SDL_AUDIO_F32LE`");
// /usr/include/SDL3/SDL_oldnames.h:589:9
pub const AUDIO_F32LSB = @compileError("unable to translate macro: undefined identifier `AUDIO_F32LSB_renamed_SDL_AUDIO_F32LE`");
// /usr/include/SDL3/SDL_oldnames.h:590:9
pub const AUDIO_F32MSB = @compileError("unable to translate macro: undefined identifier `AUDIO_F32MSB_renamed_SDL_AUDIO_F32BE`");
// /usr/include/SDL3/SDL_oldnames.h:591:9
pub const AUDIO_F32SYS = @compileError("unable to translate macro: undefined identifier `AUDIO_F32SYS_renamed_SDL_AUDIO_F32`");
// /usr/include/SDL3/SDL_oldnames.h:592:9
pub const AUDIO_S16 = @compileError("unable to translate macro: undefined identifier `AUDIO_S16_renamed_SDL_AUDIO_S16LE`");
// /usr/include/SDL3/SDL_oldnames.h:593:9
pub const AUDIO_S16LSB = @compileError("unable to translate macro: undefined identifier `AUDIO_S16LSB_renamed_SDL_AUDIO_S16LE`");
// /usr/include/SDL3/SDL_oldnames.h:594:9
pub const AUDIO_S16MSB = @compileError("unable to translate macro: undefined identifier `AUDIO_S16MSB_renamed_SDL_AUDIO_S16BE`");
// /usr/include/SDL3/SDL_oldnames.h:595:9
pub const AUDIO_S16SYS = @compileError("unable to translate macro: undefined identifier `AUDIO_S16SYS_renamed_SDL_AUDIO_S16`");
// /usr/include/SDL3/SDL_oldnames.h:596:9
pub const AUDIO_S32 = @compileError("unable to translate macro: undefined identifier `AUDIO_S32_renamed_SDL_AUDIO_S32LE`");
// /usr/include/SDL3/SDL_oldnames.h:597:9
pub const AUDIO_S32LSB = @compileError("unable to translate macro: undefined identifier `AUDIO_S32LSB_renamed_SDL_AUDIO_S32LE`");
// /usr/include/SDL3/SDL_oldnames.h:598:9
pub const AUDIO_S32MSB = @compileError("unable to translate macro: undefined identifier `AUDIO_S32MSB_renamed_SDL_AUDIO_S32BE`");
// /usr/include/SDL3/SDL_oldnames.h:599:9
pub const AUDIO_S32SYS = @compileError("unable to translate macro: undefined identifier `AUDIO_S32SYS_renamed_SDL_AUDIO_S32`");
// /usr/include/SDL3/SDL_oldnames.h:600:9
pub const AUDIO_S8 = @compileError("unable to translate macro: undefined identifier `AUDIO_S8_renamed_SDL_AUDIO_S8`");
// /usr/include/SDL3/SDL_oldnames.h:601:9
pub const AUDIO_U8 = @compileError("unable to translate macro: undefined identifier `AUDIO_U8_renamed_SDL_AUDIO_U8`");
// /usr/include/SDL3/SDL_oldnames.h:602:9
pub const SDL_AudioStreamAvailable = @compileError("unable to translate macro: undefined identifier `SDL_AudioStreamAvailable_renamed_SDL_GetAudioStreamAvailable`");
// /usr/include/SDL3/SDL_oldnames.h:603:9
pub const SDL_AudioStreamClear = @compileError("unable to translate macro: undefined identifier `SDL_AudioStreamClear_renamed_SDL_ClearAudioStream`");
// /usr/include/SDL3/SDL_oldnames.h:604:9
pub const SDL_AudioStreamFlush = @compileError("unable to translate macro: undefined identifier `SDL_AudioStreamFlush_renamed_SDL_FlushAudioStream`");
// /usr/include/SDL3/SDL_oldnames.h:605:9
pub const SDL_AudioStreamGet = @compileError("unable to translate macro: undefined identifier `SDL_AudioStreamGet_renamed_SDL_GetAudioStreamData`");
// /usr/include/SDL3/SDL_oldnames.h:606:9
pub const SDL_AudioStreamPut = @compileError("unable to translate macro: undefined identifier `SDL_AudioStreamPut_renamed_SDL_PutAudioStreamData`");
// /usr/include/SDL3/SDL_oldnames.h:607:9
pub const SDL_FreeAudioStream = @compileError("unable to translate macro: undefined identifier `SDL_FreeAudioStream_renamed_SDL_DestroyAudioStream`");
// /usr/include/SDL3/SDL_oldnames.h:608:9
pub const SDL_FreeWAV = @compileError("unable to translate macro: undefined identifier `SDL_FreeWAV_renamed_SDL_free`");
// /usr/include/SDL3/SDL_oldnames.h:609:9
pub const SDL_LoadWAV_RW = @compileError("unable to translate macro: undefined identifier `SDL_LoadWAV_RW_renamed_SDL_LoadWAV_IO`");
// /usr/include/SDL3/SDL_oldnames.h:610:9
pub const SDL_MixAudioFormat = @compileError("unable to translate macro: undefined identifier `SDL_MixAudioFormat_renamed_SDL_MixAudio`");
// /usr/include/SDL3/SDL_oldnames.h:611:9
pub const SDL_NewAudioStream = @compileError("unable to translate macro: undefined identifier `SDL_NewAudioStream_renamed_SDL_CreateAudioStream`");
// /usr/include/SDL3/SDL_oldnames.h:612:9
pub const SDL_SIMDGetAlignment = @compileError("unable to translate macro: undefined identifier `SDL_SIMDGetAlignment_renamed_SDL_GetSIMDAlignment`");
// /usr/include/SDL3/SDL_oldnames.h:615:9
pub const SDL_APP_DIDENTERBACKGROUND = @compileError("unable to translate macro: undefined identifier `SDL_APP_DIDENTERBACKGROUND_renamed_SDL_EVENT_DID_ENTER_BACKGROUND`");
// /usr/include/SDL3/SDL_oldnames.h:618:9
pub const SDL_APP_DIDENTERFOREGROUND = @compileError("unable to translate macro: undefined identifier `SDL_APP_DIDENTERFOREGROUND_renamed_SDL_EVENT_DID_ENTER_FOREGROUND`");
// /usr/include/SDL3/SDL_oldnames.h:619:9
pub const SDL_APP_LOWMEMORY = @compileError("unable to translate macro: undefined identifier `SDL_APP_LOWMEMORY_renamed_SDL_EVENT_LOW_MEMORY`");
// /usr/include/SDL3/SDL_oldnames.h:620:9
pub const SDL_APP_TERMINATING = @compileError("unable to translate macro: undefined identifier `SDL_APP_TERMINATING_renamed_SDL_EVENT_TERMINATING`");
// /usr/include/SDL3/SDL_oldnames.h:621:9
pub const SDL_APP_WILLENTERBACKGROUND = @compileError("unable to translate macro: undefined identifier `SDL_APP_WILLENTERBACKGROUND_renamed_SDL_EVENT_WILL_ENTER_BACKGROUND`");
// /usr/include/SDL3/SDL_oldnames.h:622:9
pub const SDL_APP_WILLENTERFOREGROUND = @compileError("unable to translate macro: undefined identifier `SDL_APP_WILLENTERFOREGROUND_renamed_SDL_EVENT_WILL_ENTER_FOREGROUND`");
// /usr/include/SDL3/SDL_oldnames.h:623:9
pub const SDL_AUDIODEVICEADDED = @compileError("unable to translate macro: undefined identifier `SDL_AUDIODEVICEADDED_renamed_SDL_EVENT_AUDIO_DEVICE_ADDED`");
// /usr/include/SDL3/SDL_oldnames.h:624:9
pub const SDL_AUDIODEVICEREMOVED = @compileError("unable to translate macro: undefined identifier `SDL_AUDIODEVICEREMOVED_renamed_SDL_EVENT_AUDIO_DEVICE_REMOVED`");
// /usr/include/SDL3/SDL_oldnames.h:625:9
pub const SDL_CLIPBOARDUPDATE = @compileError("unable to translate macro: undefined identifier `SDL_CLIPBOARDUPDATE_renamed_SDL_EVENT_CLIPBOARD_UPDATE`");
// /usr/include/SDL3/SDL_oldnames.h:626:9
pub const SDL_CONTROLLERAXISMOTION = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLERAXISMOTION_renamed_SDL_EVENT_GAMEPAD_AXIS_MOTION`");
// /usr/include/SDL3/SDL_oldnames.h:627:9
pub const SDL_CONTROLLERBUTTONDOWN = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLERBUTTONDOWN_renamed_SDL_EVENT_GAMEPAD_BUTTON_DOWN`");
// /usr/include/SDL3/SDL_oldnames.h:628:9
pub const SDL_CONTROLLERBUTTONUP = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLERBUTTONUP_renamed_SDL_EVENT_GAMEPAD_BUTTON_UP`");
// /usr/include/SDL3/SDL_oldnames.h:629:9
pub const SDL_CONTROLLERDEVICEADDED = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLERDEVICEADDED_renamed_SDL_EVENT_GAMEPAD_ADDED`");
// /usr/include/SDL3/SDL_oldnames.h:630:9
pub const SDL_CONTROLLERDEVICEREMAPPED = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLERDEVICEREMAPPED_renamed_SDL_EVENT_GAMEPAD_REMAPPED`");
// /usr/include/SDL3/SDL_oldnames.h:631:9
pub const SDL_CONTROLLERDEVICEREMOVED = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLERDEVICEREMOVED_renamed_SDL_EVENT_GAMEPAD_REMOVED`");
// /usr/include/SDL3/SDL_oldnames.h:632:9
pub const SDL_CONTROLLERSENSORUPDATE = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLERSENSORUPDATE_renamed_SDL_EVENT_GAMEPAD_SENSOR_UPDATE`");
// /usr/include/SDL3/SDL_oldnames.h:633:9
pub const SDL_CONTROLLERSTEAMHANDLEUPDATED = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLERSTEAMHANDLEUPDATED_renamed_SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED`");
// /usr/include/SDL3/SDL_oldnames.h:634:9
pub const SDL_CONTROLLERTOUCHPADDOWN = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLERTOUCHPADDOWN_renamed_SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN`");
// /usr/include/SDL3/SDL_oldnames.h:635:9
pub const SDL_CONTROLLERTOUCHPADMOTION = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLERTOUCHPADMOTION_renamed_SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION`");
// /usr/include/SDL3/SDL_oldnames.h:636:9
pub const SDL_CONTROLLERTOUCHPADUP = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLERTOUCHPADUP_renamed_SDL_EVENT_GAMEPAD_TOUCHPAD_UP`");
// /usr/include/SDL3/SDL_oldnames.h:637:9
pub const SDL_ControllerAxisEvent = @compileError("unable to translate macro: undefined identifier `SDL_ControllerAxisEvent_renamed_SDL_GamepadAxisEvent`");
// /usr/include/SDL3/SDL_oldnames.h:638:9
pub const SDL_ControllerButtonEvent = @compileError("unable to translate macro: undefined identifier `SDL_ControllerButtonEvent_renamed_SDL_GamepadButtonEvent`");
// /usr/include/SDL3/SDL_oldnames.h:639:9
pub const SDL_ControllerDeviceEvent = @compileError("unable to translate macro: undefined identifier `SDL_ControllerDeviceEvent_renamed_SDL_GamepadDeviceEvent`");
// /usr/include/SDL3/SDL_oldnames.h:640:9
pub const SDL_ControllerSensorEvent = @compileError("unable to translate macro: undefined identifier `SDL_ControllerSensorEvent_renamed_SDL_GamepadSensorEvent`");
// /usr/include/SDL3/SDL_oldnames.h:641:9
pub const SDL_ControllerTouchpadEvent = @compileError("unable to translate macro: undefined identifier `SDL_ControllerTouchpadEvent_renamed_SDL_GamepadTouchpadEvent`");
// /usr/include/SDL3/SDL_oldnames.h:642:9
pub const SDL_DISPLAYEVENT_CONNECTED = @compileError("unable to translate macro: undefined identifier `SDL_DISPLAYEVENT_CONNECTED_renamed_SDL_EVENT_DISPLAY_ADDED`");
// /usr/include/SDL3/SDL_oldnames.h:643:9
pub const SDL_DISPLAYEVENT_DISCONNECTED = @compileError("unable to translate macro: undefined identifier `SDL_DISPLAYEVENT_DISCONNECTED_renamed_SDL_EVENT_DISPLAY_REMOVED`");
// /usr/include/SDL3/SDL_oldnames.h:644:9
pub const SDL_DISPLAYEVENT_MOVED = @compileError("unable to translate macro: undefined identifier `SDL_DISPLAYEVENT_MOVED_renamed_SDL_EVENT_DISPLAY_MOVED`");
// /usr/include/SDL3/SDL_oldnames.h:645:9
pub const SDL_DISPLAYEVENT_ORIENTATION = @compileError("unable to translate macro: undefined identifier `SDL_DISPLAYEVENT_ORIENTATION_renamed_SDL_EVENT_DISPLAY_ORIENTATION`");
// /usr/include/SDL3/SDL_oldnames.h:646:9
pub const SDL_DROPBEGIN = @compileError("unable to translate macro: undefined identifier `SDL_DROPBEGIN_renamed_SDL_EVENT_DROP_BEGIN`");
// /usr/include/SDL3/SDL_oldnames.h:647:9
pub const SDL_DROPCOMPLETE = @compileError("unable to translate macro: undefined identifier `SDL_DROPCOMPLETE_renamed_SDL_EVENT_DROP_COMPLETE`");
// /usr/include/SDL3/SDL_oldnames.h:648:9
pub const SDL_DROPFILE = @compileError("unable to translate macro: undefined identifier `SDL_DROPFILE_renamed_SDL_EVENT_DROP_FILE`");
// /usr/include/SDL3/SDL_oldnames.h:649:9
pub const SDL_DROPTEXT = @compileError("unable to translate macro: undefined identifier `SDL_DROPTEXT_renamed_SDL_EVENT_DROP_TEXT`");
// /usr/include/SDL3/SDL_oldnames.h:650:9
pub const SDL_FINGERDOWN = @compileError("unable to translate macro: undefined identifier `SDL_FINGERDOWN_renamed_SDL_EVENT_FINGER_DOWN`");
// /usr/include/SDL3/SDL_oldnames.h:651:9
pub const SDL_FINGERMOTION = @compileError("unable to translate macro: undefined identifier `SDL_FINGERMOTION_renamed_SDL_EVENT_FINGER_MOTION`");
// /usr/include/SDL3/SDL_oldnames.h:652:9
pub const SDL_FINGERUP = @compileError("unable to translate macro: undefined identifier `SDL_FINGERUP_renamed_SDL_EVENT_FINGER_UP`");
// /usr/include/SDL3/SDL_oldnames.h:653:9
pub const SDL_FIRSTEVENT = @compileError("unable to translate macro: undefined identifier `SDL_FIRSTEVENT_renamed_SDL_EVENT_FIRST`");
// /usr/include/SDL3/SDL_oldnames.h:654:9
pub const SDL_JOYAXISMOTION = @compileError("unable to translate macro: undefined identifier `SDL_JOYAXISMOTION_renamed_SDL_EVENT_JOYSTICK_AXIS_MOTION`");
// /usr/include/SDL3/SDL_oldnames.h:655:9
pub const SDL_JOYBATTERYUPDATED = @compileError("unable to translate macro: undefined identifier `SDL_JOYBATTERYUPDATED_renamed_SDL_EVENT_JOYSTICK_BATTERY_UPDATED`");
// /usr/include/SDL3/SDL_oldnames.h:656:9
pub const SDL_JOYBUTTONDOWN = @compileError("unable to translate macro: undefined identifier `SDL_JOYBUTTONDOWN_renamed_SDL_EVENT_JOYSTICK_BUTTON_DOWN`");
// /usr/include/SDL3/SDL_oldnames.h:657:9
pub const SDL_JOYBUTTONUP = @compileError("unable to translate macro: undefined identifier `SDL_JOYBUTTONUP_renamed_SDL_EVENT_JOYSTICK_BUTTON_UP`");
// /usr/include/SDL3/SDL_oldnames.h:658:9
pub const SDL_JOYDEVICEADDED = @compileError("unable to translate macro: undefined identifier `SDL_JOYDEVICEADDED_renamed_SDL_EVENT_JOYSTICK_ADDED`");
// /usr/include/SDL3/SDL_oldnames.h:659:9
pub const SDL_JOYDEVICEREMOVED = @compileError("unable to translate macro: undefined identifier `SDL_JOYDEVICEREMOVED_renamed_SDL_EVENT_JOYSTICK_REMOVED`");
// /usr/include/SDL3/SDL_oldnames.h:660:9
pub const SDL_JOYBALLMOTION = @compileError("unable to translate macro: undefined identifier `SDL_JOYBALLMOTION_renamed_SDL_EVENT_JOYSTICK_BALL_MOTION`");
// /usr/include/SDL3/SDL_oldnames.h:661:9
pub const SDL_JOYHATMOTION = @compileError("unable to translate macro: undefined identifier `SDL_JOYHATMOTION_renamed_SDL_EVENT_JOYSTICK_HAT_MOTION`");
// /usr/include/SDL3/SDL_oldnames.h:662:9
pub const SDL_KEYDOWN = @compileError("unable to translate macro: undefined identifier `SDL_KEYDOWN_renamed_SDL_EVENT_KEY_DOWN`");
// /usr/include/SDL3/SDL_oldnames.h:663:9
pub const SDL_KEYMAPCHANGED = @compileError("unable to translate macro: undefined identifier `SDL_KEYMAPCHANGED_renamed_SDL_EVENT_KEYMAP_CHANGED`");
// /usr/include/SDL3/SDL_oldnames.h:664:9
pub const SDL_KEYUP = @compileError("unable to translate macro: undefined identifier `SDL_KEYUP_renamed_SDL_EVENT_KEY_UP`");
// /usr/include/SDL3/SDL_oldnames.h:665:9
pub const SDL_LASTEVENT = @compileError("unable to translate macro: undefined identifier `SDL_LASTEVENT_renamed_SDL_EVENT_LAST`");
// /usr/include/SDL3/SDL_oldnames.h:666:9
pub const SDL_LOCALECHANGED = @compileError("unable to translate macro: undefined identifier `SDL_LOCALECHANGED_renamed_SDL_EVENT_LOCALE_CHANGED`");
// /usr/include/SDL3/SDL_oldnames.h:667:9
pub const SDL_MOUSEBUTTONDOWN = @compileError("unable to translate macro: undefined identifier `SDL_MOUSEBUTTONDOWN_renamed_SDL_EVENT_MOUSE_BUTTON_DOWN`");
// /usr/include/SDL3/SDL_oldnames.h:668:9
pub const SDL_MOUSEBUTTONUP = @compileError("unable to translate macro: undefined identifier `SDL_MOUSEBUTTONUP_renamed_SDL_EVENT_MOUSE_BUTTON_UP`");
// /usr/include/SDL3/SDL_oldnames.h:669:9
pub const SDL_MOUSEMOTION = @compileError("unable to translate macro: undefined identifier `SDL_MOUSEMOTION_renamed_SDL_EVENT_MOUSE_MOTION`");
// /usr/include/SDL3/SDL_oldnames.h:670:9
pub const SDL_MOUSEWHEEL = @compileError("unable to translate macro: undefined identifier `SDL_MOUSEWHEEL_renamed_SDL_EVENT_MOUSE_WHEEL`");
// /usr/include/SDL3/SDL_oldnames.h:671:9
pub const SDL_POLLSENTINEL = @compileError("unable to translate macro: undefined identifier `SDL_POLLSENTINEL_renamed_SDL_EVENT_POLL_SENTINEL`");
// /usr/include/SDL3/SDL_oldnames.h:672:9
pub const SDL_QUIT = @compileError("unable to translate macro: undefined identifier `SDL_QUIT_renamed_SDL_EVENT_QUIT`");
// /usr/include/SDL3/SDL_oldnames.h:673:9
pub const SDL_RENDER_DEVICE_RESET = @compileError("unable to translate macro: undefined identifier `SDL_RENDER_DEVICE_RESET_renamed_SDL_EVENT_RENDER_DEVICE_RESET`");
// /usr/include/SDL3/SDL_oldnames.h:674:9
pub const SDL_RENDER_TARGETS_RESET = @compileError("unable to translate macro: undefined identifier `SDL_RENDER_TARGETS_RESET_renamed_SDL_EVENT_RENDER_TARGETS_RESET`");
// /usr/include/SDL3/SDL_oldnames.h:675:9
pub const SDL_SENSORUPDATE = @compileError("unable to translate macro: undefined identifier `SDL_SENSORUPDATE_renamed_SDL_EVENT_SENSOR_UPDATE`");
// /usr/include/SDL3/SDL_oldnames.h:676:9
pub const SDL_TEXTEDITING = @compileError("unable to translate macro: undefined identifier `SDL_TEXTEDITING_renamed_SDL_EVENT_TEXT_EDITING`");
// /usr/include/SDL3/SDL_oldnames.h:677:9
pub const SDL_TEXTEDITING_EXT = @compileError("unable to translate macro: undefined identifier `SDL_TEXTEDITING_EXT_renamed_SDL_EVENT_TEXT_EDITING_EXT`");
// /usr/include/SDL3/SDL_oldnames.h:678:9
pub const SDL_TEXTINPUT = @compileError("unable to translate macro: undefined identifier `SDL_TEXTINPUT_renamed_SDL_EVENT_TEXT_INPUT`");
// /usr/include/SDL3/SDL_oldnames.h:679:9
pub const SDL_USEREVENT = @compileError("unable to translate macro: undefined identifier `SDL_USEREVENT_renamed_SDL_EVENT_USER`");
// /usr/include/SDL3/SDL_oldnames.h:680:9
pub const SDL_WINDOWEVENT_CLOSE = @compileError("unable to translate macro: undefined identifier `SDL_WINDOWEVENT_CLOSE_renamed_SDL_EVENT_WINDOW_CLOSE_REQUESTED`");
// /usr/include/SDL3/SDL_oldnames.h:681:9
pub const SDL_WINDOWEVENT_DISPLAY_CHANGED = @compileError("unable to translate macro: undefined identifier `SDL_WINDOWEVENT_DISPLAY_CHANGED_renamed_SDL_EVENT_WINDOW_DISPLAY_CHANGED`");
// /usr/include/SDL3/SDL_oldnames.h:682:9
pub const SDL_WINDOWEVENT_ENTER = @compileError("unable to translate macro: undefined identifier `SDL_WINDOWEVENT_ENTER_renamed_SDL_EVENT_WINDOW_MOUSE_ENTER`");
// /usr/include/SDL3/SDL_oldnames.h:683:9
pub const SDL_WINDOWEVENT_EXPOSED = @compileError("unable to translate macro: undefined identifier `SDL_WINDOWEVENT_EXPOSED_renamed_SDL_EVENT_WINDOW_EXPOSED`");
// /usr/include/SDL3/SDL_oldnames.h:684:9
pub const SDL_WINDOWEVENT_FOCUS_GAINED = @compileError("unable to translate macro: undefined identifier `SDL_WINDOWEVENT_FOCUS_GAINED_renamed_SDL_EVENT_WINDOW_FOCUS_GAINED`");
// /usr/include/SDL3/SDL_oldnames.h:685:9
pub const SDL_WINDOWEVENT_FOCUS_LOST = @compileError("unable to translate macro: undefined identifier `SDL_WINDOWEVENT_FOCUS_LOST_renamed_SDL_EVENT_WINDOW_FOCUS_LOST`");
// /usr/include/SDL3/SDL_oldnames.h:686:9
pub const SDL_WINDOWEVENT_HIDDEN = @compileError("unable to translate macro: undefined identifier `SDL_WINDOWEVENT_HIDDEN_renamed_SDL_EVENT_WINDOW_HIDDEN`");
// /usr/include/SDL3/SDL_oldnames.h:687:9
pub const SDL_WINDOWEVENT_HIT_TEST = @compileError("unable to translate macro: undefined identifier `SDL_WINDOWEVENT_HIT_TEST_renamed_SDL_EVENT_WINDOW_HIT_TEST`");
// /usr/include/SDL3/SDL_oldnames.h:688:9
pub const SDL_WINDOWEVENT_ICCPROF_CHANGED = @compileError("unable to translate macro: undefined identifier `SDL_WINDOWEVENT_ICCPROF_CHANGED_renamed_SDL_EVENT_WINDOW_ICCPROF_CHANGED`");
// /usr/include/SDL3/SDL_oldnames.h:689:9
pub const SDL_WINDOWEVENT_LEAVE = @compileError("unable to translate macro: undefined identifier `SDL_WINDOWEVENT_LEAVE_renamed_SDL_EVENT_WINDOW_MOUSE_LEAVE`");
// /usr/include/SDL3/SDL_oldnames.h:690:9
pub const SDL_WINDOWEVENT_MAXIMIZED = @compileError("unable to translate macro: undefined identifier `SDL_WINDOWEVENT_MAXIMIZED_renamed_SDL_EVENT_WINDOW_MAXIMIZED`");
// /usr/include/SDL3/SDL_oldnames.h:691:9
pub const SDL_WINDOWEVENT_MINIMIZED = @compileError("unable to translate macro: undefined identifier `SDL_WINDOWEVENT_MINIMIZED_renamed_SDL_EVENT_WINDOW_MINIMIZED`");
// /usr/include/SDL3/SDL_oldnames.h:692:9
pub const SDL_WINDOWEVENT_MOVED = @compileError("unable to translate macro: undefined identifier `SDL_WINDOWEVENT_MOVED_renamed_SDL_EVENT_WINDOW_MOVED`");
// /usr/include/SDL3/SDL_oldnames.h:693:9
pub const SDL_WINDOWEVENT_RESIZED = @compileError("unable to translate macro: undefined identifier `SDL_WINDOWEVENT_RESIZED_renamed_SDL_EVENT_WINDOW_RESIZED`");
// /usr/include/SDL3/SDL_oldnames.h:694:9
pub const SDL_WINDOWEVENT_RESTORED = @compileError("unable to translate macro: undefined identifier `SDL_WINDOWEVENT_RESTORED_renamed_SDL_EVENT_WINDOW_RESTORED`");
// /usr/include/SDL3/SDL_oldnames.h:695:9
pub const SDL_WINDOWEVENT_SHOWN = @compileError("unable to translate macro: undefined identifier `SDL_WINDOWEVENT_SHOWN_renamed_SDL_EVENT_WINDOW_SHOWN`");
// /usr/include/SDL3/SDL_oldnames.h:696:9
pub const SDL_WINDOWEVENT_SIZE_CHANGED = @compileError("unable to translate macro: undefined identifier `SDL_WINDOWEVENT_SIZE_CHANGED_renamed_SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED`");
// /usr/include/SDL3/SDL_oldnames.h:697:9
pub const SDL_WINDOWEVENT_TAKE_FOCUS = @compileError("unable to translate macro: undefined identifier `SDL_WINDOWEVENT_TAKE_FOCUS_renamed_SDL_EVENT_WINDOW_TAKE_FOCUS`");
// /usr/include/SDL3/SDL_oldnames.h:698:9
pub const SDL_eventaction = @compileError("unable to translate macro: undefined identifier `SDL_eventaction_renamed_SDL_EventAction`");
// /usr/include/SDL3/SDL_oldnames.h:699:9
pub const SDL_CONTROLLER_AXIS_INVALID = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_AXIS_INVALID_renamed_SDL_GAMEPAD_AXIS_INVALID`");
// /usr/include/SDL3/SDL_oldnames.h:702:9
pub const SDL_CONTROLLER_AXIS_LEFTX = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_AXIS_LEFTX_renamed_SDL_GAMEPAD_AXIS_LEFTX`");
// /usr/include/SDL3/SDL_oldnames.h:703:9
pub const SDL_CONTROLLER_AXIS_LEFTY = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_AXIS_LEFTY_renamed_SDL_GAMEPAD_AXIS_LEFTY`");
// /usr/include/SDL3/SDL_oldnames.h:704:9
pub const SDL_CONTROLLER_AXIS_MAX = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_AXIS_MAX_renamed_SDL_GAMEPAD_AXIS_MAX`");
// /usr/include/SDL3/SDL_oldnames.h:705:9
pub const SDL_CONTROLLER_AXIS_RIGHTX = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_AXIS_RIGHTX_renamed_SDL_GAMEPAD_AXIS_RIGHTX`");
// /usr/include/SDL3/SDL_oldnames.h:706:9
pub const SDL_CONTROLLER_AXIS_RIGHTY = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_AXIS_RIGHTY_renamed_SDL_GAMEPAD_AXIS_RIGHTY`");
// /usr/include/SDL3/SDL_oldnames.h:707:9
pub const SDL_CONTROLLER_AXIS_TRIGGERLEFT = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_AXIS_TRIGGERLEFT_renamed_SDL_GAMEPAD_AXIS_LEFT_TRIGGER`");
// /usr/include/SDL3/SDL_oldnames.h:708:9
pub const SDL_CONTROLLER_AXIS_TRIGGERRIGHT = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_AXIS_TRIGGERRIGHT_renamed_SDL_GAMEPAD_AXIS_RIGHT_TRIGGER`");
// /usr/include/SDL3/SDL_oldnames.h:709:9
pub const SDL_CONTROLLER_BINDTYPE_AXIS = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_BINDTYPE_AXIS_renamed_SDL_GAMEPAD_BINDTYPE_AXIS`");
// /usr/include/SDL3/SDL_oldnames.h:710:9
pub const SDL_CONTROLLER_BINDTYPE_BUTTON = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_BINDTYPE_BUTTON_renamed_SDL_GAMEPAD_BINDTYPE_BUTTON`");
// /usr/include/SDL3/SDL_oldnames.h:711:9
pub const SDL_CONTROLLER_BINDTYPE_HAT = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_BINDTYPE_HAT_renamed_SDL_GAMEPAD_BINDTYPE_HAT`");
// /usr/include/SDL3/SDL_oldnames.h:712:9
pub const SDL_CONTROLLER_BINDTYPE_NONE = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_BINDTYPE_NONE_renamed_SDL_GAMEPAD_BINDTYPE_NONE`");
// /usr/include/SDL3/SDL_oldnames.h:713:9
pub const SDL_CONTROLLER_BUTTON_A = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_BUTTON_A_renamed_SDL_GAMEPAD_BUTTON_SOUTH`");
// /usr/include/SDL3/SDL_oldnames.h:714:9
pub const SDL_CONTROLLER_BUTTON_B = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_BUTTON_B_renamed_SDL_GAMEPAD_BUTTON_EAST`");
// /usr/include/SDL3/SDL_oldnames.h:715:9
pub const SDL_CONTROLLER_BUTTON_BACK = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_BUTTON_BACK_renamed_SDL_GAMEPAD_BUTTON_BACK`");
// /usr/include/SDL3/SDL_oldnames.h:716:9
pub const SDL_CONTROLLER_BUTTON_DPAD_DOWN = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_BUTTON_DPAD_DOWN_renamed_SDL_GAMEPAD_BUTTON_DPAD_DOWN`");
// /usr/include/SDL3/SDL_oldnames.h:717:9
pub const SDL_CONTROLLER_BUTTON_DPAD_LEFT = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_BUTTON_DPAD_LEFT_renamed_SDL_GAMEPAD_BUTTON_DPAD_LEFT`");
// /usr/include/SDL3/SDL_oldnames.h:718:9
pub const SDL_CONTROLLER_BUTTON_DPAD_RIGHT = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_BUTTON_DPAD_RIGHT_renamed_SDL_GAMEPAD_BUTTON_DPAD_RIGHT`");
// /usr/include/SDL3/SDL_oldnames.h:719:9
pub const SDL_CONTROLLER_BUTTON_DPAD_UP = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_BUTTON_DPAD_UP_renamed_SDL_GAMEPAD_BUTTON_DPAD_UP`");
// /usr/include/SDL3/SDL_oldnames.h:720:9
pub const SDL_CONTROLLER_BUTTON_GUIDE = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_BUTTON_GUIDE_renamed_SDL_GAMEPAD_BUTTON_GUIDE`");
// /usr/include/SDL3/SDL_oldnames.h:721:9
pub const SDL_CONTROLLER_BUTTON_INVALID = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_BUTTON_INVALID_renamed_SDL_GAMEPAD_BUTTON_INVALID`");
// /usr/include/SDL3/SDL_oldnames.h:722:9
pub const SDL_CONTROLLER_BUTTON_LEFTSHOULDER = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_BUTTON_LEFTSHOULDER_renamed_SDL_GAMEPAD_BUTTON_LEFT_SHOULDER`");
// /usr/include/SDL3/SDL_oldnames.h:723:9
pub const SDL_CONTROLLER_BUTTON_LEFTSTICK = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_BUTTON_LEFTSTICK_renamed_SDL_GAMEPAD_BUTTON_LEFT_STICK`");
// /usr/include/SDL3/SDL_oldnames.h:724:9
pub const SDL_CONTROLLER_BUTTON_MAX = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_BUTTON_MAX_renamed_SDL_GAMEPAD_BUTTON_MAX`");
// /usr/include/SDL3/SDL_oldnames.h:725:9
pub const SDL_CONTROLLER_BUTTON_MISC1 = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_BUTTON_MISC1_renamed_SDL_GAMEPAD_BUTTON_MISC1`");
// /usr/include/SDL3/SDL_oldnames.h:726:9
pub const SDL_CONTROLLER_BUTTON_PADDLE1 = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_BUTTON_PADDLE1_renamed_SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1`");
// /usr/include/SDL3/SDL_oldnames.h:727:9
pub const SDL_CONTROLLER_BUTTON_PADDLE2 = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_BUTTON_PADDLE2_renamed_SDL_GAMEPAD_BUTTON_LEFT_PADDLE1`");
// /usr/include/SDL3/SDL_oldnames.h:728:9
pub const SDL_CONTROLLER_BUTTON_PADDLE3 = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_BUTTON_PADDLE3_renamed_SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2`");
// /usr/include/SDL3/SDL_oldnames.h:729:9
pub const SDL_CONTROLLER_BUTTON_PADDLE4 = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_BUTTON_PADDLE4_renamed_SDL_GAMEPAD_BUTTON_LEFT_PADDLE2`");
// /usr/include/SDL3/SDL_oldnames.h:730:9
pub const SDL_CONTROLLER_BUTTON_RIGHTSHOULDER = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_BUTTON_RIGHTSHOULDER_renamed_SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER`");
// /usr/include/SDL3/SDL_oldnames.h:731:9
pub const SDL_CONTROLLER_BUTTON_RIGHTSTICK = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_BUTTON_RIGHTSTICK_renamed_SDL_GAMEPAD_BUTTON_RIGHT_STICK`");
// /usr/include/SDL3/SDL_oldnames.h:732:9
pub const SDL_CONTROLLER_BUTTON_START = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_BUTTON_START_renamed_SDL_GAMEPAD_BUTTON_START`");
// /usr/include/SDL3/SDL_oldnames.h:733:9
pub const SDL_CONTROLLER_BUTTON_TOUCHPAD = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_BUTTON_TOUCHPAD_renamed_SDL_GAMEPAD_BUTTON_TOUCHPAD`");
// /usr/include/SDL3/SDL_oldnames.h:734:9
pub const SDL_CONTROLLER_BUTTON_X = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_BUTTON_X_renamed_SDL_GAMEPAD_BUTTON_WEST`");
// /usr/include/SDL3/SDL_oldnames.h:735:9
pub const SDL_CONTROLLER_BUTTON_Y = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_BUTTON_Y_renamed_SDL_GAMEPAD_BUTTON_NORTH`");
// /usr/include/SDL3/SDL_oldnames.h:736:9
pub const SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_LEFT = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_LEFT_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT`");
// /usr/include/SDL3/SDL_oldnames.h:737:9
pub const SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_PAIR = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_PAIR_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR`");
// /usr/include/SDL3/SDL_oldnames.h:738:9
pub const SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT`");
// /usr/include/SDL3/SDL_oldnames.h:739:9
pub const SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO`");
// /usr/include/SDL3/SDL_oldnames.h:740:9
pub const SDL_CONTROLLER_TYPE_PS3 = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_TYPE_PS3_renamed_SDL_GAMEPAD_TYPE_PS3`");
// /usr/include/SDL3/SDL_oldnames.h:741:9
pub const SDL_CONTROLLER_TYPE_PS4 = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_TYPE_PS4_renamed_SDL_GAMEPAD_TYPE_PS4`");
// /usr/include/SDL3/SDL_oldnames.h:742:9
pub const SDL_CONTROLLER_TYPE_PS5 = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_TYPE_PS5_renamed_SDL_GAMEPAD_TYPE_PS5`");
// /usr/include/SDL3/SDL_oldnames.h:743:9
pub const SDL_CONTROLLER_TYPE_UNKNOWN = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_TYPE_UNKNOWN_renamed_SDL_GAMEPAD_TYPE_STANDARD`");
// /usr/include/SDL3/SDL_oldnames.h:744:9
pub const SDL_CONTROLLER_TYPE_VIRTUAL = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_TYPE_VIRTUAL_renamed_SDL_GAMEPAD_TYPE_VIRTUAL`");
// /usr/include/SDL3/SDL_oldnames.h:745:9
pub const SDL_CONTROLLER_TYPE_XBOX360 = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_TYPE_XBOX360_renamed_SDL_GAMEPAD_TYPE_XBOX360`");
// /usr/include/SDL3/SDL_oldnames.h:746:9
pub const SDL_CONTROLLER_TYPE_XBOXONE = @compileError("unable to translate macro: undefined identifier `SDL_CONTROLLER_TYPE_XBOXONE_renamed_SDL_GAMEPAD_TYPE_XBOXONE`");
// /usr/include/SDL3/SDL_oldnames.h:747:9
pub const SDL_GameController = @compileError("unable to translate macro: undefined identifier `SDL_GameController_renamed_SDL_Gamepad`");
// /usr/include/SDL3/SDL_oldnames.h:748:9
pub const SDL_GameControllerAddMapping = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerAddMapping_renamed_SDL_AddGamepadMapping`");
// /usr/include/SDL3/SDL_oldnames.h:749:9
pub const SDL_GameControllerAddMappingsFromFile = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerAddMappingsFromFile_renamed_SDL_AddGamepadMappingsFromFile`");
// /usr/include/SDL3/SDL_oldnames.h:750:9
pub const SDL_GameControllerAddMappingsFromRW = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerAddMappingsFromRW_renamed_SDL_AddGamepadMappingsFromIO`");
// /usr/include/SDL3/SDL_oldnames.h:751:9
pub const SDL_GameControllerAxis = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerAxis_renamed_SDL_GamepadAxis`");
// /usr/include/SDL3/SDL_oldnames.h:752:9
pub const SDL_GameControllerBindType = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerBindType_renamed_SDL_GamepadBindingType`");
// /usr/include/SDL3/SDL_oldnames.h:753:9
pub const SDL_GameControllerButton = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerButton_renamed_SDL_GamepadButton`");
// /usr/include/SDL3/SDL_oldnames.h:754:9
pub const SDL_GameControllerClose = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerClose_renamed_SDL_CloseGamepad`");
// /usr/include/SDL3/SDL_oldnames.h:755:9
pub const SDL_GameControllerFromInstanceID = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerFromInstanceID_renamed_SDL_GetGamepadFromInstanceID`");
// /usr/include/SDL3/SDL_oldnames.h:756:9
pub const SDL_GameControllerFromPlayerIndex = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerFromPlayerIndex_renamed_SDL_GetGamepadFromPlayerIndex`");
// /usr/include/SDL3/SDL_oldnames.h:757:9
pub const SDL_GameControllerGetAppleSFSymbolsNameForAxis = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerGetAppleSFSymbolsNameForAxis_renamed_SDL_GetGamepadAppleSFSymbolsNameForAxis`");
// /usr/include/SDL3/SDL_oldnames.h:758:9
pub const SDL_GameControllerGetAppleSFSymbolsNameForButton = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerGetAppleSFSymbolsNameForButton_renamed_SDL_GetGamepadAppleSFSymbolsNameForButton`");
// /usr/include/SDL3/SDL_oldnames.h:759:9
pub const SDL_GameControllerGetAttached = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerGetAttached_renamed_SDL_GamepadConnected`");
// /usr/include/SDL3/SDL_oldnames.h:760:9
pub const SDL_GameControllerGetAxis = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerGetAxis_renamed_SDL_GetGamepadAxis`");
// /usr/include/SDL3/SDL_oldnames.h:761:9
pub const SDL_GameControllerGetAxisFromString = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerGetAxisFromString_renamed_SDL_GetGamepadAxisFromString`");
// /usr/include/SDL3/SDL_oldnames.h:762:9
pub const SDL_GameControllerGetButton = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerGetButton_renamed_SDL_GetGamepadButton`");
// /usr/include/SDL3/SDL_oldnames.h:763:9
pub const SDL_GameControllerGetButtonFromString = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerGetButtonFromString_renamed_SDL_GetGamepadButtonFromString`");
// /usr/include/SDL3/SDL_oldnames.h:764:9
pub const SDL_GameControllerGetFirmwareVersion = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerGetFirmwareVersion_renamed_SDL_GetGamepadFirmwareVersion`");
// /usr/include/SDL3/SDL_oldnames.h:765:9
pub const SDL_GameControllerGetJoystick = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerGetJoystick_renamed_SDL_GetGamepadJoystick`");
// /usr/include/SDL3/SDL_oldnames.h:766:9
pub const SDL_GameControllerGetNumTouchpadFingers = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerGetNumTouchpadFingers_renamed_SDL_GetNumGamepadTouchpadFingers`");
// /usr/include/SDL3/SDL_oldnames.h:767:9
pub const SDL_GameControllerGetNumTouchpads = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerGetNumTouchpads_renamed_SDL_GetNumGamepadTouchpads`");
// /usr/include/SDL3/SDL_oldnames.h:768:9
pub const SDL_GameControllerGetPlayerIndex = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerGetPlayerIndex_renamed_SDL_GetGamepadPlayerIndex`");
// /usr/include/SDL3/SDL_oldnames.h:769:9
pub const SDL_GameControllerGetProduct = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerGetProduct_renamed_SDL_GetGamepadProduct`");
// /usr/include/SDL3/SDL_oldnames.h:770:9
pub const SDL_GameControllerGetProductVersion = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerGetProductVersion_renamed_SDL_GetGamepadProductVersion`");
// /usr/include/SDL3/SDL_oldnames.h:771:9
pub const SDL_GameControllerGetSensorData = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerGetSensorData_renamed_SDL_GetGamepadSensorData`");
// /usr/include/SDL3/SDL_oldnames.h:772:9
pub const SDL_GameControllerGetSensorDataRate = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerGetSensorDataRate_renamed_SDL_GetGamepadSensorDataRate`");
// /usr/include/SDL3/SDL_oldnames.h:773:9
pub const SDL_GameControllerGetSerial = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerGetSerial_renamed_SDL_GetGamepadSerial`");
// /usr/include/SDL3/SDL_oldnames.h:774:9
pub const SDL_GameControllerGetSteamHandle = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerGetSteamHandle_renamed_SDL_GetGamepadSteamHandle`");
// /usr/include/SDL3/SDL_oldnames.h:775:9
pub const SDL_GameControllerGetStringForAxis = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerGetStringForAxis_renamed_SDL_GetGamepadStringForAxis`");
// /usr/include/SDL3/SDL_oldnames.h:776:9
pub const SDL_GameControllerGetStringForButton = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerGetStringForButton_renamed_SDL_GetGamepadStringForButton`");
// /usr/include/SDL3/SDL_oldnames.h:777:9
pub const SDL_GameControllerGetTouchpadFinger = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerGetTouchpadFinger_renamed_SDL_GetGamepadTouchpadFinger`");
// /usr/include/SDL3/SDL_oldnames.h:778:9
pub const SDL_GameControllerGetType = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerGetType_renamed_SDL_GetGamepadType`");
// /usr/include/SDL3/SDL_oldnames.h:779:9
pub const SDL_GameControllerGetVendor = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerGetVendor_renamed_SDL_GetGamepadVendor`");
// /usr/include/SDL3/SDL_oldnames.h:780:9
pub const SDL_GameControllerHasAxis = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerHasAxis_renamed_SDL_GamepadHasAxis`");
// /usr/include/SDL3/SDL_oldnames.h:781:9
pub const SDL_GameControllerHasButton = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerHasButton_renamed_SDL_GamepadHasButton`");
// /usr/include/SDL3/SDL_oldnames.h:782:9
pub const SDL_GameControllerHasSensor = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerHasSensor_renamed_SDL_GamepadHasSensor`");
// /usr/include/SDL3/SDL_oldnames.h:783:9
pub const SDL_GameControllerIsSensorEnabled = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerIsSensorEnabled_renamed_SDL_GamepadSensorEnabled`");
// /usr/include/SDL3/SDL_oldnames.h:784:9
pub const SDL_GameControllerMapping = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerMapping_renamed_SDL_GetGamepadMapping`");
// /usr/include/SDL3/SDL_oldnames.h:785:9
pub const SDL_GameControllerMappingForDeviceIndex = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerMappingForDeviceIndex_renamed_SDL_GetGamepadMappingForDeviceIndex`");
// /usr/include/SDL3/SDL_oldnames.h:786:9
pub const SDL_GameControllerMappingForGUID = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerMappingForGUID_renamed_SDL_GetGamepadMappingForGUID`");
// /usr/include/SDL3/SDL_oldnames.h:787:9
pub const SDL_GameControllerName = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerName_renamed_SDL_GetGamepadName`");
// /usr/include/SDL3/SDL_oldnames.h:788:9
pub const SDL_GameControllerOpen = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerOpen_renamed_SDL_OpenGamepad`");
// /usr/include/SDL3/SDL_oldnames.h:789:9
pub const SDL_GameControllerPath = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerPath_renamed_SDL_GetGamepadPath`");
// /usr/include/SDL3/SDL_oldnames.h:790:9
pub const SDL_GameControllerRumble = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerRumble_renamed_SDL_RumbleGamepad`");
// /usr/include/SDL3/SDL_oldnames.h:791:9
pub const SDL_GameControllerRumbleTriggers = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerRumbleTriggers_renamed_SDL_RumbleGamepadTriggers`");
// /usr/include/SDL3/SDL_oldnames.h:792:9
pub const SDL_GameControllerSendEffect = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerSendEffect_renamed_SDL_SendGamepadEffect`");
// /usr/include/SDL3/SDL_oldnames.h:793:9
pub const SDL_GameControllerSetLED = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerSetLED_renamed_SDL_SetGamepadLED`");
// /usr/include/SDL3/SDL_oldnames.h:794:9
pub const SDL_GameControllerSetPlayerIndex = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerSetPlayerIndex_renamed_SDL_SetGamepadPlayerIndex`");
// /usr/include/SDL3/SDL_oldnames.h:795:9
pub const SDL_GameControllerSetSensorEnabled = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerSetSensorEnabled_renamed_SDL_SetGamepadSensorEnabled`");
// /usr/include/SDL3/SDL_oldnames.h:796:9
pub const SDL_GameControllerType = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerType_renamed_SDL_GamepadType`");
// /usr/include/SDL3/SDL_oldnames.h:797:9
pub const SDL_GameControllerUpdate = @compileError("unable to translate macro: undefined identifier `SDL_GameControllerUpdate_renamed_SDL_UpdateGamepads`");
// /usr/include/SDL3/SDL_oldnames.h:798:9
pub const SDL_INIT_GAMECONTROLLER = @compileError("unable to translate macro: undefined identifier `SDL_INIT_GAMECONTROLLER_renamed_SDL_INIT_GAMEPAD`");
// /usr/include/SDL3/SDL_oldnames.h:799:9
pub const SDL_IsGameController = @compileError("unable to translate macro: undefined identifier `SDL_IsGameController_renamed_SDL_IsGamepad`");
// /usr/include/SDL3/SDL_oldnames.h:800:9
pub const SDL_HapticClose = @compileError("unable to translate macro: undefined identifier `SDL_HapticClose_renamed_SDL_CloseHaptic`");
// /usr/include/SDL3/SDL_oldnames.h:803:9
pub const SDL_HapticDestroyEffect = @compileError("unable to translate macro: undefined identifier `SDL_HapticDestroyEffect_renamed_SDL_DestroyHapticEffect`");
// /usr/include/SDL3/SDL_oldnames.h:804:9
pub const SDL_HapticGetEffectStatus = @compileError("unable to translate macro: undefined identifier `SDL_HapticGetEffectStatus_renamed_SDL_GetHapticEffectStatus`");
// /usr/include/SDL3/SDL_oldnames.h:805:9
pub const SDL_HapticNewEffect = @compileError("unable to translate macro: undefined identifier `SDL_HapticNewEffect_renamed_SDL_CreateHapticEffect`");
// /usr/include/SDL3/SDL_oldnames.h:806:9
pub const SDL_HapticNumAxes = @compileError("unable to translate macro: undefined identifier `SDL_HapticNumAxes_renamed_SDL_GetNumHapticAxes`");
// /usr/include/SDL3/SDL_oldnames.h:807:9
pub const SDL_HapticNumEffects = @compileError("unable to translate macro: undefined identifier `SDL_HapticNumEffects_renamed_SDL_GetMaxHapticEffects`");
// /usr/include/SDL3/SDL_oldnames.h:808:9
pub const SDL_HapticNumEffectsPlaying = @compileError("unable to translate macro: undefined identifier `SDL_HapticNumEffectsPlaying_renamed_SDL_GetMaxHapticEffectsPlaying`");
// /usr/include/SDL3/SDL_oldnames.h:809:9
pub const SDL_HapticOpen = @compileError("unable to translate macro: undefined identifier `SDL_HapticOpen_renamed_SDL_OpenHaptic`");
// /usr/include/SDL3/SDL_oldnames.h:810:9
pub const SDL_HapticOpenFromJoystick = @compileError("unable to translate macro: undefined identifier `SDL_HapticOpenFromJoystick_renamed_SDL_OpenHapticFromJoystick`");
// /usr/include/SDL3/SDL_oldnames.h:811:9
pub const SDL_HapticOpenFromMouse = @compileError("unable to translate macro: undefined identifier `SDL_HapticOpenFromMouse_renamed_SDL_OpenHapticFromMouse`");
// /usr/include/SDL3/SDL_oldnames.h:812:9
pub const SDL_HapticPause = @compileError("unable to translate macro: undefined identifier `SDL_HapticPause_renamed_SDL_PauseHaptic`");
// /usr/include/SDL3/SDL_oldnames.h:813:9
pub const SDL_HapticQuery = @compileError("unable to translate macro: undefined identifier `SDL_HapticQuery_renamed_SDL_GetHapticFeatures`");
// /usr/include/SDL3/SDL_oldnames.h:814:9
pub const SDL_HapticRumbleInit = @compileError("unable to translate macro: undefined identifier `SDL_HapticRumbleInit_renamed_SDL_InitHapticRumble`");
// /usr/include/SDL3/SDL_oldnames.h:815:9
pub const SDL_HapticRumblePlay = @compileError("unable to translate macro: undefined identifier `SDL_HapticRumblePlay_renamed_SDL_PlayHapticRumble`");
// /usr/include/SDL3/SDL_oldnames.h:816:9
pub const SDL_HapticRumbleStop = @compileError("unable to translate macro: undefined identifier `SDL_HapticRumbleStop_renamed_SDL_StopHapticRumble`");
// /usr/include/SDL3/SDL_oldnames.h:817:9
pub const SDL_HapticRunEffect = @compileError("unable to translate macro: undefined identifier `SDL_HapticRunEffect_renamed_SDL_RunHapticEffect`");
// /usr/include/SDL3/SDL_oldnames.h:818:9
pub const SDL_HapticSetAutocenter = @compileError("unable to translate macro: undefined identifier `SDL_HapticSetAutocenter_renamed_SDL_SetHapticAutocenter`");
// /usr/include/SDL3/SDL_oldnames.h:819:9
pub const SDL_HapticSetGain = @compileError("unable to translate macro: undefined identifier `SDL_HapticSetGain_renamed_SDL_SetHapticGain`");
// /usr/include/SDL3/SDL_oldnames.h:820:9
pub const SDL_HapticStopAll = @compileError("unable to translate macro: undefined identifier `SDL_HapticStopAll_renamed_SDL_StopHapticEffects`");
// /usr/include/SDL3/SDL_oldnames.h:821:9
pub const SDL_HapticStopEffect = @compileError("unable to translate macro: undefined identifier `SDL_HapticStopEffect_renamed_SDL_StopHapticEffect`");
// /usr/include/SDL3/SDL_oldnames.h:822:9
pub const SDL_HapticUnpause = @compileError("unable to translate macro: undefined identifier `SDL_HapticUnpause_renamed_SDL_ResumeHaptic`");
// /usr/include/SDL3/SDL_oldnames.h:823:9
pub const SDL_HapticUpdateEffect = @compileError("unable to translate macro: undefined identifier `SDL_HapticUpdateEffect_renamed_SDL_UpdateHapticEffect`");
// /usr/include/SDL3/SDL_oldnames.h:824:9
pub const SDL_JoystickIsHaptic = @compileError("unable to translate macro: undefined identifier `SDL_JoystickIsHaptic_renamed_SDL_IsJoystickHaptic`");
// /usr/include/SDL3/SDL_oldnames.h:825:9
pub const SDL_MouseIsHaptic = @compileError("unable to translate macro: undefined identifier `SDL_MouseIsHaptic_renamed_SDL_IsMouseHaptic`");
// /usr/include/SDL3/SDL_oldnames.h:826:9
pub const SDL_HINT_ALLOW_TOPMOST = @compileError("unable to translate macro: undefined identifier `SDL_HINT_ALLOW_TOPMOST_renamed_SDL_HINT_WINDOW_ALLOW_TOPMOST`");
// /usr/include/SDL3/SDL_oldnames.h:829:9
pub const SDL_HINT_DIRECTINPUT_ENABLED = @compileError("unable to translate macro: undefined identifier `SDL_HINT_DIRECTINPUT_ENABLED_renamed_SDL_HINT_JOYSTICK_DIRECTINPUT`");
// /usr/include/SDL3/SDL_oldnames.h:830:9
pub const SDL_HINT_GDK_TEXTINPUT_DEFAULT = @compileError("unable to translate macro: undefined identifier `SDL_HINT_GDK_TEXTINPUT_DEFAULT_renamed_SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT`");
// /usr/include/SDL3/SDL_oldnames.h:831:9
pub const SDL_HINT_JOYSTICK_GAMECUBE_RUMBLE_BRAKE = @compileError("unable to translate macro: undefined identifier `SDL_HINT_JOYSTICK_GAMECUBE_RUMBLE_BRAKE_renamed_SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE`");
// /usr/include/SDL3/SDL_oldnames.h:832:9
pub const SDL_HINT_LINUX_DIGITAL_HATS = @compileError("unable to translate macro: undefined identifier `SDL_HINT_LINUX_DIGITAL_HATS_renamed_SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS`");
// /usr/include/SDL3/SDL_oldnames.h:833:9
pub const SDL_HINT_LINUX_HAT_DEADZONES = @compileError("unable to translate macro: undefined identifier `SDL_HINT_LINUX_HAT_DEADZONES_renamed_SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES`");
// /usr/include/SDL3/SDL_oldnames.h:834:9
pub const SDL_HINT_LINUX_JOYSTICK_CLASSIC = @compileError("unable to translate macro: undefined identifier `SDL_HINT_LINUX_JOYSTICK_CLASSIC_renamed_SDL_HINT_JOYSTICK_LINUX_CLASSIC`");
// /usr/include/SDL3/SDL_oldnames.h:835:9
pub const SDL_HINT_LINUX_JOYSTICK_DEADZONES = @compileError("unable to translate macro: undefined identifier `SDL_HINT_LINUX_JOYSTICK_DEADZONES_renamed_SDL_HINT_JOYSTICK_LINUX_DEADZONES`");
// /usr/include/SDL3/SDL_oldnames.h:836:9
pub const SDL_JOYSTICK_TYPE_GAMECONTROLLER = @compileError("unable to translate macro: undefined identifier `SDL_JOYSTICK_TYPE_GAMECONTROLLER_renamed_SDL_JOYSTICK_TYPE_GAMEPAD`");
// /usr/include/SDL3/SDL_oldnames.h:839:9
pub const SDL_JoystickAttachVirtualEx = @compileError("unable to translate macro: undefined identifier `SDL_JoystickAttachVirtualEx_renamed_SDL_AttachVirtualJoystick`");
// /usr/include/SDL3/SDL_oldnames.h:840:9
pub const SDL_JoystickClose = @compileError("unable to translate macro: undefined identifier `SDL_JoystickClose_renamed_SDL_CloseJoystick`");
// /usr/include/SDL3/SDL_oldnames.h:841:9
pub const SDL_JoystickDetachVirtual = @compileError("unable to translate macro: undefined identifier `SDL_JoystickDetachVirtual_renamed_SDL_DetachVirtualJoystick`");
// /usr/include/SDL3/SDL_oldnames.h:842:9
pub const SDL_JoystickFromInstanceID = @compileError("unable to translate macro: undefined identifier `SDL_JoystickFromInstanceID_renamed_SDL_GetJoystickFromInstanceID`");
// /usr/include/SDL3/SDL_oldnames.h:843:9
pub const SDL_JoystickFromPlayerIndex = @compileError("unable to translate macro: undefined identifier `SDL_JoystickFromPlayerIndex_renamed_SDL_GetJoystickFromPlayerIndex`");
// /usr/include/SDL3/SDL_oldnames.h:844:9
pub const SDL_JoystickGetAttached = @compileError("unable to translate macro: undefined identifier `SDL_JoystickGetAttached_renamed_SDL_JoystickConnected`");
// /usr/include/SDL3/SDL_oldnames.h:845:9
pub const SDL_JoystickGetAxis = @compileError("unable to translate macro: undefined identifier `SDL_JoystickGetAxis_renamed_SDL_GetJoystickAxis`");
// /usr/include/SDL3/SDL_oldnames.h:846:9
pub const SDL_JoystickGetAxisInitialState = @compileError("unable to translate macro: undefined identifier `SDL_JoystickGetAxisInitialState_renamed_SDL_GetJoystickAxisInitialState`");
// /usr/include/SDL3/SDL_oldnames.h:847:9
pub const SDL_JoystickGetBall = @compileError("unable to translate macro: undefined identifier `SDL_JoystickGetBall_renamed_SDL_GetJoystickBall`");
// /usr/include/SDL3/SDL_oldnames.h:848:9
pub const SDL_JoystickGetButton = @compileError("unable to translate macro: undefined identifier `SDL_JoystickGetButton_renamed_SDL_GetJoystickButton`");
// /usr/include/SDL3/SDL_oldnames.h:849:9
pub const SDL_JoystickGetFirmwareVersion = @compileError("unable to translate macro: undefined identifier `SDL_JoystickGetFirmwareVersion_renamed_SDL_GetJoystickFirmwareVersion`");
// /usr/include/SDL3/SDL_oldnames.h:850:9
pub const SDL_JoystickGetGUID = @compileError("unable to translate macro: undefined identifier `SDL_JoystickGetGUID_renamed_SDL_GetJoystickGUID`");
// /usr/include/SDL3/SDL_oldnames.h:851:9
pub const SDL_JoystickGetGUIDFromString = @compileError("unable to translate macro: undefined identifier `SDL_JoystickGetGUIDFromString_renamed_SDL_GetJoystickGUIDFromString`");
// /usr/include/SDL3/SDL_oldnames.h:852:9
pub const SDL_JoystickGetGUIDString = @compileError("unable to translate macro: undefined identifier `SDL_JoystickGetGUIDString_renamed_SDL_GetJoystickGUIDString`");
// /usr/include/SDL3/SDL_oldnames.h:853:9
pub const SDL_JoystickGetHat = @compileError("unable to translate macro: undefined identifier `SDL_JoystickGetHat_renamed_SDL_GetJoystickHat`");
// /usr/include/SDL3/SDL_oldnames.h:854:9
pub const SDL_JoystickGetPlayerIndex = @compileError("unable to translate macro: undefined identifier `SDL_JoystickGetPlayerIndex_renamed_SDL_GetJoystickPlayerIndex`");
// /usr/include/SDL3/SDL_oldnames.h:855:9
pub const SDL_JoystickGetProduct = @compileError("unable to translate macro: undefined identifier `SDL_JoystickGetProduct_renamed_SDL_GetJoystickProduct`");
// /usr/include/SDL3/SDL_oldnames.h:856:9
pub const SDL_JoystickGetProductVersion = @compileError("unable to translate macro: undefined identifier `SDL_JoystickGetProductVersion_renamed_SDL_GetJoystickProductVersion`");
// /usr/include/SDL3/SDL_oldnames.h:857:9
pub const SDL_JoystickGetSerial = @compileError("unable to translate macro: undefined identifier `SDL_JoystickGetSerial_renamed_SDL_GetJoystickSerial`");
// /usr/include/SDL3/SDL_oldnames.h:858:9
pub const SDL_JoystickGetType = @compileError("unable to translate macro: undefined identifier `SDL_JoystickGetType_renamed_SDL_GetJoystickType`");
// /usr/include/SDL3/SDL_oldnames.h:859:9
pub const SDL_JoystickGetVendor = @compileError("unable to translate macro: undefined identifier `SDL_JoystickGetVendor_renamed_SDL_GetJoystickVendor`");
// /usr/include/SDL3/SDL_oldnames.h:860:9
pub const SDL_JoystickInstanceID = @compileError("unable to translate macro: undefined identifier `SDL_JoystickInstanceID_renamed_SDL_GetJoystickInstanceID`");
// /usr/include/SDL3/SDL_oldnames.h:861:9
pub const SDL_JoystickIsVirtual = @compileError("unable to translate macro: undefined identifier `SDL_JoystickIsVirtual_renamed_SDL_IsJoystickVirtual`");
// /usr/include/SDL3/SDL_oldnames.h:862:9
pub const SDL_JoystickName = @compileError("unable to translate macro: undefined identifier `SDL_JoystickName_renamed_SDL_GetJoystickName`");
// /usr/include/SDL3/SDL_oldnames.h:863:9
pub const SDL_JoystickNumAxes = @compileError("unable to translate macro: undefined identifier `SDL_JoystickNumAxes_renamed_SDL_GetNumJoystickAxes`");
// /usr/include/SDL3/SDL_oldnames.h:864:9
pub const SDL_JoystickNumBalls = @compileError("unable to translate macro: undefined identifier `SDL_JoystickNumBalls_renamed_SDL_GetNumJoystickBalls`");
// /usr/include/SDL3/SDL_oldnames.h:865:9
pub const SDL_JoystickNumButtons = @compileError("unable to translate macro: undefined identifier `SDL_JoystickNumButtons_renamed_SDL_GetNumJoystickButtons`");
// /usr/include/SDL3/SDL_oldnames.h:866:9
pub const SDL_JoystickNumHats = @compileError("unable to translate macro: undefined identifier `SDL_JoystickNumHats_renamed_SDL_GetNumJoystickHats`");
// /usr/include/SDL3/SDL_oldnames.h:867:9
pub const SDL_JoystickOpen = @compileError("unable to translate macro: undefined identifier `SDL_JoystickOpen_renamed_SDL_OpenJoystick`");
// /usr/include/SDL3/SDL_oldnames.h:868:9
pub const SDL_JoystickPath = @compileError("unable to translate macro: undefined identifier `SDL_JoystickPath_renamed_SDL_GetJoystickPath`");
// /usr/include/SDL3/SDL_oldnames.h:869:9
pub const SDL_JoystickRumble = @compileError("unable to translate macro: undefined identifier `SDL_JoystickRumble_renamed_SDL_RumbleJoystick`");
// /usr/include/SDL3/SDL_oldnames.h:870:9
pub const SDL_JoystickRumbleTriggers = @compileError("unable to translate macro: undefined identifier `SDL_JoystickRumbleTriggers_renamed_SDL_RumbleJoystickTriggers`");
// /usr/include/SDL3/SDL_oldnames.h:871:9
pub const SDL_JoystickSendEffect = @compileError("unable to translate macro: undefined identifier `SDL_JoystickSendEffect_renamed_SDL_SendJoystickEffect`");
// /usr/include/SDL3/SDL_oldnames.h:872:9
pub const SDL_JoystickSetLED = @compileError("unable to translate macro: undefined identifier `SDL_JoystickSetLED_renamed_SDL_SetJoystickLED`");
// /usr/include/SDL3/SDL_oldnames.h:873:9
pub const SDL_JoystickSetPlayerIndex = @compileError("unable to translate macro: undefined identifier `SDL_JoystickSetPlayerIndex_renamed_SDL_SetJoystickPlayerIndex`");
// /usr/include/SDL3/SDL_oldnames.h:874:9
pub const SDL_JoystickSetVirtualAxis = @compileError("unable to translate macro: undefined identifier `SDL_JoystickSetVirtualAxis_renamed_SDL_SetJoystickVirtualAxis`");
// /usr/include/SDL3/SDL_oldnames.h:875:9
pub const SDL_JoystickSetVirtualButton = @compileError("unable to translate macro: undefined identifier `SDL_JoystickSetVirtualButton_renamed_SDL_SetJoystickVirtualButton`");
// /usr/include/SDL3/SDL_oldnames.h:876:9
pub const SDL_JoystickSetVirtualHat = @compileError("unable to translate macro: undefined identifier `SDL_JoystickSetVirtualHat_renamed_SDL_SetJoystickVirtualHat`");
// /usr/include/SDL3/SDL_oldnames.h:877:9
pub const SDL_JoystickUpdate = @compileError("unable to translate macro: undefined identifier `SDL_JoystickUpdate_renamed_SDL_UpdateJoysticks`");
// /usr/include/SDL3/SDL_oldnames.h:878:9
pub const SDL_IsScreenKeyboardShown = @compileError("unable to translate macro: undefined identifier `SDL_IsScreenKeyboardShown_renamed_SDL_ScreenKeyboardShown`");
// /usr/include/SDL3/SDL_oldnames.h:881:9
pub const SDL_IsTextInputActive = @compileError("unable to translate macro: undefined identifier `SDL_IsTextInputActive_renamed_SDL_TextInputActive`");
// /usr/include/SDL3/SDL_oldnames.h:882:9
pub const KMOD_ALT = @compileError("unable to translate macro: undefined identifier `KMOD_ALT_renamed_SDL_KMOD_ALT`");
// /usr/include/SDL3/SDL_oldnames.h:885:9
pub const KMOD_CAPS = @compileError("unable to translate macro: undefined identifier `KMOD_CAPS_renamed_SDL_KMOD_CAPS`");
// /usr/include/SDL3/SDL_oldnames.h:886:9
pub const KMOD_CTRL = @compileError("unable to translate macro: undefined identifier `KMOD_CTRL_renamed_SDL_KMOD_CTRL`");
// /usr/include/SDL3/SDL_oldnames.h:887:9
pub const KMOD_GUI = @compileError("unable to translate macro: undefined identifier `KMOD_GUI_renamed_SDL_KMOD_GUI`");
// /usr/include/SDL3/SDL_oldnames.h:888:9
pub const KMOD_LALT = @compileError("unable to translate macro: undefined identifier `KMOD_LALT_renamed_SDL_KMOD_LALT`");
// /usr/include/SDL3/SDL_oldnames.h:889:9
pub const KMOD_LCTRL = @compileError("unable to translate macro: undefined identifier `KMOD_LCTRL_renamed_SDL_KMOD_LCTRL`");
// /usr/include/SDL3/SDL_oldnames.h:890:9
pub const KMOD_LGUI = @compileError("unable to translate macro: undefined identifier `KMOD_LGUI_renamed_SDL_KMOD_LGUI`");
// /usr/include/SDL3/SDL_oldnames.h:891:9
pub const KMOD_LSHIFT = @compileError("unable to translate macro: undefined identifier `KMOD_LSHIFT_renamed_SDL_KMOD_LSHIFT`");
// /usr/include/SDL3/SDL_oldnames.h:892:9
pub const KMOD_MODE = @compileError("unable to translate macro: undefined identifier `KMOD_MODE_renamed_SDL_KMOD_MODE`");
// /usr/include/SDL3/SDL_oldnames.h:893:9
pub const KMOD_NONE = @compileError("unable to translate macro: undefined identifier `KMOD_NONE_renamed_SDL_KMOD_NONE`");
// /usr/include/SDL3/SDL_oldnames.h:894:9
pub const KMOD_NUM = @compileError("unable to translate macro: undefined identifier `KMOD_NUM_renamed_SDL_KMOD_NUM`");
// /usr/include/SDL3/SDL_oldnames.h:895:9
pub const KMOD_RALT = @compileError("unable to translate macro: undefined identifier `KMOD_RALT_renamed_SDL_KMOD_RALT`");
// /usr/include/SDL3/SDL_oldnames.h:896:9
pub const KMOD_RCTRL = @compileError("unable to translate macro: undefined identifier `KMOD_RCTRL_renamed_SDL_KMOD_RCTRL`");
// /usr/include/SDL3/SDL_oldnames.h:897:9
pub const KMOD_RGUI = @compileError("unable to translate macro: undefined identifier `KMOD_RGUI_renamed_SDL_KMOD_RGUI`");
// /usr/include/SDL3/SDL_oldnames.h:898:9
pub const KMOD_RSHIFT = @compileError("unable to translate macro: undefined identifier `KMOD_RSHIFT_renamed_SDL_KMOD_RSHIFT`");
// /usr/include/SDL3/SDL_oldnames.h:899:9
pub const KMOD_SCROLL = @compileError("unable to translate macro: undefined identifier `KMOD_SCROLL_renamed_SDL_KMOD_SCROLL`");
// /usr/include/SDL3/SDL_oldnames.h:900:9
pub const KMOD_SHIFT = @compileError("unable to translate macro: undefined identifier `KMOD_SHIFT_renamed_SDL_KMOD_SHIFT`");
// /usr/include/SDL3/SDL_oldnames.h:901:9
pub const SDLK_BACKQUOTE = @compileError("unable to translate macro: undefined identifier `SDLK_BACKQUOTE_renamed_SDLK_GRAVE`");
// /usr/include/SDL3/SDL_oldnames.h:902:9
pub const SDLK_QUOTE = @compileError("unable to translate macro: undefined identifier `SDLK_QUOTE_renamed_SDLK_APOSTROPHE`");
// /usr/include/SDL3/SDL_oldnames.h:903:9
pub const SDLK_QUOTEDBL = @compileError("unable to translate macro: undefined identifier `SDLK_QUOTEDBL_renamed_SDLK_DBLAPOSTROPHE`");
// /usr/include/SDL3/SDL_oldnames.h:904:9
pub const SDL_LogGetOutputFunction = @compileError("unable to translate macro: undefined identifier `SDL_LogGetOutputFunction_renamed_SDL_GetLogOutputFunction`");
// /usr/include/SDL3/SDL_oldnames.h:907:9
pub const SDL_LogGetPriority = @compileError("unable to translate macro: undefined identifier `SDL_LogGetPriority_renamed_SDL_GetLogPriority`");
// /usr/include/SDL3/SDL_oldnames.h:908:9
pub const SDL_LogResetPriorities = @compileError("unable to translate macro: undefined identifier `SDL_LogResetPriorities_renamed_SDL_ResetLogPriorities`");
// /usr/include/SDL3/SDL_oldnames.h:909:9
pub const SDL_LogSetAllPriority = @compileError("unable to translate macro: undefined identifier `SDL_LogSetAllPriority_renamed_SDL_SetLogPriorities`");
// /usr/include/SDL3/SDL_oldnames.h:910:9
pub const SDL_LogSetOutputFunction = @compileError("unable to translate macro: undefined identifier `SDL_LogSetOutputFunction_renamed_SDL_SetLogOutputFunction`");
// /usr/include/SDL3/SDL_oldnames.h:911:9
pub const SDL_LogSetPriority = @compileError("unable to translate macro: undefined identifier `SDL_LogSetPriority_renamed_SDL_SetLogPriority`");
// /usr/include/SDL3/SDL_oldnames.h:912:9
pub const SDL_FreeCursor = @compileError("unable to translate macro: undefined identifier `SDL_FreeCursor_renamed_SDL_DestroyCursor`");
// /usr/include/SDL3/SDL_oldnames.h:915:9
pub const SDL_SYSTEM_CURSOR_ARROW = @compileError("unable to translate macro: undefined identifier `SDL_SYSTEM_CURSOR_ARROW_renamed_SDL_SYSTEM_CURSOR_DEFAULT`");
// /usr/include/SDL3/SDL_oldnames.h:916:9
pub const SDL_SYSTEM_CURSOR_HAND = @compileError("unable to translate macro: undefined identifier `SDL_SYSTEM_CURSOR_HAND_renamed_SDL_SYSTEM_CURSOR_POINTER`");
// /usr/include/SDL3/SDL_oldnames.h:917:9
pub const SDL_SYSTEM_CURSOR_IBEAM = @compileError("unable to translate macro: undefined identifier `SDL_SYSTEM_CURSOR_IBEAM_renamed_SDL_SYSTEM_CURSOR_TEXT`");
// /usr/include/SDL3/SDL_oldnames.h:918:9
pub const SDL_SYSTEM_CURSOR_NO = @compileError("unable to translate macro: undefined identifier `SDL_SYSTEM_CURSOR_NO_renamed_SDL_SYSTEM_CURSOR_NOT_ALLOWED`");
// /usr/include/SDL3/SDL_oldnames.h:919:9
pub const SDL_SYSTEM_CURSOR_SIZEALL = @compileError("unable to translate macro: undefined identifier `SDL_SYSTEM_CURSOR_SIZEALL_renamed_SDL_SYSTEM_CURSOR_MOVE`");
// /usr/include/SDL3/SDL_oldnames.h:920:9
pub const SDL_SYSTEM_CURSOR_SIZENESW = @compileError("unable to translate macro: undefined identifier `SDL_SYSTEM_CURSOR_SIZENESW_renamed_SDL_SYSTEM_CURSOR_NESW_RESIZE`");
// /usr/include/SDL3/SDL_oldnames.h:921:9
pub const SDL_SYSTEM_CURSOR_SIZENS = @compileError("unable to translate macro: undefined identifier `SDL_SYSTEM_CURSOR_SIZENS_renamed_SDL_SYSTEM_CURSOR_NS_RESIZE`");
// /usr/include/SDL3/SDL_oldnames.h:922:9
pub const SDL_SYSTEM_CURSOR_SIZENWSE = @compileError("unable to translate macro: undefined identifier `SDL_SYSTEM_CURSOR_SIZENWSE_renamed_SDL_SYSTEM_CURSOR_NWSE_RESIZE`");
// /usr/include/SDL3/SDL_oldnames.h:923:9
pub const SDL_SYSTEM_CURSOR_SIZEWE = @compileError("unable to translate macro: undefined identifier `SDL_SYSTEM_CURSOR_SIZEWE_renamed_SDL_SYSTEM_CURSOR_EW_RESIZE`");
// /usr/include/SDL3/SDL_oldnames.h:924:9
pub const SDL_SYSTEM_CURSOR_WAITARROW = @compileError("unable to translate macro: undefined identifier `SDL_SYSTEM_CURSOR_WAITARROW_renamed_SDL_SYSTEM_CURSOR_PROGRESS`");
// /usr/include/SDL3/SDL_oldnames.h:925:9
pub const SDL_SYSTEM_CURSOR_WINDOW_BOTTOM = @compileError("unable to translate macro: undefined identifier `SDL_SYSTEM_CURSOR_WINDOW_BOTTOM_renamed_SDL_SYSTEM_CURSOR_S_RESIZE`");
// /usr/include/SDL3/SDL_oldnames.h:926:9
pub const SDL_SYSTEM_CURSOR_WINDOW_BOTTOMLEFT = @compileError("unable to translate macro: undefined identifier `SDL_SYSTEM_CURSOR_WINDOW_BOTTOMLEFT_renamed_SDL_SYSTEM_CURSOR_SW_RESIZE`");
// /usr/include/SDL3/SDL_oldnames.h:927:9
pub const SDL_SYSTEM_CURSOR_WINDOW_BOTTOMRIGHT = @compileError("unable to translate macro: undefined identifier `SDL_SYSTEM_CURSOR_WINDOW_BOTTOMRIGHT_renamed_SDL_SYSTEM_CURSOR_SE_RESIZE`");
// /usr/include/SDL3/SDL_oldnames.h:928:9
pub const SDL_SYSTEM_CURSOR_WINDOW_LEFT = @compileError("unable to translate macro: undefined identifier `SDL_SYSTEM_CURSOR_WINDOW_LEFT_renamed_SDL_SYSTEM_CURSOR_W_RESIZE`");
// /usr/include/SDL3/SDL_oldnames.h:929:9
pub const SDL_SYSTEM_CURSOR_WINDOW_RIGHT = @compileError("unable to translate macro: undefined identifier `SDL_SYSTEM_CURSOR_WINDOW_RIGHT_renamed_SDL_SYSTEM_CURSOR_E_RESIZE`");
// /usr/include/SDL3/SDL_oldnames.h:930:9
pub const SDL_SYSTEM_CURSOR_WINDOW_TOP = @compileError("unable to translate macro: undefined identifier `SDL_SYSTEM_CURSOR_WINDOW_TOP_renamed_SDL_SYSTEM_CURSOR_N_RESIZE`");
// /usr/include/SDL3/SDL_oldnames.h:931:9
pub const SDL_SYSTEM_CURSOR_WINDOW_TOPLEFT = @compileError("unable to translate macro: undefined identifier `SDL_SYSTEM_CURSOR_WINDOW_TOPLEFT_renamed_SDL_SYSTEM_CURSOR_NW_RESIZE`");
// /usr/include/SDL3/SDL_oldnames.h:932:9
pub const SDL_SYSTEM_CURSOR_WINDOW_TOPRIGHT = @compileError("unable to translate macro: undefined identifier `SDL_SYSTEM_CURSOR_WINDOW_TOPRIGHT_renamed_SDL_SYSTEM_CURSOR_NE_RESIZE`");
// /usr/include/SDL3/SDL_oldnames.h:933:9
pub const SDL_CondBroadcast = @compileError("unable to translate macro: undefined identifier `SDL_CondBroadcast_renamed_SDL_BroadcastCondition`");
// /usr/include/SDL3/SDL_oldnames.h:936:9
pub const SDL_CondSignal = @compileError("unable to translate macro: undefined identifier `SDL_CondSignal_renamed_SDL_SignalCondition`");
// /usr/include/SDL3/SDL_oldnames.h:937:9
pub const SDL_CondWait = @compileError("unable to translate macro: undefined identifier `SDL_CondWait_renamed_SDL_WaitCondition`");
// /usr/include/SDL3/SDL_oldnames.h:938:9
pub const SDL_CondWaitTimeout = @compileError("unable to translate macro: undefined identifier `SDL_CondWaitTimeout_renamed_SDL_WaitConditionTimeout`");
// /usr/include/SDL3/SDL_oldnames.h:939:9
pub const SDL_CreateCond = @compileError("unable to translate macro: undefined identifier `SDL_CreateCond_renamed_SDL_CreateCondition`");
// /usr/include/SDL3/SDL_oldnames.h:940:9
pub const SDL_DestroyCond = @compileError("unable to translate macro: undefined identifier `SDL_DestroyCond_renamed_SDL_DestroyCondition`");
// /usr/include/SDL3/SDL_oldnames.h:941:9
pub const SDL_SemPost = @compileError("unable to translate macro: undefined identifier `SDL_SemPost_renamed_SDL_PostSemaphore`");
// /usr/include/SDL3/SDL_oldnames.h:942:9
pub const SDL_SemTryWait = @compileError("unable to translate macro: undefined identifier `SDL_SemTryWait_renamed_SDL_TryWaitSemaphore`");
// /usr/include/SDL3/SDL_oldnames.h:943:9
pub const SDL_SemValue = @compileError("unable to translate macro: undefined identifier `SDL_SemValue_renamed_SDL_GetSemaphoreValue`");
// /usr/include/SDL3/SDL_oldnames.h:944:9
pub const SDL_SemWait = @compileError("unable to translate macro: undefined identifier `SDL_SemWait_renamed_SDL_WaitSemaphore`");
// /usr/include/SDL3/SDL_oldnames.h:945:9
pub const SDL_SemWaitTimeout = @compileError("unable to translate macro: undefined identifier `SDL_SemWaitTimeout_renamed_SDL_WaitSemaphoreTimeout`");
// /usr/include/SDL3/SDL_oldnames.h:946:9
pub const SDL_cond = @compileError("unable to translate macro: undefined identifier `SDL_cond_renamed_SDL_Condition`");
// /usr/include/SDL3/SDL_oldnames.h:949:9
pub const SDL_mutex = @compileError("unable to translate macro: undefined identifier `SDL_mutex_renamed_SDL_Mutex`");
// /usr/include/SDL3/SDL_oldnames.h:950:9
pub const SDL_sem = @compileError("unable to translate macro: undefined identifier `SDL_sem_renamed_SDL_Semaphore`");
// /usr/include/SDL3/SDL_oldnames.h:951:9
pub const SDL_AllocFormat = @compileError("unable to translate macro: undefined identifier `SDL_AllocFormat_renamed_SDL_CreatePixelFormat`");
// /usr/include/SDL3/SDL_oldnames.h:954:9
pub const SDL_AllocPalette = @compileError("unable to translate macro: undefined identifier `SDL_AllocPalette_renamed_SDL_CreatePalette`");
// /usr/include/SDL3/SDL_oldnames.h:955:9
pub const SDL_Colour = @compileError("unable to translate macro: undefined identifier `SDL_Colour_renamed_SDL_Color`");
// /usr/include/SDL3/SDL_oldnames.h:956:9
pub const SDL_FreeFormat = @compileError("unable to translate macro: undefined identifier `SDL_FreeFormat_renamed_SDL_DestroyPixelFormat`");
// /usr/include/SDL3/SDL_oldnames.h:957:9
pub const SDL_FreePalette = @compileError("unable to translate macro: undefined identifier `SDL_FreePalette_renamed_SDL_DestroyPalette`");
// /usr/include/SDL3/SDL_oldnames.h:958:9
pub const SDL_MasksToPixelFormatEnum = @compileError("unable to translate macro: undefined identifier `SDL_MasksToPixelFormatEnum_renamed_SDL_GetPixelFormatEnumForMasks`");
// /usr/include/SDL3/SDL_oldnames.h:959:9
pub const SDL_PIXELFORMAT_BGR444 = @compileError("unable to translate macro: undefined identifier `SDL_PIXELFORMAT_BGR444_renamed_SDL_PIXELFORMAT_XBGR4444`");
// /usr/include/SDL3/SDL_oldnames.h:960:9
pub const SDL_PIXELFORMAT_BGR555 = @compileError("unable to translate macro: undefined identifier `SDL_PIXELFORMAT_BGR555_renamed_SDL_PIXELFORMAT_XBGR1555`");
// /usr/include/SDL3/SDL_oldnames.h:961:9
pub const SDL_PIXELFORMAT_BGR888 = @compileError("unable to translate macro: undefined identifier `SDL_PIXELFORMAT_BGR888_renamed_SDL_PIXELFORMAT_XBGR8888`");
// /usr/include/SDL3/SDL_oldnames.h:962:9
pub const SDL_PIXELFORMAT_RGB444 = @compileError("unable to translate macro: undefined identifier `SDL_PIXELFORMAT_RGB444_renamed_SDL_PIXELFORMAT_XRGB4444`");
// /usr/include/SDL3/SDL_oldnames.h:963:9
pub const SDL_PIXELFORMAT_RGB555 = @compileError("unable to translate macro: undefined identifier `SDL_PIXELFORMAT_RGB555_renamed_SDL_PIXELFORMAT_XRGB1555`");
// /usr/include/SDL3/SDL_oldnames.h:964:9
pub const SDL_PIXELFORMAT_RGB888 = @compileError("unable to translate macro: undefined identifier `SDL_PIXELFORMAT_RGB888_renamed_SDL_PIXELFORMAT_XRGB8888`");
// /usr/include/SDL3/SDL_oldnames.h:965:9
pub const SDL_PixelFormatEnumToMasks = @compileError("unable to translate macro: undefined identifier `SDL_PixelFormatEnumToMasks_renamed_SDL_GetMasksForPixelFormatEnum`");
// /usr/include/SDL3/SDL_oldnames.h:966:9
pub const SDL_EncloseFPoints = @compileError("unable to translate macro: undefined identifier `SDL_EncloseFPoints_renamed_SDL_GetRectEnclosingPointsFloat`");
// /usr/include/SDL3/SDL_oldnames.h:969:9
pub const SDL_EnclosePoints = @compileError("unable to translate macro: undefined identifier `SDL_EnclosePoints_renamed_SDL_GetRectEnclosingPoints`");
// /usr/include/SDL3/SDL_oldnames.h:970:9
pub const SDL_FRectEmpty = @compileError("unable to translate macro: undefined identifier `SDL_FRectEmpty_renamed_SDL_RectEmptyFloat`");
// /usr/include/SDL3/SDL_oldnames.h:971:9
pub const SDL_FRectEquals = @compileError("unable to translate macro: undefined identifier `SDL_FRectEquals_renamed_SDL_RectsEqualFloat`");
// /usr/include/SDL3/SDL_oldnames.h:972:9
pub const SDL_FRectEqualsEpsilon = @compileError("unable to translate macro: undefined identifier `SDL_FRectEqualsEpsilon_renamed_SDL_RectsEqualEpsilon`");
// /usr/include/SDL3/SDL_oldnames.h:973:9
pub const SDL_HasIntersection = @compileError("unable to translate macro: undefined identifier `SDL_HasIntersection_renamed_SDL_HasRectIntersection`");
// /usr/include/SDL3/SDL_oldnames.h:974:9
pub const SDL_HasIntersectionF = @compileError("unable to translate macro: undefined identifier `SDL_HasIntersectionF_renamed_SDL_HasRectIntersectionFloat`");
// /usr/include/SDL3/SDL_oldnames.h:975:9
pub const SDL_IntersectFRect = @compileError("unable to translate macro: undefined identifier `SDL_IntersectFRect_renamed_SDL_GetRectIntersectionFloat`");
// /usr/include/SDL3/SDL_oldnames.h:976:9
pub const SDL_IntersectFRectAndLine = @compileError("unable to translate macro: undefined identifier `SDL_IntersectFRectAndLine_renamed_SDL_GetRectAndLineIntersectionFloat`");
// /usr/include/SDL3/SDL_oldnames.h:977:9
pub const SDL_IntersectRect = @compileError("unable to translate macro: undefined identifier `SDL_IntersectRect_renamed_SDL_GetRectIntersection`");
// /usr/include/SDL3/SDL_oldnames.h:978:9
pub const SDL_IntersectRectAndLine = @compileError("unable to translate macro: undefined identifier `SDL_IntersectRectAndLine_renamed_SDL_GetRectAndLineIntersection`");
// /usr/include/SDL3/SDL_oldnames.h:979:9
pub const SDL_PointInFRect = @compileError("unable to translate macro: undefined identifier `SDL_PointInFRect_renamed_SDL_PointInRectFloat`");
// /usr/include/SDL3/SDL_oldnames.h:980:9
pub const SDL_RectEquals = @compileError("unable to translate macro: undefined identifier `SDL_RectEquals_renamed_SDL_RectsEqual`");
// /usr/include/SDL3/SDL_oldnames.h:981:9
pub const SDL_UnionFRect = @compileError("unable to translate macro: undefined identifier `SDL_UnionFRect_renamed_SDL_GetRectUnionFloat`");
// /usr/include/SDL3/SDL_oldnames.h:982:9
pub const SDL_UnionRect = @compileError("unable to translate macro: undefined identifier `SDL_UnionRect_renamed_SDL_GetRectUnion`");
// /usr/include/SDL3/SDL_oldnames.h:983:9
pub const SDL_GetRendererOutputSize = @compileError("unable to translate macro: undefined identifier `SDL_GetRendererOutputSize_renamed_SDL_GetCurrentRenderOutputSize`");
// /usr/include/SDL3/SDL_oldnames.h:986:9
pub const SDL_RenderCopy = @compileError("unable to translate macro: undefined identifier `SDL_RenderCopy_renamed_SDL_RenderTexture`");
// /usr/include/SDL3/SDL_oldnames.h:987:9
pub const SDL_RenderCopyEx = @compileError("unable to translate macro: undefined identifier `SDL_RenderCopyEx_renamed_SDL_RenderTextureRotated`");
// /usr/include/SDL3/SDL_oldnames.h:988:9
pub const SDL_RenderCopyExF = @compileError("unable to translate macro: undefined identifier `SDL_RenderCopyExF_renamed_SDL_RenderTextureRotated`");
// /usr/include/SDL3/SDL_oldnames.h:989:9
pub const SDL_RenderCopyF = @compileError("unable to translate macro: undefined identifier `SDL_RenderCopyF_renamed_SDL_RenderTexture`");
// /usr/include/SDL3/SDL_oldnames.h:990:9
pub const SDL_RenderDrawLine = @compileError("unable to translate macro: undefined identifier `SDL_RenderDrawLine_renamed_SDL_RenderLine`");
// /usr/include/SDL3/SDL_oldnames.h:991:9
pub const SDL_RenderDrawLineF = @compileError("unable to translate macro: undefined identifier `SDL_RenderDrawLineF_renamed_SDL_RenderLine`");
// /usr/include/SDL3/SDL_oldnames.h:992:9
pub const SDL_RenderDrawLines = @compileError("unable to translate macro: undefined identifier `SDL_RenderDrawLines_renamed_SDL_RenderLines`");
// /usr/include/SDL3/SDL_oldnames.h:993:9
pub const SDL_RenderDrawLinesF = @compileError("unable to translate macro: undefined identifier `SDL_RenderDrawLinesF_renamed_SDL_RenderLines`");
// /usr/include/SDL3/SDL_oldnames.h:994:9
pub const SDL_RenderDrawPoint = @compileError("unable to translate macro: undefined identifier `SDL_RenderDrawPoint_renamed_SDL_RenderPoint`");
// /usr/include/SDL3/SDL_oldnames.h:995:9
pub const SDL_RenderDrawPointF = @compileError("unable to translate macro: undefined identifier `SDL_RenderDrawPointF_renamed_SDL_RenderPoint`");
// /usr/include/SDL3/SDL_oldnames.h:996:9
pub const SDL_RenderDrawPoints = @compileError("unable to translate macro: undefined identifier `SDL_RenderDrawPoints_renamed_SDL_RenderPoints`");
// /usr/include/SDL3/SDL_oldnames.h:997:9
pub const SDL_RenderDrawPointsF = @compileError("unable to translate macro: undefined identifier `SDL_RenderDrawPointsF_renamed_SDL_RenderPoints`");
// /usr/include/SDL3/SDL_oldnames.h:998:9
pub const SDL_RenderDrawRect = @compileError("unable to translate macro: undefined identifier `SDL_RenderDrawRect_renamed_SDL_RenderRect`");
// /usr/include/SDL3/SDL_oldnames.h:999:9
pub const SDL_RenderDrawRectF = @compileError("unable to translate macro: undefined identifier `SDL_RenderDrawRectF_renamed_SDL_RenderRect`");
// /usr/include/SDL3/SDL_oldnames.h:1000:9
pub const SDL_RenderDrawRects = @compileError("unable to translate macro: undefined identifier `SDL_RenderDrawRects_renamed_SDL_RenderRects`");
// /usr/include/SDL3/SDL_oldnames.h:1001:9
pub const SDL_RenderDrawRectsF = @compileError("unable to translate macro: undefined identifier `SDL_RenderDrawRectsF_renamed_SDL_RenderRects`");
// /usr/include/SDL3/SDL_oldnames.h:1002:9
pub const SDL_RenderFillRectF = @compileError("unable to translate macro: undefined identifier `SDL_RenderFillRectF_renamed_SDL_RenderFillRect`");
// /usr/include/SDL3/SDL_oldnames.h:1003:9
pub const SDL_RenderFillRectsF = @compileError("unable to translate macro: undefined identifier `SDL_RenderFillRectsF_renamed_SDL_RenderFillRects`");
// /usr/include/SDL3/SDL_oldnames.h:1004:9
pub const SDL_RendererFlip = @compileError("unable to translate macro: undefined identifier `SDL_RendererFlip_renamed_SDL_FlipMode`");
// /usr/include/SDL3/SDL_oldnames.h:1005:9
pub const SDL_RenderFlush = @compileError("unable to translate macro: undefined identifier `SDL_RenderFlush_renamed_SDL_FlushRenderer`");
// /usr/include/SDL3/SDL_oldnames.h:1006:9
pub const SDL_RenderGetClipRect = @compileError("unable to translate macro: undefined identifier `SDL_RenderGetClipRect_renamed_SDL_GetRenderClipRect`");
// /usr/include/SDL3/SDL_oldnames.h:1007:9
pub const SDL_RenderGetLogicalSize = @compileError("unable to translate macro: undefined identifier `SDL_RenderGetLogicalSize_renamed_SDL_GetRenderLogicalPresentation`");
// /usr/include/SDL3/SDL_oldnames.h:1008:9
pub const SDL_RenderGetMetalCommandEncoder = @compileError("unable to translate macro: undefined identifier `SDL_RenderGetMetalCommandEncoder_renamed_SDL_GetRenderMetalCommandEncoder`");
// /usr/include/SDL3/SDL_oldnames.h:1009:9
pub const SDL_RenderGetMetalLayer = @compileError("unable to translate macro: undefined identifier `SDL_RenderGetMetalLayer_renamed_SDL_GetRenderMetalLayer`");
// /usr/include/SDL3/SDL_oldnames.h:1010:9
pub const SDL_RenderGetScale = @compileError("unable to translate macro: undefined identifier `SDL_RenderGetScale_renamed_SDL_GetRenderScale`");
// /usr/include/SDL3/SDL_oldnames.h:1011:9
pub const SDL_RenderGetViewport = @compileError("unable to translate macro: undefined identifier `SDL_RenderGetViewport_renamed_SDL_GetRenderViewport`");
// /usr/include/SDL3/SDL_oldnames.h:1012:9
pub const SDL_RenderGetWindow = @compileError("unable to translate macro: undefined identifier `SDL_RenderGetWindow_renamed_SDL_GetRenderWindow`");
// /usr/include/SDL3/SDL_oldnames.h:1013:9
pub const SDL_RenderIsClipEnabled = @compileError("unable to translate macro: undefined identifier `SDL_RenderIsClipEnabled_renamed_SDL_RenderClipEnabled`");
// /usr/include/SDL3/SDL_oldnames.h:1014:9
pub const SDL_RenderLogicalToWindow = @compileError("unable to translate macro: undefined identifier `SDL_RenderLogicalToWindow_renamed_SDL_RenderCoordinatesToWindow`");
// /usr/include/SDL3/SDL_oldnames.h:1015:9
pub const SDL_RenderSetClipRect = @compileError("unable to translate macro: undefined identifier `SDL_RenderSetClipRect_renamed_SDL_SetRenderClipRect`");
// /usr/include/SDL3/SDL_oldnames.h:1016:9
pub const SDL_RenderSetLogicalSize = @compileError("unable to translate macro: undefined identifier `SDL_RenderSetLogicalSize_renamed_SDL_SetRenderLogicalPresentation`");
// /usr/include/SDL3/SDL_oldnames.h:1017:9
pub const SDL_RenderSetScale = @compileError("unable to translate macro: undefined identifier `SDL_RenderSetScale_renamed_SDL_SetRenderScale`");
// /usr/include/SDL3/SDL_oldnames.h:1018:9
pub const SDL_RenderSetVSync = @compileError("unable to translate macro: undefined identifier `SDL_RenderSetVSync_renamed_SDL_SetRenderVSync`");
// /usr/include/SDL3/SDL_oldnames.h:1019:9
pub const SDL_RenderSetViewport = @compileError("unable to translate macro: undefined identifier `SDL_RenderSetViewport_renamed_SDL_SetRenderViewport`");
// /usr/include/SDL3/SDL_oldnames.h:1020:9
pub const SDL_RenderWindowToLogical = @compileError("unable to translate macro: undefined identifier `SDL_RenderWindowToLogical_renamed_SDL_RenderCoordinatesFromWindow`");
// /usr/include/SDL3/SDL_oldnames.h:1021:9
pub const SDL_ScaleModeBest = @compileError("unable to translate macro: undefined identifier `SDL_ScaleModeBest_renamed_SDL_SCALEMODE_BEST`");
// /usr/include/SDL3/SDL_oldnames.h:1022:9
pub const SDL_ScaleModeLinear = @compileError("unable to translate macro: undefined identifier `SDL_ScaleModeLinear_renamed_SDL_SCALEMODE_LINEAR`");
// /usr/include/SDL3/SDL_oldnames.h:1023:9
pub const SDL_ScaleModeNearest = @compileError("unable to translate macro: undefined identifier `SDL_ScaleModeNearest_renamed_SDL_SCALEMODE_NEAREST`");
// /usr/include/SDL3/SDL_oldnames.h:1024:9
pub const RW_SEEK_CUR = @compileError("unable to translate macro: undefined identifier `RW_SEEK_CUR_renamed_SDL_IO_SEEK_CUR`");
// /usr/include/SDL3/SDL_oldnames.h:1027:9
pub const RW_SEEK_END = @compileError("unable to translate macro: undefined identifier `RW_SEEK_END_renamed_SDL_IO_SEEK_END`");
// /usr/include/SDL3/SDL_oldnames.h:1028:9
pub const RW_SEEK_SET = @compileError("unable to translate macro: undefined identifier `RW_SEEK_SET_renamed_SDL_IO_SEEK_SET`");
// /usr/include/SDL3/SDL_oldnames.h:1029:9
pub const SDL_RWFromConstMem = @compileError("unable to translate macro: undefined identifier `SDL_RWFromConstMem_renamed_SDL_IOFromConstMem`");
// /usr/include/SDL3/SDL_oldnames.h:1030:9
pub const SDL_RWFromFile = @compileError("unable to translate macro: undefined identifier `SDL_RWFromFile_renamed_SDL_IOFromFile`");
// /usr/include/SDL3/SDL_oldnames.h:1031:9
pub const SDL_RWFromMem = @compileError("unable to translate macro: undefined identifier `SDL_RWFromMem_renamed_SDL_IOFromMem`");
// /usr/include/SDL3/SDL_oldnames.h:1032:9
pub const SDL_RWclose = @compileError("unable to translate macro: undefined identifier `SDL_RWclose_renamed_SDL_CloseIO`");
// /usr/include/SDL3/SDL_oldnames.h:1033:9
pub const SDL_RWops = @compileError("unable to translate macro: undefined identifier `SDL_RWops_renamed_SDL_IOStream`");
// /usr/include/SDL3/SDL_oldnames.h:1034:9
pub const SDL_RWread = @compileError("unable to translate macro: undefined identifier `SDL_RWread_renamed_SDL_ReadIO`");
// /usr/include/SDL3/SDL_oldnames.h:1035:9
pub const SDL_RWseek = @compileError("unable to translate macro: undefined identifier `SDL_RWseek_renamed_SDL_SeekIO`");
// /usr/include/SDL3/SDL_oldnames.h:1036:9
pub const SDL_RWsize = @compileError("unable to translate macro: undefined identifier `SDL_RWsize_renamed_SDL_GetIOSize`");
// /usr/include/SDL3/SDL_oldnames.h:1037:9
pub const SDL_RWtell = @compileError("unable to translate macro: undefined identifier `SDL_RWtell_renamed_SDL_TellIO`");
// /usr/include/SDL3/SDL_oldnames.h:1038:9
pub const SDL_RWwrite = @compileError("unable to translate macro: undefined identifier `SDL_RWwrite_renamed_SDL_WriteIO`");
// /usr/include/SDL3/SDL_oldnames.h:1039:9
pub const SDL_ReadBE16 = @compileError("unable to translate macro: undefined identifier `SDL_ReadBE16_renamed_SDL_ReadU16BE`");
// /usr/include/SDL3/SDL_oldnames.h:1040:9
pub const SDL_ReadBE32 = @compileError("unable to translate macro: undefined identifier `SDL_ReadBE32_renamed_SDL_ReadU32BE`");
// /usr/include/SDL3/SDL_oldnames.h:1041:9
pub const SDL_ReadBE64 = @compileError("unable to translate macro: undefined identifier `SDL_ReadBE64_renamed_SDL_ReadU64BE`");
// /usr/include/SDL3/SDL_oldnames.h:1042:9
pub const SDL_ReadLE16 = @compileError("unable to translate macro: undefined identifier `SDL_ReadLE16_renamed_SDL_ReadU16LE`");
// /usr/include/SDL3/SDL_oldnames.h:1043:9
pub const SDL_ReadLE32 = @compileError("unable to translate macro: undefined identifier `SDL_ReadLE32_renamed_SDL_ReadU32LE`");
// /usr/include/SDL3/SDL_oldnames.h:1044:9
pub const SDL_ReadLE64 = @compileError("unable to translate macro: undefined identifier `SDL_ReadLE64_renamed_SDL_ReadU64LE`");
// /usr/include/SDL3/SDL_oldnames.h:1045:9
pub const SDL_WriteBE16 = @compileError("unable to translate macro: undefined identifier `SDL_WriteBE16_renamed_SDL_WriteU16BE`");
// /usr/include/SDL3/SDL_oldnames.h:1046:9
pub const SDL_WriteBE32 = @compileError("unable to translate macro: undefined identifier `SDL_WriteBE32_renamed_SDL_WriteU32BE`");
// /usr/include/SDL3/SDL_oldnames.h:1047:9
pub const SDL_WriteBE64 = @compileError("unable to translate macro: undefined identifier `SDL_WriteBE64_renamed_SDL_WriteU64BE`");
// /usr/include/SDL3/SDL_oldnames.h:1048:9
pub const SDL_WriteLE16 = @compileError("unable to translate macro: undefined identifier `SDL_WriteLE16_renamed_SDL_WriteU16LE`");
// /usr/include/SDL3/SDL_oldnames.h:1049:9
pub const SDL_WriteLE32 = @compileError("unable to translate macro: undefined identifier `SDL_WriteLE32_renamed_SDL_WriteU32LE`");
// /usr/include/SDL3/SDL_oldnames.h:1050:9
pub const SDL_WriteLE64 = @compileError("unable to translate macro: undefined identifier `SDL_WriteLE64_renamed_SDL_WriteU64LE`");
// /usr/include/SDL3/SDL_oldnames.h:1051:9
pub const SDL_SensorClose = @compileError("unable to translate macro: undefined identifier `SDL_SensorClose_renamed_SDL_CloseSensor`");
// /usr/include/SDL3/SDL_oldnames.h:1054:9
pub const SDL_SensorFromInstanceID = @compileError("unable to translate macro: undefined identifier `SDL_SensorFromInstanceID_renamed_SDL_GetSensorFromInstanceID`");
// /usr/include/SDL3/SDL_oldnames.h:1055:9
pub const SDL_SensorGetData = @compileError("unable to translate macro: undefined identifier `SDL_SensorGetData_renamed_SDL_GetSensorData`");
// /usr/include/SDL3/SDL_oldnames.h:1056:9
pub const SDL_SensorGetInstanceID = @compileError("unable to translate macro: undefined identifier `SDL_SensorGetInstanceID_renamed_SDL_GetSensorInstanceID`");
// /usr/include/SDL3/SDL_oldnames.h:1057:9
pub const SDL_SensorGetName = @compileError("unable to translate macro: undefined identifier `SDL_SensorGetName_renamed_SDL_GetSensorName`");
// /usr/include/SDL3/SDL_oldnames.h:1058:9
pub const SDL_SensorGetNonPortableType = @compileError("unable to translate macro: undefined identifier `SDL_SensorGetNonPortableType_renamed_SDL_GetSensorNonPortableType`");
// /usr/include/SDL3/SDL_oldnames.h:1059:9
pub const SDL_SensorGetType = @compileError("unable to translate macro: undefined identifier `SDL_SensorGetType_renamed_SDL_GetSensorType`");
// /usr/include/SDL3/SDL_oldnames.h:1060:9
pub const SDL_SensorOpen = @compileError("unable to translate macro: undefined identifier `SDL_SensorOpen_renamed_SDL_OpenSensor`");
// /usr/include/SDL3/SDL_oldnames.h:1061:9
pub const SDL_SensorUpdate = @compileError("unable to translate macro: undefined identifier `SDL_SensorUpdate_renamed_SDL_UpdateSensors`");
// /usr/include/SDL3/SDL_oldnames.h:1062:9
pub const SDL_TABLESIZE = @compileError("unable to translate macro: undefined identifier `SDL_TABLESIZE_renamed_SDL_arraysize`");
// /usr/include/SDL3/SDL_oldnames.h:1065:9
pub const SDL_strtokr = @compileError("unable to translate macro: undefined identifier `SDL_strtokr_renamed_SDL_strtok_r`");
// /usr/include/SDL3/SDL_oldnames.h:1066:9
pub const SDL_BlitScaled = @compileError("unable to translate macro: undefined identifier `SDL_BlitScaled_renamed_SDL_BlitSurfaceScaled`");
// /usr/include/SDL3/SDL_oldnames.h:1069:9
pub const SDL_FillRect = @compileError("unable to translate macro: undefined identifier `SDL_FillRect_renamed_SDL_FillSurfaceRect`");
// /usr/include/SDL3/SDL_oldnames.h:1070:9
pub const SDL_FillRects = @compileError("unable to translate macro: undefined identifier `SDL_FillRects_renamed_SDL_FillSurfaceRects`");
// /usr/include/SDL3/SDL_oldnames.h:1071:9
pub const SDL_FreeSurface = @compileError("unable to translate macro: undefined identifier `SDL_FreeSurface_renamed_SDL_DestroySurface`");
// /usr/include/SDL3/SDL_oldnames.h:1072:9
pub const SDL_GetClipRect = @compileError("unable to translate macro: undefined identifier `SDL_GetClipRect_renamed_SDL_GetSurfaceClipRect`");
// /usr/include/SDL3/SDL_oldnames.h:1073:9
pub const SDL_GetColorKey = @compileError("unable to translate macro: undefined identifier `SDL_GetColorKey_renamed_SDL_GetSurfaceColorKey`");
// /usr/include/SDL3/SDL_oldnames.h:1074:9
pub const SDL_HasColorKey = @compileError("unable to translate macro: undefined identifier `SDL_HasColorKey_renamed_SDL_SurfaceHasColorKey`");
// /usr/include/SDL3/SDL_oldnames.h:1075:9
pub const SDL_HasSurfaceRLE = @compileError("unable to translate macro: undefined identifier `SDL_HasSurfaceRLE_renamed_SDL_SurfaceHasRLE`");
// /usr/include/SDL3/SDL_oldnames.h:1076:9
pub const SDL_LoadBMP_RW = @compileError("unable to translate macro: undefined identifier `SDL_LoadBMP_RW_renamed_SDL_LoadBMP_IO`");
// /usr/include/SDL3/SDL_oldnames.h:1077:9
pub const SDL_LowerBlit = @compileError("unable to translate macro: undefined identifier `SDL_LowerBlit_renamed_SDL_BlitSurfaceUnchecked`");
// /usr/include/SDL3/SDL_oldnames.h:1078:9
pub const SDL_LowerBlitScaled = @compileError("unable to translate macro: undefined identifier `SDL_LowerBlitScaled_renamed_SDL_BlitSurfaceUncheckedScaled`");
// /usr/include/SDL3/SDL_oldnames.h:1079:9
pub const SDL_SaveBMP_RW = @compileError("unable to translate macro: undefined identifier `SDL_SaveBMP_RW_renamed_SDL_SaveBMP_IO`");
// /usr/include/SDL3/SDL_oldnames.h:1080:9
pub const SDL_SetClipRect = @compileError("unable to translate macro: undefined identifier `SDL_SetClipRect_renamed_SDL_SetSurfaceClipRect`");
// /usr/include/SDL3/SDL_oldnames.h:1081:9
pub const SDL_SetColorKey = @compileError("unable to translate macro: undefined identifier `SDL_SetColorKey_renamed_SDL_SetSurfaceColorKey`");
// /usr/include/SDL3/SDL_oldnames.h:1082:9
pub const SDL_UpperBlit = @compileError("unable to translate macro: undefined identifier `SDL_UpperBlit_renamed_SDL_BlitSurface`");
// /usr/include/SDL3/SDL_oldnames.h:1083:9
pub const SDL_UpperBlitScaled = @compileError("unable to translate macro: undefined identifier `SDL_UpperBlitScaled_renamed_SDL_BlitSurfaceScaled`");
// /usr/include/SDL3/SDL_oldnames.h:1084:9
pub const SDL_WinRTGetFSPathUTF8 = @compileError("unable to translate macro: undefined identifier `SDL_WinRTGetFSPathUTF8_renamed_SDL_WinRTGetFSPath`");
// /usr/include/SDL3/SDL_oldnames.h:1087:9
pub const SDL_iPhoneSetAnimationCallback = @compileError("unable to translate macro: undefined identifier `SDL_iPhoneSetAnimationCallback_renamed_SDL_iOSSetAnimationCallback`");
// /usr/include/SDL3/SDL_oldnames.h:1088:9
pub const SDL_iPhoneSetEventPump = @compileError("unable to translate macro: undefined identifier `SDL_iPhoneSetEventPump_renamed_SDL_iOSSetEventPump`");
// /usr/include/SDL3/SDL_oldnames.h:1089:9
pub const SDL_TLSCleanup = @compileError("unable to translate macro: undefined identifier `SDL_TLSCleanup_renamed_SDL_CleanupTLS`");
// /usr/include/SDL3/SDL_oldnames.h:1092:9
pub const SDL_TLSCreate = @compileError("unable to translate macro: undefined identifier `SDL_TLSCreate_renamed_SDL_CreateTLS`");
// /usr/include/SDL3/SDL_oldnames.h:1093:9
pub const SDL_TLSGet = @compileError("unable to translate macro: undefined identifier `SDL_TLSGet_renamed_SDL_GetTLS`");
// /usr/include/SDL3/SDL_oldnames.h:1094:9
pub const SDL_TLSSet = @compileError("unable to translate macro: undefined identifier `SDL_TLSSet_renamed_SDL_SetTLS`");
// /usr/include/SDL3/SDL_oldnames.h:1095:9
pub const SDL_threadID = @compileError("unable to translate macro: undefined identifier `SDL_threadID_renamed_SDL_ThreadID`");
// /usr/include/SDL3/SDL_oldnames.h:1096:9
pub const SDL_GetTicks64 = @compileError("unable to translate macro: undefined identifier `SDL_GetTicks64_renamed_SDL_GetTicks`");
// /usr/include/SDL3/SDL_oldnames.h:1099:9
pub const SDL_COMPILEDVERSION = @compileError("unable to translate macro: undefined identifier `SDL_COMPILEDVERSION_renamed_SDL_VERSION`");
// /usr/include/SDL3/SDL_oldnames.h:1102:9
pub const SDL_PATCHLEVEL = @compileError("unable to translate macro: undefined identifier `SDL_PATCHLEVEL_renamed_SDL_MICRO_VERSION`");
// /usr/include/SDL3/SDL_oldnames.h:1103:9
pub const SDL_GetClosestDisplayMode = @compileError("unable to translate macro: undefined identifier `SDL_GetClosestDisplayMode_renamed_SDL_GetClosestFullscreenDisplayMode`");
// /usr/include/SDL3/SDL_oldnames.h:1106:9
pub const SDL_GetDisplayOrientation = @compileError("unable to translate macro: undefined identifier `SDL_GetDisplayOrientation_renamed_SDL_GetCurrentDisplayOrientation`");
// /usr/include/SDL3/SDL_oldnames.h:1107:9
pub const SDL_GetPointDisplayIndex = @compileError("unable to translate macro: undefined identifier `SDL_GetPointDisplayIndex_renamed_SDL_GetDisplayForPoint`");
// /usr/include/SDL3/SDL_oldnames.h:1108:9
pub const SDL_GetRectDisplayIndex = @compileError("unable to translate macro: undefined identifier `SDL_GetRectDisplayIndex_renamed_SDL_GetDisplayForRect`");
// /usr/include/SDL3/SDL_oldnames.h:1109:9
pub const SDL_GetWindowDisplayIndex = @compileError("unable to translate macro: undefined identifier `SDL_GetWindowDisplayIndex_renamed_SDL_GetDisplayForWindow`");
// /usr/include/SDL3/SDL_oldnames.h:1110:9
pub const SDL_GetWindowDisplayMode = @compileError("unable to translate macro: undefined identifier `SDL_GetWindowDisplayMode_renamed_SDL_GetWindowFullscreenMode`");
// /usr/include/SDL3/SDL_oldnames.h:1111:9
pub const SDL_HasWindowSurface = @compileError("unable to translate macro: undefined identifier `SDL_HasWindowSurface_renamed_SDL_WindowHasSurface`");
// /usr/include/SDL3/SDL_oldnames.h:1112:9
pub const SDL_IsScreenSaverEnabled = @compileError("unable to translate macro: undefined identifier `SDL_IsScreenSaverEnabled_renamed_SDL_ScreenSaverEnabled`");
// /usr/include/SDL3/SDL_oldnames.h:1113:9
pub const SDL_SetWindowDisplayMode = @compileError("unable to translate macro: undefined identifier `SDL_SetWindowDisplayMode_renamed_SDL_SetWindowFullscreenMode`");
// /usr/include/SDL3/SDL_oldnames.h:1114:9
pub const SDL_WINDOW_ALLOW_HIGHDPI = @compileError("unable to translate macro: undefined identifier `SDL_WINDOW_ALLOW_HIGHDPI_renamed_SDL_WINDOW_HIGH_PIXEL_DENSITY`");
// /usr/include/SDL3/SDL_oldnames.h:1115:9
pub const SDL_WINDOW_INPUT_GRABBED = @compileError("unable to translate macro: undefined identifier `SDL_WINDOW_INPUT_GRABBED_renamed_SDL_WINDOW_MOUSE_GRABBED`");
// /usr/include/SDL3/SDL_oldnames.h:1116:9
pub const SDL_WINDOW_SKIP_TASKBAR = @compileError("unable to translate macro: undefined identifier `SDL_WINDOW_SKIP_TASKBAR_renamed_SDL_WINDOW_UTILITY`");
// /usr/include/SDL3/SDL_oldnames.h:1117:9
pub const SDL_vulkan_h_ = "";
pub const VK_DEFINE_HANDLE = @compileError("unable to translate macro: untranslatable usage of arg `object`");
// /usr/include/SDL3/SDL_vulkan.h:45:9
pub const VK_DEFINE_NON_DISPATCHABLE_HANDLE = @compileError("unable to translate macro: untranslatable usage of arg `object`");
// /usr/include/SDL3/SDL_vulkan.h:48:9
pub const VULKAN_H_ = @as(c_int, 1);
pub const VK_PLATFORM_H_ = "";
pub const VKAPI_ATTR = "";
pub const VKAPI_CALL = "";
pub const VKAPI_PTR = "";
pub const VULKAN_CORE_H_ = @as(c_int, 1);
pub const VK_VERSION_1_0 = @as(c_int, 1);
pub const VK_USE_64_BIT_PTR_DEFINES = @as(c_int, 1);
pub const VK_NULL_HANDLE = @as(c_int, 0);
pub inline fn VK_MAKE_API_VERSION(variant: anytype, major: anytype, minor: anytype, patch: anytype) @TypeOf((((@import("std").zig.c_translation.cast(u32, variant) << @as(c_uint, 29)) | (@import("std").zig.c_translation.cast(u32, major) << @as(c_uint, 22))) | (@import("std").zig.c_translation.cast(u32, minor) << @as(c_uint, 12))) | @import("std").zig.c_translation.cast(u32, patch)) {
    _ = &variant;
    _ = &major;
    _ = &minor;
    _ = &patch;
    return (((@import("std").zig.c_translation.cast(u32, variant) << @as(c_uint, 29)) | (@import("std").zig.c_translation.cast(u32, major) << @as(c_uint, 22))) | (@import("std").zig.c_translation.cast(u32, minor) << @as(c_uint, 12))) | @import("std").zig.c_translation.cast(u32, patch);
}
pub const VK_API_VERSION_1_0 = VK_MAKE_API_VERSION(@as(c_int, 0), @as(c_int, 1), @as(c_int, 0), @as(c_int, 0));
pub const VK_HEADER_VERSION = @as(c_int, 285);
pub const VK_HEADER_VERSION_COMPLETE = VK_MAKE_API_VERSION(@as(c_int, 0), @as(c_int, 1), @as(c_int, 3), VK_HEADER_VERSION);
pub inline fn VK_MAKE_VERSION(major: anytype, minor: anytype, patch: anytype) @TypeOf(((@import("std").zig.c_translation.cast(u32, major) << @as(c_uint, 22)) | (@import("std").zig.c_translation.cast(u32, minor) << @as(c_uint, 12))) | @import("std").zig.c_translation.cast(u32, patch)) {
    _ = &major;
    _ = &minor;
    _ = &patch;
    return ((@import("std").zig.c_translation.cast(u32, major) << @as(c_uint, 22)) | (@import("std").zig.c_translation.cast(u32, minor) << @as(c_uint, 12))) | @import("std").zig.c_translation.cast(u32, patch);
}
pub inline fn VK_VERSION_MAJOR(version: anytype) @TypeOf(@import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 22)) {
    _ = &version;
    return @import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 22);
}
pub inline fn VK_VERSION_MINOR(version: anytype) @TypeOf((@import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 12)) & @as(c_uint, 0x3FF)) {
    _ = &version;
    return (@import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 12)) & @as(c_uint, 0x3FF);
}
pub inline fn VK_VERSION_PATCH(version: anytype) @TypeOf(@import("std").zig.c_translation.cast(u32, version) & @as(c_uint, 0xFFF)) {
    _ = &version;
    return @import("std").zig.c_translation.cast(u32, version) & @as(c_uint, 0xFFF);
}
pub inline fn VK_API_VERSION_VARIANT(version: anytype) @TypeOf(@import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 29)) {
    _ = &version;
    return @import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 29);
}
pub inline fn VK_API_VERSION_MAJOR(version: anytype) @TypeOf((@import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 22)) & @as(c_uint, 0x7F)) {
    _ = &version;
    return (@import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 22)) & @as(c_uint, 0x7F);
}
pub inline fn VK_API_VERSION_MINOR(version: anytype) @TypeOf((@import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 12)) & @as(c_uint, 0x3FF)) {
    _ = &version;
    return (@import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 12)) & @as(c_uint, 0x3FF);
}
pub inline fn VK_API_VERSION_PATCH(version: anytype) @TypeOf(@import("std").zig.c_translation.cast(u32, version) & @as(c_uint, 0xFFF)) {
    _ = &version;
    return @import("std").zig.c_translation.cast(u32, version) & @as(c_uint, 0xFFF);
}
pub const VK_ATTACHMENT_UNUSED = ~@as(c_uint, 0);
pub const VK_FALSE = @as(c_uint, 0);
pub const VK_LOD_CLAMP_NONE = @as(f32, 1000.0);
pub const VK_QUEUE_FAMILY_IGNORED = ~@as(c_uint, 0);
pub const VK_REMAINING_ARRAY_LAYERS = ~@as(c_uint, 0);
pub const VK_REMAINING_MIP_LEVELS = ~@as(c_uint, 0);
pub const VK_SUBPASS_EXTERNAL = ~@as(c_uint, 0);
pub const VK_TRUE = @as(c_uint, 1);
pub const VK_WHOLE_SIZE = ~@as(c_ulonglong, 0);
pub const VK_MAX_MEMORY_TYPES = @as(c_uint, 32);
pub const VK_MAX_PHYSICAL_DEVICE_NAME_SIZE = @as(c_uint, 256);
pub const VK_UUID_SIZE = @as(c_uint, 16);
pub const VK_MAX_EXTENSION_NAME_SIZE = @as(c_uint, 256);
pub const VK_MAX_DESCRIPTION_SIZE = @as(c_uint, 256);
pub const VK_MAX_MEMORY_HEAPS = @as(c_uint, 16);
pub const VK_VERSION_1_1 = @as(c_int, 1);
pub const VK_API_VERSION_1_1 = VK_MAKE_API_VERSION(@as(c_int, 0), @as(c_int, 1), @as(c_int, 1), @as(c_int, 0));
pub const VK_MAX_DEVICE_GROUP_SIZE = @as(c_uint, 32);
pub const VK_LUID_SIZE = @as(c_uint, 8);
pub const VK_QUEUE_FAMILY_EXTERNAL = ~@as(c_uint, 1);
pub const VK_VERSION_1_2 = @as(c_int, 1);
pub const VK_API_VERSION_1_2 = VK_MAKE_API_VERSION(@as(c_int, 0), @as(c_int, 1), @as(c_int, 2), @as(c_int, 0));
pub const VK_MAX_DRIVER_NAME_SIZE = @as(c_uint, 256);
pub const VK_MAX_DRIVER_INFO_SIZE = @as(c_uint, 256);
pub const VK_VERSION_1_3 = @as(c_int, 1);
pub const VK_API_VERSION_1_3 = VK_MAKE_API_VERSION(@as(c_int, 0), @as(c_int, 1), @as(c_int, 3), @as(c_int, 0));
pub const VK_KHR_surface = @as(c_int, 1);
pub const VK_KHR_SURFACE_SPEC_VERSION = @as(c_int, 25);
pub const VK_KHR_SURFACE_EXTENSION_NAME = "VK_KHR_surface";
pub const VK_KHR_swapchain = @as(c_int, 1);
pub const VK_KHR_SWAPCHAIN_SPEC_VERSION = @as(c_int, 70);
pub const VK_KHR_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_swapchain";
pub const VK_KHR_display = @as(c_int, 1);
pub const VK_KHR_DISPLAY_SPEC_VERSION = @as(c_int, 23);
pub const VK_KHR_DISPLAY_EXTENSION_NAME = "VK_KHR_display";
pub const VK_KHR_display_swapchain = @as(c_int, 1);
pub const VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION = @as(c_int, 10);
pub const VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_display_swapchain";
pub const VK_KHR_sampler_mirror_clamp_to_edge = @as(c_int, 1);
pub const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION = @as(c_int, 3);
pub const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME = "VK_KHR_sampler_mirror_clamp_to_edge";
pub const VK_KHR_video_queue = @as(c_int, 1);
pub const VK_KHR_VIDEO_QUEUE_SPEC_VERSION = @as(c_int, 8);
pub const VK_KHR_VIDEO_QUEUE_EXTENSION_NAME = "VK_KHR_video_queue";
pub const VK_KHR_video_decode_queue = @as(c_int, 1);
pub const VK_KHR_VIDEO_DECODE_QUEUE_SPEC_VERSION = @as(c_int, 8);
pub const VK_KHR_VIDEO_DECODE_QUEUE_EXTENSION_NAME = "VK_KHR_video_decode_queue";
pub const VK_KHR_video_encode_h264 = @as(c_int, 1);
pub const VULKAN_VIDEO_CODEC_H264STD_H_ = @as(c_int, 1);
pub const vulkan_video_codec_h264std = @as(c_int, 1);
pub const VULKAN_VIDEO_CODECS_COMMON_H_ = @as(c_int, 1);
pub const vulkan_video_codecs_common = @as(c_int, 1);
pub inline fn VK_MAKE_VIDEO_STD_VERSION(major: anytype, minor: anytype, patch: anytype) @TypeOf(((@import("std").zig.c_translation.cast(u32, major) << @as(c_int, 22)) | (@import("std").zig.c_translation.cast(u32, minor) << @as(c_int, 12))) | @import("std").zig.c_translation.cast(u32, patch)) {
    _ = &major;
    _ = &minor;
    _ = &patch;
    return ((@import("std").zig.c_translation.cast(u32, major) << @as(c_int, 22)) | (@import("std").zig.c_translation.cast(u32, minor) << @as(c_int, 12))) | @import("std").zig.c_translation.cast(u32, patch);
}
pub const STD_VIDEO_H264_CPB_CNT_LIST_SIZE = @as(c_int, 32);
pub const STD_VIDEO_H264_SCALING_LIST_4X4_NUM_LISTS = @as(c_int, 6);
pub const STD_VIDEO_H264_SCALING_LIST_4X4_NUM_ELEMENTS = @as(c_int, 16);
pub const STD_VIDEO_H264_SCALING_LIST_8X8_NUM_LISTS = @as(c_int, 6);
pub const STD_VIDEO_H264_SCALING_LIST_8X8_NUM_ELEMENTS = @as(c_int, 64);
pub const STD_VIDEO_H264_MAX_NUM_LIST_REF = @as(c_int, 32);
pub const STD_VIDEO_H264_MAX_CHROMA_PLANES = @as(c_int, 2);
pub const STD_VIDEO_H264_NO_REFERENCE_PICTURE = @as(c_int, 0xFF);
pub const VULKAN_VIDEO_CODEC_H264STD_ENCODE_H_ = @as(c_int, 1);
pub const vulkan_video_codec_h264std_encode = @as(c_int, 1);
pub const VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_API_VERSION_1_0_0 = VK_MAKE_VIDEO_STD_VERSION(@as(c_int, 1), @as(c_int, 0), @as(c_int, 0));
pub const VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_SPEC_VERSION = VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_API_VERSION_1_0_0;
pub const VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_h264_encode";
pub const VK_KHR_VIDEO_ENCODE_H264_SPEC_VERSION = @as(c_int, 14);
pub const VK_KHR_VIDEO_ENCODE_H264_EXTENSION_NAME = "VK_KHR_video_encode_h264";
pub const VK_KHR_video_encode_h265 = @as(c_int, 1);
pub const VULKAN_VIDEO_CODEC_H265STD_H_ = @as(c_int, 1);
pub const vulkan_video_codec_h265std = @as(c_int, 1);
pub const STD_VIDEO_H265_CPB_CNT_LIST_SIZE = @as(c_int, 32);
pub const STD_VIDEO_H265_SUBLAYERS_LIST_SIZE = @as(c_int, 7);
pub const STD_VIDEO_H265_SCALING_LIST_4X4_NUM_LISTS = @as(c_int, 6);
pub const STD_VIDEO_H265_SCALING_LIST_4X4_NUM_ELEMENTS = @as(c_int, 16);
pub const STD_VIDEO_H265_SCALING_LIST_8X8_NUM_LISTS = @as(c_int, 6);
pub const STD_VIDEO_H265_SCALING_LIST_8X8_NUM_ELEMENTS = @as(c_int, 64);
pub const STD_VIDEO_H265_SCALING_LIST_16X16_NUM_LISTS = @as(c_int, 6);
pub const STD_VIDEO_H265_SCALING_LIST_16X16_NUM_ELEMENTS = @as(c_int, 64);
pub const STD_VIDEO_H265_SCALING_LIST_32X32_NUM_LISTS = @as(c_int, 2);
pub const STD_VIDEO_H265_SCALING_LIST_32X32_NUM_ELEMENTS = @as(c_int, 64);
pub const STD_VIDEO_H265_CHROMA_QP_OFFSET_LIST_SIZE = @as(c_int, 6);
pub const STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_COLS_LIST_SIZE = @as(c_int, 19);
pub const STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_ROWS_LIST_SIZE = @as(c_int, 21);
pub const STD_VIDEO_H265_PREDICTOR_PALETTE_COMPONENTS_LIST_SIZE = @as(c_int, 3);
pub const STD_VIDEO_H265_PREDICTOR_PALETTE_COMP_ENTRIES_LIST_SIZE = @as(c_int, 128);
pub const STD_VIDEO_H265_MAX_NUM_LIST_REF = @as(c_int, 15);
pub const STD_VIDEO_H265_MAX_CHROMA_PLANES = @as(c_int, 2);
pub const STD_VIDEO_H265_MAX_SHORT_TERM_REF_PIC_SETS = @as(c_int, 64);
pub const STD_VIDEO_H265_MAX_DPB_SIZE = @as(c_int, 16);
pub const STD_VIDEO_H265_MAX_LONG_TERM_REF_PICS_SPS = @as(c_int, 32);
pub const STD_VIDEO_H265_MAX_LONG_TERM_PICS = @as(c_int, 16);
pub const STD_VIDEO_H265_MAX_DELTA_POC = @as(c_int, 48);
pub const STD_VIDEO_H265_NO_REFERENCE_PICTURE = @as(c_int, 0xFF);
pub const VULKAN_VIDEO_CODEC_H265STD_ENCODE_H_ = @as(c_int, 1);
pub const vulkan_video_codec_h265std_encode = @as(c_int, 1);
pub const VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_API_VERSION_1_0_0 = VK_MAKE_VIDEO_STD_VERSION(@as(c_int, 1), @as(c_int, 0), @as(c_int, 0));
pub const VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_SPEC_VERSION = VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_API_VERSION_1_0_0;
pub const VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_h265_encode";
pub const VK_KHR_VIDEO_ENCODE_H265_SPEC_VERSION = @as(c_int, 14);
pub const VK_KHR_VIDEO_ENCODE_H265_EXTENSION_NAME = "VK_KHR_video_encode_h265";
pub const VK_KHR_video_decode_h264 = @as(c_int, 1);
pub const VULKAN_VIDEO_CODEC_H264STD_DECODE_H_ = @as(c_int, 1);
pub const vulkan_video_codec_h264std_decode = @as(c_int, 1);
pub const VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_API_VERSION_1_0_0 = VK_MAKE_VIDEO_STD_VERSION(@as(c_int, 1), @as(c_int, 0), @as(c_int, 0));
pub const VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_SPEC_VERSION = VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_API_VERSION_1_0_0;
pub const VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_h264_decode";
pub const STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_LIST_SIZE = @as(c_int, 2);
pub const VK_KHR_VIDEO_DECODE_H264_SPEC_VERSION = @as(c_int, 9);
pub const VK_KHR_VIDEO_DECODE_H264_EXTENSION_NAME = "VK_KHR_video_decode_h264";
pub const VK_KHR_dynamic_rendering = @as(c_int, 1);
pub const VK_KHR_DYNAMIC_RENDERING_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_DYNAMIC_RENDERING_EXTENSION_NAME = "VK_KHR_dynamic_rendering";
pub const VK_KHR_multiview = @as(c_int, 1);
pub const VK_KHR_MULTIVIEW_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_MULTIVIEW_EXTENSION_NAME = "VK_KHR_multiview";
pub const VK_KHR_get_physical_device_properties2 = @as(c_int, 1);
pub const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_physical_device_properties2";
pub const VK_KHR_device_group = @as(c_int, 1);
pub const VK_KHR_DEVICE_GROUP_SPEC_VERSION = @as(c_int, 4);
pub const VK_KHR_DEVICE_GROUP_EXTENSION_NAME = "VK_KHR_device_group";
pub const VK_KHR_shader_draw_parameters = @as(c_int, 1);
pub const VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME = "VK_KHR_shader_draw_parameters";
pub const VK_KHR_maintenance1 = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_1_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_MAINTENANCE_1_EXTENSION_NAME = "VK_KHR_maintenance1";
pub const VK_KHR_MAINTENANCE1_SPEC_VERSION = VK_KHR_MAINTENANCE_1_SPEC_VERSION;
pub const VK_KHR_MAINTENANCE1_EXTENSION_NAME = VK_KHR_MAINTENANCE_1_EXTENSION_NAME;
pub const VK_KHR_device_group_creation = @as(c_int, 1);
pub const VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME = "VK_KHR_device_group_creation";
pub const VK_MAX_DEVICE_GROUP_SIZE_KHR = VK_MAX_DEVICE_GROUP_SIZE;
pub const VK_KHR_external_memory_capabilities = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_memory_capabilities";
pub const VK_LUID_SIZE_KHR = VK_LUID_SIZE;
pub const VK_KHR_external_memory = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_KHR_external_memory";
pub const VK_QUEUE_FAMILY_EXTERNAL_KHR = VK_QUEUE_FAMILY_EXTERNAL;
pub const VK_KHR_external_memory_fd = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME = "VK_KHR_external_memory_fd";
pub const VK_KHR_external_semaphore_capabilities = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_semaphore_capabilities";
pub const VK_KHR_external_semaphore = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME = "VK_KHR_external_semaphore";
pub const VK_KHR_external_semaphore_fd = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME = "VK_KHR_external_semaphore_fd";
pub const VK_KHR_push_descriptor = @as(c_int, 1);
pub const VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME = "VK_KHR_push_descriptor";
pub const VK_KHR_shader_float16_int8 = @as(c_int, 1);
pub const VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME = "VK_KHR_shader_float16_int8";
pub const VK_KHR_16bit_storage = @as(c_int, 1);
pub const VK_KHR_16BIT_STORAGE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_16BIT_STORAGE_EXTENSION_NAME = "VK_KHR_16bit_storage";
pub const VK_KHR_incremental_present = @as(c_int, 1);
pub const VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME = "VK_KHR_incremental_present";
pub const VK_KHR_descriptor_update_template = @as(c_int, 1);
pub const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME = "VK_KHR_descriptor_update_template";
pub const VK_KHR_imageless_framebuffer = @as(c_int, 1);
pub const VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME = "VK_KHR_imageless_framebuffer";
pub const VK_KHR_create_renderpass2 = @as(c_int, 1);
pub const VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME = "VK_KHR_create_renderpass2";
pub const VK_KHR_shared_presentable_image = @as(c_int, 1);
pub const VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME = "VK_KHR_shared_presentable_image";
pub const VK_KHR_external_fence_capabilities = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_fence_capabilities";
pub const VK_KHR_external_fence = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_FENCE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME = "VK_KHR_external_fence";
pub const VK_KHR_external_fence_fd = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME = "VK_KHR_external_fence_fd";
pub const VK_KHR_performance_query = @as(c_int, 1);
pub const VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME = "VK_KHR_performance_query";
pub const VK_KHR_maintenance2 = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_2_EXTENSION_NAME = "VK_KHR_maintenance2";
pub const VK_KHR_MAINTENANCE2_SPEC_VERSION = VK_KHR_MAINTENANCE_2_SPEC_VERSION;
pub const VK_KHR_MAINTENANCE2_EXTENSION_NAME = VK_KHR_MAINTENANCE_2_EXTENSION_NAME;
pub const VK_KHR_get_surface_capabilities2 = @as(c_int, 1);
pub const VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME = "VK_KHR_get_surface_capabilities2";
pub const VK_KHR_variable_pointers = @as(c_int, 1);
pub const VK_KHR_VARIABLE_POINTERS_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME = "VK_KHR_variable_pointers";
pub const VK_KHR_get_display_properties2 = @as(c_int, 1);
pub const VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_display_properties2";
pub const VK_KHR_dedicated_allocation = @as(c_int, 1);
pub const VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION = @as(c_int, 3);
pub const VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_KHR_dedicated_allocation";
pub const VK_KHR_storage_buffer_storage_class = @as(c_int, 1);
pub const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME = "VK_KHR_storage_buffer_storage_class";
pub const VK_KHR_relaxed_block_layout = @as(c_int, 1);
pub const VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME = "VK_KHR_relaxed_block_layout";
pub const VK_KHR_get_memory_requirements2 = @as(c_int, 1);
pub const VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME = "VK_KHR_get_memory_requirements2";
pub const VK_KHR_image_format_list = @as(c_int, 1);
pub const VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME = "VK_KHR_image_format_list";
pub const VK_KHR_sampler_ycbcr_conversion = @as(c_int, 1);
pub const VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION = @as(c_int, 14);
pub const VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME = "VK_KHR_sampler_ycbcr_conversion";
pub const VK_KHR_bind_memory2 = @as(c_int, 1);
pub const VK_KHR_BIND_MEMORY_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_BIND_MEMORY_2_EXTENSION_NAME = "VK_KHR_bind_memory2";
pub const VK_KHR_maintenance3 = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_3_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_3_EXTENSION_NAME = "VK_KHR_maintenance3";
pub const VK_KHR_MAINTENANCE3_SPEC_VERSION = VK_KHR_MAINTENANCE_3_SPEC_VERSION;
pub const VK_KHR_MAINTENANCE3_EXTENSION_NAME = VK_KHR_MAINTENANCE_3_EXTENSION_NAME;
pub const VK_KHR_draw_indirect_count = @as(c_int, 1);
pub const VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_KHR_draw_indirect_count";
pub const VK_KHR_shader_subgroup_extended_types = @as(c_int, 1);
pub const VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME = "VK_KHR_shader_subgroup_extended_types";
pub const VK_KHR_8bit_storage = @as(c_int, 1);
pub const VK_KHR_8BIT_STORAGE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_8BIT_STORAGE_EXTENSION_NAME = "VK_KHR_8bit_storage";
pub const VK_KHR_shader_atomic_int64 = @as(c_int, 1);
pub const VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME = "VK_KHR_shader_atomic_int64";
pub const VK_KHR_shader_clock = @as(c_int, 1);
pub const VK_KHR_SHADER_CLOCK_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_CLOCK_EXTENSION_NAME = "VK_KHR_shader_clock";
pub const VK_KHR_video_decode_h265 = @as(c_int, 1);
pub const VULKAN_VIDEO_CODEC_H265STD_DECODE_H_ = @as(c_int, 1);
pub const vulkan_video_codec_h265std_decode = @as(c_int, 1);
pub const VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_API_VERSION_1_0_0 = VK_MAKE_VIDEO_STD_VERSION(@as(c_int, 1), @as(c_int, 0), @as(c_int, 0));
pub const VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_SPEC_VERSION = VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_API_VERSION_1_0_0;
pub const VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_h265_decode";
pub const STD_VIDEO_DECODE_H265_REF_PIC_SET_LIST_SIZE = @as(c_int, 8);
pub const VK_KHR_VIDEO_DECODE_H265_SPEC_VERSION = @as(c_int, 8);
pub const VK_KHR_VIDEO_DECODE_H265_EXTENSION_NAME = "VK_KHR_video_decode_h265";
pub const VK_KHR_global_priority = @as(c_int, 1);
pub const VK_MAX_GLOBAL_PRIORITY_SIZE_KHR = @as(c_uint, 16);
pub const VK_KHR_GLOBAL_PRIORITY_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_GLOBAL_PRIORITY_EXTENSION_NAME = "VK_KHR_global_priority";
pub const VK_KHR_driver_properties = @as(c_int, 1);
pub const VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME = "VK_KHR_driver_properties";
pub const VK_MAX_DRIVER_NAME_SIZE_KHR = VK_MAX_DRIVER_NAME_SIZE;
pub const VK_MAX_DRIVER_INFO_SIZE_KHR = VK_MAX_DRIVER_INFO_SIZE;
pub const VK_KHR_shader_float_controls = @as(c_int, 1);
pub const VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION = @as(c_int, 4);
pub const VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME = "VK_KHR_shader_float_controls";
pub const VK_KHR_depth_stencil_resolve = @as(c_int, 1);
pub const VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME = "VK_KHR_depth_stencil_resolve";
pub const VK_KHR_swapchain_mutable_format = @as(c_int, 1);
pub const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME = "VK_KHR_swapchain_mutable_format";
pub const VK_KHR_timeline_semaphore = @as(c_int, 1);
pub const VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME = "VK_KHR_timeline_semaphore";
pub const VK_KHR_vulkan_memory_model = @as(c_int, 1);
pub const VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION = @as(c_int, 3);
pub const VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME = "VK_KHR_vulkan_memory_model";
pub const VK_KHR_shader_terminate_invocation = @as(c_int, 1);
pub const VK_KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME = "VK_KHR_shader_terminate_invocation";
pub const VK_KHR_fragment_shading_rate = @as(c_int, 1);
pub const VK_KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME = "VK_KHR_fragment_shading_rate";
pub const VK_KHR_dynamic_rendering_local_read = @as(c_int, 1);
pub const VK_KHR_DYNAMIC_RENDERING_LOCAL_READ_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_DYNAMIC_RENDERING_LOCAL_READ_EXTENSION_NAME = "VK_KHR_dynamic_rendering_local_read";
pub const VK_KHR_shader_quad_control = @as(c_int, 1);
pub const VK_KHR_SHADER_QUAD_CONTROL_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_QUAD_CONTROL_EXTENSION_NAME = "VK_KHR_shader_quad_control";
pub const VK_KHR_spirv_1_4 = @as(c_int, 1);
pub const VK_KHR_SPIRV_1_4_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SPIRV_1_4_EXTENSION_NAME = "VK_KHR_spirv_1_4";
pub const VK_KHR_surface_protected_capabilities = @as(c_int, 1);
pub const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME = "VK_KHR_surface_protected_capabilities";
pub const VK_KHR_separate_depth_stencil_layouts = @as(c_int, 1);
pub const VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME = "VK_KHR_separate_depth_stencil_layouts";
pub const VK_KHR_present_wait = @as(c_int, 1);
pub const VK_KHR_PRESENT_WAIT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_PRESENT_WAIT_EXTENSION_NAME = "VK_KHR_present_wait";
pub const VK_KHR_uniform_buffer_standard_layout = @as(c_int, 1);
pub const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME = "VK_KHR_uniform_buffer_standard_layout";
pub const VK_KHR_buffer_device_address = @as(c_int, 1);
pub const VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = "VK_KHR_buffer_device_address";
pub const VK_KHR_deferred_host_operations = @as(c_int, 1);
pub const VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION = @as(c_int, 4);
pub const VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME = "VK_KHR_deferred_host_operations";
pub const VK_KHR_pipeline_executable_properties = @as(c_int, 1);
pub const VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME = "VK_KHR_pipeline_executable_properties";
pub const VK_KHR_map_memory2 = @as(c_int, 1);
pub const VK_KHR_MAP_MEMORY_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_MAP_MEMORY_2_EXTENSION_NAME = "VK_KHR_map_memory2";
pub const VK_KHR_shader_integer_dot_product = @as(c_int, 1);
pub const VK_KHR_SHADER_INTEGER_DOT_PRODUCT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_INTEGER_DOT_PRODUCT_EXTENSION_NAME = "VK_KHR_shader_integer_dot_product";
pub const VK_KHR_pipeline_library = @as(c_int, 1);
pub const VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME = "VK_KHR_pipeline_library";
pub const VK_KHR_shader_non_semantic_info = @as(c_int, 1);
pub const VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME = "VK_KHR_shader_non_semantic_info";
pub const VK_KHR_present_id = @as(c_int, 1);
pub const VK_KHR_PRESENT_ID_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_PRESENT_ID_EXTENSION_NAME = "VK_KHR_present_id";
pub const VK_KHR_video_encode_queue = @as(c_int, 1);
pub const VK_KHR_VIDEO_ENCODE_QUEUE_SPEC_VERSION = @as(c_int, 12);
pub const VK_KHR_VIDEO_ENCODE_QUEUE_EXTENSION_NAME = "VK_KHR_video_encode_queue";
pub const VK_KHR_synchronization2 = @as(c_int, 1);
pub const VK_KHR_SYNCHRONIZATION_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SYNCHRONIZATION_2_EXTENSION_NAME = "VK_KHR_synchronization2";
pub const VK_KHR_fragment_shader_barycentric = @as(c_int, 1);
pub const VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME = "VK_KHR_fragment_shader_barycentric";
pub const VK_KHR_shader_subgroup_uniform_control_flow = @as(c_int, 1);
pub const VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_EXTENSION_NAME = "VK_KHR_shader_subgroup_uniform_control_flow";
pub const VK_KHR_zero_initialize_workgroup_memory = @as(c_int, 1);
pub const VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_EXTENSION_NAME = "VK_KHR_zero_initialize_workgroup_memory";
pub const VK_KHR_workgroup_memory_explicit_layout = @as(c_int, 1);
pub const VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_EXTENSION_NAME = "VK_KHR_workgroup_memory_explicit_layout";
pub const VK_KHR_copy_commands2 = @as(c_int, 1);
pub const VK_KHR_COPY_COMMANDS_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME = "VK_KHR_copy_commands2";
pub const VK_KHR_format_feature_flags2 = @as(c_int, 1);
pub const VK_KHR_FORMAT_FEATURE_FLAGS_2_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_FORMAT_FEATURE_FLAGS_2_EXTENSION_NAME = "VK_KHR_format_feature_flags2";
pub const VK_KHR_ray_tracing_maintenance1 = @as(c_int, 1);
pub const VK_KHR_RAY_TRACING_MAINTENANCE_1_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_RAY_TRACING_MAINTENANCE_1_EXTENSION_NAME = "VK_KHR_ray_tracing_maintenance1";
pub const VK_KHR_portability_enumeration = @as(c_int, 1);
pub const VK_KHR_PORTABILITY_ENUMERATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME = "VK_KHR_portability_enumeration";
pub const VK_KHR_maintenance4 = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_4_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_MAINTENANCE_4_EXTENSION_NAME = "VK_KHR_maintenance4";
pub const VK_KHR_shader_subgroup_rotate = @as(c_int, 1);
pub const VK_KHR_SHADER_SUBGROUP_ROTATE_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_SHADER_SUBGROUP_ROTATE_EXTENSION_NAME = "VK_KHR_shader_subgroup_rotate";
pub const VK_KHR_shader_maximal_reconvergence = @as(c_int, 1);
pub const VK_KHR_SHADER_MAXIMAL_RECONVERGENCE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_MAXIMAL_RECONVERGENCE_EXTENSION_NAME = "VK_KHR_shader_maximal_reconvergence";
pub const VK_KHR_maintenance5 = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_5_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_5_EXTENSION_NAME = "VK_KHR_maintenance5";
pub const VK_KHR_ray_tracing_position_fetch = @as(c_int, 1);
pub const VK_KHR_RAY_TRACING_POSITION_FETCH_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_RAY_TRACING_POSITION_FETCH_EXTENSION_NAME = "VK_KHR_ray_tracing_position_fetch";
pub const VK_KHR_cooperative_matrix = @as(c_int, 1);
pub const VK_KHR_COOPERATIVE_MATRIX_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_COOPERATIVE_MATRIX_EXTENSION_NAME = "VK_KHR_cooperative_matrix";
pub const VK_KHR_video_decode_av1 = @as(c_int, 1);
pub const VULKAN_VIDEO_CODEC_AV1STD_H_ = @as(c_int, 1);
pub const vulkan_video_codec_av1std = @as(c_int, 1);
pub const STD_VIDEO_AV1_NUM_REF_FRAMES = @as(c_int, 8);
pub const STD_VIDEO_AV1_REFS_PER_FRAME = @as(c_int, 7);
pub const STD_VIDEO_AV1_TOTAL_REFS_PER_FRAME = @as(c_int, 8);
pub const STD_VIDEO_AV1_MAX_TILE_COLS = @as(c_int, 64);
pub const STD_VIDEO_AV1_MAX_TILE_ROWS = @as(c_int, 64);
pub const STD_VIDEO_AV1_MAX_SEGMENTS = @as(c_int, 8);
pub const STD_VIDEO_AV1_SEG_LVL_MAX = @as(c_int, 8);
pub const STD_VIDEO_AV1_PRIMARY_REF_NONE = @as(c_int, 7);
pub const STD_VIDEO_AV1_SELECT_INTEGER_MV = @as(c_int, 2);
pub const STD_VIDEO_AV1_SELECT_SCREEN_CONTENT_TOOLS = @as(c_int, 2);
pub const STD_VIDEO_AV1_SKIP_MODE_FRAMES = @as(c_int, 2);
pub const STD_VIDEO_AV1_MAX_LOOP_FILTER_STRENGTHS = @as(c_int, 4);
pub const STD_VIDEO_AV1_LOOP_FILTER_ADJUSTMENTS = @as(c_int, 2);
pub const STD_VIDEO_AV1_MAX_CDEF_FILTER_STRENGTHS = @as(c_int, 8);
pub const STD_VIDEO_AV1_MAX_NUM_PLANES = @as(c_int, 3);
pub const STD_VIDEO_AV1_GLOBAL_MOTION_PARAMS = @as(c_int, 6);
pub const STD_VIDEO_AV1_MAX_NUM_Y_POINTS = @as(c_int, 14);
pub const STD_VIDEO_AV1_MAX_NUM_CB_POINTS = @as(c_int, 10);
pub const STD_VIDEO_AV1_MAX_NUM_CR_POINTS = @as(c_int, 10);
pub const STD_VIDEO_AV1_MAX_NUM_POS_LUMA = @as(c_int, 24);
pub const STD_VIDEO_AV1_MAX_NUM_POS_CHROMA = @as(c_int, 25);
pub const VULKAN_VIDEO_CODEC_AV1STD_DECODE_H_ = @as(c_int, 1);
pub const vulkan_video_codec_av1std_decode = @as(c_int, 1);
pub const VK_STD_VULKAN_VIDEO_CODEC_AV1_DECODE_API_VERSION_1_0_0 = VK_MAKE_VIDEO_STD_VERSION(@as(c_int, 1), @as(c_int, 0), @as(c_int, 0));
pub const VK_STD_VULKAN_VIDEO_CODEC_AV1_DECODE_SPEC_VERSION = VK_STD_VULKAN_VIDEO_CODEC_AV1_DECODE_API_VERSION_1_0_0;
pub const VK_STD_VULKAN_VIDEO_CODEC_AV1_DECODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_av1_decode";
pub const VK_MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR = @as(c_uint, 7);
pub const VK_KHR_VIDEO_DECODE_AV1_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_VIDEO_DECODE_AV1_EXTENSION_NAME = "VK_KHR_video_decode_av1";
pub const VK_KHR_video_maintenance1 = @as(c_int, 1);
pub const VK_KHR_VIDEO_MAINTENANCE_1_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_VIDEO_MAINTENANCE_1_EXTENSION_NAME = "VK_KHR_video_maintenance1";
pub const VK_KHR_vertex_attribute_divisor = @as(c_int, 1);
pub const VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME = "VK_KHR_vertex_attribute_divisor";
pub const VK_KHR_load_store_op_none = @as(c_int, 1);
pub const VK_KHR_LOAD_STORE_OP_NONE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_LOAD_STORE_OP_NONE_EXTENSION_NAME = "VK_KHR_load_store_op_none";
pub const VK_KHR_shader_float_controls2 = @as(c_int, 1);
pub const VK_KHR_SHADER_FLOAT_CONTROLS_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_FLOAT_CONTROLS_2_EXTENSION_NAME = "VK_KHR_shader_float_controls2";
pub const VK_KHR_index_type_uint8 = @as(c_int, 1);
pub const VK_KHR_INDEX_TYPE_UINT8_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_INDEX_TYPE_UINT8_EXTENSION_NAME = "VK_KHR_index_type_uint8";
pub const VK_KHR_line_rasterization = @as(c_int, 1);
pub const VK_KHR_LINE_RASTERIZATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_LINE_RASTERIZATION_EXTENSION_NAME = "VK_KHR_line_rasterization";
pub const VK_KHR_calibrated_timestamps = @as(c_int, 1);
pub const VK_KHR_CALIBRATED_TIMESTAMPS_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_CALIBRATED_TIMESTAMPS_EXTENSION_NAME = "VK_KHR_calibrated_timestamps";
pub const VK_KHR_shader_expect_assume = @as(c_int, 1);
pub const VK_KHR_SHADER_EXPECT_ASSUME_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_EXPECT_ASSUME_EXTENSION_NAME = "VK_KHR_shader_expect_assume";
pub const VK_KHR_maintenance6 = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_6_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_6_EXTENSION_NAME = "VK_KHR_maintenance6";
pub const VK_EXT_debug_report = @as(c_int, 1);
pub const VK_EXT_DEBUG_REPORT_SPEC_VERSION = @as(c_int, 10);
pub const VK_EXT_DEBUG_REPORT_EXTENSION_NAME = "VK_EXT_debug_report";
pub const VK_NV_glsl_shader = @as(c_int, 1);
pub const VK_NV_GLSL_SHADER_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_GLSL_SHADER_EXTENSION_NAME = "VK_NV_glsl_shader";
pub const VK_EXT_depth_range_unrestricted = @as(c_int, 1);
pub const VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME = "VK_EXT_depth_range_unrestricted";
pub const VK_IMG_filter_cubic = @as(c_int, 1);
pub const VK_IMG_FILTER_CUBIC_SPEC_VERSION = @as(c_int, 1);
pub const VK_IMG_FILTER_CUBIC_EXTENSION_NAME = "VK_IMG_filter_cubic";
pub const VK_AMD_rasterization_order = @as(c_int, 1);
pub const VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME = "VK_AMD_rasterization_order";
pub const VK_AMD_shader_trinary_minmax = @as(c_int, 1);
pub const VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME = "VK_AMD_shader_trinary_minmax";
pub const VK_AMD_shader_explicit_vertex_parameter = @as(c_int, 1);
pub const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME = "VK_AMD_shader_explicit_vertex_parameter";
pub const VK_EXT_debug_marker = @as(c_int, 1);
pub const VK_EXT_DEBUG_MARKER_SPEC_VERSION = @as(c_int, 4);
pub const VK_EXT_DEBUG_MARKER_EXTENSION_NAME = "VK_EXT_debug_marker";
pub const VK_AMD_gcn_shader = @as(c_int, 1);
pub const VK_AMD_GCN_SHADER_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_GCN_SHADER_EXTENSION_NAME = "VK_AMD_gcn_shader";
pub const VK_NV_dedicated_allocation = @as(c_int, 1);
pub const VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_NV_dedicated_allocation";
pub const VK_EXT_transform_feedback = @as(c_int, 1);
pub const VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME = "VK_EXT_transform_feedback";
pub const VK_NVX_binary_import = @as(c_int, 1);
pub const VK_NVX_BINARY_IMPORT_SPEC_VERSION = @as(c_int, 1);
pub const VK_NVX_BINARY_IMPORT_EXTENSION_NAME = "VK_NVX_binary_import";
pub const VK_NVX_image_view_handle = @as(c_int, 1);
pub const VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION = @as(c_int, 2);
pub const VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME = "VK_NVX_image_view_handle";
pub const VK_AMD_draw_indirect_count = @as(c_int, 1);
pub const VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION = @as(c_int, 2);
pub const VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_AMD_draw_indirect_count";
pub const VK_AMD_negative_viewport_height = @as(c_int, 1);
pub const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME = "VK_AMD_negative_viewport_height";
pub const VK_AMD_gpu_shader_half_float = @as(c_int, 1);
pub const VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION = @as(c_int, 2);
pub const VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME = "VK_AMD_gpu_shader_half_float";
pub const VK_AMD_shader_ballot = @as(c_int, 1);
pub const VK_AMD_SHADER_BALLOT_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_BALLOT_EXTENSION_NAME = "VK_AMD_shader_ballot";
pub const VK_AMD_texture_gather_bias_lod = @as(c_int, 1);
pub const VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME = "VK_AMD_texture_gather_bias_lod";
pub const VK_AMD_shader_info = @as(c_int, 1);
pub const VK_AMD_SHADER_INFO_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_INFO_EXTENSION_NAME = "VK_AMD_shader_info";
pub const VK_AMD_shader_image_load_store_lod = @as(c_int, 1);
pub const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME = "VK_AMD_shader_image_load_store_lod";
pub const VK_NV_corner_sampled_image = @as(c_int, 1);
pub const VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME = "VK_NV_corner_sampled_image";
pub const VK_IMG_format_pvrtc = @as(c_int, 1);
pub const VK_IMG_FORMAT_PVRTC_SPEC_VERSION = @as(c_int, 1);
pub const VK_IMG_FORMAT_PVRTC_EXTENSION_NAME = "VK_IMG_format_pvrtc";
pub const VK_NV_external_memory_capabilities = @as(c_int, 1);
pub const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_NV_external_memory_capabilities";
pub const VK_NV_external_memory = @as(c_int, 1);
pub const VK_NV_EXTERNAL_MEMORY_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_NV_external_memory";
pub const VK_EXT_validation_flags = @as(c_int, 1);
pub const VK_EXT_VALIDATION_FLAGS_SPEC_VERSION = @as(c_int, 3);
pub const VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME = "VK_EXT_validation_flags";
pub const VK_EXT_shader_subgroup_ballot = @as(c_int, 1);
pub const VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME = "VK_EXT_shader_subgroup_ballot";
pub const VK_EXT_shader_subgroup_vote = @as(c_int, 1);
pub const VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME = "VK_EXT_shader_subgroup_vote";
pub const VK_EXT_texture_compression_astc_hdr = @as(c_int, 1);
pub const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME = "VK_EXT_texture_compression_astc_hdr";
pub const VK_EXT_astc_decode_mode = @as(c_int, 1);
pub const VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME = "VK_EXT_astc_decode_mode";
pub const VK_EXT_pipeline_robustness = @as(c_int, 1);
pub const VK_EXT_PIPELINE_ROBUSTNESS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PIPELINE_ROBUSTNESS_EXTENSION_NAME = "VK_EXT_pipeline_robustness";
pub const VK_EXT_conditional_rendering = @as(c_int, 1);
pub const VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME = "VK_EXT_conditional_rendering";
pub const VK_NV_clip_space_w_scaling = @as(c_int, 1);
pub const VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME = "VK_NV_clip_space_w_scaling";
pub const VK_EXT_direct_mode_display = @as(c_int, 1);
pub const VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME = "VK_EXT_direct_mode_display";
pub const VK_EXT_display_surface_counter = @as(c_int, 1);
pub const VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME = "VK_EXT_display_surface_counter";
pub const VK_EXT_display_control = @as(c_int, 1);
pub const VK_EXT_DISPLAY_CONTROL_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME = "VK_EXT_display_control";
pub const VK_GOOGLE_display_timing = @as(c_int, 1);
pub const VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION = @as(c_int, 1);
pub const VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME = "VK_GOOGLE_display_timing";
pub const VK_NV_sample_mask_override_coverage = @as(c_int, 1);
pub const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME = "VK_NV_sample_mask_override_coverage";
pub const VK_NV_geometry_shader_passthrough = @as(c_int, 1);
pub const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME = "VK_NV_geometry_shader_passthrough";
pub const VK_NV_viewport_array2 = @as(c_int, 1);
pub const VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME = "VK_NV_viewport_array2";
pub const VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION = VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION;
pub const VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME = VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME;
pub const VK_NVX_multiview_per_view_attributes = @as(c_int, 1);
pub const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION = @as(c_int, 1);
pub const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME = "VK_NVX_multiview_per_view_attributes";
pub const VK_NV_viewport_swizzle = @as(c_int, 1);
pub const VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME = "VK_NV_viewport_swizzle";
pub const VK_EXT_discard_rectangles = @as(c_int, 1);
pub const VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME = "VK_EXT_discard_rectangles";
pub const VK_EXT_conservative_rasterization = @as(c_int, 1);
pub const VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_conservative_rasterization";
pub const VK_EXT_depth_clip_enable = @as(c_int, 1);
pub const VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME = "VK_EXT_depth_clip_enable";
pub const VK_EXT_swapchain_colorspace = @as(c_int, 1);
pub const VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION = @as(c_int, 4);
pub const VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME = "VK_EXT_swapchain_colorspace";
pub const VK_EXT_hdr_metadata = @as(c_int, 1);
pub const VK_EXT_HDR_METADATA_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_HDR_METADATA_EXTENSION_NAME = "VK_EXT_hdr_metadata";
pub const VK_IMG_relaxed_line_rasterization = @as(c_int, 1);
pub const VK_IMG_RELAXED_LINE_RASTERIZATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_IMG_RELAXED_LINE_RASTERIZATION_EXTENSION_NAME = "VK_IMG_relaxed_line_rasterization";
pub const VK_EXT_external_memory_dma_buf = @as(c_int, 1);
pub const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME = "VK_EXT_external_memory_dma_buf";
pub const VK_EXT_queue_family_foreign = @as(c_int, 1);
pub const VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME = "VK_EXT_queue_family_foreign";
pub const VK_QUEUE_FAMILY_FOREIGN_EXT = ~@as(c_uint, 2);
pub const VK_EXT_debug_utils = @as(c_int, 1);
pub const VK_EXT_DEBUG_UTILS_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_DEBUG_UTILS_EXTENSION_NAME = "VK_EXT_debug_utils";
pub const VK_EXT_sampler_filter_minmax = @as(c_int, 1);
pub const VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME = "VK_EXT_sampler_filter_minmax";
pub const VK_AMD_gpu_shader_int16 = @as(c_int, 1);
pub const VK_AMD_GPU_SHADER_INT16_SPEC_VERSION = @as(c_int, 2);
pub const VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME = "VK_AMD_gpu_shader_int16";
pub const VK_AMD_mixed_attachment_samples = @as(c_int, 1);
pub const VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME = "VK_AMD_mixed_attachment_samples";
pub const VK_AMD_shader_fragment_mask = @as(c_int, 1);
pub const VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME = "VK_AMD_shader_fragment_mask";
pub const VK_EXT_inline_uniform_block = @as(c_int, 1);
pub const VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME = "VK_EXT_inline_uniform_block";
pub const VK_EXT_shader_stencil_export = @as(c_int, 1);
pub const VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME = "VK_EXT_shader_stencil_export";
pub const VK_EXT_sample_locations = @as(c_int, 1);
pub const VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME = "VK_EXT_sample_locations";
pub const VK_EXT_blend_operation_advanced = @as(c_int, 1);
pub const VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME = "VK_EXT_blend_operation_advanced";
pub const VK_NV_fragment_coverage_to_color = @as(c_int, 1);
pub const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME = "VK_NV_fragment_coverage_to_color";
pub const VK_NV_framebuffer_mixed_samples = @as(c_int, 1);
pub const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME = "VK_NV_framebuffer_mixed_samples";
pub const VK_NV_fill_rectangle = @as(c_int, 1);
pub const VK_NV_FILL_RECTANGLE_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_FILL_RECTANGLE_EXTENSION_NAME = "VK_NV_fill_rectangle";
pub const VK_NV_shader_sm_builtins = @as(c_int, 1);
pub const VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME = "VK_NV_shader_sm_builtins";
pub const VK_EXT_post_depth_coverage = @as(c_int, 1);
pub const VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME = "VK_EXT_post_depth_coverage";
pub const VK_EXT_image_drm_format_modifier = @as(c_int, 1);
pub const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME = "VK_EXT_image_drm_format_modifier";
pub const VK_EXT_validation_cache = @as(c_int, 1);
pub const VK_EXT_VALIDATION_CACHE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_VALIDATION_CACHE_EXTENSION_NAME = "VK_EXT_validation_cache";
pub const VK_EXT_descriptor_indexing = @as(c_int, 1);
pub const VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME = "VK_EXT_descriptor_indexing";
pub const VK_EXT_shader_viewport_index_layer = @as(c_int, 1);
pub const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME = "VK_EXT_shader_viewport_index_layer";
pub const VK_NV_shading_rate_image = @as(c_int, 1);
pub const VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION = @as(c_int, 3);
pub const VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME = "VK_NV_shading_rate_image";
pub const VK_NV_ray_tracing = @as(c_int, 1);
pub const VK_NV_RAY_TRACING_SPEC_VERSION = @as(c_int, 3);
pub const VK_NV_RAY_TRACING_EXTENSION_NAME = "VK_NV_ray_tracing";
pub const VK_SHADER_UNUSED_KHR = ~@as(c_uint, 0);
pub const VK_SHADER_UNUSED_NV = VK_SHADER_UNUSED_KHR;
pub const VK_NV_representative_fragment_test = @as(c_int, 1);
pub const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME = "VK_NV_representative_fragment_test";
pub const VK_EXT_filter_cubic = @as(c_int, 1);
pub const VK_EXT_FILTER_CUBIC_SPEC_VERSION = @as(c_int, 3);
pub const VK_EXT_FILTER_CUBIC_EXTENSION_NAME = "VK_EXT_filter_cubic";
pub const VK_QCOM_render_pass_shader_resolve = @as(c_int, 1);
pub const VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION = @as(c_int, 4);
pub const VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME = "VK_QCOM_render_pass_shader_resolve";
pub const VK_EXT_global_priority = @as(c_int, 1);
pub const VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME = "VK_EXT_global_priority";
pub const VK_EXT_external_memory_host = @as(c_int, 1);
pub const VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME = "VK_EXT_external_memory_host";
pub const VK_AMD_buffer_marker = @as(c_int, 1);
pub const VK_AMD_BUFFER_MARKER_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_BUFFER_MARKER_EXTENSION_NAME = "VK_AMD_buffer_marker";
pub const VK_AMD_pipeline_compiler_control = @as(c_int, 1);
pub const VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME = "VK_AMD_pipeline_compiler_control";
pub const VK_EXT_calibrated_timestamps = @as(c_int, 1);
pub const VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME = "VK_EXT_calibrated_timestamps";
pub const VK_AMD_shader_core_properties = @as(c_int, 1);
pub const VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION = @as(c_int, 2);
pub const VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME = "VK_AMD_shader_core_properties";
pub const VK_AMD_memory_overallocation_behavior = @as(c_int, 1);
pub const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME = "VK_AMD_memory_overallocation_behavior";
pub const VK_EXT_vertex_attribute_divisor = @as(c_int, 1);
pub const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION = @as(c_int, 3);
pub const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME = "VK_EXT_vertex_attribute_divisor";
pub const VK_EXT_pipeline_creation_feedback = @as(c_int, 1);
pub const VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME = "VK_EXT_pipeline_creation_feedback";
pub const VK_NV_shader_subgroup_partitioned = @as(c_int, 1);
pub const VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME = "VK_NV_shader_subgroup_partitioned";
pub const VK_NV_compute_shader_derivatives = @as(c_int, 1);
pub const VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME = "VK_NV_compute_shader_derivatives";
pub const VK_NV_mesh_shader = @as(c_int, 1);
pub const VK_NV_MESH_SHADER_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_MESH_SHADER_EXTENSION_NAME = "VK_NV_mesh_shader";
pub const VK_NV_fragment_shader_barycentric = @as(c_int, 1);
pub const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME = "VK_NV_fragment_shader_barycentric";
pub const VK_NV_shader_image_footprint = @as(c_int, 1);
pub const VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME = "VK_NV_shader_image_footprint";
pub const VK_NV_scissor_exclusive = @as(c_int, 1);
pub const VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME = "VK_NV_scissor_exclusive";
pub const VK_NV_device_diagnostic_checkpoints = @as(c_int, 1);
pub const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME = "VK_NV_device_diagnostic_checkpoints";
pub const VK_INTEL_shader_integer_functions2 = @as(c_int, 1);
pub const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME = "VK_INTEL_shader_integer_functions2";
pub const VK_INTEL_performance_query = @as(c_int, 1);
pub const VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION = @as(c_int, 2);
pub const VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME = "VK_INTEL_performance_query";
pub const VK_EXT_pci_bus_info = @as(c_int, 1);
pub const VK_EXT_PCI_BUS_INFO_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_PCI_BUS_INFO_EXTENSION_NAME = "VK_EXT_pci_bus_info";
pub const VK_AMD_display_native_hdr = @as(c_int, 1);
pub const VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME = "VK_AMD_display_native_hdr";
pub const VK_EXT_fragment_density_map = @as(c_int, 1);
pub const VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME = "VK_EXT_fragment_density_map";
pub const VK_EXT_scalar_block_layout = @as(c_int, 1);
pub const VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME = "VK_EXT_scalar_block_layout";
pub const VK_GOOGLE_hlsl_functionality1 = @as(c_int, 1);
pub const VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION = @as(c_int, 1);
pub const VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME = "VK_GOOGLE_hlsl_functionality1";
pub const VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION = VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION;
pub const VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME = VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME;
pub const VK_GOOGLE_decorate_string = @as(c_int, 1);
pub const VK_GOOGLE_DECORATE_STRING_SPEC_VERSION = @as(c_int, 1);
pub const VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME = "VK_GOOGLE_decorate_string";
pub const VK_EXT_subgroup_size_control = @as(c_int, 1);
pub const VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME = "VK_EXT_subgroup_size_control";
pub const VK_AMD_shader_core_properties2 = @as(c_int, 1);
pub const VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME = "VK_AMD_shader_core_properties2";
pub const VK_AMD_device_coherent_memory = @as(c_int, 1);
pub const VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME = "VK_AMD_device_coherent_memory";
pub const VK_EXT_shader_image_atomic_int64 = @as(c_int, 1);
pub const VK_EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME = "VK_EXT_shader_image_atomic_int64";
pub const VK_EXT_memory_budget = @as(c_int, 1);
pub const VK_EXT_MEMORY_BUDGET_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_MEMORY_BUDGET_EXTENSION_NAME = "VK_EXT_memory_budget";
pub const VK_EXT_memory_priority = @as(c_int, 1);
pub const VK_EXT_MEMORY_PRIORITY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME = "VK_EXT_memory_priority";
pub const VK_NV_dedicated_allocation_image_aliasing = @as(c_int, 1);
pub const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME = "VK_NV_dedicated_allocation_image_aliasing";
pub const VK_EXT_buffer_device_address = @as(c_int, 1);
pub const VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = "VK_EXT_buffer_device_address";
pub const VK_EXT_tooling_info = @as(c_int, 1);
pub const VK_EXT_TOOLING_INFO_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_TOOLING_INFO_EXTENSION_NAME = "VK_EXT_tooling_info";
pub const VK_EXT_separate_stencil_usage = @as(c_int, 1);
pub const VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME = "VK_EXT_separate_stencil_usage";
pub const VK_EXT_validation_features = @as(c_int, 1);
pub const VK_EXT_VALIDATION_FEATURES_SPEC_VERSION = @as(c_int, 6);
pub const VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME = "VK_EXT_validation_features";
pub const VK_NV_cooperative_matrix = @as(c_int, 1);
pub const VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME = "VK_NV_cooperative_matrix";
pub const VK_NV_coverage_reduction_mode = @as(c_int, 1);
pub const VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME = "VK_NV_coverage_reduction_mode";
pub const VK_EXT_fragment_shader_interlock = @as(c_int, 1);
pub const VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME = "VK_EXT_fragment_shader_interlock";
pub const VK_EXT_ycbcr_image_arrays = @as(c_int, 1);
pub const VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME = "VK_EXT_ycbcr_image_arrays";
pub const VK_EXT_provoking_vertex = @as(c_int, 1);
pub const VK_EXT_PROVOKING_VERTEX_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PROVOKING_VERTEX_EXTENSION_NAME = "VK_EXT_provoking_vertex";
pub const VK_EXT_headless_surface = @as(c_int, 1);
pub const VK_EXT_HEADLESS_SURFACE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME = "VK_EXT_headless_surface";
pub const VK_EXT_line_rasterization = @as(c_int, 1);
pub const VK_EXT_LINE_RASTERIZATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_line_rasterization";
pub const VK_EXT_shader_atomic_float = @as(c_int, 1);
pub const VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME = "VK_EXT_shader_atomic_float";
pub const VK_EXT_host_query_reset = @as(c_int, 1);
pub const VK_EXT_HOST_QUERY_RESET_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME = "VK_EXT_host_query_reset";
pub const VK_EXT_index_type_uint8 = @as(c_int, 1);
pub const VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME = "VK_EXT_index_type_uint8";
pub const VK_EXT_extended_dynamic_state = @as(c_int, 1);
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_extended_dynamic_state";
pub const VK_EXT_host_image_copy = @as(c_int, 1);
pub const VK_EXT_HOST_IMAGE_COPY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_HOST_IMAGE_COPY_EXTENSION_NAME = "VK_EXT_host_image_copy";
pub const VK_EXT_map_memory_placed = @as(c_int, 1);
pub const VK_EXT_MAP_MEMORY_PLACED_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_MAP_MEMORY_PLACED_EXTENSION_NAME = "VK_EXT_map_memory_placed";
pub const VK_EXT_shader_atomic_float2 = @as(c_int, 1);
pub const VK_EXT_SHADER_ATOMIC_FLOAT_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_ATOMIC_FLOAT_2_EXTENSION_NAME = "VK_EXT_shader_atomic_float2";
pub const VK_EXT_surface_maintenance1 = @as(c_int, 1);
pub const VK_EXT_SURFACE_MAINTENANCE_1_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SURFACE_MAINTENANCE_1_EXTENSION_NAME = "VK_EXT_surface_maintenance1";
pub const VK_EXT_swapchain_maintenance1 = @as(c_int, 1);
pub const VK_EXT_SWAPCHAIN_MAINTENANCE_1_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SWAPCHAIN_MAINTENANCE_1_EXTENSION_NAME = "VK_EXT_swapchain_maintenance1";
pub const VK_EXT_shader_demote_to_helper_invocation = @as(c_int, 1);
pub const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME = "VK_EXT_shader_demote_to_helper_invocation";
pub const VK_NV_device_generated_commands = @as(c_int, 1);
pub const VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION = @as(c_int, 3);
pub const VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME = "VK_NV_device_generated_commands";
pub const VK_NV_inherited_viewport_scissor = @as(c_int, 1);
pub const VK_NV_INHERITED_VIEWPORT_SCISSOR_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_INHERITED_VIEWPORT_SCISSOR_EXTENSION_NAME = "VK_NV_inherited_viewport_scissor";
pub const VK_EXT_texel_buffer_alignment = @as(c_int, 1);
pub const VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME = "VK_EXT_texel_buffer_alignment";
pub const VK_QCOM_render_pass_transform = @as(c_int, 1);
pub const VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION = @as(c_int, 4);
pub const VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME = "VK_QCOM_render_pass_transform";
pub const VK_EXT_depth_bias_control = @as(c_int, 1);
pub const VK_EXT_DEPTH_BIAS_CONTROL_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DEPTH_BIAS_CONTROL_EXTENSION_NAME = "VK_EXT_depth_bias_control";
pub const VK_EXT_device_memory_report = @as(c_int, 1);
pub const VK_EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME = "VK_EXT_device_memory_report";
pub const VK_EXT_acquire_drm_display = @as(c_int, 1);
pub const VK_EXT_ACQUIRE_DRM_DISPLAY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_ACQUIRE_DRM_DISPLAY_EXTENSION_NAME = "VK_EXT_acquire_drm_display";
pub const VK_EXT_robustness2 = @as(c_int, 1);
pub const VK_EXT_ROBUSTNESS_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_ROBUSTNESS_2_EXTENSION_NAME = "VK_EXT_robustness2";
pub const VK_EXT_custom_border_color = @as(c_int, 1);
pub const VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION = @as(c_int, 12);
pub const VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME = "VK_EXT_custom_border_color";
pub const VK_GOOGLE_user_type = @as(c_int, 1);
pub const VK_GOOGLE_USER_TYPE_SPEC_VERSION = @as(c_int, 1);
pub const VK_GOOGLE_USER_TYPE_EXTENSION_NAME = "VK_GOOGLE_user_type";
pub const VK_NV_present_barrier = @as(c_int, 1);
pub const VK_NV_PRESENT_BARRIER_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_PRESENT_BARRIER_EXTENSION_NAME = "VK_NV_present_barrier";
pub const VK_EXT_private_data = @as(c_int, 1);
pub const VK_EXT_PRIVATE_DATA_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PRIVATE_DATA_EXTENSION_NAME = "VK_EXT_private_data";
pub const VK_EXT_pipeline_creation_cache_control = @as(c_int, 1);
pub const VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION = @as(c_int, 3);
pub const VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME = "VK_EXT_pipeline_creation_cache_control";
pub const VK_NV_device_diagnostics_config = @as(c_int, 1);
pub const VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME = "VK_NV_device_diagnostics_config";
pub const VK_QCOM_render_pass_store_ops = @as(c_int, 1);
pub const VK_QCOM_RENDER_PASS_STORE_OPS_SPEC_VERSION = @as(c_int, 2);
pub const VK_QCOM_RENDER_PASS_STORE_OPS_EXTENSION_NAME = "VK_QCOM_render_pass_store_ops";
pub const VK_NV_cuda_kernel_launch = @as(c_int, 1);
pub const VK_NV_CUDA_KERNEL_LAUNCH_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_CUDA_KERNEL_LAUNCH_EXTENSION_NAME = "VK_NV_cuda_kernel_launch";
pub const VK_NV_low_latency = @as(c_int, 1);
pub const VK_NV_LOW_LATENCY_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_LOW_LATENCY_EXTENSION_NAME = "VK_NV_low_latency";
pub const VK_EXT_descriptor_buffer = @as(c_int, 1);
pub const VK_EXT_DESCRIPTOR_BUFFER_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DESCRIPTOR_BUFFER_EXTENSION_NAME = "VK_EXT_descriptor_buffer";
pub const VK_EXT_graphics_pipeline_library = @as(c_int, 1);
pub const VK_EXT_GRAPHICS_PIPELINE_LIBRARY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_GRAPHICS_PIPELINE_LIBRARY_EXTENSION_NAME = "VK_EXT_graphics_pipeline_library";
pub const VK_AMD_shader_early_and_late_fragment_tests = @as(c_int, 1);
pub const VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_EXTENSION_NAME = "VK_AMD_shader_early_and_late_fragment_tests";
pub const VK_NV_fragment_shading_rate_enums = @as(c_int, 1);
pub const VK_NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME = "VK_NV_fragment_shading_rate_enums";
pub const VK_NV_ray_tracing_motion_blur = @as(c_int, 1);
pub const VK_NV_RAY_TRACING_MOTION_BLUR_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_RAY_TRACING_MOTION_BLUR_EXTENSION_NAME = "VK_NV_ray_tracing_motion_blur";
pub const VK_EXT_ycbcr_2plane_444_formats = @as(c_int, 1);
pub const VK_EXT_YCBCR_2PLANE_444_FORMATS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_YCBCR_2PLANE_444_FORMATS_EXTENSION_NAME = "VK_EXT_ycbcr_2plane_444_formats";
pub const VK_EXT_fragment_density_map2 = @as(c_int, 1);
pub const VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME = "VK_EXT_fragment_density_map2";
pub const VK_QCOM_rotated_copy_commands = @as(c_int, 1);
pub const VK_QCOM_ROTATED_COPY_COMMANDS_SPEC_VERSION = @as(c_int, 2);
pub const VK_QCOM_ROTATED_COPY_COMMANDS_EXTENSION_NAME = "VK_QCOM_rotated_copy_commands";
pub const VK_EXT_image_robustness = @as(c_int, 1);
pub const VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME = "VK_EXT_image_robustness";
pub const VK_EXT_image_compression_control = @as(c_int, 1);
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_EXTENSION_NAME = "VK_EXT_image_compression_control";
pub const VK_EXT_attachment_feedback_loop_layout = @as(c_int, 1);
pub const VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_EXTENSION_NAME = "VK_EXT_attachment_feedback_loop_layout";
pub const VK_EXT_4444_formats = @as(c_int, 1);
pub const VK_EXT_4444_FORMATS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_4444_FORMATS_EXTENSION_NAME = "VK_EXT_4444_formats";
pub const VK_EXT_device_fault = @as(c_int, 1);
pub const VK_EXT_DEVICE_FAULT_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_DEVICE_FAULT_EXTENSION_NAME = "VK_EXT_device_fault";
pub const VK_ARM_rasterization_order_attachment_access = @as(c_int, 1);
pub const VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION = @as(c_int, 1);
pub const VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME = "VK_ARM_rasterization_order_attachment_access";
pub const VK_EXT_rgba10x6_formats = @as(c_int, 1);
pub const VK_EXT_RGBA10X6_FORMATS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_RGBA10X6_FORMATS_EXTENSION_NAME = "VK_EXT_rgba10x6_formats";
pub const VK_VALVE_mutable_descriptor_type = @as(c_int, 1);
pub const VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION = @as(c_int, 1);
pub const VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME = "VK_VALVE_mutable_descriptor_type";
pub const VK_EXT_vertex_input_dynamic_state = @as(c_int, 1);
pub const VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_vertex_input_dynamic_state";
pub const VK_EXT_physical_device_drm = @as(c_int, 1);
pub const VK_EXT_PHYSICAL_DEVICE_DRM_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PHYSICAL_DEVICE_DRM_EXTENSION_NAME = "VK_EXT_physical_device_drm";
pub const VK_EXT_device_address_binding_report = @as(c_int, 1);
pub const VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_EXTENSION_NAME = "VK_EXT_device_address_binding_report";
pub const VK_EXT_depth_clip_control = @as(c_int, 1);
pub const VK_EXT_DEPTH_CLIP_CONTROL_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DEPTH_CLIP_CONTROL_EXTENSION_NAME = "VK_EXT_depth_clip_control";
pub const VK_EXT_primitive_topology_list_restart = @as(c_int, 1);
pub const VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_EXTENSION_NAME = "VK_EXT_primitive_topology_list_restart";
pub const VK_HUAWEI_subpass_shading = @as(c_int, 1);
pub const VK_HUAWEI_SUBPASS_SHADING_SPEC_VERSION = @as(c_int, 3);
pub const VK_HUAWEI_SUBPASS_SHADING_EXTENSION_NAME = "VK_HUAWEI_subpass_shading";
pub const VK_HUAWEI_invocation_mask = @as(c_int, 1);
pub const VK_HUAWEI_INVOCATION_MASK_SPEC_VERSION = @as(c_int, 1);
pub const VK_HUAWEI_INVOCATION_MASK_EXTENSION_NAME = "VK_HUAWEI_invocation_mask";
pub const VK_NV_external_memory_rdma = @as(c_int, 1);
pub const VK_NV_EXTERNAL_MEMORY_RDMA_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_EXTERNAL_MEMORY_RDMA_EXTENSION_NAME = "VK_NV_external_memory_rdma";
pub const VK_EXT_pipeline_properties = @as(c_int, 1);
pub const VK_EXT_PIPELINE_PROPERTIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PIPELINE_PROPERTIES_EXTENSION_NAME = "VK_EXT_pipeline_properties";
pub const VK_EXT_frame_boundary = @as(c_int, 1);
pub const VK_EXT_FRAME_BOUNDARY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_FRAME_BOUNDARY_EXTENSION_NAME = "VK_EXT_frame_boundary";
pub const VK_EXT_multisampled_render_to_single_sampled = @as(c_int, 1);
pub const VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXTENSION_NAME = "VK_EXT_multisampled_render_to_single_sampled";
pub const VK_EXT_extended_dynamic_state2 = @as(c_int, 1);
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME = "VK_EXT_extended_dynamic_state2";
pub const VK_EXT_color_write_enable = @as(c_int, 1);
pub const VK_EXT_COLOR_WRITE_ENABLE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_COLOR_WRITE_ENABLE_EXTENSION_NAME = "VK_EXT_color_write_enable";
pub const VK_EXT_primitives_generated_query = @as(c_int, 1);
pub const VK_EXT_PRIMITIVES_GENERATED_QUERY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PRIMITIVES_GENERATED_QUERY_EXTENSION_NAME = "VK_EXT_primitives_generated_query";
pub const VK_EXT_global_priority_query = @as(c_int, 1);
pub const VK_EXT_GLOBAL_PRIORITY_QUERY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_GLOBAL_PRIORITY_QUERY_EXTENSION_NAME = "VK_EXT_global_priority_query";
pub const VK_MAX_GLOBAL_PRIORITY_SIZE_EXT = VK_MAX_GLOBAL_PRIORITY_SIZE_KHR;
pub const VK_EXT_image_view_min_lod = @as(c_int, 1);
pub const VK_EXT_IMAGE_VIEW_MIN_LOD_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_IMAGE_VIEW_MIN_LOD_EXTENSION_NAME = "VK_EXT_image_view_min_lod";
pub const VK_EXT_multi_draw = @as(c_int, 1);
pub const VK_EXT_MULTI_DRAW_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_MULTI_DRAW_EXTENSION_NAME = "VK_EXT_multi_draw";
pub const VK_EXT_image_2d_view_of_3d = @as(c_int, 1);
pub const VK_EXT_IMAGE_2D_VIEW_OF_3D_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_IMAGE_2D_VIEW_OF_3D_EXTENSION_NAME = "VK_EXT_image_2d_view_of_3d";
pub const VK_EXT_shader_tile_image = @as(c_int, 1);
pub const VK_EXT_SHADER_TILE_IMAGE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_TILE_IMAGE_EXTENSION_NAME = "VK_EXT_shader_tile_image";
pub const VK_EXT_opacity_micromap = @as(c_int, 1);
pub const VK_EXT_OPACITY_MICROMAP_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_OPACITY_MICROMAP_EXTENSION_NAME = "VK_EXT_opacity_micromap";
pub const VK_EXT_load_store_op_none = @as(c_int, 1);
pub const VK_EXT_LOAD_STORE_OP_NONE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_LOAD_STORE_OP_NONE_EXTENSION_NAME = "VK_EXT_load_store_op_none";
pub const VK_HUAWEI_cluster_culling_shader = @as(c_int, 1);
pub const VK_HUAWEI_CLUSTER_CULLING_SHADER_SPEC_VERSION = @as(c_int, 3);
pub const VK_HUAWEI_CLUSTER_CULLING_SHADER_EXTENSION_NAME = "VK_HUAWEI_cluster_culling_shader";
pub const VK_EXT_border_color_swizzle = @as(c_int, 1);
pub const VK_EXT_BORDER_COLOR_SWIZZLE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_BORDER_COLOR_SWIZZLE_EXTENSION_NAME = "VK_EXT_border_color_swizzle";
pub const VK_EXT_pageable_device_local_memory = @as(c_int, 1);
pub const VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_EXTENSION_NAME = "VK_EXT_pageable_device_local_memory";
pub const VK_ARM_shader_core_properties = @as(c_int, 1);
pub const VK_ARM_SHADER_CORE_PROPERTIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_ARM_SHADER_CORE_PROPERTIES_EXTENSION_NAME = "VK_ARM_shader_core_properties";
pub const VK_ARM_scheduling_controls = @as(c_int, 1);
pub const VK_ARM_SCHEDULING_CONTROLS_SPEC_VERSION = @as(c_int, 1);
pub const VK_ARM_SCHEDULING_CONTROLS_EXTENSION_NAME = "VK_ARM_scheduling_controls";
pub const VK_EXT_image_sliced_view_of_3d = @as(c_int, 1);
pub const VK_EXT_IMAGE_SLICED_VIEW_OF_3D_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_IMAGE_SLICED_VIEW_OF_3D_EXTENSION_NAME = "VK_EXT_image_sliced_view_of_3d";
pub const VK_REMAINING_3D_SLICES_EXT = ~@as(c_uint, 0);
pub const VK_VALVE_descriptor_set_host_mapping = @as(c_int, 1);
pub const VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_SPEC_VERSION = @as(c_int, 1);
pub const VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_EXTENSION_NAME = "VK_VALVE_descriptor_set_host_mapping";
pub const VK_EXT_depth_clamp_zero_one = @as(c_int, 1);
pub const VK_EXT_DEPTH_CLAMP_ZERO_ONE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DEPTH_CLAMP_ZERO_ONE_EXTENSION_NAME = "VK_EXT_depth_clamp_zero_one";
pub const VK_EXT_non_seamless_cube_map = @as(c_int, 1);
pub const VK_EXT_NON_SEAMLESS_CUBE_MAP_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_NON_SEAMLESS_CUBE_MAP_EXTENSION_NAME = "VK_EXT_non_seamless_cube_map";
pub const VK_ARM_render_pass_striped = @as(c_int, 1);
pub const VK_ARM_RENDER_PASS_STRIPED_SPEC_VERSION = @as(c_int, 1);
pub const VK_ARM_RENDER_PASS_STRIPED_EXTENSION_NAME = "VK_ARM_render_pass_striped";
pub const VK_QCOM_fragment_density_map_offset = @as(c_int, 1);
pub const VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME = "VK_QCOM_fragment_density_map_offset";
pub const VK_NV_copy_memory_indirect = @as(c_int, 1);
pub const VK_NV_COPY_MEMORY_INDIRECT_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_COPY_MEMORY_INDIRECT_EXTENSION_NAME = "VK_NV_copy_memory_indirect";
pub const VK_NV_memory_decompression = @as(c_int, 1);
pub const VK_NV_MEMORY_DECOMPRESSION_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_MEMORY_DECOMPRESSION_EXTENSION_NAME = "VK_NV_memory_decompression";
pub const VK_NV_device_generated_commands_compute = @as(c_int, 1);
pub const VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_EXTENSION_NAME = "VK_NV_device_generated_commands_compute";
pub const VK_NV_linear_color_attachment = @as(c_int, 1);
pub const VK_NV_LINEAR_COLOR_ATTACHMENT_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_LINEAR_COLOR_ATTACHMENT_EXTENSION_NAME = "VK_NV_linear_color_attachment";
pub const VK_GOOGLE_surfaceless_query = @as(c_int, 1);
pub const VK_GOOGLE_SURFACELESS_QUERY_SPEC_VERSION = @as(c_int, 2);
pub const VK_GOOGLE_SURFACELESS_QUERY_EXTENSION_NAME = "VK_GOOGLE_surfaceless_query";
pub const VK_EXT_image_compression_control_swapchain = @as(c_int, 1);
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_EXTENSION_NAME = "VK_EXT_image_compression_control_swapchain";
pub const VK_QCOM_image_processing = @as(c_int, 1);
pub const VK_QCOM_IMAGE_PROCESSING_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_IMAGE_PROCESSING_EXTENSION_NAME = "VK_QCOM_image_processing";
pub const VK_EXT_nested_command_buffer = @as(c_int, 1);
pub const VK_EXT_NESTED_COMMAND_BUFFER_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_NESTED_COMMAND_BUFFER_EXTENSION_NAME = "VK_EXT_nested_command_buffer";
pub const VK_EXT_external_memory_acquire_unmodified = @as(c_int, 1);
pub const VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXTENSION_NAME = "VK_EXT_external_memory_acquire_unmodified";
pub const VK_EXT_extended_dynamic_state3 = @as(c_int, 1);
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_3_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_3_EXTENSION_NAME = "VK_EXT_extended_dynamic_state3";
pub const VK_EXT_subpass_merge_feedback = @as(c_int, 1);
pub const VK_EXT_SUBPASS_MERGE_FEEDBACK_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_SUBPASS_MERGE_FEEDBACK_EXTENSION_NAME = "VK_EXT_subpass_merge_feedback";
pub const VK_LUNARG_direct_driver_loading = @as(c_int, 1);
pub const VK_LUNARG_DIRECT_DRIVER_LOADING_SPEC_VERSION = @as(c_int, 1);
pub const VK_LUNARG_DIRECT_DRIVER_LOADING_EXTENSION_NAME = "VK_LUNARG_direct_driver_loading";
pub const VK_EXT_shader_module_identifier = @as(c_int, 1);
pub const VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT = @as(c_uint, 32);
pub const VK_EXT_SHADER_MODULE_IDENTIFIER_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_MODULE_IDENTIFIER_EXTENSION_NAME = "VK_EXT_shader_module_identifier";
pub const VK_EXT_rasterization_order_attachment_access = @as(c_int, 1);
pub const VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME = "VK_EXT_rasterization_order_attachment_access";
pub const VK_NV_optical_flow = @as(c_int, 1);
pub const VK_NV_OPTICAL_FLOW_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_OPTICAL_FLOW_EXTENSION_NAME = "VK_NV_optical_flow";
pub const VK_EXT_legacy_dithering = @as(c_int, 1);
pub const VK_EXT_LEGACY_DITHERING_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_LEGACY_DITHERING_EXTENSION_NAME = "VK_EXT_legacy_dithering";
pub const VK_EXT_pipeline_protected_access = @as(c_int, 1);
pub const VK_EXT_PIPELINE_PROTECTED_ACCESS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PIPELINE_PROTECTED_ACCESS_EXTENSION_NAME = "VK_EXT_pipeline_protected_access";
pub const VK_EXT_shader_object = @as(c_int, 1);
pub const VK_EXT_SHADER_OBJECT_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_OBJECT_EXTENSION_NAME = "VK_EXT_shader_object";
pub const VK_QCOM_tile_properties = @as(c_int, 1);
pub const VK_QCOM_TILE_PROPERTIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_TILE_PROPERTIES_EXTENSION_NAME = "VK_QCOM_tile_properties";
pub const VK_SEC_amigo_profiling = @as(c_int, 1);
pub const VK_SEC_AMIGO_PROFILING_SPEC_VERSION = @as(c_int, 1);
pub const VK_SEC_AMIGO_PROFILING_EXTENSION_NAME = "VK_SEC_amigo_profiling";
pub const VK_QCOM_multiview_per_view_viewports = @as(c_int, 1);
pub const VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_EXTENSION_NAME = "VK_QCOM_multiview_per_view_viewports";
pub const VK_NV_ray_tracing_invocation_reorder = @as(c_int, 1);
pub const VK_NV_RAY_TRACING_INVOCATION_REORDER_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_RAY_TRACING_INVOCATION_REORDER_EXTENSION_NAME = "VK_NV_ray_tracing_invocation_reorder";
pub const VK_NV_extended_sparse_address_space = @as(c_int, 1);
pub const VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_EXTENSION_NAME = "VK_NV_extended_sparse_address_space";
pub const VK_EXT_mutable_descriptor_type = @as(c_int, 1);
pub const VK_EXT_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME = "VK_EXT_mutable_descriptor_type";
pub const VK_EXT_legacy_vertex_attributes = @as(c_int, 1);
pub const VK_EXT_LEGACY_VERTEX_ATTRIBUTES_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_LEGACY_VERTEX_ATTRIBUTES_EXTENSION_NAME = "VK_EXT_legacy_vertex_attributes";
pub const VK_EXT_layer_settings = @as(c_int, 1);
pub const VK_EXT_LAYER_SETTINGS_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_LAYER_SETTINGS_EXTENSION_NAME = "VK_EXT_layer_settings";
pub const VK_ARM_shader_core_builtins = @as(c_int, 1);
pub const VK_ARM_SHADER_CORE_BUILTINS_SPEC_VERSION = @as(c_int, 2);
pub const VK_ARM_SHADER_CORE_BUILTINS_EXTENSION_NAME = "VK_ARM_shader_core_builtins";
pub const VK_EXT_pipeline_library_group_handles = @as(c_int, 1);
pub const VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_EXTENSION_NAME = "VK_EXT_pipeline_library_group_handles";
pub const VK_EXT_dynamic_rendering_unused_attachments = @as(c_int, 1);
pub const VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_EXTENSION_NAME = "VK_EXT_dynamic_rendering_unused_attachments";
pub const VK_NV_low_latency2 = @as(c_int, 1);
pub const VK_NV_LOW_LATENCY_2_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_LOW_LATENCY_2_EXTENSION_NAME = "VK_NV_low_latency2";
pub const VK_QCOM_multiview_per_view_render_areas = @as(c_int, 1);
pub const VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_EXTENSION_NAME = "VK_QCOM_multiview_per_view_render_areas";
pub const VK_NV_per_stage_descriptor_set = @as(c_int, 1);
pub const VK_NV_PER_STAGE_DESCRIPTOR_SET_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_PER_STAGE_DESCRIPTOR_SET_EXTENSION_NAME = "VK_NV_per_stage_descriptor_set";
pub const VK_QCOM_image_processing2 = @as(c_int, 1);
pub const VK_QCOM_IMAGE_PROCESSING_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_IMAGE_PROCESSING_2_EXTENSION_NAME = "VK_QCOM_image_processing2";
pub const VK_QCOM_filter_cubic_weights = @as(c_int, 1);
pub const VK_QCOM_FILTER_CUBIC_WEIGHTS_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_FILTER_CUBIC_WEIGHTS_EXTENSION_NAME = "VK_QCOM_filter_cubic_weights";
pub const VK_QCOM_ycbcr_degamma = @as(c_int, 1);
pub const VK_QCOM_YCBCR_DEGAMMA_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_YCBCR_DEGAMMA_EXTENSION_NAME = "VK_QCOM_ycbcr_degamma";
pub const VK_QCOM_filter_cubic_clamp = @as(c_int, 1);
pub const VK_QCOM_FILTER_CUBIC_CLAMP_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_FILTER_CUBIC_CLAMP_EXTENSION_NAME = "VK_QCOM_filter_cubic_clamp";
pub const VK_EXT_attachment_feedback_loop_dynamic_state = @as(c_int, 1);
pub const VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_attachment_feedback_loop_dynamic_state";
pub const VK_MSFT_layered_driver = @as(c_int, 1);
pub const VK_MSFT_LAYERED_DRIVER_SPEC_VERSION = @as(c_int, 1);
pub const VK_MSFT_LAYERED_DRIVER_EXTENSION_NAME = "VK_MSFT_layered_driver";
pub const VK_NV_descriptor_pool_overallocation = @as(c_int, 1);
pub const VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_EXTENSION_NAME = "VK_NV_descriptor_pool_overallocation";
pub const VK_NV_raw_access_chains = @as(c_int, 1);
pub const VK_NV_RAW_ACCESS_CHAINS_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_RAW_ACCESS_CHAINS_EXTENSION_NAME = "VK_NV_raw_access_chains";
pub const VK_NV_shader_atomic_float16_vector = @as(c_int, 1);
pub const VK_NV_SHADER_ATOMIC_FLOAT16_VECTOR_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_SHADER_ATOMIC_FLOAT16_VECTOR_EXTENSION_NAME = "VK_NV_shader_atomic_float16_vector";
pub const VK_NV_ray_tracing_validation = @as(c_int, 1);
pub const VK_NV_RAY_TRACING_VALIDATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_RAY_TRACING_VALIDATION_EXTENSION_NAME = "VK_NV_ray_tracing_validation";
pub const VK_MESA_image_alignment_control = @as(c_int, 1);
pub const VK_MESA_IMAGE_ALIGNMENT_CONTROL_SPEC_VERSION = @as(c_int, 1);
pub const VK_MESA_IMAGE_ALIGNMENT_CONTROL_EXTENSION_NAME = "VK_MESA_image_alignment_control";
pub const VK_KHR_acceleration_structure = @as(c_int, 1);
pub const VK_KHR_ACCELERATION_STRUCTURE_SPEC_VERSION = @as(c_int, 13);
pub const VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME = "VK_KHR_acceleration_structure";
pub const VK_KHR_ray_tracing_pipeline = @as(c_int, 1);
pub const VK_KHR_RAY_TRACING_PIPELINE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME = "VK_KHR_ray_tracing_pipeline";
pub const VK_KHR_ray_query = @as(c_int, 1);
pub const VK_KHR_RAY_QUERY_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_RAY_QUERY_EXTENSION_NAME = "VK_KHR_ray_query";
pub const VK_EXT_mesh_shader = @as(c_int, 1);
pub const VK_EXT_MESH_SHADER_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_MESH_SHADER_EXTENSION_NAME = "VK_EXT_mesh_shader";
pub const AMD_VULKAN_MEMORY_ALLOCATOR_H = "";
pub const VMA_VULKAN_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 1003000, .decimal);
pub const VMA_DEDICATED_ALLOCATION = @as(c_int, 1);
pub const VMA_BIND_MEMORY2 = @as(c_int, 1);
pub const VMA_MEMORY_BUDGET = @as(c_int, 1);
pub const VMA_BUFFER_DEVICE_ADDRESS = @as(c_int, 1);
pub const VMA_MEMORY_PRIORITY = @as(c_int, 1);
pub const VMA_KHR_MAINTENANCE4 = @as(c_int, 1);
pub const VMA_KHR_MAINTENANCE5 = @as(c_int, 1);
pub const VMA_EXTERNAL_MEMORY = @as(c_int, 1);
pub const VMA_CALL_PRE = "";
pub const VMA_CALL_POST = "";
pub const VMA_EXTENDS_VK_STRUCT = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/vk_mem_alloc.h:258:13
pub const VMA_LEN_IF_NOT_NULL = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/vk_mem_alloc.h:273:13
pub const VMA_NULLABLE = @compileError("unable to translate macro: undefined identifier `_Nullable`");
// /usr/include/vk_mem_alloc.h:280:17
pub const VMA_NOT_NULL = @compileError("unable to translate macro: undefined identifier `_Nonnull`");
// /usr/include/vk_mem_alloc.h:290:17
pub const VMA_NOT_NULL_NON_DISPATCHABLE = VMA_NOT_NULL;
pub const VMA_NULLABLE_NON_DISPATCHABLE = VMA_NULLABLE;
pub const VMA_STATS_STRING_ENABLED = @as(c_int, 1);
pub const STBI_INCLUDE_STB_IMAGE_H = "";
pub const _LIBCPP_STDIO_H = "";
pub const _STDIO_H = @as(c_int, 1);
pub const _____fpos_t_defined = @as(c_int, 1);
pub const _____fpos64_t_defined = @as(c_int, 1);
pub const __struct_FILE_defined = @as(c_int, 1);
pub const __getc_unlocked_body = @compileError("TODO postfix inc/dec expr");
// /usr/include/bits/types/struct_FILE.h:102:9
pub const __putc_unlocked_body = @compileError("TODO postfix inc/dec expr");
// /usr/include/bits/types/struct_FILE.h:106:9
pub const _IO_EOF_SEEN = @as(c_int, 0x0010);
pub inline fn __feof_unlocked_body(_fp: anytype) @TypeOf((_fp.*._flags & _IO_EOF_SEEN) != @as(c_int, 0)) {
    _ = &_fp;
    return (_fp.*._flags & _IO_EOF_SEEN) != @as(c_int, 0);
}
pub const _IO_ERR_SEEN = @as(c_int, 0x0020);
pub inline fn __ferror_unlocked_body(_fp: anytype) @TypeOf((_fp.*._flags & _IO_ERR_SEEN) != @as(c_int, 0)) {
    _ = &_fp;
    return (_fp.*._flags & _IO_ERR_SEEN) != @as(c_int, 0);
}
pub const _IO_USER_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8000, .hex);
pub const __cookie_io_functions_t_defined = @as(c_int, 1);
pub const __off_t_defined = "";
pub const __ssize_t_defined = "";
pub const _IOFBF = @as(c_int, 0);
pub const _IOLBF = @as(c_int, 1);
pub const _IONBF = @as(c_int, 2);
pub const BUFSIZ = @as(c_int, 8192);
pub const EOF = -@as(c_int, 1);
pub const SEEK_SET = @as(c_int, 0);
pub const SEEK_CUR = @as(c_int, 1);
pub const SEEK_END = @as(c_int, 2);
pub const P_tmpdir = "/tmp";
pub const L_tmpnam = @as(c_int, 20);
pub const TMP_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 238328, .decimal);
pub const _BITS_STDIO_LIM_H = @as(c_int, 1);
pub const FILENAME_MAX = @as(c_int, 4096);
pub const L_ctermid = @as(c_int, 9);
pub const FOPEN_MAX = @as(c_int, 16);
pub const STBI_VERSION = @as(c_int, 1);
pub const _LIBCPP_STDLIB_H = "";
pub const _STDLIB_H = @as(c_int, 1);
pub const WNOHANG = @as(c_int, 1);
pub const WUNTRACED = @as(c_int, 2);
pub const WSTOPPED = @as(c_int, 2);
pub const WEXITED = @as(c_int, 4);
pub const WCONTINUED = @as(c_int, 8);
pub const WNOWAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex);
pub const __WNOTHREAD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
pub const __WALL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex);
pub const __WCLONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex);
pub inline fn __WEXITSTATUS(status: anytype) @TypeOf((status & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00, .hex)) >> @as(c_int, 8)) {
    _ = &status;
    return (status & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00, .hex)) >> @as(c_int, 8);
}
pub inline fn __WTERMSIG(status: anytype) @TypeOf(status & @as(c_int, 0x7f)) {
    _ = &status;
    return status & @as(c_int, 0x7f);
}
pub inline fn __WSTOPSIG(status: anytype) @TypeOf(__WEXITSTATUS(status)) {
    _ = &status;
    return __WEXITSTATUS(status);
}
pub inline fn __WIFEXITED(status: anytype) @TypeOf(__WTERMSIG(status) == @as(c_int, 0)) {
    _ = &status;
    return __WTERMSIG(status) == @as(c_int, 0);
}
pub inline fn __WIFSIGNALED(status: anytype) @TypeOf((@import("std").zig.c_translation.cast(i8, (status & @as(c_int, 0x7f)) + @as(c_int, 1)) >> @as(c_int, 1)) > @as(c_int, 0)) {
    _ = &status;
    return (@import("std").zig.c_translation.cast(i8, (status & @as(c_int, 0x7f)) + @as(c_int, 1)) >> @as(c_int, 1)) > @as(c_int, 0);
}
pub inline fn __WIFSTOPPED(status: anytype) @TypeOf((status & @as(c_int, 0xff)) == @as(c_int, 0x7f)) {
    _ = &status;
    return (status & @as(c_int, 0xff)) == @as(c_int, 0x7f);
}
pub inline fn __WIFCONTINUED(status: anytype) @TypeOf(status == __W_CONTINUED) {
    _ = &status;
    return status == __W_CONTINUED;
}
pub inline fn __WCOREDUMP(status: anytype) @TypeOf(status & __WCOREFLAG) {
    _ = &status;
    return status & __WCOREFLAG;
}
pub inline fn __W_EXITCODE(ret: anytype, sig: anytype) @TypeOf((ret << @as(c_int, 8)) | sig) {
    _ = &ret;
    _ = &sig;
    return (ret << @as(c_int, 8)) | sig;
}
pub inline fn __W_STOPCODE(sig: anytype) @TypeOf((sig << @as(c_int, 8)) | @as(c_int, 0x7f)) {
    _ = &sig;
    return (sig << @as(c_int, 8)) | @as(c_int, 0x7f);
}
pub const __W_CONTINUED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff, .hex);
pub const __WCOREFLAG = @as(c_int, 0x80);
pub inline fn WEXITSTATUS(status: anytype) @TypeOf(__WEXITSTATUS(status)) {
    _ = &status;
    return __WEXITSTATUS(status);
}
pub inline fn WTERMSIG(status: anytype) @TypeOf(__WTERMSIG(status)) {
    _ = &status;
    return __WTERMSIG(status);
}
pub inline fn WSTOPSIG(status: anytype) @TypeOf(__WSTOPSIG(status)) {
    _ = &status;
    return __WSTOPSIG(status);
}
pub inline fn WIFEXITED(status: anytype) @TypeOf(__WIFEXITED(status)) {
    _ = &status;
    return __WIFEXITED(status);
}
pub inline fn WIFSIGNALED(status: anytype) @TypeOf(__WIFSIGNALED(status)) {
    _ = &status;
    return __WIFSIGNALED(status);
}
pub inline fn WIFSTOPPED(status: anytype) @TypeOf(__WIFSTOPPED(status)) {
    _ = &status;
    return __WIFSTOPPED(status);
}
pub inline fn WIFCONTINUED(status: anytype) @TypeOf(__WIFCONTINUED(status)) {
    _ = &status;
    return __WIFCONTINUED(status);
}
pub const __ldiv_t_defined = @as(c_int, 1);
pub const __lldiv_t_defined = @as(c_int, 1);
pub const RAND_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const EXIT_FAILURE = @as(c_int, 1);
pub const EXIT_SUCCESS = @as(c_int, 0);
pub const MB_CUR_MAX = __ctype_get_mb_cur_max();
pub const _SYS_TYPES_H = @as(c_int, 1);
pub const __u_char_defined = "";
pub const __ino_t_defined = "";
pub const __dev_t_defined = "";
pub const __gid_t_defined = "";
pub const __mode_t_defined = "";
pub const __nlink_t_defined = "";
pub const __uid_t_defined = "";
pub const __pid_t_defined = "";
pub const __id_t_defined = "";
pub const __daddr_t_defined = "";
pub const __key_t_defined = "";
pub const __clock_t_defined = @as(c_int, 1);
pub const __clockid_t_defined = @as(c_int, 1);
pub const __time_t_defined = @as(c_int, 1);
pub const __timer_t_defined = @as(c_int, 1);
pub const __BIT_TYPES_DEFINED__ = @as(c_int, 1);
pub const _SYS_SELECT_H = @as(c_int, 1);
pub const __FD_ZERO = @compileError("unable to translate macro: undefined identifier `__i`");
// /usr/include/bits/select.h:25:9
pub const __FD_SET = @compileError("unable to translate C expr: expected ')' instead got '|='");
// /usr/include/bits/select.h:32:9
pub const __FD_CLR = @compileError("unable to translate C expr: expected ')' instead got '&='");
// /usr/include/bits/select.h:34:9
pub inline fn __FD_ISSET(d: anytype, s: anytype) @TypeOf((__FDS_BITS(s)[@as(usize, @intCast(__FD_ELT(d)))] & __FD_MASK(d)) != @as(c_int, 0)) {
    _ = &d;
    _ = &s;
    return (__FDS_BITS(s)[@as(usize, @intCast(__FD_ELT(d)))] & __FD_MASK(d)) != @as(c_int, 0);
}
pub const __sigset_t_defined = @as(c_int, 1);
pub const ____sigset_t_defined = "";
pub const _SIGSET_NWORDS = @import("std").zig.c_translation.MacroArithmetic.div(@as(c_int, 1024), @as(c_int, 8) * @import("std").zig.c_translation.sizeof(c_ulong));
pub const __timeval_defined = @as(c_int, 1);
pub const _STRUCT_TIMESPEC = @as(c_int, 1);
pub const __suseconds_t_defined = "";
pub const __NFDBITS = @as(c_int, 8) * @import("std").zig.c_translation.cast(c_int, @import("std").zig.c_translation.sizeof(__fd_mask));
pub inline fn __FD_ELT(d: anytype) @TypeOf(@import("std").zig.c_translation.MacroArithmetic.div(d, __NFDBITS)) {
    _ = &d;
    return @import("std").zig.c_translation.MacroArithmetic.div(d, __NFDBITS);
}
pub inline fn __FD_MASK(d: anytype) __fd_mask {
    _ = &d;
    return @import("std").zig.c_translation.cast(__fd_mask, @as(c_ulong, 1) << @import("std").zig.c_translation.MacroArithmetic.rem(d, __NFDBITS));
}
pub inline fn __FDS_BITS(set: anytype) @TypeOf(set.*.__fds_bits) {
    _ = &set;
    return set.*.__fds_bits;
}
pub const FD_SETSIZE = __FD_SETSIZE;
pub const NFDBITS = __NFDBITS;
pub inline fn FD_SET(fd: anytype, fdsetp: anytype) @TypeOf(__FD_SET(fd, fdsetp)) {
    _ = &fd;
    _ = &fdsetp;
    return __FD_SET(fd, fdsetp);
}
pub inline fn FD_CLR(fd: anytype, fdsetp: anytype) @TypeOf(__FD_CLR(fd, fdsetp)) {
    _ = &fd;
    _ = &fdsetp;
    return __FD_CLR(fd, fdsetp);
}
pub inline fn FD_ISSET(fd: anytype, fdsetp: anytype) @TypeOf(__FD_ISSET(fd, fdsetp)) {
    _ = &fd;
    _ = &fdsetp;
    return __FD_ISSET(fd, fdsetp);
}
pub inline fn FD_ZERO(fdsetp: anytype) @TypeOf(__FD_ZERO(fdsetp)) {
    _ = &fdsetp;
    return __FD_ZERO(fdsetp);
}
pub const __blksize_t_defined = "";
pub const __blkcnt_t_defined = "";
pub const __fsblkcnt_t_defined = "";
pub const __fsfilcnt_t_defined = "";
pub const _BITS_PTHREADTYPES_COMMON_H = @as(c_int, 1);
pub const _THREAD_SHARED_TYPES_H = @as(c_int, 1);
pub const _BITS_PTHREADTYPES_ARCH_H = @as(c_int, 1);
pub const __SIZEOF_PTHREAD_MUTEX_T = @as(c_int, 40);
pub const __SIZEOF_PTHREAD_ATTR_T = @as(c_int, 56);
pub const __SIZEOF_PTHREAD_RWLOCK_T = @as(c_int, 56);
pub const __SIZEOF_PTHREAD_BARRIER_T = @as(c_int, 32);
pub const __SIZEOF_PTHREAD_MUTEXATTR_T = @as(c_int, 4);
pub const __SIZEOF_PTHREAD_COND_T = @as(c_int, 48);
pub const __SIZEOF_PTHREAD_CONDATTR_T = @as(c_int, 4);
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T = @as(c_int, 8);
pub const __SIZEOF_PTHREAD_BARRIERATTR_T = @as(c_int, 4);
pub const __LOCK_ALIGNMENT = "";
pub const __ONCE_ALIGNMENT = "";
pub const _BITS_ATOMIC_WIDE_COUNTER_H = "";
pub const _THREAD_MUTEX_INTERNAL_H = @as(c_int, 1);
pub const __PTHREAD_MUTEX_HAVE_PREV = @as(c_int, 1);
pub const __PTHREAD_MUTEX_INITIALIZER = @compileError("unable to translate C expr: unexpected token '{'");
// /usr/include/bits/struct_mutex.h:56:10
pub const _RWLOCK_INTERNAL_H = "";
pub const __PTHREAD_RWLOCK_ELISION_EXTRA = @compileError("unable to translate C expr: unexpected token '{'");
// /usr/include/bits/struct_rwlock.h:40:11
pub inline fn __PTHREAD_RWLOCK_INITIALIZER(__flags: anytype) @TypeOf(__flags) {
    _ = &__flags;
    return blk: {
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = &__PTHREAD_RWLOCK_ELISION_EXTRA;
        _ = @as(c_int, 0);
        break :blk __flags;
    };
}
pub const __ONCE_FLAG_INIT = @compileError("unable to translate C expr: unexpected token '{'");
// /usr/include/bits/thread-shared-types.h:113:9
pub const __have_pthread_attr_t = @as(c_int, 1);
pub const _ALLOCA_H = @as(c_int, 1);
pub const __COMPAR_FN_T = "";
pub const STBIDEF = @compileError("unable to translate C expr: unexpected token 'extern'");
// /usr/include/stb/stb_image.h:397:9
pub const lua_h = "";
pub const luaconf_h = "";
pub const __CLANG_LIMITS_H = "";
pub const _GCC_LIMITS_H_ = "";
pub const _LIBC_LIMITS_H_ = @as(c_int, 1);
pub const MB_LEN_MAX = @as(c_int, 16);
pub const LLONG_MIN = -LLONG_MAX - @as(c_int, 1);
pub const LLONG_MAX = __LONG_LONG_MAX__;
pub const ULLONG_MAX = (LLONG_MAX * @as(c_ulonglong, 2)) + @as(c_int, 1);
pub const _BITS_POSIX1_LIM_H = @as(c_int, 1);
pub const _POSIX_AIO_LISTIO_MAX = @as(c_int, 2);
pub const _POSIX_AIO_MAX = @as(c_int, 1);
pub const _POSIX_ARG_MAX = @as(c_int, 4096);
pub const _POSIX_CHILD_MAX = @as(c_int, 25);
pub const _POSIX_DELAYTIMER_MAX = @as(c_int, 32);
pub const _POSIX_HOST_NAME_MAX = @as(c_int, 255);
pub const _POSIX_LINK_MAX = @as(c_int, 8);
pub const _POSIX_LOGIN_NAME_MAX = @as(c_int, 9);
pub const _POSIX_MAX_CANON = @as(c_int, 255);
pub const _POSIX_MAX_INPUT = @as(c_int, 255);
pub const _POSIX_MQ_OPEN_MAX = @as(c_int, 8);
pub const _POSIX_MQ_PRIO_MAX = @as(c_int, 32);
pub const _POSIX_NAME_MAX = @as(c_int, 14);
pub const _POSIX_NGROUPS_MAX = @as(c_int, 8);
pub const _POSIX_OPEN_MAX = @as(c_int, 20);
pub const _POSIX_PATH_MAX = @as(c_int, 256);
pub const _POSIX_PIPE_BUF = @as(c_int, 512);
pub const _POSIX_RE_DUP_MAX = @as(c_int, 255);
pub const _POSIX_RTSIG_MAX = @as(c_int, 8);
pub const _POSIX_SEM_NSEMS_MAX = @as(c_int, 256);
pub const _POSIX_SEM_VALUE_MAX = @as(c_int, 32767);
pub const _POSIX_SIGQUEUE_MAX = @as(c_int, 32);
pub const _POSIX_SSIZE_MAX = @as(c_int, 32767);
pub const _POSIX_STREAM_MAX = @as(c_int, 8);
pub const _POSIX_SYMLINK_MAX = @as(c_int, 255);
pub const _POSIX_SYMLOOP_MAX = @as(c_int, 8);
pub const _POSIX_TIMER_MAX = @as(c_int, 32);
pub const _POSIX_TTY_NAME_MAX = @as(c_int, 9);
pub const _POSIX_TZNAME_MAX = @as(c_int, 6);
pub const _POSIX_CLOCKRES_MIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 20000000, .decimal);
pub const __undef_NR_OPEN = "";
pub const __undef_LINK_MAX = "";
pub const __undef_OPEN_MAX = "";
pub const __undef_ARG_MAX = "";
pub const _LINUX_LIMITS_H = "";
pub const NR_OPEN = @as(c_int, 1024);
pub const NGROUPS_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65536, .decimal);
pub const ARG_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 131072, .decimal);
pub const LINK_MAX = @as(c_int, 127);
pub const MAX_CANON = @as(c_int, 255);
pub const MAX_INPUT = @as(c_int, 255);
pub const NAME_MAX = @as(c_int, 255);
pub const PATH_MAX = @as(c_int, 4096);
pub const PIPE_BUF = @as(c_int, 4096);
pub const XATTR_NAME_MAX = @as(c_int, 255);
pub const XATTR_SIZE_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65536, .decimal);
pub const XATTR_LIST_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65536, .decimal);
pub const RTSIG_MAX = @as(c_int, 32);
pub const _POSIX_THREAD_KEYS_MAX = @as(c_int, 128);
pub const PTHREAD_KEYS_MAX = @as(c_int, 1024);
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS = @as(c_int, 4);
pub const PTHREAD_DESTRUCTOR_ITERATIONS = _POSIX_THREAD_DESTRUCTOR_ITERATIONS;
pub const _POSIX_THREAD_THREADS_MAX = @as(c_int, 64);
pub const AIO_PRIO_DELTA_MAX = @as(c_int, 20);
pub const PTHREAD_STACK_MIN = @as(c_int, 16384);
pub const DELAYTIMER_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const TTY_NAME_MAX = @as(c_int, 32);
pub const LOGIN_NAME_MAX = @as(c_int, 256);
pub const HOST_NAME_MAX = @as(c_int, 64);
pub const MQ_PRIO_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 32768, .decimal);
pub const SEM_VALUE_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const SSIZE_MAX = LONG_MAX;
pub const _BITS_POSIX2_LIM_H = @as(c_int, 1);
pub const _POSIX2_BC_BASE_MAX = @as(c_int, 99);
pub const _POSIX2_BC_DIM_MAX = @as(c_int, 2048);
pub const _POSIX2_BC_SCALE_MAX = @as(c_int, 99);
pub const _POSIX2_BC_STRING_MAX = @as(c_int, 1000);
pub const _POSIX2_COLL_WEIGHTS_MAX = @as(c_int, 2);
pub const _POSIX2_EXPR_NEST_MAX = @as(c_int, 32);
pub const _POSIX2_LINE_MAX = @as(c_int, 2048);
pub const _POSIX2_RE_DUP_MAX = @as(c_int, 255);
pub const _POSIX2_CHARCLASS_NAME_MAX = @as(c_int, 14);
pub const BC_BASE_MAX = _POSIX2_BC_BASE_MAX;
pub const BC_DIM_MAX = _POSIX2_BC_DIM_MAX;
pub const BC_SCALE_MAX = _POSIX2_BC_SCALE_MAX;
pub const BC_STRING_MAX = _POSIX2_BC_STRING_MAX;
pub const COLL_WEIGHTS_MAX = @as(c_int, 255);
pub const EXPR_NEST_MAX = _POSIX2_EXPR_NEST_MAX;
pub const LINE_MAX = _POSIX2_LINE_MAX;
pub const CHARCLASS_NAME_MAX = @as(c_int, 2048);
pub const RE_DUP_MAX = @as(c_int, 0x7fff);
pub const SCHAR_MAX = __SCHAR_MAX__;
pub const SHRT_MAX = __SHRT_MAX__;
pub const INT_MAX = __INT_MAX__;
pub const LONG_MAX = __LONG_MAX__;
pub const SCHAR_MIN = -__SCHAR_MAX__ - @as(c_int, 1);
pub const SHRT_MIN = -__SHRT_MAX__ - @as(c_int, 1);
pub const INT_MIN = -__INT_MAX__ - @as(c_int, 1);
pub const LONG_MIN = -__LONG_MAX__ - @as(c_long, 1);
pub const UCHAR_MAX = (__SCHAR_MAX__ * @as(c_int, 2)) + @as(c_int, 1);
pub const USHRT_MAX = (__SHRT_MAX__ * @as(c_int, 2)) + @as(c_int, 1);
pub const UINT_MAX = (__INT_MAX__ * @as(c_uint, 2)) + @as(c_uint, 1);
pub const ULONG_MAX = (__LONG_MAX__ * @as(c_ulong, 2)) + @as(c_ulong, 1);
pub const CHAR_BIT = __CHAR_BIT__;
pub const CHAR_MIN = SCHAR_MIN;
pub const CHAR_MAX = __SCHAR_MAX__;
pub const LUAI_IS32INT = (UINT_MAX >> @as(c_int, 30)) >= @as(c_int, 3);
pub const LUA_INT_INT = @as(c_int, 1);
pub const LUA_INT_LONG = @as(c_int, 2);
pub const LUA_INT_LONGLONG = @as(c_int, 3);
pub const LUA_FLOAT_FLOAT = @as(c_int, 1);
pub const LUA_FLOAT_DOUBLE = @as(c_int, 2);
pub const LUA_FLOAT_LONGDOUBLE = @as(c_int, 3);
pub const LUA_INT_DEFAULT = LUA_INT_LONGLONG;
pub const LUA_FLOAT_DEFAULT = LUA_FLOAT_DOUBLE;
pub const LUA_32BITS = @as(c_int, 0);
pub const LUA_C89_NUMBERS = @as(c_int, 0);
pub const LUA_INT_TYPE = LUA_INT_DEFAULT;
pub const LUA_FLOAT_TYPE = LUA_FLOAT_DEFAULT;
pub const LUA_PATH_SEP = ";";
pub const LUA_PATH_MARK = "?";
pub const LUA_EXEC_DIR = "!";
pub const LUA_VDIR = LUA_VERSION_MAJOR ++ "." ++ LUA_VERSION_MINOR;
pub const LUA_ROOT = "/usr/local/";
pub const LUA_ROOT2 = "/usr/";
pub const LUA_LDIR = LUA_ROOT ++ "share/lua/" ++ LUA_VDIR ++ "/";
pub const LUA_LDIR2 = LUA_ROOT2 ++ "share/lua/" ++ LUA_VDIR ++ "/";
pub const LUA_CDIR = LUA_ROOT ++ "lib/lua/" ++ LUA_VDIR ++ "/";
pub const LUA_CDIR2 = LUA_ROOT2 ++ "lib/lua/" ++ LUA_VDIR ++ "/";
pub const LUA_PATH_DEFAULT = LUA_LDIR ++ "?.lua;" ++ LUA_LDIR ++ "?/init.lua;" ++ LUA_LDIR2 ++ "?.lua;" ++ LUA_LDIR2 ++ "?/init.lua;" ++ LUA_CDIR ++ "?.lua;" ++ LUA_CDIR ++ "?/init.lua;" ++ LUA_CDIR2 ++ "?.lua;" ++ LUA_CDIR2 ++ "?/init.lua;" ++ "./?.lua;" ++ "./?/init.lua";
pub const LUA_CPATH_DEFAULT = LUA_CDIR ++ "?.so;" ++ LUA_CDIR2 ++ "?.so;" ++ LUA_CDIR ++ "loadall.so;" ++ LUA_CDIR2 ++ "loadall.so;" ++ "./?.so";
pub const LUA_DIRSEP = "/";
pub const LUA_IGMARK = "-";
pub const LUA_API = @compileError("unable to translate C expr: unexpected token 'extern'");
// /usr/include/luaconf.h:306:9
pub const LUALIB_API = LUA_API;
pub const LUAMOD_API = LUA_API;
pub const LUAI_FUNC = @compileError("unable to translate macro: undefined identifier `visibility`");
// /usr/include/luaconf.h:334:9
pub inline fn LUAI_DDEC(dec: anytype) @TypeOf(LUAI_FUNC ++ dec) {
    _ = &dec;
    return LUAI_FUNC ++ dec;
}
pub const LUAI_DDEF = "";
pub const l_floor = @compileError("unable to translate macro: undefined identifier `floor`");
// /usr/include/luaconf.h:427:9
pub inline fn lua_number2str(s: anytype, sz: anytype, n: anytype) @TypeOf(l_sprintf(s, sz, LUA_NUMBER_FMT, LUAI_UACNUMBER(n))) {
    _ = &s;
    _ = &sz;
    _ = &n;
    return l_sprintf(s, sz, LUA_NUMBER_FMT, LUAI_UACNUMBER(n));
}
pub const lua_numbertointeger = @compileError("unable to translate C expr: expected ')' instead got '='");
// /usr/include/luaconf.h:441:9
pub const LUA_NUMBER = f64;
pub const l_floatatt = @compileError("unable to translate macro: undefined identifier `DBL_`");
// /usr/include/luaconf.h:484:9
pub const LUAI_UACNUMBER = f64;
pub const LUA_NUMBER_FRMLEN = "";
pub const LUA_NUMBER_FMT = "%.14g";
pub inline fn l_mathop(op: anytype) @TypeOf(op) {
    _ = &op;
    return op;
}
pub inline fn lua_str2number(s: anytype, p: anytype) @TypeOf(strtod(s, p)) {
    _ = &s;
    _ = &p;
    return strtod(s, p);
}
pub const LUA_INTEGER_FMT = "%" ++ LUA_INTEGER_FRMLEN ++ "d";
pub const LUAI_UACINT = LUA_INTEGER;
pub inline fn lua_integer2str(s: anytype, sz: anytype, n: anytype) @TypeOf(l_sprintf(s, sz, LUA_INTEGER_FMT, LUAI_UACINT(n))) {
    _ = &s;
    _ = &sz;
    _ = &n;
    return l_sprintf(s, sz, LUA_INTEGER_FMT, LUAI_UACINT(n));
}
pub const LUA_UNSIGNED = c_uint ++ LUAI_UACINT;
pub const LUA_INTEGER = c_longlong;
pub const LUA_INTEGER_FRMLEN = "ll";
pub const LUA_MAXINTEGER = LLONG_MAX;
pub const LUA_MININTEGER = LLONG_MIN;
pub const LUA_MAXUNSIGNED = ULLONG_MAX;
pub inline fn l_sprintf(s: anytype, sz: anytype, f: anytype, i: anytype) @TypeOf(snprintf(s, sz, f, i)) {
    _ = &s;
    _ = &sz;
    _ = &f;
    _ = &i;
    return snprintf(s, sz, f, i);
}
pub inline fn lua_strx2number(s: anytype, p: anytype) @TypeOf(lua_str2number(s, p)) {
    _ = &s;
    _ = &p;
    return lua_str2number(s, p);
}
pub inline fn lua_pointer2str(buff: anytype, sz: anytype, p: anytype) @TypeOf(l_sprintf(buff, sz, "%p", p)) {
    _ = &buff;
    _ = &sz;
    _ = &p;
    return l_sprintf(buff, sz, "%p", p);
}
pub inline fn lua_number2strx(L: anytype, b: anytype, sz: anytype, f: anytype, n: anytype) @TypeOf(l_sprintf(b, sz, f, LUAI_UACNUMBER(n))) {
    _ = &L;
    _ = &b;
    _ = &sz;
    _ = &f;
    _ = &n;
    return blk_1: {
        _ = @import("std").zig.c_translation.cast(anyopaque, L);
        break :blk_1 l_sprintf(b, sz, f, LUAI_UACNUMBER(n));
    };
}
pub const LUA_KCONTEXT = ptrdiff_t;
pub const lua_getlocaledecpoint = @compileError("unable to translate macro: undefined identifier `localeconv`");
// /usr/include/luaconf.h:680:9
pub inline fn luai_likely(x: anytype) @TypeOf(__builtin_expect(x != @as(c_int, 0), @as(c_int, 1))) {
    _ = &x;
    return __builtin_expect(x != @as(c_int, 0), @as(c_int, 1));
}
pub inline fn luai_unlikely(x: anytype) @TypeOf(__builtin_expect(x != @as(c_int, 0), @as(c_int, 0))) {
    _ = &x;
    return __builtin_expect(x != @as(c_int, 0), @as(c_int, 0));
}
pub const LUAI_MAXSTACK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 1000000, .decimal);
pub const LUA_EXTRASPACE = @import("std").zig.c_translation.sizeof(?*anyopaque);
pub const LUA_IDSIZE = @as(c_int, 60);
pub const LUAL_BUFFERSIZE = @import("std").zig.c_translation.cast(c_int, (@as(c_int, 16) * @import("std").zig.c_translation.sizeof(?*anyopaque)) * @import("std").zig.c_translation.sizeof(lua_Number));
pub const LUAI_MAXALIGN = @compileError("unable to translate macro: undefined identifier `n`");
// /usr/include/luaconf.h:791:9
pub const LUA_VERSION_MAJOR = "5";
pub const LUA_VERSION_MINOR = "4";
pub const LUA_VERSION_RELEASE = "7";
pub const LUA_VERSION_NUM = @as(c_int, 504);
pub const LUA_VERSION_RELEASE_NUM = (LUA_VERSION_NUM * @as(c_int, 100)) + @as(c_int, 7);
pub const LUA_VERSION = "Lua " ++ LUA_VERSION_MAJOR ++ "." ++ LUA_VERSION_MINOR;
pub const LUA_RELEASE = LUA_VERSION ++ "." ++ LUA_VERSION_RELEASE;
pub const LUA_COPYRIGHT = LUA_RELEASE ++ "  Copyright (C) 1994-2024 Lua.org, PUC-Rio";
pub const LUA_AUTHORS = "R. Ierusalimschy, L. H. de Figueiredo, W. Celes";
pub const LUA_SIGNATURE = "\x1bLua";
pub const LUA_MULTRET = -@as(c_int, 1);
pub const LUA_REGISTRYINDEX = -LUAI_MAXSTACK - @as(c_int, 1000);
pub inline fn lua_upvalueindex(i: anytype) @TypeOf(LUA_REGISTRYINDEX - i) {
    _ = &i;
    return LUA_REGISTRYINDEX - i;
}
pub const LUA_OK = @as(c_int, 0);
pub const LUA_YIELD = @as(c_int, 1);
pub const LUA_ERRRUN = @as(c_int, 2);
pub const LUA_ERRSYNTAX = @as(c_int, 3);
pub const LUA_ERRMEM = @as(c_int, 4);
pub const LUA_ERRERR = @as(c_int, 5);
pub const LUA_TNONE = -@as(c_int, 1);
pub const LUA_TNIL = @as(c_int, 0);
pub const LUA_TBOOLEAN = @as(c_int, 1);
pub const LUA_TLIGHTUSERDATA = @as(c_int, 2);
pub const LUA_TNUMBER = @as(c_int, 3);
pub const LUA_TSTRING = @as(c_int, 4);
pub const LUA_TTABLE = @as(c_int, 5);
pub const LUA_TFUNCTION = @as(c_int, 6);
pub const LUA_TUSERDATA = @as(c_int, 7);
pub const LUA_TTHREAD = @as(c_int, 8);
pub const LUA_NUMTYPES = @as(c_int, 9);
pub const LUA_MINSTACK = @as(c_int, 20);
pub const LUA_RIDX_MAINTHREAD = @as(c_int, 1);
pub const LUA_RIDX_GLOBALS = @as(c_int, 2);
pub const LUA_RIDX_LAST = LUA_RIDX_GLOBALS;
pub const LUA_OPADD = @as(c_int, 0);
pub const LUA_OPSUB = @as(c_int, 1);
pub const LUA_OPMUL = @as(c_int, 2);
pub const LUA_OPMOD = @as(c_int, 3);
pub const LUA_OPPOW = @as(c_int, 4);
pub const LUA_OPDIV = @as(c_int, 5);
pub const LUA_OPIDIV = @as(c_int, 6);
pub const LUA_OPBAND = @as(c_int, 7);
pub const LUA_OPBOR = @as(c_int, 8);
pub const LUA_OPBXOR = @as(c_int, 9);
pub const LUA_OPSHL = @as(c_int, 10);
pub const LUA_OPSHR = @as(c_int, 11);
pub const LUA_OPUNM = @as(c_int, 12);
pub const LUA_OPBNOT = @as(c_int, 13);
pub const LUA_OPEQ = @as(c_int, 0);
pub const LUA_OPLT = @as(c_int, 1);
pub const LUA_OPLE = @as(c_int, 2);
pub inline fn lua_call(L: anytype, n: anytype, r: anytype) @TypeOf(lua_callk(L, n, r, @as(c_int, 0), NULL)) {
    _ = &L;
    _ = &n;
    _ = &r;
    return lua_callk(L, n, r, @as(c_int, 0), NULL);
}
pub inline fn lua_pcall(L: anytype, n: anytype, r: anytype, f: anytype) @TypeOf(lua_pcallk(L, n, r, f, @as(c_int, 0), NULL)) {
    _ = &L;
    _ = &n;
    _ = &r;
    _ = &f;
    return lua_pcallk(L, n, r, f, @as(c_int, 0), NULL);
}
pub inline fn lua_yield(L: anytype, n: anytype) @TypeOf(lua_yieldk(L, n, @as(c_int, 0), NULL)) {
    _ = &L;
    _ = &n;
    return lua_yieldk(L, n, @as(c_int, 0), NULL);
}
pub const LUA_GCSTOP = @as(c_int, 0);
pub const LUA_GCRESTART = @as(c_int, 1);
pub const LUA_GCCOLLECT = @as(c_int, 2);
pub const LUA_GCCOUNT = @as(c_int, 3);
pub const LUA_GCCOUNTB = @as(c_int, 4);
pub const LUA_GCSTEP = @as(c_int, 5);
pub const LUA_GCSETPAUSE = @as(c_int, 6);
pub const LUA_GCSETSTEPMUL = @as(c_int, 7);
pub const LUA_GCISRUNNING = @as(c_int, 9);
pub const LUA_GCGEN = @as(c_int, 10);
pub const LUA_GCINC = @as(c_int, 11);
pub inline fn lua_getextraspace(L: anytype) ?*anyopaque {
    _ = &L;
    return @import("std").zig.c_translation.cast(?*anyopaque, @import("std").zig.c_translation.cast([*c]u8, L) - LUA_EXTRASPACE);
}
pub inline fn lua_tonumber(L: anytype, i: anytype) @TypeOf(lua_tonumberx(L, i, NULL)) {
    _ = &L;
    _ = &i;
    return lua_tonumberx(L, i, NULL);
}
pub inline fn lua_tointeger(L: anytype, i: anytype) @TypeOf(lua_tointegerx(L, i, NULL)) {
    _ = &L;
    _ = &i;
    return lua_tointegerx(L, i, NULL);
}
pub inline fn lua_pop(L: anytype, n: anytype) @TypeOf(lua_settop(L, -n - @as(c_int, 1))) {
    _ = &L;
    _ = &n;
    return lua_settop(L, -n - @as(c_int, 1));
}
pub inline fn lua_newtable(L: anytype) @TypeOf(lua_createtable(L, @as(c_int, 0), @as(c_int, 0))) {
    _ = &L;
    return lua_createtable(L, @as(c_int, 0), @as(c_int, 0));
}
pub inline fn lua_register(L: anytype, n: anytype, f: anytype) @TypeOf(lua_setglobal(L, n)) {
    _ = &L;
    _ = &n;
    _ = &f;
    return blk_1: {
        _ = lua_pushcfunction(L, f);
        break :blk_1 lua_setglobal(L, n);
    };
}
pub inline fn lua_pushcfunction(L: anytype, f: anytype) @TypeOf(lua_pushcclosure(L, f, @as(c_int, 0))) {
    _ = &L;
    _ = &f;
    return lua_pushcclosure(L, f, @as(c_int, 0));
}
pub inline fn lua_isfunction(L: anytype, n: anytype) @TypeOf(lua_type(L, n) == LUA_TFUNCTION) {
    _ = &L;
    _ = &n;
    return lua_type(L, n) == LUA_TFUNCTION;
}
pub inline fn lua_istable(L: anytype, n: anytype) @TypeOf(lua_type(L, n) == LUA_TTABLE) {
    _ = &L;
    _ = &n;
    return lua_type(L, n) == LUA_TTABLE;
}
pub inline fn lua_islightuserdata(L: anytype, n: anytype) @TypeOf(lua_type(L, n) == LUA_TLIGHTUSERDATA) {
    _ = &L;
    _ = &n;
    return lua_type(L, n) == LUA_TLIGHTUSERDATA;
}
pub inline fn lua_isnil(L: anytype, n: anytype) @TypeOf(lua_type(L, n) == LUA_TNIL) {
    _ = &L;
    _ = &n;
    return lua_type(L, n) == LUA_TNIL;
}
pub inline fn lua_isboolean(L: anytype, n: anytype) @TypeOf(lua_type(L, n) == LUA_TBOOLEAN) {
    _ = &L;
    _ = &n;
    return lua_type(L, n) == LUA_TBOOLEAN;
}
pub inline fn lua_isthread(L: anytype, n: anytype) @TypeOf(lua_type(L, n) == LUA_TTHREAD) {
    _ = &L;
    _ = &n;
    return lua_type(L, n) == LUA_TTHREAD;
}
pub inline fn lua_isnone(L: anytype, n: anytype) @TypeOf(lua_type(L, n) == LUA_TNONE) {
    _ = &L;
    _ = &n;
    return lua_type(L, n) == LUA_TNONE;
}
pub inline fn lua_isnoneornil(L: anytype, n: anytype) @TypeOf(lua_type(L, n) <= @as(c_int, 0)) {
    _ = &L;
    _ = &n;
    return lua_type(L, n) <= @as(c_int, 0);
}
pub inline fn lua_pushliteral(L: anytype, s: anytype) @TypeOf(lua_pushstring(L, "" ++ s)) {
    _ = &L;
    _ = &s;
    return lua_pushstring(L, "" ++ s);
}
pub inline fn lua_pushglobaltable(L: anytype) anyopaque {
    _ = &L;
    return @import("std").zig.c_translation.cast(anyopaque, lua_rawgeti(L, LUA_REGISTRYINDEX, LUA_RIDX_GLOBALS));
}
pub inline fn lua_tostring(L: anytype, i: anytype) @TypeOf(lua_tolstring(L, i, NULL)) {
    _ = &L;
    _ = &i;
    return lua_tolstring(L, i, NULL);
}
pub inline fn lua_insert(L: anytype, idx: anytype) @TypeOf(lua_rotate(L, idx, @as(c_int, 1))) {
    _ = &L;
    _ = &idx;
    return lua_rotate(L, idx, @as(c_int, 1));
}
pub inline fn lua_remove(L: anytype, idx: anytype) @TypeOf(lua_pop(L, @as(c_int, 1))) {
    _ = &L;
    _ = &idx;
    return blk_1: {
        _ = lua_rotate(L, idx, -@as(c_int, 1));
        break :blk_1 lua_pop(L, @as(c_int, 1));
    };
}
pub inline fn lua_replace(L: anytype, idx: anytype) @TypeOf(lua_pop(L, @as(c_int, 1))) {
    _ = &L;
    _ = &idx;
    return blk_1: {
        _ = lua_copy(L, -@as(c_int, 1), idx);
        break :blk_1 lua_pop(L, @as(c_int, 1));
    };
}
pub inline fn lua_newuserdata(L: anytype, s: anytype) @TypeOf(lua_newuserdatauv(L, s, @as(c_int, 1))) {
    _ = &L;
    _ = &s;
    return lua_newuserdatauv(L, s, @as(c_int, 1));
}
pub inline fn lua_getuservalue(L: anytype, idx: anytype) @TypeOf(lua_getiuservalue(L, idx, @as(c_int, 1))) {
    _ = &L;
    _ = &idx;
    return lua_getiuservalue(L, idx, @as(c_int, 1));
}
pub inline fn lua_setuservalue(L: anytype, idx: anytype) @TypeOf(lua_setiuservalue(L, idx, @as(c_int, 1))) {
    _ = &L;
    _ = &idx;
    return lua_setiuservalue(L, idx, @as(c_int, 1));
}
pub const LUA_NUMTAGS = LUA_NUMTYPES;
pub const LUA_HOOKCALL = @as(c_int, 0);
pub const LUA_HOOKRET = @as(c_int, 1);
pub const LUA_HOOKLINE = @as(c_int, 2);
pub const LUA_HOOKCOUNT = @as(c_int, 3);
pub const LUA_HOOKTAILCALL = @as(c_int, 4);
pub const LUA_MASKCALL = @as(c_int, 1) << LUA_HOOKCALL;
pub const LUA_MASKRET = @as(c_int, 1) << LUA_HOOKRET;
pub const LUA_MASKLINE = @as(c_int, 1) << LUA_HOOKLINE;
pub const LUA_MASKCOUNT = @as(c_int, 1) << LUA_HOOKCOUNT;
pub const lualib_h = "";
pub const LUA_VERSUFFIX = "_" ++ LUA_VERSION_MAJOR ++ "_" ++ LUA_VERSION_MINOR;
pub const LUA_COLIBNAME = "coroutine";
pub const LUA_TABLIBNAME = "table";
pub const LUA_IOLIBNAME = "io";
pub const LUA_OSLIBNAME = "os";
pub const LUA_STRLIBNAME = "string";
pub const LUA_UTF8LIBNAME = "utf8";
pub const LUA_MATHLIBNAME = "math";
pub const LUA_DBLIBNAME = "debug";
pub const LUA_LOADLIBNAME = "package";
pub const lauxlib_h = "";
pub const LUA_GNAME = "_G";
pub const LUA_ERRFILE = LUA_ERRERR + @as(c_int, 1);
pub const LUA_LOADED_TABLE = "_LOADED";
pub const LUA_PRELOAD_TABLE = "_PRELOAD";
pub const LUAL_NUMSIZES = (@import("std").zig.c_translation.sizeof(lua_Integer) * @as(c_int, 16)) + @import("std").zig.c_translation.sizeof(lua_Number);
pub inline fn luaL_checkversion(L: anytype) @TypeOf(luaL_checkversion_(L, LUA_VERSION_NUM, LUAL_NUMSIZES)) {
    _ = &L;
    return luaL_checkversion_(L, LUA_VERSION_NUM, LUAL_NUMSIZES);
}
pub const LUA_NOREF = -@as(c_int, 2);
pub const LUA_REFNIL = -@as(c_int, 1);
pub inline fn luaL_loadfile(L: anytype, f: anytype) @TypeOf(luaL_loadfilex(L, f, NULL)) {
    _ = &L;
    _ = &f;
    return luaL_loadfilex(L, f, NULL);
}
pub const luaL_newlibtable = @compileError("unable to translate C expr: unexpected token '('");
// /usr/include/lauxlib.h:127:9
pub inline fn luaL_newlib(L: anytype, l: anytype) @TypeOf(luaL_setfuncs(L, l, @as(c_int, 0))) {
    _ = &L;
    _ = &l;
    return blk_1: {
        _ = luaL_checkversion(L);
        _ = luaL_newlibtable(L, l);
        break :blk_1 luaL_setfuncs(L, l, @as(c_int, 0));
    };
}
pub inline fn luaL_argcheck(L: anytype, cond: anytype, arg: anytype, extramsg: anytype) anyopaque {
    _ = &L;
    _ = &cond;
    _ = &arg;
    _ = &extramsg;
    return @import("std").zig.c_translation.cast(anyopaque, (luai_likely(cond) != 0) or (luaL_argerror(L, arg, extramsg) != 0));
}
pub inline fn luaL_argexpected(L: anytype, cond: anytype, arg: anytype, tname: anytype) anyopaque {
    _ = &L;
    _ = &cond;
    _ = &arg;
    _ = &tname;
    return @import("std").zig.c_translation.cast(anyopaque, (luai_likely(cond) != 0) or (luaL_typeerror(L, arg, tname) != 0));
}
pub inline fn luaL_checkstring(L: anytype, n: anytype) @TypeOf(luaL_checklstring(L, n, NULL)) {
    _ = &L;
    _ = &n;
    return luaL_checklstring(L, n, NULL);
}
pub inline fn luaL_optstring(L: anytype, n: anytype, d: anytype) @TypeOf(luaL_optlstring(L, n, d, NULL)) {
    _ = &L;
    _ = &n;
    _ = &d;
    return luaL_optlstring(L, n, d, NULL);
}
pub inline fn luaL_typename(L: anytype, i: anytype) @TypeOf(lua_typename(L, lua_type(L, i))) {
    _ = &L;
    _ = &i;
    return lua_typename(L, lua_type(L, i));
}
pub inline fn luaL_dofile(L: anytype, @"fn": anytype) @TypeOf((luaL_loadfile(L, @"fn") != 0) or (lua_pcall(L, @as(c_int, 0), LUA_MULTRET, @as(c_int, 0)) != 0)) {
    _ = &L;
    _ = &@"fn";
    return (luaL_loadfile(L, @"fn") != 0) or (lua_pcall(L, @as(c_int, 0), LUA_MULTRET, @as(c_int, 0)) != 0);
}
pub inline fn luaL_dostring(L: anytype, s: anytype) @TypeOf((luaL_loadstring(L, s) != 0) or (lua_pcall(L, @as(c_int, 0), LUA_MULTRET, @as(c_int, 0)) != 0)) {
    _ = &L;
    _ = &s;
    return (luaL_loadstring(L, s) != 0) or (lua_pcall(L, @as(c_int, 0), LUA_MULTRET, @as(c_int, 0)) != 0);
}
pub inline fn luaL_getmetatable(L: anytype, n: anytype) @TypeOf(lua_getfield(L, LUA_REGISTRYINDEX, n)) {
    _ = &L;
    _ = &n;
    return lua_getfield(L, LUA_REGISTRYINDEX, n);
}
pub inline fn luaL_opt(L: anytype, f: anytype, n: anytype, d: anytype) @TypeOf(if (lua_isnoneornil(L, n)) d else f(L, n)) {
    _ = &L;
    _ = &f;
    _ = &n;
    _ = &d;
    return if (lua_isnoneornil(L, n)) d else f(L, n);
}
pub inline fn luaL_loadbuffer(L: anytype, s: anytype, sz: anytype, n: anytype) @TypeOf(luaL_loadbufferx(L, s, sz, n, NULL)) {
    _ = &L;
    _ = &s;
    _ = &sz;
    _ = &n;
    return luaL_loadbufferx(L, s, sz, n, NULL);
}
pub inline fn luaL_intop(op: anytype, v1: anytype, v2: anytype) lua_Integer {
    _ = &op;
    _ = &v1;
    _ = &v2;
    return @import("std").zig.c_translation.cast(lua_Integer, @import("std").zig.c_translation.cast(lua_Unsigned, v1 ++ op(lua_Unsigned)(v2)));
}
pub inline fn luaL_pushfail(L: anytype) @TypeOf(lua_pushnil(L)) {
    _ = &L;
    return lua_pushnil(L);
}
pub inline fn lua_assert(c: anytype) anyopaque {
    _ = &c;
    return @import("std").zig.c_translation.cast(anyopaque, @as(c_int, 0));
}
pub inline fn luaL_bufflen(bf: anytype) @TypeOf(bf.*.n) {
    _ = &bf;
    return bf.*.n;
}
pub inline fn luaL_buffaddr(bf: anytype) @TypeOf(bf.*.b) {
    _ = &bf;
    return bf.*.b;
}
pub const luaL_addchar = @compileError("TODO postfix inc/dec expr");
// /usr/include/lauxlib.h:207:9
pub const luaL_addsize = @compileError("unable to translate C expr: expected ')' instead got '+='");
// /usr/include/lauxlib.h:211:9
pub const luaL_buffsub = @compileError("unable to translate C expr: expected ')' instead got '-='");
// /usr/include/lauxlib.h:213:9
pub inline fn luaL_prepbuffer(B: anytype) @TypeOf(luaL_prepbuffsize(B, LUAL_BUFFERSIZE)) {
    _ = &B;
    return luaL_prepbuffsize(B, LUAL_BUFFERSIZE);
}
pub const LUA_FILEHANDLE = "FILE*";
pub inline fn lua_writestring(s: anytype, l: anytype) @TypeOf(fwrite(s, @import("std").zig.c_translation.sizeof(u8), l, stdout)) {
    _ = &s;
    _ = &l;
    return fwrite(s, @import("std").zig.c_translation.sizeof(u8), l, stdout);
}
pub inline fn lua_writeline() @TypeOf(fflush(stdout)) {
    return blk_1: {
        _ = lua_writestring("\n", @as(c_int, 1));
        break :blk_1 fflush(stdout);
    };
}
pub inline fn lua_writestringerror(s: anytype, p: anytype) @TypeOf(fflush(stderr)) {
    _ = &s;
    _ = &p;
    return blk_1: {
        _ = fprintf(stderr, s, p);
        break :blk_1 fflush(stderr);
    };
}
pub const __locale_struct = struct___locale_struct;
pub const _IO_marker = struct__IO_marker;
pub const _IO_codecvt = struct__IO_codecvt;
pub const _IO_wide_data = struct__IO_wide_data;
pub const _IO_FILE = struct__IO_FILE;
pub const tm = struct_tm;
pub const SDL_iconv_data_t = struct_SDL_iconv_data_t;
pub const _XEvent = union__XEvent;
pub const VkInstance_T = struct_VkInstance_T;
pub const VkSurfaceKHR_T = struct_VkSurfaceKHR_T;
pub const VkBuffer_T = struct_VkBuffer_T;
pub const VkImage_T = struct_VkImage_T;
pub const VkPhysicalDevice_T = struct_VkPhysicalDevice_T;
pub const VkDevice_T = struct_VkDevice_T;
pub const VkQueue_T = struct_VkQueue_T;
pub const VkSemaphore_T = struct_VkSemaphore_T;
pub const VkCommandBuffer_T = struct_VkCommandBuffer_T;
pub const VkFence_T = struct_VkFence_T;
pub const VkDeviceMemory_T = struct_VkDeviceMemory_T;
pub const VkEvent_T = struct_VkEvent_T;
pub const VkQueryPool_T = struct_VkQueryPool_T;
pub const VkBufferView_T = struct_VkBufferView_T;
pub const VkImageView_T = struct_VkImageView_T;
pub const VkShaderModule_T = struct_VkShaderModule_T;
pub const VkPipelineCache_T = struct_VkPipelineCache_T;
pub const VkPipelineLayout_T = struct_VkPipelineLayout_T;
pub const VkPipeline_T = struct_VkPipeline_T;
pub const VkRenderPass_T = struct_VkRenderPass_T;
pub const VkDescriptorSetLayout_T = struct_VkDescriptorSetLayout_T;
pub const VkSampler_T = struct_VkSampler_T;
pub const VkDescriptorSet_T = struct_VkDescriptorSet_T;
pub const VkDescriptorPool_T = struct_VkDescriptorPool_T;
pub const VkFramebuffer_T = struct_VkFramebuffer_T;
pub const VkCommandPool_T = struct_VkCommandPool_T;
pub const VkSamplerYcbcrConversion_T = struct_VkSamplerYcbcrConversion_T;
pub const VkDescriptorUpdateTemplate_T = struct_VkDescriptorUpdateTemplate_T;
pub const VkPrivateDataSlot_T = struct_VkPrivateDataSlot_T;
pub const VkSwapchainKHR_T = struct_VkSwapchainKHR_T;
pub const VkDisplayKHR_T = struct_VkDisplayKHR_T;
pub const VkDisplayModeKHR_T = struct_VkDisplayModeKHR_T;
pub const VkVideoSessionKHR_T = struct_VkVideoSessionKHR_T;
pub const VkVideoSessionParametersKHR_T = struct_VkVideoSessionParametersKHR_T;
pub const VkDeferredOperationKHR_T = struct_VkDeferredOperationKHR_T;
pub const VkDebugReportCallbackEXT_T = struct_VkDebugReportCallbackEXT_T;
pub const VkCuModuleNVX_T = struct_VkCuModuleNVX_T;
pub const VkCuFunctionNVX_T = struct_VkCuFunctionNVX_T;
pub const VkDebugUtilsMessengerEXT_T = struct_VkDebugUtilsMessengerEXT_T;
pub const VkValidationCacheEXT_T = struct_VkValidationCacheEXT_T;
pub const VkAccelerationStructureNV_T = struct_VkAccelerationStructureNV_T;
pub const VkPerformanceConfigurationINTEL_T = struct_VkPerformanceConfigurationINTEL_T;
pub const VkIndirectCommandsLayoutNV_T = struct_VkIndirectCommandsLayoutNV_T;
pub const VkCudaModuleNV_T = struct_VkCudaModuleNV_T;
pub const VkCudaFunctionNV_T = struct_VkCudaFunctionNV_T;
pub const VkAccelerationStructureKHR_T = struct_VkAccelerationStructureKHR_T;
pub const VkMicromapEXT_T = struct_VkMicromapEXT_T;
pub const VkOpticalFlowSessionNV_T = struct_VkOpticalFlowSessionNV_T;
pub const VkShaderEXT_T = struct_VkShaderEXT_T;
pub const VmaAllocator_T = struct_VmaAllocator_T;
pub const VmaPool_T = struct_VmaPool_T;
pub const VmaAllocation_T = struct_VmaAllocation_T;
pub const VmaDefragmentationContext_T = struct_VmaDefragmentationContext_T;
pub const VmaVirtualAllocation_T = struct_VmaVirtualAllocation_T;
pub const VmaVirtualBlock_T = struct_VmaVirtualBlock_T;
pub const _G_fpos_t = struct__G_fpos_t;
pub const _G_fpos64_t = struct__G_fpos64_t;
pub const _IO_cookie_io_functions_t = struct__IO_cookie_io_functions_t;
pub const timeval = struct_timeval;
pub const timespec = struct_timespec;
pub const __pthread_internal_list = struct___pthread_internal_list;
pub const __pthread_internal_slist = struct___pthread_internal_slist;
pub const __pthread_mutex_s = struct___pthread_mutex_s;
pub const __pthread_rwlock_arch_t = struct___pthread_rwlock_arch_t;
pub const __pthread_cond_s = struct___pthread_cond_s;
pub const random_data = struct_random_data;
pub const drand48_data = struct_drand48_data;
